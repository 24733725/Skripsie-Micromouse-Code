
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008434  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008744  08008744  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800874c  0800874c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000070  080087c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080087c4  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152e2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b6  00000000  00000000  00035382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00038f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001993b  00000000  00000000  0003a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018650  00000000  00000000  00053a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04cf  00000000  00000000  0006c09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c56a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  0010c5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085bc 	.word	0x080085bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080085bc 	.word	0x080085bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R


void TOF_init(){
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b093      	sub	sp, #76	; 0x4c
 8000598:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 800059a:	4c2a      	ldr	r4, [pc, #168]	; (8000644 <TOF_init+0xb0>)
 800059c:	4668      	mov	r0, sp
 800059e:	f104 0310 	add.w	r3, r4, #16
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	4619      	mov	r1, r3
 80005a6:	f007 faff 	bl	8007ba8 <memcpy>
 80005aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ae:	f000 f851 	bl	8000654 <writeMM>
	writeMM(hi2c2);
 80005b2:	4c25      	ldr	r4, [pc, #148]	; (8000648 <TOF_init+0xb4>)
 80005b4:	4668      	mov	r0, sp
 80005b6:	f104 0310 	add.w	r3, r4, #16
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	4619      	mov	r1, r3
 80005be:	f007 faf3 	bl	8007ba8 <memcpy>
 80005c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005c6:	f000 f845 	bl	8000654 <writeMM>
	writeMM(hi2c3);
 80005ca:	4c20      	ldr	r4, [pc, #128]	; (800064c <TOF_init+0xb8>)
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	4619      	mov	r1, r3
 80005d6:	f007 fae7 	bl	8007ba8 <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f000 f839 	bl	8000654 <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <TOF_init+0xbc>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f001 fdc9 	bl	8002180 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <TOF_init+0xbc>)
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2310      	movs	r3, #16
 80005fe:	2218      	movs	r2, #24
 8000600:	2152      	movs	r1, #82	; 0x52
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <TOF_init+0xb4>)
 8000604:	f002 fd00 	bl	8003008 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <TOF_init+0xbc>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2310      	movs	r3, #16
 8000618:	2218      	movs	r2, #24
 800061a:	2152      	movs	r1, #82	; 0x52
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <TOF_init+0xb0>)
 800061e:	f002 fcf3 	bl	8003008 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2301      	movs	r3, #1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <TOF_init+0xbc>)
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2310      	movs	r3, #16
 8000632:	2218      	movs	r2, #24
 8000634:	2152      	movs	r1, #82	; 0x52
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <TOF_init+0xb8>)
 8000638:	f002 fce6 	bl	8003008 <HAL_I2C_Mem_Write>
}
 800063c:	bf00      	nop
 800063e:	3704      	adds	r7, #4
 8000640:	46bd      	mov	sp, r7
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	20000148 	.word	0x20000148
 8000648:	2000019c 	.word	0x2000019c
 800064c:	200001f0 	.word	0x200001f0
 8000650:	2000008c 	.word	0x2000008c

08000654 <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000654:	b084      	sub	sp, #16
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af04      	add	r7, sp, #16
 800065c:	f107 0c08 	add.w	ip, r7, #8
 8000660:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000664:	4bcb      	ldr	r3, [pc, #812]	; (8000994 <writeMM+0x340>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	4bc7      	ldr	r3, [pc, #796]	; (8000994 <writeMM+0x340>)
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2310      	movs	r3, #16
 800067a:	f240 2207 	movw	r2, #519	; 0x207
 800067e:	2152      	movs	r1, #82	; 0x52
 8000680:	f107 0008 	add.w	r0, r7, #8
 8000684:	f002 fcc0 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f001 fd79 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x01;
 800068e:	4bc1      	ldr	r3, [pc, #772]	; (8000994 <writeMM+0x340>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4bbd      	ldr	r3, [pc, #756]	; (8000994 <writeMM+0x340>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2310      	movs	r3, #16
 80006a4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80006a8:	2152      	movs	r1, #82	; 0x52
 80006aa:	f107 0008 	add.w	r0, r7, #8
 80006ae:	f002 fcab 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f001 fd64 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80006b8:	4bb6      	ldr	r3, [pc, #728]	; (8000994 <writeMM+0x340>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	4bb2      	ldr	r3, [pc, #712]	; (8000994 <writeMM+0x340>)
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2310      	movs	r3, #16
 80006ce:	2296      	movs	r2, #150	; 0x96
 80006d0:	2152      	movs	r1, #82	; 0x52
 80006d2:	f107 0008 	add.w	r0, r7, #8
 80006d6:	f002 fc97 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f001 fd50 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 80006e0:	4bac      	ldr	r3, [pc, #688]	; (8000994 <writeMM+0x340>)
 80006e2:	22fd      	movs	r2, #253	; 0xfd
 80006e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4ba8      	ldr	r3, [pc, #672]	; (8000994 <writeMM+0x340>)
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2310      	movs	r3, #16
 80006f6:	2297      	movs	r2, #151	; 0x97
 80006f8:	2152      	movs	r1, #82	; 0x52
 80006fa:	f107 0008 	add.w	r0, r7, #8
 80006fe:	f002 fc83 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f001 fd3c 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000708:	4ba2      	ldr	r3, [pc, #648]	; (8000994 <writeMM+0x340>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2301      	movs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	4b9e      	ldr	r3, [pc, #632]	; (8000994 <writeMM+0x340>)
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2310      	movs	r3, #16
 800071e:	22e3      	movs	r2, #227	; 0xe3
 8000720:	2152      	movs	r1, #82	; 0x52
 8000722:	f107 0008 	add.w	r0, r7, #8
 8000726:	f002 fc6f 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f001 fd28 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000730:	4b98      	ldr	r3, [pc, #608]	; (8000994 <writeMM+0x340>)
 8000732:	2204      	movs	r2, #4
 8000734:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	4b94      	ldr	r3, [pc, #592]	; (8000994 <writeMM+0x340>)
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2310      	movs	r3, #16
 8000746:	22e4      	movs	r2, #228	; 0xe4
 8000748:	2152      	movs	r1, #82	; 0x52
 800074a:	f107 0008 	add.w	r0, r7, #8
 800074e:	f002 fc5b 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f001 fd14 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000758:	4b8e      	ldr	r3, [pc, #568]	; (8000994 <writeMM+0x340>)
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	2301      	movs	r3, #1
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <writeMM+0x340>)
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2310      	movs	r3, #16
 800076e:	22e5      	movs	r2, #229	; 0xe5
 8000770:	2152      	movs	r1, #82	; 0x52
 8000772:	f107 0008 	add.w	r0, r7, #8
 8000776:	f002 fc47 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 fd00 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000780:	4b84      	ldr	r3, [pc, #528]	; (8000994 <writeMM+0x340>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	9302      	str	r3, [sp, #8]
 800078c:	2301      	movs	r3, #1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	4b80      	ldr	r3, [pc, #512]	; (8000994 <writeMM+0x340>)
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2310      	movs	r3, #16
 8000796:	22e6      	movs	r2, #230	; 0xe6
 8000798:	2152      	movs	r1, #82	; 0x52
 800079a:	f107 0008 	add.w	r0, r7, #8
 800079e:	f002 fc33 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f001 fcec 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x03;
 80007a8:	4b7a      	ldr	r3, [pc, #488]	; (8000994 <writeMM+0x340>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	2301      	movs	r3, #1
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	4b76      	ldr	r3, [pc, #472]	; (8000994 <writeMM+0x340>)
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2310      	movs	r3, #16
 80007be:	22e7      	movs	r2, #231	; 0xe7
 80007c0:	2152      	movs	r1, #82	; 0x52
 80007c2:	f107 0008 	add.w	r0, r7, #8
 80007c6:	f002 fc1f 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fcd8 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x02;
 80007d0:	4b70      	ldr	r3, [pc, #448]	; (8000994 <writeMM+0x340>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	2301      	movs	r3, #1
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <writeMM+0x340>)
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2310      	movs	r3, #16
 80007e6:	22f5      	movs	r2, #245	; 0xf5
 80007e8:	2152      	movs	r1, #82	; 0x52
 80007ea:	f107 0008 	add.w	r0, r7, #8
 80007ee:	f002 fc0b 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 fcc4 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x05;
 80007f8:	4b66      	ldr	r3, [pc, #408]	; (8000994 <writeMM+0x340>)
 80007fa:	2205      	movs	r2, #5
 80007fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	9302      	str	r3, [sp, #8]
 8000804:	2301      	movs	r3, #1
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	4b62      	ldr	r3, [pc, #392]	; (8000994 <writeMM+0x340>)
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2310      	movs	r3, #16
 800080e:	22d9      	movs	r2, #217	; 0xd9
 8000810:	2152      	movs	r1, #82	; 0x52
 8000812:	f107 0008 	add.w	r0, r7, #8
 8000816:	f002 fbf7 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f001 fcb0 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0xce;
 8000820:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <writeMM+0x340>)
 8000822:	22ce      	movs	r2, #206	; 0xce
 8000824:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2301      	movs	r3, #1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	4b58      	ldr	r3, [pc, #352]	; (8000994 <writeMM+0x340>)
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2310      	movs	r3, #16
 8000836:	22db      	movs	r2, #219	; 0xdb
 8000838:	2152      	movs	r1, #82	; 0x52
 800083a:	f107 0008 	add.w	r0, r7, #8
 800083e:	f002 fbe3 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f001 fc9c 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000848:	4b52      	ldr	r3, [pc, #328]	; (8000994 <writeMM+0x340>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	9302      	str	r3, [sp, #8]
 8000854:	2301      	movs	r3, #1
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	4b4e      	ldr	r3, [pc, #312]	; (8000994 <writeMM+0x340>)
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2310      	movs	r3, #16
 800085e:	22dc      	movs	r2, #220	; 0xdc
 8000860:	2152      	movs	r1, #82	; 0x52
 8000862:	f107 0008 	add.w	r0, r7, #8
 8000866:	f002 fbcf 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f001 fc88 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <writeMM+0x340>)
 8000872:	22f8      	movs	r2, #248	; 0xf8
 8000874:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	4b44      	ldr	r3, [pc, #272]	; (8000994 <writeMM+0x340>)
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2310      	movs	r3, #16
 8000886:	22dd      	movs	r2, #221	; 0xdd
 8000888:	2152      	movs	r1, #82	; 0x52
 800088a:	f107 0008 	add.w	r0, r7, #8
 800088e:	f002 fbbb 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f001 fc74 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <writeMM+0x340>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <writeMM+0x340>)
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2310      	movs	r3, #16
 80008ae:	229f      	movs	r2, #159	; 0x9f
 80008b0:	2152      	movs	r1, #82	; 0x52
 80008b2:	f107 0008 	add.w	r0, r7, #8
 80008b6:	f002 fba7 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f001 fc60 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <writeMM+0x340>)
 80008c2:	223c      	movs	r2, #60	; 0x3c
 80008c4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <writeMM+0x340>)
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2310      	movs	r3, #16
 80008d6:	22a3      	movs	r2, #163	; 0xa3
 80008d8:	2152      	movs	r1, #82	; 0x52
 80008da:	f107 0008 	add.w	r0, r7, #8
 80008de:	f002 fb93 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f001 fc4c 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <writeMM+0x340>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <writeMM+0x340>)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2310      	movs	r3, #16
 80008fe:	22b7      	movs	r2, #183	; 0xb7
 8000900:	2152      	movs	r1, #82	; 0x52
 8000902:	f107 0008 	add.w	r0, r7, #8
 8000906:	f002 fb7f 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f001 fc38 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <writeMM+0x340>)
 8000912:	223c      	movs	r2, #60	; 0x3c
 8000914:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <writeMM+0x340>)
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2310      	movs	r3, #16
 8000926:	22bb      	movs	r2, #187	; 0xbb
 8000928:	2152      	movs	r1, #82	; 0x52
 800092a:	f107 0008 	add.w	r0, r7, #8
 800092e:	f002 fb6b 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f001 fc24 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <writeMM+0x340>)
 800093a:	2209      	movs	r2, #9
 800093c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	2301      	movs	r3, #1
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <writeMM+0x340>)
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2310      	movs	r3, #16
 800094e:	22b2      	movs	r2, #178	; 0xb2
 8000950:	2152      	movs	r1, #82	; 0x52
 8000952:	f107 0008 	add.w	r0, r7, #8
 8000956:	f002 fb57 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f001 fc10 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <writeMM+0x340>)
 8000962:	2209      	movs	r2, #9
 8000964:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <writeMM+0x340>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2310      	movs	r3, #16
 8000976:	22ca      	movs	r2, #202	; 0xca
 8000978:	2152      	movs	r1, #82	; 0x52
 800097a:	f107 0008 	add.w	r0, r7, #8
 800097e:	f002 fb43 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f001 fbfc 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <writeMM+0x340>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	e001      	b.n	8000998 <writeMM+0x344>
 8000994:	2000008c 	.word	0x2000008c
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2301      	movs	r3, #1
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	4b8a      	ldr	r3, [pc, #552]	; (8000bc8 <writeMM+0x574>)
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2310      	movs	r3, #16
 80009a4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80009a8:	2152      	movs	r1, #82	; 0x52
 80009aa:	f107 0008 	add.w	r0, r7, #8
 80009ae:	f002 fb2b 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 fbe4 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80009b8:	4b83      	ldr	r3, [pc, #524]	; (8000bc8 <writeMM+0x574>)
 80009ba:	2217      	movs	r2, #23
 80009bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <writeMM+0x574>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2310      	movs	r3, #16
 80009ce:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80009d2:	2152      	movs	r1, #82	; 0x52
 80009d4:	f107 0008 	add.w	r0, r7, #8
 80009d8:	f002 fb16 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f001 fbcf 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80009e2:	4b79      	ldr	r3, [pc, #484]	; (8000bc8 <writeMM+0x574>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2301      	movs	r3, #1
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <writeMM+0x574>)
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2310      	movs	r3, #16
 80009f8:	f240 12ad 	movw	r2, #429	; 0x1ad
 80009fc:	2152      	movs	r1, #82	; 0x52
 80009fe:	f107 0008 	add.w	r0, r7, #8
 8000a02:	f002 fb01 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f001 fbba 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000a0c:	4b6e      	ldr	r3, [pc, #440]	; (8000bc8 <writeMM+0x574>)
 8000a0e:	2205      	movs	r2, #5
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <writeMM+0x574>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2310      	movs	r3, #16
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	2152      	movs	r1, #82	; 0x52
 8000a26:	f107 0008 	add.w	r0, r7, #8
 8000a2a:	f002 faed 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f001 fba6 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000a34:	4b64      	ldr	r3, [pc, #400]	; (8000bc8 <writeMM+0x574>)
 8000a36:	2205      	movs	r2, #5
 8000a38:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <writeMM+0x574>)
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2310      	movs	r3, #16
 8000a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4e:	2152      	movs	r1, #82	; 0x52
 8000a50:	f107 0008 	add.w	r0, r7, #8
 8000a54:	f002 fad8 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f001 fb91 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <writeMM+0x574>)
 8000a60:	2205      	movs	r2, #5
 8000a62:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	4b56      	ldr	r3, [pc, #344]	; (8000bc8 <writeMM+0x574>)
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2310      	movs	r3, #16
 8000a74:	f240 1299 	movw	r2, #409	; 0x199
 8000a78:	2152      	movs	r1, #82	; 0x52
 8000a7a:	f107 0008 	add.w	r0, r7, #8
 8000a7e:	f002 fac3 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f001 fb7c 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <writeMM+0x574>)
 8000a8a:	221b      	movs	r2, #27
 8000a8c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <writeMM+0x574>)
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000aa2:	2152      	movs	r1, #82	; 0x52
 8000aa4:	f107 0008 	add.w	r0, r7, #8
 8000aa8:	f002 faae 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f001 fb67 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <writeMM+0x574>)
 8000ab4:	223e      	movs	r2, #62	; 0x3e
 8000ab6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <writeMM+0x574>)
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8000acc:	2152      	movs	r1, #82	; 0x52
 8000ace:	f107 0008 	add.w	r0, r7, #8
 8000ad2:	f002 fa99 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f001 fb52 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <writeMM+0x574>)
 8000ade:	221f      	movs	r2, #31
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <writeMM+0x574>)
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2310      	movs	r3, #16
 8000af2:	f240 12a7 	movw	r2, #423	; 0x1a7
 8000af6:	2152      	movs	r1, #82	; 0x52
 8000af8:	f107 0008 	add.w	r0, r7, #8
 8000afc:	f002 fa84 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f001 fb3d 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <writeMM+0x574>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	2301      	movs	r3, #1
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <writeMM+0x574>)
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	2230      	movs	r2, #48	; 0x30
 8000b1e:	2152      	movs	r1, #82	; 0x52
 8000b20:	f107 0008 	add.w	r0, r7, #8
 8000b24:	f002 fa70 	bl	8003008 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f001 fb29 	bl	8002180 <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <writeMM+0x574>)
 8000b30:	2210      	movs	r2, #16
 8000b32:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <writeMM+0x574>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2310      	movs	r3, #16
 8000b44:	2211      	movs	r2, #17
 8000b46:	2152      	movs	r1, #82	; 0x52
 8000b48:	f107 0008 	add.w	r0, r7, #8
 8000b4c:	f002 fa5c 	bl	8003008 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f001 fb15 	bl	8002180 <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <writeMM+0x574>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2301      	movs	r3, #1
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <writeMM+0x574>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	221b      	movs	r2, #27
 8000b6e:	2152      	movs	r1, #82	; 0x52
 8000b70:	f107 0008 	add.w	r0, r7, #8
 8000b74:	f002 fa48 	bl	8003008 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <writeMM+0x574>)
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	9302      	str	r3, [sp, #8]
 8000b84:	2301      	movs	r3, #1
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <writeMM+0x574>)
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	221c      	movs	r2, #28
 8000b90:	2152      	movs	r1, #82	; 0x52
 8000b92:	f107 0008 	add.w	r0, r7, #8
 8000b96:	f002 fa37 	bl	8003008 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <writeMM+0x574>)
 8000b9c:	2224      	movs	r2, #36	; 0x24
 8000b9e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <writeMM+0x574>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2310      	movs	r3, #16
 8000bb0:	2214      	movs	r2, #20
 8000bb2:	2152      	movs	r1, #82	; 0x52
 8000bb4:	f107 0008 	add.w	r0, r7, #8
 8000bb8:	f002 fa26 	bl	8003008 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr
 8000bc8:	2000008c 	.word	0x2000008c

08000bcc <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <TOF_start_measurement+0x50>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 8000bd8:	2301      	movs	r3, #1
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <TOF_start_measurement+0x50>)
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2310      	movs	r3, #16
 8000be2:	2218      	movs	r2, #24
 8000be4:	2152      	movs	r1, #82	; 0x52
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <TOF_start_measurement+0x54>)
 8000be8:	f002 fb08 	bl	80031fc <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <TOF_start_measurement+0x50>)
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	2218      	movs	r2, #24
 8000bf8:	2152      	movs	r1, #82	; 0x52
 8000bfa:	480a      	ldr	r0, [pc, #40]	; (8000c24 <TOF_start_measurement+0x58>)
 8000bfc:	f002 fafe 	bl	80031fc <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <TOF_start_measurement+0x50>)
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2310      	movs	r3, #16
 8000c0a:	2218      	movs	r2, #24
 8000c0c:	2152      	movs	r1, #82	; 0x52
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <TOF_start_measurement+0x5c>)
 8000c10:	f002 faf4 	bl	80031fc <HAL_I2C_Mem_Write_IT>
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	2000019c 	.word	0x2000019c
 8000c24:	20000148 	.word	0x20000148
 8000c28:	200001f0 	.word	0x200001f0

08000c2c <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <TOF_get_measurement+0x48>)
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	2262      	movs	r2, #98	; 0x62
 8000c3e:	2152      	movs	r1, #82	; 0x52
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <TOF_get_measurement+0x4c>)
 8000c42:	f002 fb8d 	bl	8003360 <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <TOF_get_measurement+0x50>)
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2310      	movs	r3, #16
 8000c50:	2262      	movs	r2, #98	; 0x62
 8000c52:	2152      	movs	r1, #82	; 0x52
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <TOF_get_measurement+0x54>)
 8000c56:	f002 fb83 	bl	8003360 <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <TOF_get_measurement+0x58>)
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2310      	movs	r3, #16
 8000c64:	2262      	movs	r2, #98	; 0x62
 8000c66:	2152      	movs	r1, #82	; 0x52
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <TOF_get_measurement+0x5c>)
 8000c6a:	f002 fb79 	bl	8003360 <HAL_I2C_Mem_Read_IT>
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000fc 	.word	0x200000fc
 8000c78:	2000019c 	.word	0x2000019c
 8000c7c:	200000fd 	.word	0x200000fd
 8000c80:	20000148 	.word	0x20000148
 8000c84:	200000fe 	.word	0x200000fe
 8000c88:	200001f0 	.word	0x200001f0

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c92:	f001 fa03 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c96:	f000 f87f 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f000 fbf5 	bl	8001488 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c9e:	f000 f935 	bl	8000f0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ca2:	f000 f961 	bl	8000f68 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000ca6:	f000 f8df 	bl	8000e68 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000caa:	f000 f98b 	bl	8000fc4 <MX_I2C3_Init>
  MX_TIM3_Init();
 8000cae:	f000 fb19 	bl	80012e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000cb2:	f000 fb6b 	bl	800138c <MX_TIM5_Init>
  MX_TIM1_Init();
 8000cb6:	f000 f9e9 	bl	800108c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cba:	f000 fa93 	bl	80011e4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000cbe:	f000 fbb9 	bl	8001434 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000cc2:	f000 f9ad 	bl	8001020 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 8000cc6:	f000 fc5d 	bl	8001584 <motorsInit>
	TOF_init();
 8000cca:	f7ff fc63 	bl	8000594 <TOF_init>
	uart_startup_transmit();
 8000cce:	f001 f925 	bl	8001f1c <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);

//	uint16_t L_vals[512];
//	uint16_t R_vals[512];

	forward(0);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 fc92 	bl	80015fc <forward>
	HAL_Delay(3000);
 8000cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cdc:	f001 fa50 	bl	8002180 <HAL_Delay>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8000ce0:	f001 fa42 	bl	8002168 <HAL_GetTick>
 8000ce4:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 8000ce6:	f001 fa3f 	bl	8002168 <HAL_GetTick>
 8000cea:	6038      	str	r0, [r7, #0]
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Laddress+2*i, L_vals[i]);
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
//		HAL_Delay(1);
//	}
//	HAL_FLASH_Lock();
	R_speed_setpoint = 600;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <main+0xf0>)
 8000cee:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cf2:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 600;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <main+0xf4>)
 8000cf6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cfa:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		//	  sprintf(buff, "L:%d R:%d V:%d\n",(int)htim5.Instance->CNT,(int)htim3.Instance->CNT, (int)HAL_ADC_GetValue(&hadc1));

		//	  sprintf(buff, "%d",(int)HAL_I2C_GetError(&hi2c1));
		uart_task();
 8000cfc:	f001 f936 	bl	8001f6c <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 8000d00:	f001 fa32 	bl	8002168 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b65      	cmp	r3, #101	; 0x65
 8000d0c:	d902      	bls.n	8000d14 <main+0x88>
			prev_main_loop_time = HAL_GetTick();
 8000d0e:	f001 fa2b 	bl	8002168 <HAL_GetTick>
 8000d12:	6038      	str	r0, [r7, #0]
//			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time >= CONTROL_LOOP_PERIOD_MS){
 8000d14:	f001 fa28 	bl	8002168 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b13      	cmp	r3, #19
 8000d20:	d9ec      	bls.n	8000cfc <main+0x70>

			TOF_get_measurement();
 8000d22:	f7ff ff83 	bl	8000c2c <TOF_get_measurement>
			prev_ctr_loop_time = HAL_GetTick();
 8000d26:	f001 fa1f 	bl	8002168 <HAL_GetTick>
 8000d2a:	6078      	str	r0, [r7, #4]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d30:	4814      	ldr	r0, [pc, #80]	; (8000d84 <main+0xf8>)
 8000d32:	f002 f80a 	bl	8002d4a <HAL_GPIO_TogglePin>
			sprintf(send_buffer, "R:%d C: %d E:%d\n", (int)measurements[0], (int)measurements[1], (int)measurements[2]);
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <main+0xfc>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <main+0xfc>)
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <main+0xfc>)
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4910      	ldr	r1, [pc, #64]	; (8000d8c <main+0x100>)
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <main+0x104>)
 8000d4e:	f006 ff41 	bl	8007bd4 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <main+0x104>)
 8000d54:	f7ff fa44 	bl	80001e0 <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <main+0x104>)
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <main+0x108>)
 8000d62:	f005 ff84 	bl	8006c6e <HAL_UART_Transmit_IT>
			if(measurements[1]>190){
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <main+0xfc>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	2bbe      	cmp	r3, #190	; 0xbe
 8000d6c:	d802      	bhi.n	8000d74 <main+0xe8>
//				R_motor_feedback_control();
//				L_motor_feedback_control();
			}
			else{
				forward(0);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fc44 	bl	80015fc <forward>
			}
			TOF_start_measurement();
 8000d74:	f7ff ff2a 	bl	8000bcc <TOF_start_measurement>
		uart_task();
 8000d78:	e7c0      	b.n	8000cfc <main+0x70>
 8000d7a:	bf00      	nop
 8000d7c:	200000f8 	.word	0x200000f8
 8000d80:	200000f6 	.word	0x200000f6
 8000d84:	40020800 	.word	0x40020800
 8000d88:	200000fc 	.word	0x200000fc
 8000d8c:	080085d4 	.word	0x080085d4
 8000d90:	20000094 	.word	0x20000094
 8000d94:	200003bc 	.word	0x200003bc

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b094      	sub	sp, #80	; 0x50
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	2230      	movs	r2, #48	; 0x30
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f006 ff0c 	bl	8007bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <SystemClock_Config+0xc8>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <SystemClock_Config+0xc8>)
 8000dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <SystemClock_Config+0xc8>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <SystemClock_Config+0xcc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <SystemClock_Config+0xcc>)
 8000de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <SystemClock_Config+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fa55 	bl	80052cc <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e28:	f000 fba6 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fcb7 	bl	80057bc <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e54:	f000 fb90 	bl	8001578 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <MX_ADC1_Init+0x9c>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <MX_ADC1_Init+0xa0>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000eca:	f001 f97d 	bl	80021c8 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f000 fb50 	bl	8001578 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000eea:	f001 f9b1 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef4:	f000 fb40 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000100 	.word	0x20000100
 8000f04:	40012000 	.word	0x40012000
 8000f08:	0f000001 	.word	0x0f000001

08000f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f001 ff19 	bl	8002d80 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 fb10 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000148 	.word	0x20000148
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00061a80 	.word	0x00061a80

08000f68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <MX_I2C2_Init+0x54>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_I2C2_Init+0x58>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_I2C2_Init+0x50>)
 8000fa6:	f001 feeb 	bl	8002d80 <HAL_I2C_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fb0:	f000 fae2 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000019c 	.word	0x2000019c
 8000fbc:	40005800 	.word	0x40005800
 8000fc0:	00061a80 	.word	0x00061a80

08000fc4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <MX_I2C3_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_I2C3_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_I2C3_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_I2C3_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_I2C3_Init+0x50>)
 8001002:	f001 febd 	bl	8002d80 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 fab4 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200001f0 	.word	0x200001f0
 8001018:	40005c00 	.word	0x40005c00
 800101c:	00061a80 	.word	0x00061a80

08001020 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_SPI2_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_SPI2_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI2_Init+0x64>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_SPI2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_SPI2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_SPI2_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI2_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_SPI2_Init+0x64>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI2_Init+0x64>)
 8001054:	2230      	movs	r2, #48	; 0x30
 8001056:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_SPI2_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI2_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_SPI2_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI2_Init+0x64>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_SPI2_Init+0x64>)
 8001072:	f004 fd83 	bl	8005b7c <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 fa7c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000244 	.word	0x20000244
 8001088:	40003800 	.word	0x40003800

0800108c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b096      	sub	sp, #88	; 0x58
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2220      	movs	r2, #32
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 fd7d 	bl	8007bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ca:	4b44      	ldr	r3, [pc, #272]	; (80011dc <MX_TIM1_Init+0x150>)
 80010cc:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <MX_TIM1_Init+0x154>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <MX_TIM1_Init+0x150>)
 80010d2:	2263      	movs	r2, #99	; 0x63
 80010d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <MX_TIM1_Init+0x150>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <MX_TIM1_Init+0x150>)
 80010de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <MX_TIM1_Init+0x150>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MX_TIM1_Init+0x150>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <MX_TIM1_Init+0x150>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_TIM1_Init+0x150>)
 80010f8:	f004 fdc9 	bl	8005c8e <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001102:	f000 fa39 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001110:	4619      	mov	r1, r3
 8001112:	4832      	ldr	r0, [pc, #200]	; (80011dc <MX_TIM1_Init+0x150>)
 8001114:	f005 f90a 	bl	800632c <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800111e:	f000 fa2b 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001122:	482e      	ldr	r0, [pc, #184]	; (80011dc <MX_TIM1_Init+0x150>)
 8001124:	f004 fe02 	bl	8005d2c <HAL_TIM_PWM_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800112e:	f000 fa23 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800113e:	4619      	mov	r1, r3
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <MX_TIM1_Init+0x150>)
 8001142:	f005 fc87 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800114c:	f000 fa14 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001150:	2360      	movs	r3, #96	; 0x60
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	2204      	movs	r2, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_TIM1_Init+0x150>)
 8001176:	f005 f817 	bl	80061a8 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001180:	f000 f9fa 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <MX_TIM1_Init+0x150>)
 800118e:	f005 f80b 	bl	80061a8 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001198:	f000 f9ee 	bl	8001578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM1_Init+0x150>)
 80011c0:	f005 fcb6 	bl	8006b30 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011ca:	f000 f9d5 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM1_Init+0x150>)
 80011d0:	f000 fd1c 	bl	8001c0c <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3758      	adds	r7, #88	; 0x58
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000029c 	.word	0x2000029c
 80011e0:	40010000 	.word	0x40010000

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <MX_TIM2_Init+0xfc>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_TIM2_Init+0xfc>)
 800121e:	2263      	movs	r2, #99	; 0x63
 8001220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <MX_TIM2_Init+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <MX_TIM2_Init+0xfc>)
 800122a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_TIM2_Init+0xfc>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_TIM2_Init+0xfc>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123c:	4828      	ldr	r0, [pc, #160]	; (80012e0 <MX_TIM2_Init+0xfc>)
 800123e:	f004 fd26 	bl	8005c8e <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001248:	f000 f996 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001256:	4619      	mov	r1, r3
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <MX_TIM2_Init+0xfc>)
 800125a:	f005 f867 	bl	800632c <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001264:	f000 f988 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001268:	481d      	ldr	r0, [pc, #116]	; (80012e0 <MX_TIM2_Init+0xfc>)
 800126a:	f004 fd5f 	bl	8005d2c <HAL_TIM_PWM_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001274:	f000 f980 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4619      	mov	r1, r3
 8001286:	4816      	ldr	r0, [pc, #88]	; (80012e0 <MX_TIM2_Init+0xfc>)
 8001288:	f005 fbe4 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001292:	f000 f971 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001296:	2360      	movs	r3, #96	; 0x60
 8001298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_TIM2_Init+0xfc>)
 80012ae:	f004 ff7b 	bl	80061a8 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012b8:	f000 f95e 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2204      	movs	r2, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM2_Init+0xfc>)
 80012c4:	f004 ff70 	bl	80061a8 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80012ce:	f000 f953 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM2_Init+0xfc>)
 80012d4:	f000 fc9a 	bl	8001c0c <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3738      	adds	r7, #56	; 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002e4 	.word	0x200002e4

080012e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 fc66 	bl	8007bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_TIM3_Init+0xa4>)
 8001304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM3_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001326:	2303      	movs	r3, #3
 8001328:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800133e:	2301      	movs	r3, #1
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001352:	f004 fdf5 	bl	8005f40 <HAL_TIM_Encoder_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800135c:	f000 f90c 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM3_Init+0xa0>)
 800136e:	f005 fb71 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001378:	f000 f8fe 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000032c 	.word	0x2000032c
 8001388:	40000400 	.word	0x40000400

0800138c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fc12 	bl	8007bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_TIM5_Init+0xa0>)
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_TIM5_Init+0xa4>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM5_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM5_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM5_Init+0xa0>)
 80013bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM5_Init+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM5_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ce:	2303      	movs	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013d2:	2302      	movs	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM5_Init+0xa0>)
 80013fa:	f004 fda1 	bl	8005f40 <HAL_TIM_Encoder_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001404:	f000 f8b8 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM5_Init+0xa0>)
 8001416:	f005 fb1d 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001420:	f000 f8aa 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000374 	.word	0x20000374
 8001430:	40000c00 	.word	0x40000c00

08001434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART2_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001440:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800146c:	f005 fbb2 	bl	8006bd4 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 f87f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003bc 	.word	0x200003bc
 8001484:	40004400 	.word	0x40004400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <MX_GPIO_Init+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a31      	ldr	r2, [pc, #196]	; (800156c <MX_GPIO_Init+0xe4>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_GPIO_Init+0xe4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <MX_GPIO_Init+0xe4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <MX_GPIO_Init+0xe4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <MX_GPIO_Init+0xe4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_GPIO_Init+0xe4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <MX_GPIO_Init+0xe4>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_GPIO_Init+0xe4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <MX_GPIO_Init+0xe8>)
 80014fa:	f001 fc0d 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_GPIO_Init+0xec>)
 8001506:	f001 fc07 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <MX_GPIO_Init+0xe8>)
 8001524:	f001 fa74 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <MX_GPIO_Init+0xe8>)
 8001542:	f001 fa65 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_GPIO_Init+0xec>)
 8001560:	f001 fa56 	bl	8002a10 <HAL_GPIO_Init>

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020400 	.word	0x40020400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <motorsInit>:
extern int32_t R_acc_error;
extern int32_t L_acc;
extern int32_t R_acc;
extern int32_t Dist_error_acc;

void motorsInit(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001588:	2104      	movs	r1, #4
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <motorsInit+0x68>)
 800158c:	f004 fc28 	bl	8005de0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001590:	2108      	movs	r1, #8
 8001592:	4816      	ldr	r0, [pc, #88]	; (80015ec <motorsInit+0x68>)
 8001594:	f004 fc24 	bl	8005de0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <motorsInit+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <motorsInit+0x68>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c

	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015a8:	2100      	movs	r1, #0
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <motorsInit+0x6c>)
 80015ac:	f004 fc18 	bl	8005de0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015b0:	2104      	movs	r1, #4
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <motorsInit+0x6c>)
 80015b4:	f004 fc14 	bl	8005de0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <motorsInit+0x6c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <motorsInit+0x6c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015c8:	213c      	movs	r1, #60	; 0x3c
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <motorsInit+0x70>)
 80015cc:	f004 fd5e 	bl	800608c <HAL_TIM_Encoder_Start>

	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80015d0:	213c      	movs	r1, #60	; 0x3c
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <motorsInit+0x74>)
 80015d4:	f004 fd5a 	bl	800608c <HAL_TIM_Encoder_Start>

	  htim3.Instance->CNT = 0;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <motorsInit+0x70>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <motorsInit+0x74>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000029c 	.word	0x2000029c
 80015f0:	200002e4 	.word	0x200002e4
 80015f4:	2000032c 	.word	0x2000032c
 80015f8:	20000374 	.word	0x20000374

080015fc <forward>:
void forward(int16_t power){ // -1000 < power < 1000
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	if (power>1000) power = 1000;
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160e:	dd02      	ble.n	8001616 <forward+0x1a>
 8001610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001614:	80fb      	strh	r3, [r7, #6]
	if (power<-1000) power = -1000;
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800161e:	da02      	bge.n	8001626 <forward+0x2a>
 8001620:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8001624:	80fb      	strh	r3, [r7, #6]

	if (power == 0){
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d110      	bne.n	8001650 <forward+0x54>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <forward+0xb8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <forward+0xb8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c
		//motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <forward+0xbc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <forward+0xbc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
//		motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
	}
}
 800164e:	e02a      	b.n	80016a6 <forward+0xaa>
	else if (power > 0){
 8001650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd12      	ble.n	800167e <forward+0x82>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, power);
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <forward+0xb8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <forward+0xb8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, power);
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <forward+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <forward+0xbc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800167c:	e013      	b.n	80016a6 <forward+0xaa>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <forward+0xb8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	425a      	negs	r2, r3
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <forward+0xb8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <forward+0xbc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	425a      	negs	r2, r3
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <forward+0xbc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000029c 	.word	0x2000029c
 80016b8:	200002e4 	.word	0x200002e4

080016bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_MspInit+0x4c>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_MspInit+0x4c>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_MspInit+0x4c>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a17      	ldr	r2, [pc, #92]	; (8001788 <HAL_ADC_MspInit+0x7c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d127      	bne.n	800177e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_ADC_MspInit+0x80>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_ADC_MspInit+0x80>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_ADC_MspInit+0x80>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_ADC_MspInit+0x80>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_ADC_MspInit+0x80>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_ADC_MspInit+0x80>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8001766:	2310      	movs	r3, #16
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_ADC_MspInit+0x84>)
 800177a:	f001 f949 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012000 	.word	0x40012000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a83      	ldr	r2, [pc, #524]	; (80019c0 <HAL_I2C_MspInit+0x22c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d14c      	bne.n	8001850 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a81      	ldr	r2, [pc, #516]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	4876      	ldr	r0, [pc, #472]	; (80019c8 <HAL_I2C_MspInit+0x234>)
 80017ee:	f001 f90f 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	486e      	ldr	r0, [pc, #440]	; (80019c8 <HAL_I2C_MspInit+0x234>)
 800180e:	f001 f8ff 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201f      	movs	r0, #31
 8001834:	f001 f815 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001838:	201f      	movs	r0, #31
 800183a:	f001 f82e 	bl	800289a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2020      	movs	r0, #32
 8001844:	f001 f80d 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001848:	2020      	movs	r0, #32
 800184a:	f001 f826 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800184e:	e0b3      	b.n	80019b8 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <HAL_I2C_MspInit+0x238>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d14e      	bne.n	80018f8 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187c:	2312      	movs	r3, #18
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001888:	2304      	movs	r3, #4
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	484d      	ldr	r0, [pc, #308]	; (80019c8 <HAL_I2C_MspInit+0x234>)
 8001894:	f001 f8bc 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018aa:	2309      	movs	r3, #9
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4844      	ldr	r0, [pc, #272]	; (80019c8 <HAL_I2C_MspInit+0x234>)
 80018b6:	f001 f8ab 	bl	8002a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a40      	ldr	r2, [pc, #256]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80018c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2101      	movs	r1, #1
 80018da:	2021      	movs	r0, #33	; 0x21
 80018dc:	f000 ffc1 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80018e0:	2021      	movs	r0, #33	; 0x21
 80018e2:	f000 ffda 	bl	800289a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	2022      	movs	r0, #34	; 0x22
 80018ec:	f000 ffb9 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80018f0:	2022      	movs	r0, #34	; 0x22
 80018f2:	f000 ffd2 	bl	800289a <HAL_NVIC_EnableIRQ>
}
 80018f6:	e05f      	b.n	80019b8 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_I2C_MspInit+0x23c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d15a      	bne.n	80019b8 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800194c:	2304      	movs	r3, #4
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	481f      	ldr	r0, [pc, #124]	; (80019d4 <HAL_I2C_MspInit+0x240>)
 8001958:	f001 f85a 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195c:	2310      	movs	r3, #16
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800196c:	2309      	movs	r3, #9
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4814      	ldr	r0, [pc, #80]	; (80019c8 <HAL_I2C_MspInit+0x234>)
 8001978:	f001 f84a 	bl	8002a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 8001986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_I2C_MspInit+0x230>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2048      	movs	r0, #72	; 0x48
 800199e:	f000 ff60 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80019a2:	2048      	movs	r0, #72	; 0x48
 80019a4:	f000 ff79 	bl	800289a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2049      	movs	r0, #73	; 0x49
 80019ae:	f000 ff58 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80019b2:	2049      	movs	r0, #73	; 0x49
 80019b4:	f000 ff71 	bl	800289a <HAL_NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	3738      	adds	r7, #56	; 0x38
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40005800 	.word	0x40005800
 80019d0:	40005c00 	.word	0x40005c00
 80019d4:	40020000 	.word	0x40020000

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_SPI_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12c      	bne.n	8001a54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a44:	2305      	movs	r3, #5
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x8c>)
 8001a50:	f000 ffde 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40003800 	.word	0x40003800
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400

08001a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_TIM_Base_MspInit+0x64>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a96:	e012      	b.n	8001abe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d14a      	bne.n	8001b8c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a3f      	ldr	r2, [pc, #252]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4826      	ldr	r0, [pc, #152]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001b66:	f000 ff53 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	481f      	ldr	r0, [pc, #124]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x130>)
 8001b86:	f000 ff43 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b8a:	e030      	b.n	8001bee <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_TIM_Encoder_MspInit+0x134>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d12b      	bne.n	8001bee <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_TIM_Encoder_MspInit+0x128>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bde:	2302      	movs	r3, #2
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001bea:	f000 ff11 	bl	8002a10 <HAL_GPIO_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	; 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_TIM_MspPostInit+0xf0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d11f      	bne.n	8001c6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 8001c4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4827      	ldr	r0, [pc, #156]	; (8001d04 <HAL_TIM_MspPostInit+0xf8>)
 8001c68:	f000 fed2 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d13c      	bne.n	8001cf2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6313      	str	r3, [r2, #48]	; 0x30
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_TIM_MspPostInit+0xf4>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8001cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <HAL_TIM_MspPostInit+0xf8>)
 8001cce:	f000 fe9f 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <HAL_TIM_MspPostInit+0xfc>)
 8001cee:	f000 fe8f 	bl	8002a10 <HAL_GPIO_Init>
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_UART_MspInit+0x94>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d133      	bne.n	8001d96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d76:	2307      	movs	r3, #7
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d82:	f000 fe45 	bl	8002a10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2026      	movs	r0, #38	; 0x26
 8001d8c:	f000 fd69 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d90:	2026      	movs	r0, #38	; 0x26
 8001d92:	f000 fd82 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40004400 	.word	0x40004400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 f9a2 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <I2C1_EV_IRQHandler+0x10>)
 8001e06:	f001 fb69 	bl	80034dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000148 	.word	0x20000148

08001e14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <I2C1_ER_IRQHandler+0x10>)
 8001e1a:	f001 fcd0 	bl	80037be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000148 	.word	0x20000148

08001e28 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <I2C2_EV_IRQHandler+0x10>)
 8001e2e:	f001 fb55 	bl	80034dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000019c 	.word	0x2000019c

08001e3c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <I2C2_ER_IRQHandler+0x10>)
 8001e42:	f001 fcbc 	bl	80037be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000019c 	.word	0x2000019c

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART2_IRQHandler+0x10>)
 8001e56:	f004 ff7f 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003bc 	.word	0x200003bc

08001e64 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <I2C3_EV_IRQHandler+0x10>)
 8001e6a:	f001 fb37 	bl	80034dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200001f0 	.word	0x200001f0

08001e78 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <I2C3_ER_IRQHandler+0x10>)
 8001e7e:	f001 fc9e 	bl	80037be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001f0 	.word	0x200001f0

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f005 fe4a 	bl	8007b54 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000400 	.word	0x20000400
 8001ef4:	20000420 	.word	0x20000420

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8001f22:	2005      	movs	r0, #5
 8001f24:	f000 f92c 	bl	8002180 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <uart_startup_transmit+0x40>)
 8001f2a:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	480c      	ldr	r0, [pc, #48]	; (8001f60 <uart_startup_transmit+0x44>)
 8001f30:	f005 fe70 	bl	8007c14 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <uart_startup_transmit+0x44>)
 8001f36:	f7fe f953 	bl	80001e0 <strlen>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <uart_startup_transmit+0x44>)
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <uart_startup_transmit+0x48>)
 8001f44:	f004 fe93 	bl	8006c6e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4907      	ldr	r1, [pc, #28]	; (8001f68 <uart_startup_transmit+0x4c>)
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <uart_startup_transmit+0x48>)
 8001f4e:	f004 fed3 	bl	8006cf8 <HAL_UART_Receive_IT>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	080085e8 	.word	0x080085e8
 8001f60:	20000094 	.word	0x20000094
 8001f64:	200003bc 	.word	0x200003bc
 8001f68:	200000d4 	.word	0x200000d4

08001f6c <uart_task>:

void uart_task()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <uart_task+0x3c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <uart_task+0x40>)
 8001f7a:	f7fe f931 	bl	80001e0 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <uart_task+0x40>)
 8001f84:	f000 f816 	bl	8001fb4 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <uart_task+0x40>)
 8001f8a:	f005 fddf 	bl	8007b4c <atoi>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <uart_task+0x44>)
 8001f94:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <uart_task+0x3c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <uart_task+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200000f4 	.word	0x200000f4
 8001fac:	200000d4 	.word	0x200000d4
 8001fb0:	200000f8 	.word	0x200000f8

08001fb4 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <uart_transmit+0x20>)
 8001fc8:	f004 fe51 	bl	8006c6e <HAL_UART_Transmit_IT>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003bc 	.word	0x200003bc

08001fd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_RxCpltCallback+0x64>)
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	2b0a      	cmp	r3, #10
 8001fec:	d10c      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_UART_RxCpltCallback+0x64>)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_UART_RxCpltCallback+0x68>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
		index = 0;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e009      	b.n	800201c <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b1d      	cmp	r3, #29
 800200e:	d805      	bhi.n	800201c <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 800201a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_UART_RxCpltCallback+0x60>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_UART_RxCpltCallback+0x64>)
 8002024:	4413      	add	r3, r2
 8002026:	2201      	movs	r2, #1
 8002028:	4619      	mov	r1, r3
 800202a:	4806      	ldr	r0, [pc, #24]	; (8002044 <HAL_UART_RxCpltCallback+0x6c>)
 800202c:	f004 fe64 	bl	8006cf8 <HAL_UART_Receive_IT>

}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000404 	.word	0x20000404
 800203c:	200000d4 	.word	0x200000d4
 8002040:	200000f4 	.word	0x200000f4
 8002044:	200003bc 	.word	0x200003bc

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002072:	f7ff ff41 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f005 fd73 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7fe fe07 	bl	8000c8c <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800208c:	08008754 	.word	0x08008754
  ldr r2, =_sbss
 8002090:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002094:	2000041c 	.word	0x2000041c

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 fbc1 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	200f      	movs	r0, #15
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff faf4 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fbd9 	bl	80028b6 <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 fba1 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000000 	.word	0x20000000
 8002138:	20000008 	.word	0x20000008
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000008 	.word	0x20000008
 8002164:	20000408 	.word	0x20000408

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000408 	.word	0x20000408

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008

080021c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e033      	b.n	8002246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fa90 	bl	800170c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f94a 	bl	80024b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
 8002236:	e001      	b.n	800223c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e113      	b.n	8002494 <HAL_ADC_ConfigChannel+0x244>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d925      	bls.n	80022c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	3b1e      	subs	r3, #30
 8002292:	2207      	movs	r2, #7
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43da      	mvns	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	400a      	ands	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68d9      	ldr	r1, [r3, #12]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4403      	add	r3, r0
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	409a      	lsls	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e022      	b.n	800230e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	2207      	movs	r2, #7
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	400a      	ands	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4403      	add	r3, r0
 8002304:	409a      	lsls	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d824      	bhi.n	8002360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b05      	subs	r3, #5
 8002328:	221f      	movs	r2, #31
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b05      	subs	r3, #5
 8002352:	fa00 f203 	lsl.w	r2, r0, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
 800235e:	e04c      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d824      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b23      	subs	r3, #35	; 0x23
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b23      	subs	r3, #35	; 0x23
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
 80023b0:	e023      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b41      	subs	r3, #65	; 0x41
 80023c4:	221f      	movs	r2, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b41      	subs	r3, #65	; 0x41
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_ADC_ConfigChannel+0x250>)
 80023fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <HAL_ADC_ConfigChannel+0x254>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10f      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1d8>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b12      	cmp	r3, #18
 800240e:	d10b      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_ADC_ConfigChannel+0x254>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d12b      	bne.n	800248a <HAL_ADC_ConfigChannel+0x23a>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_ADC_ConfigChannel+0x258>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x1f4>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b11      	cmp	r3, #17
 8002442:	d122      	bne.n	800248a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_ADC_ConfigChannel+0x258>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d111      	bne.n	800248a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_ADC_ConfigChannel+0x25c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_ADC_ConfigChannel+0x260>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9a      	lsrs	r2, r3, #18
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800247c:	e002      	b.n	8002484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3b01      	subs	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40012300 	.word	0x40012300
 80024a4:	40012000 	.word	0x40012000
 80024a8:	10000012 	.word	0x10000012
 80024ac:	20000000 	.word	0x20000000
 80024b0:	431bde83 	.word	0x431bde83

080024b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024bc:	4b79      	ldr	r3, [pc, #484]	; (80026a4 <ADC_Init+0x1f0>)
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	021a      	lsls	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800250c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <ADC_Init+0x1f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800255a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800257c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6899      	ldr	r1, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	e00f      	b.n	80025b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0202 	bic.w	r2, r2, #2
 80025c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7e1b      	ldrb	r3, [r3, #24]
 80025cc:	005a      	lsls	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	3b01      	subs	r3, #1
 800260c:	035a      	lsls	r2, r3, #13
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e007      	b.n	8002628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	3b01      	subs	r3, #1
 8002644:	051a      	lsls	r2, r3, #20
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266a:	025a      	lsls	r2, r3, #9
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6899      	ldr	r1, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	029a      	lsls	r2, r3, #10
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40012300 	.word	0x40012300
 80026a8:	0f000001 	.word	0x0f000001

080026ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60d3      	str	r3, [r2, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <__NVIC_GetPriorityGrouping+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	f003 0307 	and.w	r3, r3, #7
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db0b      	blt.n	800273a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <__NVIC_EnableIRQ+0x38>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2001      	movs	r0, #1
 8002732:	fa00 f202 	lsl.w	r2, r0, r2
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff29 	bl	80026ac <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff3e 	bl	80026f4 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff31 	bl	8002710 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa2 	bl	8002808 <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fc44 	bl	8002168 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d008      	beq.n	8002900 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e052      	b.n	80029a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0216 	bic.w	r2, r2, #22
 800290e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_DMA_Abort+0x62>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002950:	e013      	b.n	800297a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002952:	f7ff fc09 	bl	8002168 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b05      	cmp	r3, #5
 800295e:	d90c      	bls.n	800297a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e015      	b.n	80029a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e4      	bne.n	8002952 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	223f      	movs	r2, #63	; 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00c      	b.n	80029e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2205      	movs	r2, #5
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e159      	b.n	8002ce0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8148 	bne.w	8002cda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d130      	bne.n	8002ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a2 	beq.w	8002cda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_GPIO_Init+0x2f0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x202>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <HAL_GPIO_Init+0x2f4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x1fe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a47      	ldr	r2, [pc, #284]	; (8002d08 <HAL_GPIO_Init+0x2f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x1fa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <HAL_GPIO_Init+0x2fc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x1f6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a45      	ldr	r2, [pc, #276]	; (8002d10 <HAL_GPIO_Init+0x300>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x1f2>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x204>
 8002c12:	2300      	movs	r3, #0
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c24:	4935      	ldr	r1, [pc, #212]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_GPIO_Init+0x304>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	f67f aea2 	bls.w	8002a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d34:	e003      	b.n	8002d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	041a      	lsls	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	619a      	str	r2, [r3, #24]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d5c:	887a      	ldrh	r2, [r7, #2]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	041a      	lsls	r2, r3, #16
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e12b      	b.n	8002fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fcf4 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de4:	f002 fea2 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 8002de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a81      	ldr	r2, [pc, #516]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d807      	bhi.n	8002e04 <HAL_I2C_Init+0x84>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a80      	ldr	r2, [pc, #512]	; (8002ff8 <HAL_I2C_Init+0x278>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e006      	b.n	8002e12 <HAL_I2C_Init+0x92>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a7d      	ldr	r2, [pc, #500]	; (8002ffc <HAL_I2C_Init+0x27c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0e7      	b.n	8002fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a78      	ldr	r2, [pc, #480]	; (8003000 <HAL_I2C_Init+0x280>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d802      	bhi.n	8002e54 <HAL_I2C_Init+0xd4>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	e009      	b.n	8002e68 <HAL_I2C_Init+0xe8>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	4a69      	ldr	r2, [pc, #420]	; (8003004 <HAL_I2C_Init+0x284>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	495c      	ldr	r1, [pc, #368]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002e84:	428b      	cmp	r3, r1
 8002e86:	d819      	bhi.n	8002ebc <HAL_I2C_Init+0x13c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e59      	subs	r1, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_I2C_Init+0x138>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1e59      	subs	r1, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	e051      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e04f      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <HAL_I2C_Init+0x168>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e012      	b.n	8002f0e <HAL_I2C_Init+0x18e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x196>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e022      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10e      	bne.n	8002f3c <HAL_I2C_Init+0x1bc>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e58      	subs	r0, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	440b      	add	r3, r1
 8002f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	e00f      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e58      	subs	r0, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6809      	ldr	r1, [r1, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6911      	ldr	r1, [r2, #16]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	4311      	orrs	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	000186a0 	.word	0x000186a0
 8002ff8:	001e847f 	.word	0x001e847f
 8002ffc:	003d08ff 	.word	0x003d08ff
 8003000:	431bde83 	.word	0x431bde83
 8003004:	10624dd3 	.word	0x10624dd3

08003008 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	460b      	mov	r3, r1
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7ff f8a1 	bl	8002168 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 80d9 	bne.w	80031e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	496d      	ldr	r1, [pc, #436]	; (80031f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f001 ff6f 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	e0cc      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Write+0x56>
 800305a:	2302      	movs	r3, #2
 800305c:	e0c5      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d007      	beq.n	8003084 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	; 0x21
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	; 0x40
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a3a      	ldr	r2, [r7, #32]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_I2C_Mem_Write+0x1f0>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c6:	88f8      	ldrh	r0, [r7, #6]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4603      	mov	r3, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 fde6 	bl	8004ca8 <I2C_RequestMemoryWrite>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d052      	beq.n	8003188 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e081      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f001 fff0 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d107      	bne.n	800310e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <HAL_I2C_Mem_Write+0x180>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1aa      	bne.n	80030e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f001 ffdc 	bl	8005152 <I2C_WaitOnBTFFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d107      	bne.n	80031b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e016      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	00100002 	.word	0x00100002
 80031f8:	ffff0000 	.word	0xffff0000

080031fc <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	4608      	mov	r0, r1
 8003206:	4611      	mov	r1, r2
 8003208:	461a      	mov	r2, r3
 800320a:	4603      	mov	r3, r0
 800320c:	817b      	strh	r3, [r7, #10]
 800320e:	460b      	mov	r3, r1
 8003210:	813b      	strh	r3, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	f040 808e 	bne.w	8003344 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003228:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_I2C_Mem_Write_IT+0x158>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <HAL_I2C_Mem_Write_IT+0x15c>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	0a1a      	lsrs	r2, r3, #8
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3b01      	subs	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e064      	b.n	8003346 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d0db      	beq.n	8003242 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2C_Mem_Write_IT+0x9c>
 8003294:	2302      	movs	r3, #2
 8003296:	e056      	b.n	8003346 <HAL_I2C_Mem_Write_IT+0x14a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d007      	beq.n	80032be <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a3a      	ldr	r2, [r7, #32]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <HAL_I2C_Mem_Write_IT+0x160>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003300:	897a      	ldrh	r2, [r7, #10]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003306:	893a      	ldrh	r2, [r7, #8]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003326:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800333e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000
 8003358:	14f8b589 	.word	0x14f8b589
 800335c:	ffff0000 	.word	0xffff0000

08003360 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 809a 	bne.w	80034c0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_I2C_Mem_Read_IT+0x170>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_I2C_Mem_Read_IT+0x174>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0a1a      	lsrs	r2, r3, #8
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e070      	b.n	80034c2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d0db      	beq.n	80033a6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2C_Mem_Read_IT+0x9c>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e062      	b.n	80034c2 <HAL_I2C_Mem_Read_IT+0x162>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d007      	beq.n	8003422 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2222      	movs	r2, #34	; 0x22
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_I2C_Mem_Read_IT+0x178>)
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003464:	897a      	ldrh	r2, [r7, #10]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800346a:	893a      	ldrh	r2, [r7, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80034ba:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	14f8b589 	.word	0x14f8b589
 80034d8:	ffff0000 	.word	0xffff0000

080034dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b10      	cmp	r3, #16
 800350a:	d003      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x38>
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	f040 80c1 	bne.w	8003696 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_I2C_EV_IRQHandler+0x6e>
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003534:	d003      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x62>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800353c:	d101      	bne.n	8003542 <HAL_I2C_EV_IRQHandler+0x66>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x68>
 8003542:	2300      	movs	r3, #0
 8003544:	2b01      	cmp	r3, #1
 8003546:	f000 8132 	beq.w	80037ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0x92>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f001 fe98 	bl	8005296 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fd83 	bl	8004072 <I2C_Master_SB>
 800356c:	e092      	b.n	8003694 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_I2C_EV_IRQHandler+0xb2>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fdf9 	bl	800417e <I2C_Master_ADD10>
 800358c:	e082      	b.n	8003694 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0xd2>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fe13 	bl	80041d2 <I2C_Master_ADDR>
 80035ac:	e072      	b.n	8003694 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03b      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c8:	f000 80f3 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	09db      	lsrs	r3, r3, #7
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9f3 	bl	80039dc <I2C_MasterTransmit_TXE>
 80035f6:	e04d      	b.n	8003694 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80d6 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80cf 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	2b21      	cmp	r3, #33	; 0x21
 8003618:	d103      	bne.n	8003622 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa7a 	bl	8003b14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003620:	e0c7      	b.n	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	f040 80c4 	bne.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fae8 	bl	8003c00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003630:	e0bf      	b.n	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	f000 80b7 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x194>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x194>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb5d 	bl	8003d28 <I2C_MasterReceive_RXNE>
 800366e:	e011      	b.n	8003694 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 809a 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8093 	beq.w	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fc06 	bl	8003e9e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003692:	e08e      	b.n	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003694:	e08d      	b.n	80037b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e007      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d012      	beq.n	80036ea <HAL_I2C_EV_IRQHandler+0x20e>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00c      	beq.n	80036ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ffc4 	bl	8004670 <I2C_Slave_ADDR>
 80036e8:	e066      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_I2C_EV_IRQHandler+0x22e>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	0a5b      	lsrs	r3, r3, #9
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fffe 	bl	8004704 <I2C_Slave_STOPF>
 8003708:	e056      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d002      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x23a>
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b29      	cmp	r3, #41	; 0x29
 8003714:	d125      	bne.n	8003762 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	09db      	lsrs	r3, r3, #7
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00f      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x266>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	0a9b      	lsrs	r3, r3, #10
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x266>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 feda 	bl	80044f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003740:	e039      	b.n	80037b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d033      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	0a5b      	lsrs	r3, r3, #9
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02d      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 ff07 	bl	800456e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003760:	e029      	b.n	80037b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x2b2>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	0a9b      	lsrs	r3, r3, #10
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x2b2>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 ff12 	bl	80045b0 <I2C_SlaveReceive_RXNE>
 800378c:	e014      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ff40 	bl	800462c <I2C_SlaveReceive_BTF>
 80037ac:	e004      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	; 0x28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <HAL_I2C_ER_IRQHandler+0x4e>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800380a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_I2C_ER_IRQHandler+0x78>
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003834:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	0a9b      	lsrs	r3, r3, #10
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d03f      	beq.n	80038c2 <HAL_I2C_ER_IRQHandler+0x104>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d039      	beq.n	80038c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800384e:	7efb      	ldrb	r3, [r7, #27]
 8003850:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003868:	7ebb      	ldrb	r3, [r7, #26]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d112      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xd6>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xd6>
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b21      	cmp	r3, #33	; 0x21
 8003878:	d008      	beq.n	800388c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b29      	cmp	r3, #41	; 0x29
 800387e:	d005      	beq.n	800388c <HAL_I2C_ER_IRQHandler+0xce>
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	2b28      	cmp	r3, #40	; 0x28
 8003884:	d106      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b21      	cmp	r3, #33	; 0x21
 800388a:	d103      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f001 f869 	bl	8004964 <I2C_Slave_AF>
 8003892:	e016      	b.n	80038c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038a6:	7efb      	ldrb	r3, [r7, #27]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d002      	beq.n	80038b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80038ac:	7efb      	ldrb	r3, [r7, #27]
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d107      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	0adb      	lsrs	r3, r3, #11
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00e      	beq.n	80038ec <HAL_I2C_ER_IRQHandler+0x12e>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f043 0308 	orr.w	r3, r3, #8
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80038ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f001 f8a0 	bl	8004a44 <I2C_ITError>
  }
}
 8003904:	bf00      	nop
 8003906:	3728      	adds	r7, #40	; 0x28
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
 8003968:	4613      	mov	r3, r2
 800396a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d150      	bne.n	8003aa4 <I2C_MasterTransmit_TXE+0xc8>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b21      	cmp	r3, #33	; 0x21
 8003a06:	d14d      	bne.n	8003aa4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d01d      	beq.n	8003a4a <I2C_MasterTransmit_TXE+0x6e>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d01a      	beq.n	8003a4a <I2C_MasterTransmit_TXE+0x6e>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a1a:	d016      	beq.n	8003a4a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2211      	movs	r2, #17
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff62 	bl	800390c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a48:	e060      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a58:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a68:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d107      	bne.n	8003a94 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff7d 	bl	800398c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a92:	e03b      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff35 	bl	800390c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aa2:	e033      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b21      	cmp	r3, #33	; 0x21
 8003aa8:	d005      	beq.n	8003ab6 <I2C_MasterTransmit_TXE+0xda>
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d12d      	bne.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b22      	cmp	r3, #34	; 0x22
 8003ab4:	d12a      	bne.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d108      	bne.n	8003ad2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ad0:	e01c      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d103      	bne.n	8003ae6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f88e 	bl	8003c00 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ae4:	e012      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b0a:	e7ff      	b.n	8003b0c <I2C_MasterTransmit_TXE+0x130>
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b21      	cmp	r3, #33	; 0x21
 8003b2c:	d164      	bne.n	8003bf8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b5c:	e04c      	b.n	8003bf8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d01d      	beq.n	8003ba0 <I2C_MasterTransmit_BTF+0x8c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d01a      	beq.n	8003ba0 <I2C_MasterTransmit_BTF+0x8c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b70:	d016      	beq.n	8003ba0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2211      	movs	r2, #17
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff feb7 	bl	800390c <HAL_I2C_MasterTxCpltCallback>
}
 8003b9e:	e02b      	b.n	8003bf8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d107      	bne.n	8003bea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fed2 	bl	800398c <HAL_I2C_MemTxCpltCallback>
}
 8003be8:	e006      	b.n	8003bf8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe8a 	bl	800390c <HAL_I2C_MasterTxCpltCallback>
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11d      	bne.n	8003c54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10b      	bne.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	1c9a      	adds	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c36:	e073      	b.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	121b      	asrs	r3, r3, #8
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c52:	e065      	b.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10b      	bne.n	8003c74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c72:	e055      	b.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d151      	bne.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b22      	cmp	r3, #34	; 0x22
 8003c80:	d10d      	bne.n	8003c9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c9c:	e040      	b.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b21      	cmp	r3, #33	; 0x21
 8003cac:	d112      	bne.n	8003cd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd2:	e025      	b.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d120      	bne.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b21      	cmp	r3, #33	; 0x21
 8003ce2:	d11d      	bne.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fe36 	bl	800398c <HAL_I2C_MemTxCpltCallback>
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b22      	cmp	r3, #34	; 0x22
 8003d3a:	f040 80ac 	bne.w	8003e96 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d921      	bls.n	8003d90 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	f040 808c 	bne.w	8003e96 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d8e:	e082      	b.n	8003e96 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d075      	beq.n	8003e84 <I2C_MasterReceive_RXNE+0x15c>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <I2C_MasterReceive_RXNE+0x7c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d16f      	bne.n	8003e84 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f001 fa15 	bl	80051d4 <I2C_WaitOnSTOPRequestThroughIT>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d142      	bne.n	8003e36 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d10a      	bne.n	8003e20 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fdc1 	bl	80039a0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e1e:	e03a      	b.n	8003e96 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2212      	movs	r2, #18
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fd76 	bl	8003920 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e34:	e02f      	b.n	8003e96 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e44:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fd99 	bl	80039b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e82:	e008      	b.n	8003e96 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	605a      	str	r2, [r3, #4]
}
 8003e94:	e7ff      	b.n	8003e96 <I2C_MasterReceive_RXNE+0x16e>
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d11b      	bne.n	8003eee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003eec:	e0bd      	b.n	800406a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d129      	bne.n	8003f4c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d00a      	beq.n	8003f24 <I2C_MasterReceive_BTF+0x86>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d007      	beq.n	8003f24 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f4a:	e08e      	b.n	800406a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d176      	bne.n	8004044 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d002      	beq.n	8003f62 <I2C_MasterReceive_BTF+0xc4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d108      	bne.n	8003f74 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e019      	b.n	8003fa8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <I2C_MasterReceive_BTF+0xe2>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d108      	bne.n	8003f92 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e00a      	b.n	8003fa8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d007      	beq.n	8003fa8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004002:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d10a      	bne.n	800402e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fcba 	bl	80039a0 <HAL_I2C_MemRxCpltCallback>
}
 800402c:	e01d      	b.n	800406a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2212      	movs	r2, #18
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fc6f 	bl	8003920 <HAL_I2C_MasterRxCpltCallback>
}
 8004042:	e012      	b.n	800406a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d117      	bne.n	80040b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800409e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040a0:	e067      	b.n	8004172 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
}
 80040b4:	e05d      	b.n	8004172 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040be:	d133      	bne.n	8004128 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b21      	cmp	r3, #33	; 0x21
 80040ca:	d109      	bne.n	80040e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	e008      	b.n	80040f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <I2C_Master_SB+0x92>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d032      	beq.n	8004172 <I2C_Master_SB+0x100>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02d      	beq.n	8004172 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004124:	605a      	str	r2, [r3, #4]
}
 8004126:	e024      	b.n	8004172 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10e      	bne.n	800414e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	b29b      	uxth	r3, r3
 8004136:	11db      	asrs	r3, r3, #7
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 0306 	and.w	r3, r3, #6
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f063 030f 	orn	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]
}
 800414c:	e011      	b.n	8004172 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10d      	bne.n	8004172 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	b29b      	uxth	r3, r3
 800415c:	11db      	asrs	r3, r3, #7
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0306 	and.w	r3, r3, #6
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f063 030e 	orn	r3, r3, #14
 800416a:	b2da      	uxtb	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <I2C_Master_ADD10+0x26>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00c      	beq.n	80041c6 <I2C_Master_ADD10+0x48>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c4:	605a      	str	r2, [r3, #4]
  }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b091      	sub	sp, #68	; 0x44
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b22      	cmp	r3, #34	; 0x22
 80041fa:	f040 8169 	bne.w	80044d0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <I2C_Master_ADDR+0x54>
 8004206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d10b      	bne.n	8004226 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420e:	2300      	movs	r3, #0
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	e160      	b.n	80044e8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11d      	bne.n	800426a <I2C_Master_ADDR+0x98>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004236:	d118      	bne.n	800426a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	651a      	str	r2, [r3, #80]	; 0x50
 8004268:	e13e      	b.n	80044e8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e115      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 808a 	bne.w	80043bc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ae:	d137      	bne.n	8004320 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d113      	bne.n	80042f8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	e0e7      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e0d3      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2b08      	cmp	r3, #8
 8004324:	d02e      	beq.n	8004384 <I2C_Master_ADDR+0x1b2>
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2b20      	cmp	r3, #32
 800432a:	d02b      	beq.n	8004384 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	2b12      	cmp	r3, #18
 8004330:	d102      	bne.n	8004338 <I2C_Master_ADDR+0x166>
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b01      	cmp	r3, #1
 8004336:	d125      	bne.n	8004384 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	2b04      	cmp	r3, #4
 800433c:	d00e      	beq.n	800435c <I2C_Master_ADDR+0x18a>
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b02      	cmp	r3, #2
 8004342:	d00b      	beq.n	800435c <I2C_Master_ADDR+0x18a>
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b10      	cmp	r3, #16
 8004348:	d008      	beq.n	800435c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e007      	b.n	800436c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	e0a1      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e085      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d14d      	bne.n	8004462 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d016      	beq.n	80043fa <I2C_Master_ADDR+0x228>
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d013      	beq.n	80043fa <I2C_Master_ADDR+0x228>
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d010      	beq.n	80043fa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e007      	b.n	800440a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004408:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d117      	bne.n	800444a <I2C_Master_ADDR+0x278>
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004420:	d00b      	beq.n	800443a <I2C_Master_ADDR+0x268>
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	2b01      	cmp	r3, #1
 8004426:	d008      	beq.n	800443a <I2C_Master_ADDR+0x268>
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	2b08      	cmp	r3, #8
 800442c:	d005      	beq.n	800443a <I2C_Master_ADDR+0x268>
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	2b10      	cmp	r3, #16
 8004432:	d002      	beq.n	800443a <I2C_Master_ADDR+0x268>
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2b20      	cmp	r3, #32
 8004438:	d107      	bne.n	800444a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004448:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	e032      	b.n	80044c8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004470:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004480:	d117      	bne.n	80044b2 <I2C_Master_ADDR+0x2e0>
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004488:	d00b      	beq.n	80044a2 <I2C_Master_ADDR+0x2d0>
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	2b01      	cmp	r3, #1
 800448e:	d008      	beq.n	80044a2 <I2C_Master_ADDR+0x2d0>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	2b08      	cmp	r3, #8
 8004494:	d005      	beq.n	80044a2 <I2C_Master_ADDR+0x2d0>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	2b10      	cmp	r3, #16
 800449a:	d002      	beq.n	80044a2 <I2C_Master_ADDR+0x2d0>
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d107      	bne.n	80044b2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80044ce:	e00b      	b.n	80044e8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	e7ff      	b.n	80044e8 <I2C_Master_ADDR+0x316>
 80044e8:	bf00      	nop
 80044ea:	3744      	adds	r7, #68	; 0x44
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02b      	beq.n	8004566 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d114      	bne.n	8004566 <I2C_SlaveTransmit_TXE+0x72>
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b29      	cmp	r3, #41	; 0x29
 8004540:	d111      	bne.n	8004566 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004550:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2228      	movs	r2, #40	; 0x28
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff f9e7 	bl	8003934 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02c      	beq.n	8004624 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d114      	bne.n	8004624 <I2C_SlaveReceive_RXNE+0x74>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b2a      	cmp	r3, #42	; 0x2a
 80045fe:	d111      	bne.n	8004624 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2222      	movs	r2, #34	; 0x22
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2228      	movs	r2, #40	; 0x28
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff f992 	bl	8003948 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d012      	beq.n	8004664 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800468a:	2b28      	cmp	r3, #40	; 0x28
 800468c:	d127      	bne.n	80046de <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	09db      	lsrs	r3, r3, #7
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	81bb      	strh	r3, [r7, #12]
 80046c0:	e002      	b.n	80046c8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80046d0:	89ba      	ldrh	r2, [r7, #12]
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff f940 	bl	800395c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046dc:	e00e      	b.n	80046fc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004722:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004760:	d172      	bne.n	8004848 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b22      	cmp	r3, #34	; 0x22
 8004766:	d002      	beq.n	800476e <I2C_Slave_STOPF+0x6a>
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d135      	bne.n	80047da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f923 	bl	80029f2 <HAL_DMA_GetState>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d049      	beq.n	8004846 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4a69      	ldr	r2, [pc, #420]	; (800495c <I2C_Slave_STOPF+0x258>)
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe f8f5 	bl	80029ae <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03d      	beq.n	8004846 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d8:	e035      	b.n	8004846 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe f8ed 	bl	80029f2 <HAL_DMA_GetState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d014      	beq.n	8004848 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	4a4e      	ldr	r2, [pc, #312]	; (800495c <I2C_Slave_STOPF+0x258>)
 8004824:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe f8bf 	bl	80029ae <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	e000      	b.n	8004848 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004846:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03e      	beq.n	80048d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d112      	bne.n	8004886 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d112      	bne.n	80048ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8b3 	bl	8004a44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80048de:	e039      	b.n	8004954 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b2a      	cmp	r3, #42	; 0x2a
 80048e4:	d109      	bne.n	80048fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2228      	movs	r2, #40	; 0x28
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff f827 	bl	8003948 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b28      	cmp	r3, #40	; 0x28
 8004904:	d111      	bne.n	800492a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <I2C_Slave_STOPF+0x25c>)
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff f828 	bl	8003978 <HAL_I2C_ListenCpltCallback>
}
 8004928:	e014      	b.n	8004954 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	2b22      	cmp	r3, #34	; 0x22
 8004930:	d002      	beq.n	8004938 <I2C_Slave_STOPF+0x234>
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b22      	cmp	r3, #34	; 0x22
 8004936:	d10d      	bne.n	8004954 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fe fffa 	bl	8003948 <HAL_I2C_SlaveRxCpltCallback>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08004dd5 	.word	0x08004dd5
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d002      	beq.n	8004986 <I2C_Slave_AF+0x22>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b20      	cmp	r3, #32
 8004984:	d129      	bne.n	80049da <I2C_Slave_AF+0x76>
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b28      	cmp	r3, #40	; 0x28
 800498a:	d126      	bne.n	80049da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <I2C_Slave_AF+0xdc>)
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fe ffd0 	bl	8003978 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80049d8:	e02e      	b.n	8004a38 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b21      	cmp	r3, #33	; 0x21
 80049de:	d126      	bne.n	8004a2e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <I2C_Slave_AF+0xdc>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a24:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe ff84 	bl	8003934 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a2c:	e004      	b.n	8004a38 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a36:	615a      	str	r2, [r3, #20]
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	ffff0000 	.word	0xffff0000

08004a44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d002      	beq.n	8004a68 <I2C_ITError+0x24>
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d10a      	bne.n	8004a7e <I2C_ITError+0x3a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	d107      	bne.n	8004a7e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a84:	2b28      	cmp	r3, #40	; 0x28
 8004a86:	d107      	bne.n	8004a98 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2228      	movs	r2, #40	; 0x28
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a96:	e015      	b.n	8004ac4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d00a      	beq.n	8004abe <I2C_ITError+0x7a>
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b60      	cmp	r3, #96	; 0x60
 8004aac:	d007      	beq.n	8004abe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d162      	bne.n	8004b9a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d020      	beq.n	8004b34 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	4a6a      	ldr	r2, [pc, #424]	; (8004ca0 <I2C_ITError+0x25c>)
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd ff55 	bl	80029ae <HAL_DMA_Abort_IT>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8089 	beq.w	8004c1e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4798      	blx	r3
 8004b32:	e074      	b.n	8004c1e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	4a59      	ldr	r2, [pc, #356]	; (8004ca0 <I2C_ITError+0x25c>)
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd ff34 	bl	80029ae <HAL_DMA_Abort_IT>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d068      	beq.n	8004c1e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d10b      	bne.n	8004b72 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b94:	4610      	mov	r0, r2
 8004b96:	4798      	blx	r3
 8004b98:	e041      	b.n	8004c1e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b60      	cmp	r3, #96	; 0x60
 8004ba4:	d125      	bne.n	8004bf2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d10b      	bne.n	8004bda <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe feec 	bl	80039c8 <HAL_I2C_AbortCpltCallback>
 8004bf0:	e015      	b.n	8004c1e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d10b      	bne.n	8004c18 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fe fecb 	bl	80039b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d113      	bne.n	8004c98 <I2C_ITError+0x254>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b28      	cmp	r3, #40	; 0x28
 8004c74:	d110      	bne.n	8004c98 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <I2C_ITError+0x260>)
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fe fe70 	bl	8003978 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	08004dd5 	.word	0x08004dd5
 8004ca4:	ffff0000 	.word	0xffff0000

08004ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	813b      	strh	r3, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f920 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d103      	bne.n	8004d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e05f      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <I2C_RequestMemoryWrite+0x128>)
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f958 	bl	8004fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04c      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f9c2 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02b      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e021      	b.n	8004dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f99c 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d107      	bne.n	8004db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e005      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dba:	893b      	ldrh	r3, [r7, #8]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	00010002 	.word	0x00010002

08004dd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dee:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <I2C_DMAAbort+0x148>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <I2C_DMAAbort+0x14c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a1a      	lsrs	r2, r3, #8
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	00da      	lsls	r2, r3, #3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e1a:	e00a      	b.n	8004e32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d0ea      	beq.n	8004e08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	2200      	movs	r2, #0
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	2200      	movs	r2, #0
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	2200      	movs	r2, #0
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d10e      	bne.n	8004ec2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7fe fd84 	bl	80039c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ec0:	e027      	b.n	8004f12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ec2:	7cfb      	ldrb	r3, [r7, #19]
 8004ec4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	d117      	bne.n	8004efc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2228      	movs	r2, #40	; 0x28
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004efa:	e007      	b.n	8004f0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f7fe fd51 	bl	80039b4 <HAL_I2C_ErrorCallback>
}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	14f8b589 	.word	0x14f8b589

08004f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f34:	e025      	b.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d021      	beq.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fd f913 	bl	8002168 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d116      	bne.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e023      	b.n	8004fca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d10d      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	43da      	mvns	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	e00c      	b.n	8004fc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0b6      	beq.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe0:	e051      	b.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d123      	bne.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800500a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e046      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d021      	beq.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fd f891 	bl	8002168 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d116      	bne.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e020      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10c      	bne.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e00b      	b.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	43da      	mvns	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d18d      	bne.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050dc:	e02d      	b.n	800513a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f8aa 	bl	8005238 <I2C_IsAcknowledgeFailed>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e02d      	b.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d021      	beq.n	800513a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fd f837 	bl	8002168 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d116      	bne.n	800513a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e007      	b.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d1ca      	bne.n	80050de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800515e:	e02d      	b.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f869 	bl	8005238 <I2C_IsAcknowledgeFailed>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e02d      	b.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d021      	beq.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005178:	f7fc fff6 	bl	8002168 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	429a      	cmp	r2, r3
 8005186:	d302      	bcc.n	800518e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e007      	b.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d1ca      	bne.n	8005160 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	4a13      	ldr	r2, [pc, #76]	; (8005234 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	0a1a      	lsrs	r2, r3, #8
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e008      	b.n	8005224 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d0e9      	beq.n	80051f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	20000000 	.word	0x20000000
 8005234:	14f8b589 	.word	0x14f8b589

08005238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524e:	d11b      	bne.n	8005288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0204 	orr.w	r2, r3, #4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052a6:	d103      	bne.n	80052b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052ae:	e007      	b.n	80052c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052b8:	d102      	bne.n	80052c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e267      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d075      	beq.n	80053d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ea:	4b88      	ldr	r3, [pc, #544]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d00c      	beq.n	8005310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4b85      	ldr	r3, [pc, #532]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d112      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005302:	4b82      	ldr	r3, [pc, #520]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530e:	d10b      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4b7e      	ldr	r3, [pc, #504]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05b      	beq.n	80053d4 <HAL_RCC_OscConfig+0x108>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d157      	bne.n	80053d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e242      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0x74>
 8005332:	4b76      	ldr	r3, [pc, #472]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a75      	ldr	r2, [pc, #468]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x98>
 800534a:	4b70      	ldr	r3, [pc, #448]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6f      	ldr	r2, [pc, #444]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b6d      	ldr	r3, [pc, #436]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6c      	ldr	r2, [pc, #432]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005364:	4b69      	ldr	r3, [pc, #420]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a68      	ldr	r2, [pc, #416]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b66      	ldr	r3, [pc, #408]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a65      	ldr	r2, [pc, #404]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fc fef0 	bl	8002168 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fc feec 	bl	8002168 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e207      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b5b      	ldr	r3, [pc, #364]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xc0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fc fedc 	bl	8002168 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fed8 	bl	8002168 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1f3      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c6:	4b51      	ldr	r3, [pc, #324]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0xe8>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d063      	beq.n	80054aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e2:	4b4a      	ldr	r3, [pc, #296]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ee:	4b47      	ldr	r3, [pc, #284]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d11c      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fa:	4b44      	ldr	r3, [pc, #272]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005406:	4b41      	ldr	r3, [pc, #260]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e1c7      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b3b      	ldr	r3, [pc, #236]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4937      	ldr	r1, [pc, #220]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	e03a      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543c:	4b34      	ldr	r3, [pc, #208]	; (8005510 <HAL_RCC_OscConfig+0x244>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fe91 	bl	8002168 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800544a:	f7fc fe8d 	bl	8002168 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e1a8      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545c:	4b2b      	ldr	r3, [pc, #172]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4925      	ldr	r1, [pc, #148]	; (800550c <HAL_RCC_OscConfig+0x240>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
 800547c:	e015      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <HAL_RCC_OscConfig+0x244>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fc fe70 	bl	8002168 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548c:	f7fc fe6c 	bl	8002168 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e187      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d036      	beq.n	8005524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <HAL_RCC_OscConfig+0x248>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fc fe50 	bl	8002168 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054cc:	f7fc fe4c 	bl	8002168 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e167      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_OscConfig+0x240>)
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x200>
 80054ea:	e01b      	b.n	8005524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_OscConfig+0x248>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f2:	f7fc fe39 	bl	8002168 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	e00e      	b.n	8005518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fa:	f7fc fe35 	bl	8002168 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d907      	bls.n	8005518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e150      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
 800550c:	40023800 	.word	0x40023800
 8005510:	42470000 	.word	0x42470000
 8005514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005518:	4b88      	ldr	r3, [pc, #544]	; (800573c <HAL_RCC_OscConfig+0x470>)
 800551a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ea      	bne.n	80054fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8097 	beq.w	8005660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005536:	4b81      	ldr	r3, [pc, #516]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	4b7d      	ldr	r3, [pc, #500]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	4a7c      	ldr	r2, [pc, #496]	; (800573c <HAL_RCC_OscConfig+0x470>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6413      	str	r3, [r2, #64]	; 0x40
 8005552:	4b7a      	ldr	r3, [pc, #488]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005562:	4b77      	ldr	r3, [pc, #476]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556e:	4b74      	ldr	r3, [pc, #464]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a73      	ldr	r2, [pc, #460]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fc fdf5 	bl	8002168 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fc fdf1 	bl	8002168 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e10c      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <HAL_RCC_OscConfig+0x2ea>
 80055a8:	4b64      	ldr	r3, [pc, #400]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a63      	ldr	r2, [pc, #396]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
 80055b4:	e01c      	b.n	80055f0 <HAL_RCC_OscConfig+0x324>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x30c>
 80055be:	4b5f      	ldr	r3, [pc, #380]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	4a5e      	ldr	r2, [pc, #376]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055c4:	f043 0304 	orr.w	r3, r3, #4
 80055c8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ca:	4b5c      	ldr	r3, [pc, #368]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	4a5b      	ldr	r2, [pc, #364]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6713      	str	r3, [r2, #112]	; 0x70
 80055d6:	e00b      	b.n	80055f0 <HAL_RCC_OscConfig+0x324>
 80055d8:	4b58      	ldr	r3, [pc, #352]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	4a57      	ldr	r2, [pc, #348]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6713      	str	r3, [r2, #112]	; 0x70
 80055e4:	4b55      	ldr	r3, [pc, #340]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	4a54      	ldr	r2, [pc, #336]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 0304 	bic.w	r3, r3, #4
 80055ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fc fdb6 	bl	8002168 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f7fc fdb2 	bl	8002168 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0cb      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005616:	4b49      	ldr	r3, [pc, #292]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ee      	beq.n	8005600 <HAL_RCC_OscConfig+0x334>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005624:	f7fc fda0 	bl	8002168 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562a:	e00a      	b.n	8005642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562c:	f7fc fd9c 	bl	8002168 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e0b5      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1ee      	bne.n	800562c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d105      	bne.n	8005660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	4a38      	ldr	r2, [pc, #224]	; (800573c <HAL_RCC_OscConfig+0x470>)
 800565a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a1 	beq.w	80057ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <HAL_RCC_OscConfig+0x470>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b08      	cmp	r3, #8
 8005674:	d05c      	beq.n	8005730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d141      	bne.n	8005702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_OscConfig+0x478>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fc fd70 	bl	8002168 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568c:	f7fc fd6c 	bl	8002168 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e087      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	4b27      	ldr	r3, [pc, #156]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	491b      	ldr	r1, [pc, #108]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_RCC_OscConfig+0x478>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fc fd45 	bl	8002168 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fc fd41 	bl	8002168 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e05c      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f4:	4b11      	ldr	r3, [pc, #68]	; (800573c <HAL_RCC_OscConfig+0x470>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x416>
 8005700:	e054      	b.n	80057ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCC_OscConfig+0x478>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fc fd2e 	bl	8002168 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005710:	f7fc fd2a 	bl	8002168 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e045      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCC_OscConfig+0x470>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x444>
 800572e:	e03d      	b.n	80057ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d107      	bne.n	8005748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e038      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
 800573c:	40023800 	.word	0x40023800
 8005740:	40007000 	.word	0x40007000
 8005744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCC_OscConfig+0x4ec>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d028      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d121      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576e:	429a      	cmp	r2, r3
 8005770:	d11a      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800577e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005780:	4293      	cmp	r3, r2
 8005782:	d111      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	3b01      	subs	r3, #1
 8005792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800

080057bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0cc      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d90c      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b65      	ldr	r3, [pc, #404]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b63      	ldr	r3, [pc, #396]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0b8      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a58      	ldr	r2, [pc, #352]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800581a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005828:	4b53      	ldr	r3, [pc, #332]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005834:	4b50      	ldr	r3, [pc, #320]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	494d      	ldr	r1, [pc, #308]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d044      	beq.n	80058dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d107      	bne.n	800586a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b47      	ldr	r3, [pc, #284]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e07f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005876:	2b03      	cmp	r3, #3
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e06f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e067      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4934      	ldr	r1, [pc, #208]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ac:	f7fc fc5c 	bl	8002168 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fc fc58 	bl	8002168 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e04f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 020c 	and.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1eb      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b25      	ldr	r3, [pc, #148]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d20c      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b22      	ldr	r3, [pc, #136]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e032      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4916      	ldr	r1, [pc, #88]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	490e      	ldr	r1, [pc, #56]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005942:	f000 f821 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005946:	4602      	mov	r2, r0
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	490a      	ldr	r1, [pc, #40]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc fbbc 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40023c00 	.word	0x40023c00
 8005978:	40023800 	.word	0x40023800
 800597c:	080085f8 	.word	0x080085f8
 8005980:	20000000 	.word	0x20000000
 8005984:	20000004 	.word	0x20000004

08005988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800598c:	b090      	sub	sp, #64	; 0x40
 800598e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	2300      	movs	r3, #0
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a0:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d00d      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x40>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	f200 80a1 	bhi.w	8005af4 <HAL_RCC_GetSysClockFreq+0x16c>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x34>
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d003      	beq.n	80059c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ba:	e09b      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059bc:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x184>)
 80059be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80059c0:	e09b      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059c2:	4b53      	ldr	r3, [pc, #332]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x188>)
 80059c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059c6:	e098      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c8:	4b4f      	ldr	r3, [pc, #316]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059d2:	4b4d      	ldr	r3, [pc, #308]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d028      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059de:	4b4a      	ldr	r3, [pc, #296]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	2200      	movs	r2, #0
 80059e6:	623b      	str	r3, [r7, #32]
 80059e8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059f0:	2100      	movs	r1, #0
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x188>)
 80059f4:	fb03 f201 	mul.w	r2, r3, r1
 80059f8:	2300      	movs	r3, #0
 80059fa:	fb00 f303 	mul.w	r3, r0, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	4a43      	ldr	r2, [pc, #268]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a02:	fba0 1202 	umull	r1, r2, r0, r2
 8005a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a08:	460a      	mov	r2, r1
 8005a0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a0e:	4413      	add	r3, r2
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	2200      	movs	r2, #0
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	61fa      	str	r2, [r7, #28]
 8005a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a22:	f7fa fc35 	bl	8000290 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2e:	e053      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	099b      	lsrs	r3, r3, #6
 8005a36:	2200      	movs	r2, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	617a      	str	r2, [r7, #20]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a42:	f04f 0b00 	mov.w	fp, #0
 8005a46:	4652      	mov	r2, sl
 8005a48:	465b      	mov	r3, fp
 8005a4a:	f04f 0000 	mov.w	r0, #0
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	0159      	lsls	r1, r3, #5
 8005a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a58:	0150      	lsls	r0, r2, #5
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	ebb2 080a 	subs.w	r8, r2, sl
 8005a62:	eb63 090b 	sbc.w	r9, r3, fp
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a7a:	ebb2 0408 	subs.w	r4, r2, r8
 8005a7e:	eb63 0509 	sbc.w	r5, r3, r9
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	00eb      	lsls	r3, r5, #3
 8005a8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a90:	00e2      	lsls	r2, r4, #3
 8005a92:	4614      	mov	r4, r2
 8005a94:	461d      	mov	r5, r3
 8005a96:	eb14 030a 	adds.w	r3, r4, sl
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	eb45 030b 	adc.w	r3, r5, fp
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aae:	4629      	mov	r1, r5
 8005ab0:	028b      	lsls	r3, r1, #10
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ab8:	4621      	mov	r1, r4
 8005aba:	028a      	lsls	r2, r1, #10
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	60fa      	str	r2, [r7, #12]
 8005ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005acc:	f7fa fbe0 	bl	8000290 <__aeabi_uldivmod>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af2:	e002      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3740      	adds	r7, #64	; 0x40
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	00f42400 	.word	0x00f42400
 8005b10:	017d7840 	.word	0x017d7840

08005b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000000 	.word	0x20000000

08005b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b30:	f7ff fff0 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0a9b      	lsrs	r3, r3, #10
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4903      	ldr	r1, [pc, #12]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	08008608 	.word	0x08008608

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b58:	f7ff ffdc 	bl	8005b14 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0b5b      	lsrs	r3, r3, #13
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40023800 	.word	0x40023800
 8005b78:	08008608 	.word	0x08008608

08005b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07b      	b.n	8005c86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d108      	bne.n	8005ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9e:	d009      	beq.n	8005bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
 8005ba6:	e005      	b.n	8005bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb ff02 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0104 	and.w	r1, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	f003 0210 	and.w	r2, r3, #16
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e041      	b.n	8005d24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb fed7 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f000 fbf5 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e041      	b.n	8005dc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f839 	bl	8005dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fba6 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x24>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e022      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d109      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x3e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e015      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x58>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e068      	b.n	8005f24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x82>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x92>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e70:	e00b      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e80:	e003      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fdb8 	bl	8006a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <HAL_TIM_PWM_Start+0x14c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <HAL_TIM_PWM_Start+0x14c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d018      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d013      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <HAL_TIM_PWM_Start+0x150>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00e      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <HAL_TIM_PWM_Start+0x154>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_TIM_PWM_Start+0x158>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <HAL_TIM_PWM_Start+0x15c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d010      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	e007      	b.n	8005f22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	40014000 	.word	0x40014000

08005f40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e097      	b.n	8006084 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fb fdb3 	bl	8001ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f84:	f023 0307 	bic.w	r3, r3, #7
 8005f88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f000 fa91 	bl	80064bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fe0:	f023 030c 	bic.w	r3, r3, #12
 8005fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	031b      	lsls	r3, r3, #12
 8006010:	4313      	orrs	r3, r2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4313      	orrs	r3, r2
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d110      	bne.n	80060de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d102      	bne.n	80060c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060c2:	7b7b      	ldrb	r3, [r7, #13]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d001      	beq.n	80060cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e069      	b.n	80061a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060dc:	e031      	b.n	8006142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d110      	bne.n	8006106 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ea:	7b3b      	ldrb	r3, [r7, #12]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d001      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e055      	b.n	80061a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006104:	e01d      	b.n	8006142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d108      	bne.n	800611e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006112:	7b7b      	ldrb	r3, [r7, #13]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d102      	bne.n	800611e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006118:	7b3b      	ldrb	r3, [r7, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e03e      	b.n	80061a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_TIM_Encoder_Start+0xc4>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d008      	beq.n	8006160 <HAL_TIM_Encoder_Start+0xd4>
 800614e:	e00f      	b.n	8006170 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fc55 	bl	8006a08 <TIM_CCxChannelCmd>
      break;
 800615e:	e016      	b.n	800618e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	2104      	movs	r1, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fc4d 	bl	8006a08 <TIM_CCxChannelCmd>
      break;
 800616e:	e00e      	b.n	800618e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2201      	movs	r2, #1
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fc45 	bl	8006a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	2104      	movs	r1, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fc3e 	bl	8006a08 <TIM_CCxChannelCmd>
      break;
 800618c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e0ae      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	f200 809f 	bhi.w	8006314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006315 	.word	0x08006315
 80061e4:	08006315 	.word	0x08006315
 80061e8:	08006315 	.word	0x08006315
 80061ec:	08006251 	.word	0x08006251
 80061f0:	08006315 	.word	0x08006315
 80061f4:	08006315 	.word	0x08006315
 80061f8:	08006315 	.word	0x08006315
 80061fc:	08006293 	.word	0x08006293
 8006200:	08006315 	.word	0x08006315
 8006204:	08006315 	.word	0x08006315
 8006208:	08006315 	.word	0x08006315
 800620c:	080062d3 	.word	0x080062d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f9d0 	bl	80065bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	619a      	str	r2, [r3, #24]
      break;
 800624e:	e064      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fa16 	bl	8006688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6999      	ldr	r1, [r3, #24]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	619a      	str	r2, [r3, #24]
      break;
 8006290:	e043      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fa61 	bl	8006760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0208 	orr.w	r2, r2, #8
 80062ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0204 	bic.w	r2, r2, #4
 80062bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69d9      	ldr	r1, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	61da      	str	r2, [r3, #28]
      break;
 80062d0:	e023      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 faab 	bl	8006834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69d9      	ldr	r1, [r3, #28]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	021a      	lsls	r2, r3, #8
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	61da      	str	r2, [r3, #28]
      break;
 8006312:	e002      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
      break;
 8006318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_TIM_ConfigClockSource+0x1c>
 8006344:	2302      	movs	r3, #2
 8006346:	e0b4      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x186>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800636e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006380:	d03e      	beq.n	8006400 <HAL_TIM_ConfigClockSource+0xd4>
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	f200 8087 	bhi.w	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	f000 8086 	beq.w	800649e <HAL_TIM_ConfigClockSource+0x172>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	d87f      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b70      	cmp	r3, #112	; 0x70
 800639a:	d01a      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0xa6>
 800639c:	2b70      	cmp	r3, #112	; 0x70
 800639e:	d87b      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b60      	cmp	r3, #96	; 0x60
 80063a2:	d050      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x11a>
 80063a4:	2b60      	cmp	r3, #96	; 0x60
 80063a6:	d877      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b50      	cmp	r3, #80	; 0x50
 80063aa:	d03c      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0xfa>
 80063ac:	2b50      	cmp	r3, #80	; 0x50
 80063ae:	d873      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d058      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x13a>
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d86f      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b30      	cmp	r3, #48	; 0x30
 80063ba:	d064      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x15a>
 80063bc:	2b30      	cmp	r3, #48	; 0x30
 80063be:	d86b      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d060      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d867      	bhi.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d05c      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x15a>
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d05a      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x15a>
 80063d0:	e062      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6899      	ldr	r1, [r3, #8]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f000 faf1 	bl	80069c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	609a      	str	r2, [r3, #8]
      break;
 80063fe:	e04f      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f000 fada 	bl	80069c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006422:	609a      	str	r2, [r3, #8]
      break;
 8006424:	e03c      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	461a      	mov	r2, r3
 8006434:	f000 fa4e 	bl	80068d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2150      	movs	r1, #80	; 0x50
 800643e:	4618      	mov	r0, r3
 8006440:	f000 faa7 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006444:	e02c      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	461a      	mov	r2, r3
 8006454:	f000 fa6d 	bl	8006932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2160      	movs	r1, #96	; 0x60
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fa97 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006464:	e01c      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	461a      	mov	r2, r3
 8006474:	f000 fa2e 	bl	80068d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2140      	movs	r1, #64	; 0x40
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa87 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006484:	e00c      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f000 fa7e 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006496:	e003      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	e000      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800649e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a34      	ldr	r2, [pc, #208]	; (80065a0 <TIM_Base_SetConfig+0xe4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00f      	beq.n	80064f4 <TIM_Base_SetConfig+0x38>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d00b      	beq.n	80064f4 <TIM_Base_SetConfig+0x38>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <TIM_Base_SetConfig+0xe8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d007      	beq.n	80064f4 <TIM_Base_SetConfig+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <TIM_Base_SetConfig+0xec>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <TIM_Base_SetConfig+0xf0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d108      	bne.n	8006506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <TIM_Base_SetConfig+0xe4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01b      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006514:	d017      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <TIM_Base_SetConfig+0xe8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <TIM_Base_SetConfig+0xec>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a20      	ldr	r2, [pc, #128]	; (80065ac <TIM_Base_SetConfig+0xf0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <TIM_Base_SetConfig+0xf4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1e      	ldr	r2, [pc, #120]	; (80065b4 <TIM_Base_SetConfig+0xf8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <TIM_Base_SetConfig+0xfc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <TIM_Base_SetConfig+0xe4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	615a      	str	r2, [r3, #20]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40010000 	.word	0x40010000
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800

080065bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 0302 	bic.w	r3, r3, #2
 8006604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <TIM_OC1_SetConfig+0xc8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10c      	bne.n	8006632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0308 	bic.w	r3, r3, #8
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a13      	ldr	r2, [pc, #76]	; (8006684 <TIM_OC1_SetConfig+0xc8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d111      	bne.n	800665e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	621a      	str	r2, [r3, #32]
}
 8006678:	bf00      	nop
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	40010000 	.word	0x40010000

08006688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0210 	bic.w	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0320 	bic.w	r3, r3, #32
 80066d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <TIM_OC2_SetConfig+0xd4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d10d      	bne.n	8006704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <TIM_OC2_SetConfig+0xd4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d113      	bne.n	8006734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000

08006760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0303 	bic.w	r3, r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <TIM_OC3_SetConfig+0xd0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10d      	bne.n	80067da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a14      	ldr	r2, [pc, #80]	; (8006830 <TIM_OC3_SetConfig+0xd0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d113      	bne.n	800680a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40010000 	.word	0x40010000

08006834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800687e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <TIM_OC4_SetConfig+0x9c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d109      	bne.n	80068a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40010000 	.word	0x40010000

080068d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f023 030a 	bic.w	r3, r3, #10
 8006910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006932:	b480      	push	{r7}
 8006934:	b087      	sub	sp, #28
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0210 	bic.w	r2, r3, #16
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800695c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800696e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f043 0307 	orr.w	r3, r3, #7
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	021a      	lsls	r2, r3, #8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	609a      	str	r2, [r3, #8]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e050      	b.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab8:	d013      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10c      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40014000 	.word	0x40014000

08006b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e03d      	b.n	8006bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e03f      	b.n	8006c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb f886 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2224      	movs	r2, #36	; 0x24
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd23 	bl	8007664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d130      	bne.n	8006cea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Transmit_IT+0x26>
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e029      	b.n	8006cec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Transmit_IT+0x38>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e022      	b.n	8006cec <HAL_UART_Transmit_IT+0x7e>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2221      	movs	r2, #33	; 0x21
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ce4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d11d      	bne.n	8006d4e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_UART_Receive_IT+0x26>
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e016      	b.n	8006d50 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_UART_Receive_IT+0x38>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e00f      	b.n	8006d50 <HAL_UART_Receive_IT+0x58>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fab5 	bl	80072b4 <UART_Start_Receive_IT>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d4e:	2302      	movs	r3, #2
  }
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b0ba      	sub	sp, #232	; 0xe8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
 8006daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fb99 	bl	80074ee <UART_Receive_IT>
      return;
 8006dbc:	e256      	b.n	800726c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80de 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80d1 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
 8006dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f043 0201 	orr.w	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d011      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0208 	orr.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 81ed 	beq.w	8007262 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb24 	bl	80074ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x17a>
 8006eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04f      	beq.n	8006f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa2c 	bl	8007330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d141      	bne.n	8006f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d9      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	4a7d      	ldr	r2, [pc, #500]	; (8007134 <HAL_UART_IRQHandler+0x3dc>)
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fb fd31 	bl	80029ae <HAL_DMA_Abort_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	e00e      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f990 	bl	8007288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	e00a      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f98c 	bl	8007288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e006      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f988 	bl	8007288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f7e:	e170      	b.n	8007262 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	bf00      	nop
    return;
 8006f82:	e16e      	b.n	8007262 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f040 814a 	bne.w	8007222 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8143 	beq.w	8007222 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 813c 	beq.w	8007222 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	f040 80b4 	bne.w	8007138 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8140 	beq.w	8007266 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f080 8139 	bcs.w	8007266 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	f000 8088 	beq.w	800711a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	330c      	adds	r3, #12
 8007010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800703a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800704e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d9      	bne.n	800700a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800707a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800707e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800708c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e1      	bne.n	8007056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ea:	f023 0310 	bic.w	r3, r3, #16
 80070ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80070fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e3      	bne.n	80070d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	4618      	mov	r0, r3
 8007116:	f7fb fbda 	bl	80028ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007122:	b29b      	uxth	r3, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	b29b      	uxth	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8b6 	bl	800729c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007130:	e099      	b.n	8007266 <HAL_UART_IRQHandler+0x50e>
 8007132:	bf00      	nop
 8007134:	080073f7 	.word	0x080073f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007140:	b29b      	uxth	r3, r3
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 808b 	beq.w	800726a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8086 	beq.w	800726a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007182:	647a      	str	r2, [r7, #68]	; 0x44
 8007184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e3      	bne.n	800715e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	623b      	str	r3, [r7, #32]
   return(result);
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071ba:	633a      	str	r2, [r7, #48]	; 0x30
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e3      	bne.n	8007196 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	69b9      	ldr	r1, [r7, #24]
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	617b      	str	r3, [r7, #20]
   return(result);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f83e 	bl	800729c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007220:	e023      	b.n	800726a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_UART_IRQHandler+0x4ea>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8ef 	bl	800741e <UART_Transmit_IT>
    return;
 8007240:	e014      	b.n	800726c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00e      	beq.n	800726c <HAL_UART_IRQHandler+0x514>
 800724e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f92f 	bl	80074be <UART_EndTransmit_IT>
    return;
 8007260:	e004      	b.n	800726c <HAL_UART_IRQHandler+0x514>
    return;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_UART_IRQHandler+0x514>
      return;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_UART_IRQHandler+0x514>
      return;
 800726a:	bf00      	nop
  }
}
 800726c:	37e8      	adds	r7, #232	; 0xe8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	88fa      	ldrh	r2, [r7, #6]
 80072d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2222      	movs	r2, #34	; 0x22
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007300:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695a      	ldr	r2, [r3, #20]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0220 	orr.w	r2, r2, #32
 8007320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b095      	sub	sp, #84	; 0x54
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800734e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007358:	643a      	str	r2, [r7, #64]	; 0x40
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800735e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	61fb      	str	r3, [r7, #28]
   return(result);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	64bb      	str	r3, [r7, #72]	; 0x48
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d119      	bne.n	80073dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f023 0310 	bic.w	r3, r3, #16
 80073be:	647b      	str	r3, [r7, #68]	; 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073c8:	61ba      	str	r2, [r7, #24]
 80073ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6979      	ldr	r1, [r7, #20]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073ea:	bf00      	nop
 80073ec:	3754      	adds	r7, #84	; 0x54
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff ff39 	bl	8007288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b21      	cmp	r3, #33	; 0x21
 8007430:	d13e      	bne.n	80074b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743a:	d114      	bne.n	8007466 <UART_Transmit_IT+0x48>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d110      	bne.n	8007466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	1c9a      	adds	r2, r3, #2
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	621a      	str	r2, [r3, #32]
 8007464:	e008      	b.n	8007478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6211      	str	r1, [r2, #32]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4619      	mov	r1, r3
 8007486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10f      	bne.n	80074ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800749a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fec8 	bl	8007274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08c      	sub	sp, #48	; 0x30
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b22      	cmp	r3, #34	; 0x22
 8007500:	f040 80ab 	bne.w	800765a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d117      	bne.n	800753e <UART_Receive_IT+0x50>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d113      	bne.n	800753e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752c:	b29a      	uxth	r2, r3
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	1c9a      	adds	r2, r3, #2
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
 800753c:	e026      	b.n	800758c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007550:	d007      	beq.n	8007562 <UART_Receive_IT+0x74>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <UART_Receive_IT+0x82>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e008      	b.n	8007582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757c:	b2da      	uxtb	r2, r3
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4619      	mov	r1, r3
 800759a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800759c:	2b00      	cmp	r3, #0
 800759e:	d15a      	bne.n	8007656 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0220 	bic.w	r2, r2, #32
 80075ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d135      	bne.n	800764c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	613b      	str	r3, [r7, #16]
   return(result);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f023 0310 	bic.w	r3, r3, #16
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007606:	623a      	str	r2, [r7, #32]
 8007608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	69f9      	ldr	r1, [r7, #28]
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	61bb      	str	r3, [r7, #24]
   return(result);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d10a      	bne.n	800763e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fe29 	bl	800729c <HAL_UARTEx_RxEventCallback>
 800764a:	e002      	b.n	8007652 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fa fcc3 	bl	8001fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e002      	b.n	800765c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e000      	b.n	800765c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800765a:	2302      	movs	r3, #2
  }
}
 800765c:	4618      	mov	r0, r3
 800765e:	3730      	adds	r7, #48	; 0x30
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007668:	b0c0      	sub	sp, #256	; 0x100
 800766a:	af00      	add	r7, sp, #0
 800766c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	68d9      	ldr	r1, [r3, #12]
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	ea40 0301 	orr.w	r3, r0, r1
 800768c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	431a      	orrs	r2, r3
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076bc:	f021 010c 	bic.w	r1, r1, #12
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076ca:	430b      	orrs	r3, r1
 80076cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076de:	6999      	ldr	r1, [r3, #24]
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	ea40 0301 	orr.w	r3, r0, r1
 80076ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b8f      	ldr	r3, [pc, #572]	; (8007930 <UART_SetConfig+0x2cc>)
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d005      	beq.n	8007704 <UART_SetConfig+0xa0>
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b8d      	ldr	r3, [pc, #564]	; (8007934 <UART_SetConfig+0x2d0>)
 8007700:	429a      	cmp	r2, r3
 8007702:	d104      	bne.n	800770e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007704:	f7fe fa26 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8007708:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800770c:	e003      	b.n	8007716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800770e:	f7fe fa0d 	bl	8005b2c <HAL_RCC_GetPCLK1Freq>
 8007712:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007720:	f040 810c 	bne.w	800793c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007728:	2200      	movs	r2, #0
 800772a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800772e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007736:	4622      	mov	r2, r4
 8007738:	462b      	mov	r3, r5
 800773a:	1891      	adds	r1, r2, r2
 800773c:	65b9      	str	r1, [r7, #88]	; 0x58
 800773e:	415b      	adcs	r3, r3
 8007740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007746:	4621      	mov	r1, r4
 8007748:	eb12 0801 	adds.w	r8, r2, r1
 800774c:	4629      	mov	r1, r5
 800774e:	eb43 0901 	adc.w	r9, r3, r1
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800775e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007766:	4690      	mov	r8, r2
 8007768:	4699      	mov	r9, r3
 800776a:	4623      	mov	r3, r4
 800776c:	eb18 0303 	adds.w	r3, r8, r3
 8007770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007774:	462b      	mov	r3, r5
 8007776:	eb49 0303 	adc.w	r3, r9, r3
 800777a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800778a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800778e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007792:	460b      	mov	r3, r1
 8007794:	18db      	adds	r3, r3, r3
 8007796:	653b      	str	r3, [r7, #80]	; 0x50
 8007798:	4613      	mov	r3, r2
 800779a:	eb42 0303 	adc.w	r3, r2, r3
 800779e:	657b      	str	r3, [r7, #84]	; 0x54
 80077a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077a8:	f7f8 fd72 	bl	8000290 <__aeabi_uldivmod>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4b61      	ldr	r3, [pc, #388]	; (8007938 <UART_SetConfig+0x2d4>)
 80077b2:	fba3 2302 	umull	r2, r3, r3, r2
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	011c      	lsls	r4, r3, #4
 80077ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	1891      	adds	r1, r2, r2
 80077d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80077d4:	415b      	adcs	r3, r3
 80077d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077dc:	4641      	mov	r1, r8
 80077de:	eb12 0a01 	adds.w	sl, r2, r1
 80077e2:	4649      	mov	r1, r9
 80077e4:	eb43 0b01 	adc.w	fp, r3, r1
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077fc:	4692      	mov	sl, r2
 80077fe:	469b      	mov	fp, r3
 8007800:	4643      	mov	r3, r8
 8007802:	eb1a 0303 	adds.w	r3, sl, r3
 8007806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800780a:	464b      	mov	r3, r9
 800780c:	eb4b 0303 	adc.w	r3, fp, r3
 8007810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007820:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007828:	460b      	mov	r3, r1
 800782a:	18db      	adds	r3, r3, r3
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
 800782e:	4613      	mov	r3, r2
 8007830:	eb42 0303 	adc.w	r3, r2, r3
 8007834:	647b      	str	r3, [r7, #68]	; 0x44
 8007836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800783a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800783e:	f7f8 fd27 	bl	8000290 <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4611      	mov	r1, r2
 8007848:	4b3b      	ldr	r3, [pc, #236]	; (8007938 <UART_SetConfig+0x2d4>)
 800784a:	fba3 2301 	umull	r2, r3, r3, r1
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	2264      	movs	r2, #100	; 0x64
 8007852:	fb02 f303 	mul.w	r3, r2, r3
 8007856:	1acb      	subs	r3, r1, r3
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800785e:	4b36      	ldr	r3, [pc, #216]	; (8007938 <UART_SetConfig+0x2d4>)
 8007860:	fba3 2302 	umull	r2, r3, r3, r2
 8007864:	095b      	lsrs	r3, r3, #5
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800786c:	441c      	add	r4, r3
 800786e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007872:	2200      	movs	r2, #0
 8007874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800787c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	1891      	adds	r1, r2, r2
 8007886:	63b9      	str	r1, [r7, #56]	; 0x38
 8007888:	415b      	adcs	r3, r3
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007890:	4641      	mov	r1, r8
 8007892:	1851      	adds	r1, r2, r1
 8007894:	6339      	str	r1, [r7, #48]	; 0x30
 8007896:	4649      	mov	r1, r9
 8007898:	414b      	adcs	r3, r1
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078a8:	4659      	mov	r1, fp
 80078aa:	00cb      	lsls	r3, r1, #3
 80078ac:	4651      	mov	r1, sl
 80078ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078b2:	4651      	mov	r1, sl
 80078b4:	00ca      	lsls	r2, r1, #3
 80078b6:	4610      	mov	r0, r2
 80078b8:	4619      	mov	r1, r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	4642      	mov	r2, r8
 80078be:	189b      	adds	r3, r3, r2
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c4:	464b      	mov	r3, r9
 80078c6:	460a      	mov	r2, r1
 80078c8:	eb42 0303 	adc.w	r3, r2, r3
 80078cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078e4:	460b      	mov	r3, r1
 80078e6:	18db      	adds	r3, r3, r3
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ea:	4613      	mov	r3, r2
 80078ec:	eb42 0303 	adc.w	r3, r2, r3
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078fa:	f7f8 fcc9 	bl	8000290 <__aeabi_uldivmod>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <UART_SetConfig+0x2d4>)
 8007904:	fba3 1302 	umull	r1, r3, r3, r2
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	2164      	movs	r1, #100	; 0x64
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	3332      	adds	r3, #50	; 0x32
 8007916:	4a08      	ldr	r2, [pc, #32]	; (8007938 <UART_SetConfig+0x2d4>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	f003 0207 	and.w	r2, r3, #7
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4422      	add	r2, r4
 800792a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800792c:	e105      	b.n	8007b3a <UART_SetConfig+0x4d6>
 800792e:	bf00      	nop
 8007930:	40011000 	.word	0x40011000
 8007934:	40011400 	.word	0x40011400
 8007938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800793c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007940:	2200      	movs	r2, #0
 8007942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800794a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800794e:	4642      	mov	r2, r8
 8007950:	464b      	mov	r3, r9
 8007952:	1891      	adds	r1, r2, r2
 8007954:	6239      	str	r1, [r7, #32]
 8007956:	415b      	adcs	r3, r3
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
 800795a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800795e:	4641      	mov	r1, r8
 8007960:	1854      	adds	r4, r2, r1
 8007962:	4649      	mov	r1, r9
 8007964:	eb43 0501 	adc.w	r5, r3, r1
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	00eb      	lsls	r3, r5, #3
 8007972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007976:	00e2      	lsls	r2, r4, #3
 8007978:	4614      	mov	r4, r2
 800797a:	461d      	mov	r5, r3
 800797c:	4643      	mov	r3, r8
 800797e:	18e3      	adds	r3, r4, r3
 8007980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007984:	464b      	mov	r3, r9
 8007986:	eb45 0303 	adc.w	r3, r5, r3
 800798a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800799a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079aa:	4629      	mov	r1, r5
 80079ac:	008b      	lsls	r3, r1, #2
 80079ae:	4621      	mov	r1, r4
 80079b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079b4:	4621      	mov	r1, r4
 80079b6:	008a      	lsls	r2, r1, #2
 80079b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079bc:	f7f8 fc68 	bl	8000290 <__aeabi_uldivmod>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4b60      	ldr	r3, [pc, #384]	; (8007b48 <UART_SetConfig+0x4e4>)
 80079c6:	fba3 2302 	umull	r2, r3, r3, r2
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	011c      	lsls	r4, r3, #4
 80079ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	1891      	adds	r1, r2, r2
 80079e6:	61b9      	str	r1, [r7, #24]
 80079e8:	415b      	adcs	r3, r3
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079f0:	4641      	mov	r1, r8
 80079f2:	1851      	adds	r1, r2, r1
 80079f4:	6139      	str	r1, [r7, #16]
 80079f6:	4649      	mov	r1, r9
 80079f8:	414b      	adcs	r3, r1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a08:	4659      	mov	r1, fp
 8007a0a:	00cb      	lsls	r3, r1, #3
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a12:	4651      	mov	r1, sl
 8007a14:	00ca      	lsls	r2, r1, #3
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	189b      	adds	r3, r3, r2
 8007a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a24:	464b      	mov	r3, r9
 8007a26:	460a      	mov	r2, r1
 8007a28:	eb42 0303 	adc.w	r3, r2, r3
 8007a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a48:	4649      	mov	r1, r9
 8007a4a:	008b      	lsls	r3, r1, #2
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a52:	4641      	mov	r1, r8
 8007a54:	008a      	lsls	r2, r1, #2
 8007a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a5a:	f7f8 fc19 	bl	8000290 <__aeabi_uldivmod>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4b39      	ldr	r3, [pc, #228]	; (8007b48 <UART_SetConfig+0x4e4>)
 8007a64:	fba3 1302 	umull	r1, r3, r3, r2
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	2164      	movs	r1, #100	; 0x64
 8007a6c:	fb01 f303 	mul.w	r3, r1, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	3332      	adds	r3, #50	; 0x32
 8007a76:	4a34      	ldr	r2, [pc, #208]	; (8007b48 <UART_SetConfig+0x4e4>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a82:	441c      	add	r4, r3
 8007a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a88:	2200      	movs	r2, #0
 8007a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007a8c:	677a      	str	r2, [r7, #116]	; 0x74
 8007a8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a92:	4642      	mov	r2, r8
 8007a94:	464b      	mov	r3, r9
 8007a96:	1891      	adds	r1, r2, r2
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	415b      	adcs	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	1851      	adds	r1, r2, r1
 8007aa6:	6039      	str	r1, [r7, #0]
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	414b      	adcs	r3, r1
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	f04f 0200 	mov.w	r2, #0
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007aba:	4659      	mov	r1, fp
 8007abc:	00cb      	lsls	r3, r1, #3
 8007abe:	4651      	mov	r1, sl
 8007ac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	00ca      	lsls	r2, r1, #3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	4642      	mov	r2, r8
 8007ad0:	189b      	adds	r3, r3, r2
 8007ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	460a      	mov	r2, r1
 8007ad8:	eb42 0303 	adc.w	r3, r2, r3
 8007adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007af6:	4649      	mov	r1, r9
 8007af8:	008b      	lsls	r3, r1, #2
 8007afa:	4641      	mov	r1, r8
 8007afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b00:	4641      	mov	r1, r8
 8007b02:	008a      	lsls	r2, r1, #2
 8007b04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b08:	f7f8 fbc2 	bl	8000290 <__aeabi_uldivmod>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <UART_SetConfig+0x4e4>)
 8007b12:	fba3 1302 	umull	r1, r3, r3, r2
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	2164      	movs	r1, #100	; 0x64
 8007b1a:	fb01 f303 	mul.w	r3, r1, r3
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	3332      	adds	r3, #50	; 0x32
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <UART_SetConfig+0x4e4>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4422      	add	r2, r4
 8007b38:	609a      	str	r2, [r3, #8]
}
 8007b3a:	bf00      	nop
 8007b3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	51eb851f 	.word	0x51eb851f

08007b4c <atoi>:
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f000 b8ea 	b.w	8007d28 <strtol>

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	; (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000000c 	.word	0x2000000c

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4d0d      	ldr	r5, [pc, #52]	; (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	; (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4d0b      	ldr	r5, [pc, #44]	; (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	; (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f000 fd22 	bl	80085bc <_init>
 8007b78:	1b64      	subs	r4, r4, r5
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	0800874c 	.word	0x0800874c
 8007b9c:	0800874c 	.word	0x0800874c
 8007ba0:	0800874c 	.word	0x0800874c
 8007ba4:	08008750 	.word	0x08008750

08007ba8 <memcpy>:
 8007ba8:	440a      	add	r2, r1
 8007baa:	4291      	cmp	r1, r2
 8007bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bb0:	d100      	bne.n	8007bb4 <memcpy+0xc>
 8007bb2:	4770      	bx	lr
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bbe:	4291      	cmp	r1, r2
 8007bc0:	d1f9      	bne.n	8007bb6 <memcpy+0xe>
 8007bc2:	bd10      	pop	{r4, pc}

08007bc4 <memset>:
 8007bc4:	4402      	add	r2, r0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d100      	bne.n	8007bce <memset+0xa>
 8007bcc:	4770      	bx	lr
 8007bce:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd2:	e7f9      	b.n	8007bc8 <memset+0x4>

08007bd4 <siprintf>:
 8007bd4:	b40e      	push	{r1, r2, r3}
 8007bd6:	b500      	push	{lr}
 8007bd8:	b09c      	sub	sp, #112	; 0x70
 8007bda:	ab1d      	add	r3, sp, #116	; 0x74
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	9006      	str	r0, [sp, #24]
 8007be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007be4:	4809      	ldr	r0, [pc, #36]	; (8007c0c <siprintf+0x38>)
 8007be6:	9107      	str	r1, [sp, #28]
 8007be8:	9104      	str	r1, [sp, #16]
 8007bea:	4909      	ldr	r1, [pc, #36]	; (8007c10 <siprintf+0x3c>)
 8007bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf0:	9105      	str	r1, [sp, #20]
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	a902      	add	r1, sp, #8
 8007bf8:	f000 f8fc 	bl	8007df4 <_svfiprintf_r>
 8007bfc:	9b02      	ldr	r3, [sp, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	b01c      	add	sp, #112	; 0x70
 8007c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c08:	b003      	add	sp, #12
 8007c0a:	4770      	bx	lr
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	ffff0208 	.word	0xffff0208

08007c14 <strcpy>:
 8007c14:	4603      	mov	r3, r0
 8007c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c1a:	f803 2b01 	strb.w	r2, [r3], #1
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d1f9      	bne.n	8007c16 <strcpy+0x2>
 8007c22:	4770      	bx	lr

08007c24 <_strtol_l.constprop.0>:
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2a:	d001      	beq.n	8007c30 <_strtol_l.constprop.0+0xc>
 8007c2c:	2b24      	cmp	r3, #36	; 0x24
 8007c2e:	d906      	bls.n	8007c3e <_strtol_l.constprop.0+0x1a>
 8007c30:	f7ff ff90 	bl	8007b54 <__errno>
 8007c34:	2316      	movs	r3, #22
 8007c36:	6003      	str	r3, [r0, #0]
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d24 <_strtol_l.constprop.0+0x100>
 8007c42:	460d      	mov	r5, r1
 8007c44:	462e      	mov	r6, r5
 8007c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007c4e:	f017 0708 	ands.w	r7, r7, #8
 8007c52:	d1f7      	bne.n	8007c44 <_strtol_l.constprop.0+0x20>
 8007c54:	2c2d      	cmp	r4, #45	; 0x2d
 8007c56:	d132      	bne.n	8007cbe <_strtol_l.constprop.0+0x9a>
 8007c58:	782c      	ldrb	r4, [r5, #0]
 8007c5a:	2701      	movs	r7, #1
 8007c5c:	1cb5      	adds	r5, r6, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d05b      	beq.n	8007d1a <_strtol_l.constprop.0+0xf6>
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d109      	bne.n	8007c7a <_strtol_l.constprop.0+0x56>
 8007c66:	2c30      	cmp	r4, #48	; 0x30
 8007c68:	d107      	bne.n	8007c7a <_strtol_l.constprop.0+0x56>
 8007c6a:	782c      	ldrb	r4, [r5, #0]
 8007c6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c70:	2c58      	cmp	r4, #88	; 0x58
 8007c72:	d14d      	bne.n	8007d10 <_strtol_l.constprop.0+0xec>
 8007c74:	786c      	ldrb	r4, [r5, #1]
 8007c76:	2310      	movs	r3, #16
 8007c78:	3502      	adds	r5, #2
 8007c7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c82:	f04f 0c00 	mov.w	ip, #0
 8007c86:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c8a:	4666      	mov	r6, ip
 8007c8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007c94:	f1be 0f09 	cmp.w	lr, #9
 8007c98:	d816      	bhi.n	8007cc8 <_strtol_l.constprop.0+0xa4>
 8007c9a:	4674      	mov	r4, lr
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	dd24      	ble.n	8007cea <_strtol_l.constprop.0+0xc6>
 8007ca0:	f1bc 0f00 	cmp.w	ip, #0
 8007ca4:	db1e      	blt.n	8007ce4 <_strtol_l.constprop.0+0xc0>
 8007ca6:	45b1      	cmp	r9, r6
 8007ca8:	d31c      	bcc.n	8007ce4 <_strtol_l.constprop.0+0xc0>
 8007caa:	d101      	bne.n	8007cb0 <_strtol_l.constprop.0+0x8c>
 8007cac:	45a2      	cmp	sl, r4
 8007cae:	db19      	blt.n	8007ce4 <_strtol_l.constprop.0+0xc0>
 8007cb0:	fb06 4603 	mla	r6, r6, r3, r4
 8007cb4:	f04f 0c01 	mov.w	ip, #1
 8007cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cbc:	e7e8      	b.n	8007c90 <_strtol_l.constprop.0+0x6c>
 8007cbe:	2c2b      	cmp	r4, #43	; 0x2b
 8007cc0:	bf04      	itt	eq
 8007cc2:	782c      	ldrbeq	r4, [r5, #0]
 8007cc4:	1cb5      	addeq	r5, r6, #2
 8007cc6:	e7ca      	b.n	8007c5e <_strtol_l.constprop.0+0x3a>
 8007cc8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ccc:	f1be 0f19 	cmp.w	lr, #25
 8007cd0:	d801      	bhi.n	8007cd6 <_strtol_l.constprop.0+0xb2>
 8007cd2:	3c37      	subs	r4, #55	; 0x37
 8007cd4:	e7e2      	b.n	8007c9c <_strtol_l.constprop.0+0x78>
 8007cd6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007cda:	f1be 0f19 	cmp.w	lr, #25
 8007cde:	d804      	bhi.n	8007cea <_strtol_l.constprop.0+0xc6>
 8007ce0:	3c57      	subs	r4, #87	; 0x57
 8007ce2:	e7db      	b.n	8007c9c <_strtol_l.constprop.0+0x78>
 8007ce4:	f04f 3cff 	mov.w	ip, #4294967295
 8007ce8:	e7e6      	b.n	8007cb8 <_strtol_l.constprop.0+0x94>
 8007cea:	f1bc 0f00 	cmp.w	ip, #0
 8007cee:	da05      	bge.n	8007cfc <_strtol_l.constprop.0+0xd8>
 8007cf0:	2322      	movs	r3, #34	; 0x22
 8007cf2:	6003      	str	r3, [r0, #0]
 8007cf4:	4646      	mov	r6, r8
 8007cf6:	b942      	cbnz	r2, 8007d0a <_strtol_l.constprop.0+0xe6>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	e79e      	b.n	8007c3a <_strtol_l.constprop.0+0x16>
 8007cfc:	b107      	cbz	r7, 8007d00 <_strtol_l.constprop.0+0xdc>
 8007cfe:	4276      	negs	r6, r6
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d0f9      	beq.n	8007cf8 <_strtol_l.constprop.0+0xd4>
 8007d04:	f1bc 0f00 	cmp.w	ip, #0
 8007d08:	d000      	beq.n	8007d0c <_strtol_l.constprop.0+0xe8>
 8007d0a:	1e69      	subs	r1, r5, #1
 8007d0c:	6011      	str	r1, [r2, #0]
 8007d0e:	e7f3      	b.n	8007cf8 <_strtol_l.constprop.0+0xd4>
 8007d10:	2430      	movs	r4, #48	; 0x30
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1b1      	bne.n	8007c7a <_strtol_l.constprop.0+0x56>
 8007d16:	2308      	movs	r3, #8
 8007d18:	e7af      	b.n	8007c7a <_strtol_l.constprop.0+0x56>
 8007d1a:	2c30      	cmp	r4, #48	; 0x30
 8007d1c:	d0a5      	beq.n	8007c6a <_strtol_l.constprop.0+0x46>
 8007d1e:	230a      	movs	r3, #10
 8007d20:	e7ab      	b.n	8007c7a <_strtol_l.constprop.0+0x56>
 8007d22:	bf00      	nop
 8007d24:	08008611 	.word	0x08008611

08007d28 <strtol>:
 8007d28:	4613      	mov	r3, r2
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	4802      	ldr	r0, [pc, #8]	; (8007d38 <strtol+0x10>)
 8007d30:	6800      	ldr	r0, [r0, #0]
 8007d32:	f7ff bf77 	b.w	8007c24 <_strtol_l.constprop.0>
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <__ssputs_r>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	688e      	ldr	r6, [r1, #8]
 8007d42:	429e      	cmp	r6, r3
 8007d44:	4682      	mov	sl, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	4690      	mov	r8, r2
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	d838      	bhi.n	8007dc0 <__ssputs_r+0x84>
 8007d4e:	898a      	ldrh	r2, [r1, #12]
 8007d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d54:	d032      	beq.n	8007dbc <__ssputs_r+0x80>
 8007d56:	6825      	ldr	r5, [r4, #0]
 8007d58:	6909      	ldr	r1, [r1, #16]
 8007d5a:	eba5 0901 	sub.w	r9, r5, r1
 8007d5e:	6965      	ldr	r5, [r4, #20]
 8007d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d68:	3301      	adds	r3, #1
 8007d6a:	444b      	add	r3, r9
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	429d      	cmp	r5, r3
 8007d70:	bf38      	it	cc
 8007d72:	461d      	movcc	r5, r3
 8007d74:	0553      	lsls	r3, r2, #21
 8007d76:	d531      	bpl.n	8007ddc <__ssputs_r+0xa0>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f000 fb55 	bl	8008428 <_malloc_r>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	b950      	cbnz	r0, 8007d98 <__ssputs_r+0x5c>
 8007d82:	230c      	movs	r3, #12
 8007d84:	f8ca 3000 	str.w	r3, [sl]
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d98:	6921      	ldr	r1, [r4, #16]
 8007d9a:	464a      	mov	r2, r9
 8007d9c:	f7ff ff04 	bl	8007ba8 <memcpy>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	6126      	str	r6, [r4, #16]
 8007dae:	6165      	str	r5, [r4, #20]
 8007db0:	444e      	add	r6, r9
 8007db2:	eba5 0509 	sub.w	r5, r5, r9
 8007db6:	6026      	str	r6, [r4, #0]
 8007db8:	60a5      	str	r5, [r4, #8]
 8007dba:	463e      	mov	r6, r7
 8007dbc:	42be      	cmp	r6, r7
 8007dbe:	d900      	bls.n	8007dc2 <__ssputs_r+0x86>
 8007dc0:	463e      	mov	r6, r7
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	f000 faa8 	bl	800831c <memmove>
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	1b9b      	subs	r3, r3, r6
 8007dd0:	60a3      	str	r3, [r4, #8]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	4433      	add	r3, r6
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e7db      	b.n	8007d94 <__ssputs_r+0x58>
 8007ddc:	462a      	mov	r2, r5
 8007dde:	f000 fb97 	bl	8008510 <_realloc_r>
 8007de2:	4606      	mov	r6, r0
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d1e1      	bne.n	8007dac <__ssputs_r+0x70>
 8007de8:	6921      	ldr	r1, [r4, #16]
 8007dea:	4650      	mov	r0, sl
 8007dec:	f000 fab0 	bl	8008350 <_free_r>
 8007df0:	e7c7      	b.n	8007d82 <__ssputs_r+0x46>
	...

08007df4 <_svfiprintf_r>:
 8007df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4698      	mov	r8, r3
 8007dfa:	898b      	ldrh	r3, [r1, #12]
 8007dfc:	061b      	lsls	r3, r3, #24
 8007dfe:	b09d      	sub	sp, #116	; 0x74
 8007e00:	4607      	mov	r7, r0
 8007e02:	460d      	mov	r5, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	d50e      	bpl.n	8007e26 <_svfiprintf_r+0x32>
 8007e08:	690b      	ldr	r3, [r1, #16]
 8007e0a:	b963      	cbnz	r3, 8007e26 <_svfiprintf_r+0x32>
 8007e0c:	2140      	movs	r1, #64	; 0x40
 8007e0e:	f000 fb0b 	bl	8008428 <_malloc_r>
 8007e12:	6028      	str	r0, [r5, #0]
 8007e14:	6128      	str	r0, [r5, #16]
 8007e16:	b920      	cbnz	r0, 8007e22 <_svfiprintf_r+0x2e>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	603b      	str	r3, [r7, #0]
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	e0d1      	b.n	8007fc6 <_svfiprintf_r+0x1d2>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	616b      	str	r3, [r5, #20]
 8007e26:	2300      	movs	r3, #0
 8007e28:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2a:	2320      	movs	r3, #32
 8007e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e34:	2330      	movs	r3, #48	; 0x30
 8007e36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fe0 <_svfiprintf_r+0x1ec>
 8007e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e3e:	f04f 0901 	mov.w	r9, #1
 8007e42:	4623      	mov	r3, r4
 8007e44:	469a      	mov	sl, r3
 8007e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e4a:	b10a      	cbz	r2, 8007e50 <_svfiprintf_r+0x5c>
 8007e4c:	2a25      	cmp	r2, #37	; 0x25
 8007e4e:	d1f9      	bne.n	8007e44 <_svfiprintf_r+0x50>
 8007e50:	ebba 0b04 	subs.w	fp, sl, r4
 8007e54:	d00b      	beq.n	8007e6e <_svfiprintf_r+0x7a>
 8007e56:	465b      	mov	r3, fp
 8007e58:	4622      	mov	r2, r4
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7ff ff6d 	bl	8007d3c <__ssputs_r>
 8007e62:	3001      	adds	r0, #1
 8007e64:	f000 80aa 	beq.w	8007fbc <_svfiprintf_r+0x1c8>
 8007e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e6a:	445a      	add	r2, fp
 8007e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80a2 	beq.w	8007fbc <_svfiprintf_r+0x1c8>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e82:	f10a 0a01 	add.w	sl, sl, #1
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	9307      	str	r3, [sp, #28]
 8007e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e90:	4654      	mov	r4, sl
 8007e92:	2205      	movs	r2, #5
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	4851      	ldr	r0, [pc, #324]	; (8007fe0 <_svfiprintf_r+0x1ec>)
 8007e9a:	f7f8 f9a9 	bl	80001f0 <memchr>
 8007e9e:	9a04      	ldr	r2, [sp, #16]
 8007ea0:	b9d8      	cbnz	r0, 8007eda <_svfiprintf_r+0xe6>
 8007ea2:	06d0      	lsls	r0, r2, #27
 8007ea4:	bf44      	itt	mi
 8007ea6:	2320      	movmi	r3, #32
 8007ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eac:	0711      	lsls	r1, r2, #28
 8007eae:	bf44      	itt	mi
 8007eb0:	232b      	movmi	r3, #43	; 0x2b
 8007eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eba:	2b2a      	cmp	r3, #42	; 0x2a
 8007ebc:	d015      	beq.n	8007eea <_svfiprintf_r+0xf6>
 8007ebe:	9a07      	ldr	r2, [sp, #28]
 8007ec0:	4654      	mov	r4, sl
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f04f 0c0a 	mov.w	ip, #10
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ece:	3b30      	subs	r3, #48	; 0x30
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d94e      	bls.n	8007f72 <_svfiprintf_r+0x17e>
 8007ed4:	b1b0      	cbz	r0, 8007f04 <_svfiprintf_r+0x110>
 8007ed6:	9207      	str	r2, [sp, #28]
 8007ed8:	e014      	b.n	8007f04 <_svfiprintf_r+0x110>
 8007eda:	eba0 0308 	sub.w	r3, r0, r8
 8007ede:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	46a2      	mov	sl, r4
 8007ee8:	e7d2      	b.n	8007e90 <_svfiprintf_r+0x9c>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	1d19      	adds	r1, r3, #4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	9103      	str	r1, [sp, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bfbb      	ittet	lt
 8007ef6:	425b      	neglt	r3, r3
 8007ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8007efc:	9307      	strge	r3, [sp, #28]
 8007efe:	9307      	strlt	r3, [sp, #28]
 8007f00:	bfb8      	it	lt
 8007f02:	9204      	strlt	r2, [sp, #16]
 8007f04:	7823      	ldrb	r3, [r4, #0]
 8007f06:	2b2e      	cmp	r3, #46	; 0x2e
 8007f08:	d10c      	bne.n	8007f24 <_svfiprintf_r+0x130>
 8007f0a:	7863      	ldrb	r3, [r4, #1]
 8007f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0e:	d135      	bne.n	8007f7c <_svfiprintf_r+0x188>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	1d1a      	adds	r2, r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	9203      	str	r2, [sp, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfb8      	it	lt
 8007f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f20:	3402      	adds	r4, #2
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ff0 <_svfiprintf_r+0x1fc>
 8007f28:	7821      	ldrb	r1, [r4, #0]
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	4650      	mov	r0, sl
 8007f2e:	f7f8 f95f 	bl	80001f0 <memchr>
 8007f32:	b140      	cbz	r0, 8007f46 <_svfiprintf_r+0x152>
 8007f34:	2340      	movs	r3, #64	; 0x40
 8007f36:	eba0 000a 	sub.w	r0, r0, sl
 8007f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	4303      	orrs	r3, r0
 8007f42:	3401      	adds	r4, #1
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4826      	ldr	r0, [pc, #152]	; (8007fe4 <_svfiprintf_r+0x1f0>)
 8007f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f50:	2206      	movs	r2, #6
 8007f52:	f7f8 f94d 	bl	80001f0 <memchr>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d038      	beq.n	8007fcc <_svfiprintf_r+0x1d8>
 8007f5a:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <_svfiprintf_r+0x1f4>)
 8007f5c:	bb1b      	cbnz	r3, 8007fa6 <_svfiprintf_r+0x1b2>
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	3308      	adds	r3, #8
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6c:	4433      	add	r3, r6
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	e767      	b.n	8007e42 <_svfiprintf_r+0x4e>
 8007f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f76:	460c      	mov	r4, r1
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7a5      	b.n	8007ec8 <_svfiprintf_r+0xd4>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	3401      	adds	r4, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4619      	mov	r1, r3
 8007f84:	f04f 0c0a 	mov.w	ip, #10
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f8e:	3a30      	subs	r2, #48	; 0x30
 8007f90:	2a09      	cmp	r2, #9
 8007f92:	d903      	bls.n	8007f9c <_svfiprintf_r+0x1a8>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0c5      	beq.n	8007f24 <_svfiprintf_r+0x130>
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	e7c3      	b.n	8007f24 <_svfiprintf_r+0x130>
 8007f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e7f0      	b.n	8007f88 <_svfiprintf_r+0x194>
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	462a      	mov	r2, r5
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <_svfiprintf_r+0x1f8>)
 8007fae:	a904      	add	r1, sp, #16
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f3af 8000 	nop.w
 8007fb6:	1c42      	adds	r2, r0, #1
 8007fb8:	4606      	mov	r6, r0
 8007fba:	d1d6      	bne.n	8007f6a <_svfiprintf_r+0x176>
 8007fbc:	89ab      	ldrh	r3, [r5, #12]
 8007fbe:	065b      	lsls	r3, r3, #25
 8007fc0:	f53f af2c 	bmi.w	8007e1c <_svfiprintf_r+0x28>
 8007fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc6:	b01d      	add	sp, #116	; 0x74
 8007fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fcc:	ab03      	add	r3, sp, #12
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4b06      	ldr	r3, [pc, #24]	; (8007fec <_svfiprintf_r+0x1f8>)
 8007fd4:	a904      	add	r1, sp, #16
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f000 f87a 	bl	80080d0 <_printf_i>
 8007fdc:	e7eb      	b.n	8007fb6 <_svfiprintf_r+0x1c2>
 8007fde:	bf00      	nop
 8007fe0:	08008711 	.word	0x08008711
 8007fe4:	0800871b 	.word	0x0800871b
 8007fe8:	00000000 	.word	0x00000000
 8007fec:	08007d3d 	.word	0x08007d3d
 8007ff0:	08008717 	.word	0x08008717

08007ff4 <_printf_common>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	4699      	mov	r9, r3
 8007ffc:	688a      	ldr	r2, [r1, #8]
 8007ffe:	690b      	ldr	r3, [r1, #16]
 8008000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008004:	4293      	cmp	r3, r2
 8008006:	bfb8      	it	lt
 8008008:	4613      	movlt	r3, r2
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008010:	4607      	mov	r7, r0
 8008012:	460c      	mov	r4, r1
 8008014:	b10a      	cbz	r2, 800801a <_printf_common+0x26>
 8008016:	3301      	adds	r3, #1
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	0699      	lsls	r1, r3, #26
 800801e:	bf42      	ittt	mi
 8008020:	6833      	ldrmi	r3, [r6, #0]
 8008022:	3302      	addmi	r3, #2
 8008024:	6033      	strmi	r3, [r6, #0]
 8008026:	6825      	ldr	r5, [r4, #0]
 8008028:	f015 0506 	ands.w	r5, r5, #6
 800802c:	d106      	bne.n	800803c <_printf_common+0x48>
 800802e:	f104 0a19 	add.w	sl, r4, #25
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	6832      	ldr	r2, [r6, #0]
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	42ab      	cmp	r3, r5
 800803a:	dc26      	bgt.n	800808a <_printf_common+0x96>
 800803c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008040:	1e13      	subs	r3, r2, #0
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	bf18      	it	ne
 8008046:	2301      	movne	r3, #1
 8008048:	0692      	lsls	r2, r2, #26
 800804a:	d42b      	bmi.n	80080a4 <_printf_common+0xb0>
 800804c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008050:	4649      	mov	r1, r9
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	3001      	adds	r0, #1
 8008058:	d01e      	beq.n	8008098 <_printf_common+0xa4>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	68e5      	ldr	r5, [r4, #12]
 800805e:	6832      	ldr	r2, [r6, #0]
 8008060:	f003 0306 	and.w	r3, r3, #6
 8008064:	2b04      	cmp	r3, #4
 8008066:	bf08      	it	eq
 8008068:	1aad      	subeq	r5, r5, r2
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	bf0c      	ite	eq
 8008070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008074:	2500      	movne	r5, #0
 8008076:	4293      	cmp	r3, r2
 8008078:	bfc4      	itt	gt
 800807a:	1a9b      	subgt	r3, r3, r2
 800807c:	18ed      	addgt	r5, r5, r3
 800807e:	2600      	movs	r6, #0
 8008080:	341a      	adds	r4, #26
 8008082:	42b5      	cmp	r5, r6
 8008084:	d11a      	bne.n	80080bc <_printf_common+0xc8>
 8008086:	2000      	movs	r0, #0
 8008088:	e008      	b.n	800809c <_printf_common+0xa8>
 800808a:	2301      	movs	r3, #1
 800808c:	4652      	mov	r2, sl
 800808e:	4649      	mov	r1, r9
 8008090:	4638      	mov	r0, r7
 8008092:	47c0      	blx	r8
 8008094:	3001      	adds	r0, #1
 8008096:	d103      	bne.n	80080a0 <_printf_common+0xac>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	3501      	adds	r5, #1
 80080a2:	e7c6      	b.n	8008032 <_printf_common+0x3e>
 80080a4:	18e1      	adds	r1, r4, r3
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	2030      	movs	r0, #48	; 0x30
 80080aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ae:	4422      	add	r2, r4
 80080b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7c7      	b.n	800804c <_printf_common+0x58>
 80080bc:	2301      	movs	r3, #1
 80080be:	4622      	mov	r2, r4
 80080c0:	4649      	mov	r1, r9
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d0e6      	beq.n	8008098 <_printf_common+0xa4>
 80080ca:	3601      	adds	r6, #1
 80080cc:	e7d9      	b.n	8008082 <_printf_common+0x8e>
	...

080080d0 <_printf_i>:
 80080d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	7e0f      	ldrb	r7, [r1, #24]
 80080d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080d8:	2f78      	cmp	r7, #120	; 0x78
 80080da:	4691      	mov	r9, r2
 80080dc:	4680      	mov	r8, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	469a      	mov	sl, r3
 80080e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080e6:	d807      	bhi.n	80080f8 <_printf_i+0x28>
 80080e8:	2f62      	cmp	r7, #98	; 0x62
 80080ea:	d80a      	bhi.n	8008102 <_printf_i+0x32>
 80080ec:	2f00      	cmp	r7, #0
 80080ee:	f000 80d8 	beq.w	80082a2 <_printf_i+0x1d2>
 80080f2:	2f58      	cmp	r7, #88	; 0x58
 80080f4:	f000 80a3 	beq.w	800823e <_printf_i+0x16e>
 80080f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008100:	e03a      	b.n	8008178 <_printf_i+0xa8>
 8008102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008106:	2b15      	cmp	r3, #21
 8008108:	d8f6      	bhi.n	80080f8 <_printf_i+0x28>
 800810a:	a101      	add	r1, pc, #4	; (adr r1, 8008110 <_printf_i+0x40>)
 800810c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008110:	08008169 	.word	0x08008169
 8008114:	0800817d 	.word	0x0800817d
 8008118:	080080f9 	.word	0x080080f9
 800811c:	080080f9 	.word	0x080080f9
 8008120:	080080f9 	.word	0x080080f9
 8008124:	080080f9 	.word	0x080080f9
 8008128:	0800817d 	.word	0x0800817d
 800812c:	080080f9 	.word	0x080080f9
 8008130:	080080f9 	.word	0x080080f9
 8008134:	080080f9 	.word	0x080080f9
 8008138:	080080f9 	.word	0x080080f9
 800813c:	08008289 	.word	0x08008289
 8008140:	080081ad 	.word	0x080081ad
 8008144:	0800826b 	.word	0x0800826b
 8008148:	080080f9 	.word	0x080080f9
 800814c:	080080f9 	.word	0x080080f9
 8008150:	080082ab 	.word	0x080082ab
 8008154:	080080f9 	.word	0x080080f9
 8008158:	080081ad 	.word	0x080081ad
 800815c:	080080f9 	.word	0x080080f9
 8008160:	080080f9 	.word	0x080080f9
 8008164:	08008273 	.word	0x08008273
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	1d1a      	adds	r2, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008178:	2301      	movs	r3, #1
 800817a:	e0a3      	b.n	80082c4 <_printf_i+0x1f4>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	6829      	ldr	r1, [r5, #0]
 8008180:	0606      	lsls	r6, r0, #24
 8008182:	f101 0304 	add.w	r3, r1, #4
 8008186:	d50a      	bpl.n	800819e <_printf_i+0xce>
 8008188:	680e      	ldr	r6, [r1, #0]
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	2e00      	cmp	r6, #0
 800818e:	da03      	bge.n	8008198 <_printf_i+0xc8>
 8008190:	232d      	movs	r3, #45	; 0x2d
 8008192:	4276      	negs	r6, r6
 8008194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008198:	485e      	ldr	r0, [pc, #376]	; (8008314 <_printf_i+0x244>)
 800819a:	230a      	movs	r3, #10
 800819c:	e019      	b.n	80081d2 <_printf_i+0x102>
 800819e:	680e      	ldr	r6, [r1, #0]
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081a6:	bf18      	it	ne
 80081a8:	b236      	sxthne	r6, r6
 80081aa:	e7ef      	b.n	800818c <_printf_i+0xbc>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	1d19      	adds	r1, r3, #4
 80081b2:	6029      	str	r1, [r5, #0]
 80081b4:	0601      	lsls	r1, r0, #24
 80081b6:	d501      	bpl.n	80081bc <_printf_i+0xec>
 80081b8:	681e      	ldr	r6, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <_printf_i+0xf2>
 80081bc:	0646      	lsls	r6, r0, #25
 80081be:	d5fb      	bpl.n	80081b8 <_printf_i+0xe8>
 80081c0:	881e      	ldrh	r6, [r3, #0]
 80081c2:	4854      	ldr	r0, [pc, #336]	; (8008314 <_printf_i+0x244>)
 80081c4:	2f6f      	cmp	r7, #111	; 0x6f
 80081c6:	bf0c      	ite	eq
 80081c8:	2308      	moveq	r3, #8
 80081ca:	230a      	movne	r3, #10
 80081cc:	2100      	movs	r1, #0
 80081ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d2:	6865      	ldr	r5, [r4, #4]
 80081d4:	60a5      	str	r5, [r4, #8]
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	bfa2      	ittt	ge
 80081da:	6821      	ldrge	r1, [r4, #0]
 80081dc:	f021 0104 	bicge.w	r1, r1, #4
 80081e0:	6021      	strge	r1, [r4, #0]
 80081e2:	b90e      	cbnz	r6, 80081e8 <_printf_i+0x118>
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	d04d      	beq.n	8008284 <_printf_i+0x1b4>
 80081e8:	4615      	mov	r5, r2
 80081ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ee:	fb03 6711 	mls	r7, r3, r1, r6
 80081f2:	5dc7      	ldrb	r7, [r0, r7]
 80081f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081f8:	4637      	mov	r7, r6
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	460e      	mov	r6, r1
 80081fe:	d9f4      	bls.n	80081ea <_printf_i+0x11a>
 8008200:	2b08      	cmp	r3, #8
 8008202:	d10b      	bne.n	800821c <_printf_i+0x14c>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07de      	lsls	r6, r3, #31
 8008208:	d508      	bpl.n	800821c <_printf_i+0x14c>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4299      	cmp	r1, r3
 8008210:	bfde      	ittt	le
 8008212:	2330      	movle	r3, #48	; 0x30
 8008214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800821c:	1b52      	subs	r2, r2, r5
 800821e:	6122      	str	r2, [r4, #16]
 8008220:	f8cd a000 	str.w	sl, [sp]
 8008224:	464b      	mov	r3, r9
 8008226:	aa03      	add	r2, sp, #12
 8008228:	4621      	mov	r1, r4
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff fee2 	bl	8007ff4 <_printf_common>
 8008230:	3001      	adds	r0, #1
 8008232:	d14c      	bne.n	80082ce <_printf_i+0x1fe>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b004      	add	sp, #16
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	4835      	ldr	r0, [pc, #212]	; (8008314 <_printf_i+0x244>)
 8008240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008244:	6829      	ldr	r1, [r5, #0]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	f851 6b04 	ldr.w	r6, [r1], #4
 800824c:	6029      	str	r1, [r5, #0]
 800824e:	061d      	lsls	r5, r3, #24
 8008250:	d514      	bpl.n	800827c <_printf_i+0x1ac>
 8008252:	07df      	lsls	r7, r3, #31
 8008254:	bf44      	itt	mi
 8008256:	f043 0320 	orrmi.w	r3, r3, #32
 800825a:	6023      	strmi	r3, [r4, #0]
 800825c:	b91e      	cbnz	r6, 8008266 <_printf_i+0x196>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f023 0320 	bic.w	r3, r3, #32
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	2310      	movs	r3, #16
 8008268:	e7b0      	b.n	80081cc <_printf_i+0xfc>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	2378      	movs	r3, #120	; 0x78
 8008274:	4828      	ldr	r0, [pc, #160]	; (8008318 <_printf_i+0x248>)
 8008276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827a:	e7e3      	b.n	8008244 <_printf_i+0x174>
 800827c:	0659      	lsls	r1, r3, #25
 800827e:	bf48      	it	mi
 8008280:	b2b6      	uxthmi	r6, r6
 8008282:	e7e6      	b.n	8008252 <_printf_i+0x182>
 8008284:	4615      	mov	r5, r2
 8008286:	e7bb      	b.n	8008200 <_printf_i+0x130>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	6826      	ldr	r6, [r4, #0]
 800828c:	6961      	ldr	r1, [r4, #20]
 800828e:	1d18      	adds	r0, r3, #4
 8008290:	6028      	str	r0, [r5, #0]
 8008292:	0635      	lsls	r5, r6, #24
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	d501      	bpl.n	800829c <_printf_i+0x1cc>
 8008298:	6019      	str	r1, [r3, #0]
 800829a:	e002      	b.n	80082a2 <_printf_i+0x1d2>
 800829c:	0670      	lsls	r0, r6, #25
 800829e:	d5fb      	bpl.n	8008298 <_printf_i+0x1c8>
 80082a0:	8019      	strh	r1, [r3, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	4615      	mov	r5, r2
 80082a8:	e7ba      	b.n	8008220 <_printf_i+0x150>
 80082aa:	682b      	ldr	r3, [r5, #0]
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	602a      	str	r2, [r5, #0]
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	2100      	movs	r1, #0
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f7 ff9a 	bl	80001f0 <memchr>
 80082bc:	b108      	cbz	r0, 80082c2 <_printf_i+0x1f2>
 80082be:	1b40      	subs	r0, r0, r5
 80082c0:	6060      	str	r0, [r4, #4]
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	6123      	str	r3, [r4, #16]
 80082c6:	2300      	movs	r3, #0
 80082c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082cc:	e7a8      	b.n	8008220 <_printf_i+0x150>
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	462a      	mov	r2, r5
 80082d2:	4649      	mov	r1, r9
 80082d4:	4640      	mov	r0, r8
 80082d6:	47d0      	blx	sl
 80082d8:	3001      	adds	r0, #1
 80082da:	d0ab      	beq.n	8008234 <_printf_i+0x164>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079b      	lsls	r3, r3, #30
 80082e0:	d413      	bmi.n	800830a <_printf_i+0x23a>
 80082e2:	68e0      	ldr	r0, [r4, #12]
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	4298      	cmp	r0, r3
 80082e8:	bfb8      	it	lt
 80082ea:	4618      	movlt	r0, r3
 80082ec:	e7a4      	b.n	8008238 <_printf_i+0x168>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4632      	mov	r2, r6
 80082f2:	4649      	mov	r1, r9
 80082f4:	4640      	mov	r0, r8
 80082f6:	47d0      	blx	sl
 80082f8:	3001      	adds	r0, #1
 80082fa:	d09b      	beq.n	8008234 <_printf_i+0x164>
 80082fc:	3501      	adds	r5, #1
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	9903      	ldr	r1, [sp, #12]
 8008302:	1a5b      	subs	r3, r3, r1
 8008304:	42ab      	cmp	r3, r5
 8008306:	dcf2      	bgt.n	80082ee <_printf_i+0x21e>
 8008308:	e7eb      	b.n	80082e2 <_printf_i+0x212>
 800830a:	2500      	movs	r5, #0
 800830c:	f104 0619 	add.w	r6, r4, #25
 8008310:	e7f5      	b.n	80082fe <_printf_i+0x22e>
 8008312:	bf00      	nop
 8008314:	08008722 	.word	0x08008722
 8008318:	08008733 	.word	0x08008733

0800831c <memmove>:
 800831c:	4288      	cmp	r0, r1
 800831e:	b510      	push	{r4, lr}
 8008320:	eb01 0402 	add.w	r4, r1, r2
 8008324:	d902      	bls.n	800832c <memmove+0x10>
 8008326:	4284      	cmp	r4, r0
 8008328:	4623      	mov	r3, r4
 800832a:	d807      	bhi.n	800833c <memmove+0x20>
 800832c:	1e43      	subs	r3, r0, #1
 800832e:	42a1      	cmp	r1, r4
 8008330:	d008      	beq.n	8008344 <memmove+0x28>
 8008332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800833a:	e7f8      	b.n	800832e <memmove+0x12>
 800833c:	4402      	add	r2, r0
 800833e:	4601      	mov	r1, r0
 8008340:	428a      	cmp	r2, r1
 8008342:	d100      	bne.n	8008346 <memmove+0x2a>
 8008344:	bd10      	pop	{r4, pc}
 8008346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800834a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800834e:	e7f7      	b.n	8008340 <memmove+0x24>

08008350 <_free_r>:
 8008350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008352:	2900      	cmp	r1, #0
 8008354:	d044      	beq.n	80083e0 <_free_r+0x90>
 8008356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835a:	9001      	str	r0, [sp, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f1a1 0404 	sub.w	r4, r1, #4
 8008362:	bfb8      	it	lt
 8008364:	18e4      	addlt	r4, r4, r3
 8008366:	f000 f913 	bl	8008590 <__malloc_lock>
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <_free_r+0x94>)
 800836c:	9801      	ldr	r0, [sp, #4]
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	b933      	cbnz	r3, 8008380 <_free_r+0x30>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	b003      	add	sp, #12
 8008378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800837c:	f000 b90e 	b.w	800859c <__malloc_unlock>
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x46>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	1961      	adds	r1, r4, r5
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1949      	addeq	r1, r1, r5
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	e7ed      	b.n	8008372 <_free_r+0x22>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x50>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x46>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1855      	adds	r5, r2, r1
 80083a4:	42a5      	cmp	r5, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x70>
 80083a8:	6824      	ldr	r4, [r4, #0]
 80083aa:	4421      	add	r1, r4
 80083ac:	1854      	adds	r4, r2, r1
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1e0      	bne.n	8008376 <_free_r+0x26>
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	6053      	str	r3, [r2, #4]
 80083ba:	4421      	add	r1, r4
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	e7da      	b.n	8008376 <_free_r+0x26>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x78>
 80083c2:	230c      	movs	r3, #12
 80083c4:	6003      	str	r3, [r0, #0]
 80083c6:	e7d6      	b.n	8008376 <_free_r+0x26>
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1961      	adds	r1, r4, r5
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf04      	itt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	bf04      	itt	eq
 80083d8:	1949      	addeq	r1, r1, r5
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	6054      	str	r4, [r2, #4]
 80083de:	e7ca      	b.n	8008376 <_free_r+0x26>
 80083e0:	b003      	add	sp, #12
 80083e2:	bd30      	pop	{r4, r5, pc}
 80083e4:	2000040c 	.word	0x2000040c

080083e8 <sbrk_aligned>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4e0e      	ldr	r6, [pc, #56]	; (8008424 <sbrk_aligned+0x3c>)
 80083ec:	460c      	mov	r4, r1
 80083ee:	6831      	ldr	r1, [r6, #0]
 80083f0:	4605      	mov	r5, r0
 80083f2:	b911      	cbnz	r1, 80083fa <sbrk_aligned+0x12>
 80083f4:	f000 f8bc 	bl	8008570 <_sbrk_r>
 80083f8:	6030      	str	r0, [r6, #0]
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f8b7 	bl	8008570 <_sbrk_r>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d00a      	beq.n	800841c <sbrk_aligned+0x34>
 8008406:	1cc4      	adds	r4, r0, #3
 8008408:	f024 0403 	bic.w	r4, r4, #3
 800840c:	42a0      	cmp	r0, r4
 800840e:	d007      	beq.n	8008420 <sbrk_aligned+0x38>
 8008410:	1a21      	subs	r1, r4, r0
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f8ac 	bl	8008570 <_sbrk_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d101      	bne.n	8008420 <sbrk_aligned+0x38>
 800841c:	f04f 34ff 	mov.w	r4, #4294967295
 8008420:	4620      	mov	r0, r4
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	20000410 	.word	0x20000410

08008428 <_malloc_r>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	1ccd      	adds	r5, r1, #3
 800842e:	f025 0503 	bic.w	r5, r5, #3
 8008432:	3508      	adds	r5, #8
 8008434:	2d0c      	cmp	r5, #12
 8008436:	bf38      	it	cc
 8008438:	250c      	movcc	r5, #12
 800843a:	2d00      	cmp	r5, #0
 800843c:	4607      	mov	r7, r0
 800843e:	db01      	blt.n	8008444 <_malloc_r+0x1c>
 8008440:	42a9      	cmp	r1, r5
 8008442:	d905      	bls.n	8008450 <_malloc_r+0x28>
 8008444:	230c      	movs	r3, #12
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	2600      	movs	r6, #0
 800844a:	4630      	mov	r0, r6
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	4e2e      	ldr	r6, [pc, #184]	; (800850c <_malloc_r+0xe4>)
 8008452:	f000 f89d 	bl	8008590 <__malloc_lock>
 8008456:	6833      	ldr	r3, [r6, #0]
 8008458:	461c      	mov	r4, r3
 800845a:	bb34      	cbnz	r4, 80084aa <_malloc_r+0x82>
 800845c:	4629      	mov	r1, r5
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ffc2 	bl	80083e8 <sbrk_aligned>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	4604      	mov	r4, r0
 8008468:	d14d      	bne.n	8008506 <_malloc_r+0xde>
 800846a:	6834      	ldr	r4, [r6, #0]
 800846c:	4626      	mov	r6, r4
 800846e:	2e00      	cmp	r6, #0
 8008470:	d140      	bne.n	80084f4 <_malloc_r+0xcc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	4631      	mov	r1, r6
 8008476:	4638      	mov	r0, r7
 8008478:	eb04 0803 	add.w	r8, r4, r3
 800847c:	f000 f878 	bl	8008570 <_sbrk_r>
 8008480:	4580      	cmp	r8, r0
 8008482:	d13a      	bne.n	80084fa <_malloc_r+0xd2>
 8008484:	6821      	ldr	r1, [r4, #0]
 8008486:	3503      	adds	r5, #3
 8008488:	1a6d      	subs	r5, r5, r1
 800848a:	f025 0503 	bic.w	r5, r5, #3
 800848e:	3508      	adds	r5, #8
 8008490:	2d0c      	cmp	r5, #12
 8008492:	bf38      	it	cc
 8008494:	250c      	movcc	r5, #12
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa5 	bl	80083e8 <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d02b      	beq.n	80084fa <_malloc_r+0xd2>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	e00e      	b.n	80084c8 <_malloc_r+0xa0>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	1b52      	subs	r2, r2, r5
 80084ae:	d41e      	bmi.n	80084ee <_malloc_r+0xc6>
 80084b0:	2a0b      	cmp	r2, #11
 80084b2:	d916      	bls.n	80084e2 <_malloc_r+0xba>
 80084b4:	1961      	adds	r1, r4, r5
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	6025      	str	r5, [r4, #0]
 80084ba:	bf18      	it	ne
 80084bc:	6059      	strne	r1, [r3, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	bf08      	it	eq
 80084c2:	6031      	streq	r1, [r6, #0]
 80084c4:	5162      	str	r2, [r4, r5]
 80084c6:	604b      	str	r3, [r1, #4]
 80084c8:	4638      	mov	r0, r7
 80084ca:	f104 060b 	add.w	r6, r4, #11
 80084ce:	f000 f865 	bl	800859c <__malloc_unlock>
 80084d2:	f026 0607 	bic.w	r6, r6, #7
 80084d6:	1d23      	adds	r3, r4, #4
 80084d8:	1af2      	subs	r2, r6, r3
 80084da:	d0b6      	beq.n	800844a <_malloc_r+0x22>
 80084dc:	1b9b      	subs	r3, r3, r6
 80084de:	50a3      	str	r3, [r4, r2]
 80084e0:	e7b3      	b.n	800844a <_malloc_r+0x22>
 80084e2:	6862      	ldr	r2, [r4, #4]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	bf0c      	ite	eq
 80084e8:	6032      	streq	r2, [r6, #0]
 80084ea:	605a      	strne	r2, [r3, #4]
 80084ec:	e7ec      	b.n	80084c8 <_malloc_r+0xa0>
 80084ee:	4623      	mov	r3, r4
 80084f0:	6864      	ldr	r4, [r4, #4]
 80084f2:	e7b2      	b.n	800845a <_malloc_r+0x32>
 80084f4:	4634      	mov	r4, r6
 80084f6:	6876      	ldr	r6, [r6, #4]
 80084f8:	e7b9      	b.n	800846e <_malloc_r+0x46>
 80084fa:	230c      	movs	r3, #12
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4638      	mov	r0, r7
 8008500:	f000 f84c 	bl	800859c <__malloc_unlock>
 8008504:	e7a1      	b.n	800844a <_malloc_r+0x22>
 8008506:	6025      	str	r5, [r4, #0]
 8008508:	e7de      	b.n	80084c8 <_malloc_r+0xa0>
 800850a:	bf00      	nop
 800850c:	2000040c 	.word	0x2000040c

08008510 <_realloc_r>:
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	4680      	mov	r8, r0
 8008516:	4614      	mov	r4, r2
 8008518:	460e      	mov	r6, r1
 800851a:	b921      	cbnz	r1, 8008526 <_realloc_r+0x16>
 800851c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	4611      	mov	r1, r2
 8008522:	f7ff bf81 	b.w	8008428 <_malloc_r>
 8008526:	b92a      	cbnz	r2, 8008534 <_realloc_r+0x24>
 8008528:	f7ff ff12 	bl	8008350 <_free_r>
 800852c:	4625      	mov	r5, r4
 800852e:	4628      	mov	r0, r5
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008534:	f000 f838 	bl	80085a8 <_malloc_usable_size_r>
 8008538:	4284      	cmp	r4, r0
 800853a:	4607      	mov	r7, r0
 800853c:	d802      	bhi.n	8008544 <_realloc_r+0x34>
 800853e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008542:	d812      	bhi.n	800856a <_realloc_r+0x5a>
 8008544:	4621      	mov	r1, r4
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff ff6e 	bl	8008428 <_malloc_r>
 800854c:	4605      	mov	r5, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d0ed      	beq.n	800852e <_realloc_r+0x1e>
 8008552:	42bc      	cmp	r4, r7
 8008554:	4622      	mov	r2, r4
 8008556:	4631      	mov	r1, r6
 8008558:	bf28      	it	cs
 800855a:	463a      	movcs	r2, r7
 800855c:	f7ff fb24 	bl	8007ba8 <memcpy>
 8008560:	4631      	mov	r1, r6
 8008562:	4640      	mov	r0, r8
 8008564:	f7ff fef4 	bl	8008350 <_free_r>
 8008568:	e7e1      	b.n	800852e <_realloc_r+0x1e>
 800856a:	4635      	mov	r5, r6
 800856c:	e7df      	b.n	800852e <_realloc_r+0x1e>
	...

08008570 <_sbrk_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d06      	ldr	r5, [pc, #24]	; (800858c <_sbrk_r+0x1c>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	f7f9 fc86 	bl	8001e8c <_sbrk>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_sbrk_r+0x1a>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_sbrk_r+0x1a>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	20000414 	.word	0x20000414

08008590 <__malloc_lock>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__malloc_lock+0x8>)
 8008592:	f000 b811 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	20000418 	.word	0x20000418

0800859c <__malloc_unlock>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__malloc_unlock+0x8>)
 800859e:	f000 b80c 	b.w	80085ba <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	20000418 	.word	0x20000418

080085a8 <_malloc_usable_size_r>:
 80085a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ac:	1f18      	subs	r0, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbc      	itt	lt
 80085b2:	580b      	ldrlt	r3, [r1, r0]
 80085b4:	18c0      	addlt	r0, r0, r3
 80085b6:	4770      	bx	lr

080085b8 <__retarget_lock_acquire_recursive>:
 80085b8:	4770      	bx	lr

080085ba <__retarget_lock_release_recursive>:
 80085ba:	4770      	bx	lr

080085bc <_init>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr

080085c8 <_fini>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr
