
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b37c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6b8  0800b6b8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c0  0800b6c0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  2000007c  0800b744  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800b744  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e9f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fce  00000000  00000000  00036f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00039f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a31b  00000000  00000000  0003c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b153  00000000  00000000  00056a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b8f  00000000  00000000  00071b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001126f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cac  00000000  00000000  00112748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b504 	.word	0x0800b504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800b504 	.word	0x0800b504

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R
extern TIM_HandleTypeDef htim11;

void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2c      	ldr	r4, [pc, #176]	; (8000e38 <TOF_init+0xb8>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f009 fead 	bl	800aaf0 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f857 	bl	8000e4c <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c27      	ldr	r4, [pc, #156]	; (8000e3c <TOF_init+0xbc>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f009 fea1 	bl	800aaf0 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f84b 	bl	8000e4c <writeMM>
	writeMM(hi2c3);
 8000db6:	4c22      	ldr	r4, [pc, #136]	; (8000e40 <TOF_init+0xc0>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f009 fe95 	bl	800aaf0 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f83f 	bl	8000e4c <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <TOF_init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f003 fe11 	bl	80049fc <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <TOF_init+0xc4>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <TOF_init+0xbc>)
 8000df0:	f004 fefe 	bl	8005bf0 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <TOF_init+0xc4>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <TOF_init+0xb8>)
 8000e0a:	f004 fef1 	bl	8005bf0 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <TOF_init+0xc4>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <TOF_init+0xc0>)
 8000e24:	f004 fee4 	bl	8005bf0 <HAL_I2C_Mem_Write>

	HAL_TIM_Base_Start_IT(&htim11);
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <TOF_init+0xc8>)
 8000e2a:	f007 fd73 	bl	8008914 <HAL_TIM_Base_Start_IT>
}
 8000e2e:	bf00      	nop
 8000e30:	3704      	adds	r7, #4
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc
 8000e3c:	20000220 	.word	0x20000220
 8000e40:	20000274 	.word	0x20000274
 8000e44:	20000098 	.word	0x20000098
 8000e48:	20000440 	.word	0x20000440

08000e4c <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af04      	add	r7, sp, #16
 8000e54:	f107 0c08 	add.w	ip, r7, #8
 8000e58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e5c:	4bcb      	ldr	r3, [pc, #812]	; (800118c <writeMM+0x340>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	4bc7      	ldr	r3, [pc, #796]	; (800118c <writeMM+0x340>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2310      	movs	r3, #16
 8000e72:	f240 2207 	movw	r2, #519	; 0x207
 8000e76:	2152      	movs	r1, #82	; 0x52
 8000e78:	f107 0008 	add.w	r0, r7, #8
 8000e7c:	f004 feb8 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f003 fdbb 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e86:	4bc1      	ldr	r3, [pc, #772]	; (800118c <writeMM+0x340>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2301      	movs	r3, #1
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4bbd      	ldr	r3, [pc, #756]	; (800118c <writeMM+0x340>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000ea0:	2152      	movs	r1, #82	; 0x52
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f004 fea3 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f003 fda6 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000eb0:	4bb6      	ldr	r3, [pc, #728]	; (800118c <writeMM+0x340>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4bb2      	ldr	r3, [pc, #712]	; (800118c <writeMM+0x340>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	2296      	movs	r2, #150	; 0x96
 8000ec8:	2152      	movs	r1, #82	; 0x52
 8000eca:	f107 0008 	add.w	r0, r7, #8
 8000ece:	f004 fe8f 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f003 fd92 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ed8:	4bac      	ldr	r3, [pc, #688]	; (800118c <writeMM+0x340>)
 8000eda:	22fd      	movs	r2, #253	; 0xfd
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	4ba8      	ldr	r3, [pc, #672]	; (800118c <writeMM+0x340>)
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	2297      	movs	r2, #151	; 0x97
 8000ef0:	2152      	movs	r1, #82	; 0x52
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	f004 fe7b 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f003 fd7e 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000f00:	4ba2      	ldr	r3, [pc, #648]	; (800118c <writeMM+0x340>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b9e      	ldr	r3, [pc, #632]	; (800118c <writeMM+0x340>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2310      	movs	r3, #16
 8000f16:	22e3      	movs	r2, #227	; 0xe3
 8000f18:	2152      	movs	r1, #82	; 0x52
 8000f1a:	f107 0008 	add.w	r0, r7, #8
 8000f1e:	f004 fe67 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f003 fd6a 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f28:	4b98      	ldr	r3, [pc, #608]	; (800118c <writeMM+0x340>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <writeMM+0x340>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	22e4      	movs	r2, #228	; 0xe4
 8000f40:	2152      	movs	r1, #82	; 0x52
 8000f42:	f107 0008 	add.w	r0, r7, #8
 8000f46:	f004 fe53 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f003 fd56 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <writeMM+0x340>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <writeMM+0x340>)
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2310      	movs	r3, #16
 8000f66:	22e5      	movs	r2, #229	; 0xe5
 8000f68:	2152      	movs	r1, #82	; 0x52
 8000f6a:	f107 0008 	add.w	r0, r7, #8
 8000f6e:	f004 fe3f 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f003 fd42 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <writeMM+0x340>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <writeMM+0x340>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	22e6      	movs	r2, #230	; 0xe6
 8000f90:	2152      	movs	r1, #82	; 0x52
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	f004 fe2b 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f003 fd2e 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <writeMM+0x340>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <writeMM+0x340>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	22e7      	movs	r2, #231	; 0xe7
 8000fb8:	2152      	movs	r1, #82	; 0x52
 8000fba:	f107 0008 	add.w	r0, r7, #8
 8000fbe:	f004 fe17 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f003 fd1a 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fc8:	4b70      	ldr	r3, [pc, #448]	; (800118c <writeMM+0x340>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <writeMM+0x340>)
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	22f5      	movs	r2, #245	; 0xf5
 8000fe0:	2152      	movs	r1, #82	; 0x52
 8000fe2:	f107 0008 	add.w	r0, r7, #8
 8000fe6:	f004 fe03 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f003 fd06 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <writeMM+0x340>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <writeMM+0x340>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2310      	movs	r3, #16
 8001006:	22d9      	movs	r2, #217	; 0xd9
 8001008:	2152      	movs	r1, #82	; 0x52
 800100a:	f107 0008 	add.w	r0, r7, #8
 800100e:	f004 fdef 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f003 fcf2 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0xce;
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <writeMM+0x340>)
 800101a:	22ce      	movs	r2, #206	; 0xce
 800101c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <writeMM+0x340>)
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2310      	movs	r3, #16
 800102e:	22db      	movs	r2, #219	; 0xdb
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	f004 fddb 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f003 fcde 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <writeMM+0x340>)
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <writeMM+0x340>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2310      	movs	r3, #16
 8001056:	22dc      	movs	r2, #220	; 0xdc
 8001058:	2152      	movs	r1, #82	; 0x52
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	f004 fdc7 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 fcca 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0xf8;
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <writeMM+0x340>)
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <writeMM+0x340>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	22dd      	movs	r2, #221	; 0xdd
 8001080:	2152      	movs	r1, #82	; 0x52
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	f004 fdb3 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f003 fcb6 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <writeMM+0x340>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <writeMM+0x340>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2310      	movs	r3, #16
 80010a6:	229f      	movs	r2, #159	; 0x9f
 80010a8:	2152      	movs	r1, #82	; 0x52
 80010aa:	f107 0008 	add.w	r0, r7, #8
 80010ae:	f004 fd9f 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f003 fca2 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <writeMM+0x340>)
 80010ba:	223c      	movs	r2, #60	; 0x3c
 80010bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <writeMM+0x340>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2310      	movs	r3, #16
 80010ce:	22a3      	movs	r2, #163	; 0xa3
 80010d0:	2152      	movs	r1, #82	; 0x52
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	f004 fd8b 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f003 fc8e 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <writeMM+0x340>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <writeMM+0x340>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2310      	movs	r3, #16
 80010f6:	22b7      	movs	r2, #183	; 0xb7
 80010f8:	2152      	movs	r1, #82	; 0x52
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f004 fd77 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f003 fc7a 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x3c;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <writeMM+0x340>)
 800110a:	223c      	movs	r2, #60	; 0x3c
 800110c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <writeMM+0x340>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2310      	movs	r3, #16
 800111e:	22bb      	movs	r2, #187	; 0xbb
 8001120:	2152      	movs	r1, #82	; 0x52
 8001122:	f107 0008 	add.w	r0, r7, #8
 8001126:	f004 fd63 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f003 fc66 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <writeMM+0x340>)
 8001132:	2209      	movs	r2, #9
 8001134:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <writeMM+0x340>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2310      	movs	r3, #16
 8001146:	22b2      	movs	r2, #178	; 0xb2
 8001148:	2152      	movs	r1, #82	; 0x52
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	f004 fd4f 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f003 fc52 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <writeMM+0x340>)
 800115a:	2209      	movs	r2, #9
 800115c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <writeMM+0x340>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2310      	movs	r3, #16
 800116e:	22ca      	movs	r2, #202	; 0xca
 8001170:	2152      	movs	r1, #82	; 0x52
 8001172:	f107 0008 	add.w	r0, r7, #8
 8001176:	f004 fd3b 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f003 fc3e 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <writeMM+0x340>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	e001      	b.n	8001190 <writeMM+0x344>
 800118c:	20000098 	.word	0x20000098
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <writeMM+0x574>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2310      	movs	r3, #16
 800119c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80011a0:	2152      	movs	r1, #82	; 0x52
 80011a2:	f107 0008 	add.w	r0, r7, #8
 80011a6:	f004 fd23 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f003 fc26 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <writeMM+0x574>)
 80011b2:	2217      	movs	r2, #23
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <writeMM+0x574>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2310      	movs	r3, #16
 80011c6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011ca:	2152      	movs	r1, #82	; 0x52
 80011cc:	f107 0008 	add.w	r0, r7, #8
 80011d0:	f004 fd0e 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f003 fc11 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <writeMM+0x574>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <writeMM+0x574>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2310      	movs	r3, #16
 80011f0:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011f4:	2152      	movs	r1, #82	; 0x52
 80011f6:	f107 0008 	add.w	r0, r7, #8
 80011fa:	f004 fcf9 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f003 fbfc 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <writeMM+0x574>)
 8001206:	2205      	movs	r2, #5
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <writeMM+0x574>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2310      	movs	r3, #16
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	2152      	movs	r1, #82	; 0x52
 800121e:	f107 0008 	add.w	r0, r7, #8
 8001222:	f004 fce5 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f003 fbe8 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x05;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <writeMM+0x574>)
 800122e:	2205      	movs	r2, #5
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <writeMM+0x574>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2310      	movs	r3, #16
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	2152      	movs	r1, #82	; 0x52
 8001248:	f107 0008 	add.w	r0, r7, #8
 800124c:	f004 fcd0 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f003 fbd3 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <writeMM+0x574>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <writeMM+0x574>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2310      	movs	r3, #16
 800126c:	f240 1299 	movw	r2, #409	; 0x199
 8001270:	2152      	movs	r1, #82	; 0x52
 8001272:	f107 0008 	add.w	r0, r7, #8
 8001276:	f004 fcbb 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f003 fbbe 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <writeMM+0x574>)
 8001282:	221b      	movs	r2, #27
 8001284:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <writeMM+0x574>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800129a:	2152      	movs	r1, #82	; 0x52
 800129c:	f107 0008 	add.w	r0, r7, #8
 80012a0:	f004 fca6 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f003 fba9 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x3e;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <writeMM+0x574>)
 80012ac:	223e      	movs	r2, #62	; 0x3e
 80012ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <writeMM+0x574>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2310      	movs	r3, #16
 80012c0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012c4:	2152      	movs	r1, #82	; 0x52
 80012c6:	f107 0008 	add.w	r0, r7, #8
 80012ca:	f004 fc91 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f003 fb94 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <writeMM+0x574>)
 80012d6:	221f      	movs	r2, #31
 80012d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <writeMM+0x574>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012ee:	2152      	movs	r1, #82	; 0x52
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f004 fc7c 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f003 fb7f 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <writeMM+0x574>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <writeMM+0x574>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2310      	movs	r3, #16
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2152      	movs	r1, #82	; 0x52
 8001318:	f107 0008 	add.w	r0, r7, #8
 800131c:	f004 fc68 	bl	8005bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f003 fb6b 	bl	80049fc <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <writeMM+0x574>)
 8001328:	2210      	movs	r2, #16
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <writeMM+0x574>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2310      	movs	r3, #16
 800133c:	2211      	movs	r2, #17
 800133e:	2152      	movs	r1, #82	; 0x52
 8001340:	f107 0008 	add.w	r0, r7, #8
 8001344:	f004 fc54 	bl	8005bf0 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 fb57 	bl	80049fc <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <writeMM+0x574>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <writeMM+0x574>)
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2310      	movs	r3, #16
 8001364:	221b      	movs	r2, #27
 8001366:	2152      	movs	r1, #82	; 0x52
 8001368:	f107 0008 	add.w	r0, r7, #8
 800136c:	f004 fc40 	bl	8005bf0 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <writeMM+0x574>)
 8001372:	220a      	movs	r2, #10
 8001374:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <writeMM+0x574>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2310      	movs	r3, #16
 8001386:	221c      	movs	r2, #28
 8001388:	2152      	movs	r1, #82	; 0x52
 800138a:	f107 0008 	add.w	r0, r7, #8
 800138e:	f004 fc2f 	bl	8005bf0 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <writeMM+0x574>)
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <writeMM+0x574>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2310      	movs	r3, #16
 80013a8:	2214      	movs	r2, #20
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	f107 0008 	add.w	r0, r7, #8
 80013b0:	f004 fc1e 	bl	8005bf0 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	20000098 	.word	0x20000098

080013c4 <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <TOF_start_measurement+0x50>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <TOF_start_measurement+0x50>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	2218      	movs	r2, #24
 80013dc:	2152      	movs	r1, #82	; 0x52
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <TOF_start_measurement+0x54>)
 80013e0:	f004 fd00 	bl	8005de4 <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <TOF_start_measurement+0x50>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	2218      	movs	r2, #24
 80013f0:	2152      	movs	r1, #82	; 0x52
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <TOF_start_measurement+0x58>)
 80013f4:	f004 fcf6 	bl	8005de4 <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <TOF_start_measurement+0x50>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2310      	movs	r3, #16
 8001402:	2218      	movs	r2, #24
 8001404:	2152      	movs	r1, #82	; 0x52
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <TOF_start_measurement+0x5c>)
 8001408:	f004 fcec 	bl	8005de4 <HAL_I2C_Mem_Write_IT>
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000098 	.word	0x20000098
 8001418:	20000220 	.word	0x20000220
 800141c:	200001cc 	.word	0x200001cc
 8001420:	20000274 	.word	0x20000274

08001424 <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <TOF_get_measurement+0x48>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2310      	movs	r3, #16
 8001434:	2262      	movs	r2, #98	; 0x62
 8001436:	2152      	movs	r1, #82	; 0x52
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <TOF_get_measurement+0x4c>)
 800143a:	f004 fd85 	bl	8005f48 <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <TOF_get_measurement+0x50>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2310      	movs	r3, #16
 8001448:	2262      	movs	r2, #98	; 0x62
 800144a:	2152      	movs	r1, #82	; 0x52
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <TOF_get_measurement+0x54>)
 800144e:	f004 fd7b 	bl	8005f48 <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <TOF_get_measurement+0x58>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2310      	movs	r3, #16
 800145c:	2262      	movs	r2, #98	; 0x62
 800145e:	2152      	movs	r1, #82	; 0x52
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <TOF_get_measurement+0x5c>)
 8001462:	f004 fd71 	bl	8005f48 <HAL_I2C_Mem_Read_IT>
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000130 	.word	0x20000130
 8001470:	20000220 	.word	0x20000220
 8001474:	20000131 	.word	0x20000131
 8001478:	200001cc 	.word	0x200001cc
 800147c:	20000132 	.word	0x20000132
 8001480:	20000274 	.word	0x20000274

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f003 fa45 	bl	8004918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f897 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f000 fc33 	bl	8001cfc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001496:	f000 f94f 	bl	8001738 <MX_I2C1_Init>
  MX_I2C2_Init();
 800149a:	f000 f97b 	bl	8001794 <MX_I2C2_Init>
  MX_ADC1_Init();
 800149e:	f000 f8f9 	bl	8001694 <MX_ADC1_Init>
  MX_I2C3_Init();
 80014a2:	f000 f9a5 	bl	80017f0 <MX_I2C3_Init>
  MX_TIM3_Init();
 80014a6:	f000 fb33 	bl	8001b10 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014aa:	f000 fb85 	bl	8001bb8 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014ae:	f000 fa03 	bl	80018b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014b2:	f000 faad 	bl	8001a10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 fbf7 	bl	8001ca8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014ba:	f000 f9c7 	bl	800184c <MX_SPI2_Init>
  MX_TIM11_Init();
 80014be:	f000 fbcf 	bl	8001c60 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 80014c2:	f001 fdc5 	bl	8003050 <motorsInit>
	TOF_init();
 80014c6:	f7ff fc5b 	bl	8000d80 <TOF_init>
	maze_init();
 80014ca:	f000 fc95 	bl	8001df8 <maze_init>
	HAL_Delay(200);
 80014ce:	20c8      	movs	r0, #200	; 0xc8
 80014d0:	f003 fa94 	bl	80049fc <HAL_Delay>
	uart_startup_transmit();
 80014d4:	f003 f960 	bl	8004798 <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);
	if (HAL_FLASH_Unlock() != HAL_OK) while(1){  HAL_Delay(10);}
 80014d8:	f003 ff2c 	bl	8005334 <HAL_FLASH_Unlock>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <main+0x66>
 80014e2:	200a      	movs	r0, #10
 80014e4:	f003 fa8a 	bl	80049fc <HAL_Delay>
 80014e8:	e7fb      	b.n	80014e2 <main+0x5e>
//	HAL_Delay(3000);

	R_speed_setpoint = 0;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <main+0x120>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 0;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <main+0x124>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
	while(measurements[1]>100) HAL_Delay(100);
 80014f6:	e002      	b.n	80014fe <main+0x7a>
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f003 fa7f 	bl	80049fc <HAL_Delay>
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <main+0x128>)
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d8f8      	bhi.n	80014f8 <main+0x74>
	while(measurements[1]<100) HAL_Delay(100);
 8001506:	e002      	b.n	800150e <main+0x8a>
 8001508:	2064      	movs	r0, #100	; 0x64
 800150a:	f003 fa77 	bl	80049fc <HAL_Delay>
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <main+0x128>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	2b63      	cmp	r3, #99	; 0x63
 8001514:	d9f8      	bls.n	8001508 <main+0x84>
	HAL_Delay(1000);
 8001516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151a:	f003 fa6f 	bl	80049fc <HAL_Delay>
	explore();
 800151e:	f000 fdd1 	bl	80020c4 <explore>
	go_home();
 8001522:	f000 fe1f 	bl	8002164 <go_home>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8001526:	f003 fa5d 	bl	80049e4 <HAL_GetTick>
 800152a:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 800152c:	f003 fa5a 	bl	80049e4 <HAL_GetTick>
 8001530:	6038      	str	r0, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		uart_task();
 8001532:	f003 f959 	bl	80047e8 <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 8001536:	f003 fa55 	bl	80049e4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b65      	cmp	r3, #101	; 0x65
 8001542:	d902      	bls.n	800154a <main+0xc6>
			prev_main_loop_time = HAL_GetTick();
 8001544:	f003 fa4e 	bl	80049e4 <HAL_GetTick>
 8001548:	6038      	str	r0, [r7, #0]

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time > STR_CONTROL_LOOP_PERIOD_MS){
 800154a:	f003 fa4b 	bl	80049e4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b14      	cmp	r3, #20
 8001556:	d9ec      	bls.n	8001532 <main+0xae>
			prev_ctr_loop_time = HAL_GetTick();
 8001558:	f003 fa44 	bl	80049e4 <HAL_GetTick>
 800155c:	6078      	str	r0, [r7, #4]
			sprintf(send_buffer, "L:%.3d M:%.3d R:%.3d LE:%.3d RE:%.3d\n",(int)measurements[0],(int)measurements[1] ,(int)measurements[2], (int)htim5.Instance->CNT, (int)htim3.Instance->CNT);
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <main+0x128>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <main+0x128>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	461c      	mov	r4, r3
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <main+0x128>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	461a      	mov	r2, r3
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <main+0x12c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <main+0x130>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	9101      	str	r1, [sp, #4]
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	4623      	mov	r3, r4
 8001586:	4602      	mov	r2, r0
 8001588:	490b      	ldr	r1, [pc, #44]	; (80015b8 <main+0x134>)
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <main+0x138>)
 800158c:	f009 fac6 	bl	800ab1c <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <main+0x138>)
 8001592:	f7fe fe25 	bl	80001e0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <main+0x138>)
 800159c:	f003 f948 	bl	8004830 <uart_transmit>
		uart_task();
 80015a0:	e7c7      	b.n	8001532 <main+0xae>
 80015a2:	bf00      	nop
 80015a4:	20000104 	.word	0x20000104
 80015a8:	20000102 	.word	0x20000102
 80015ac:	20000130 	.word	0x20000130
 80015b0:	200003f8 	.word	0x200003f8
 80015b4:	200003b0 	.word	0x200003b0
 80015b8:	0800b51c 	.word	0x0800b51c
 80015bc:	200000a0 	.word	0x200000a0

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	; 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f009 fa9c 	bl	800ab0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <SystemClock_Config+0xcc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <SystemClock_Config+0xcc>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <SystemClock_Config+0xcc>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <SystemClock_Config+0xd0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <SystemClock_Config+0xd0>)
 800160a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <SystemClock_Config+0xd0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2310      	movs	r3, #16
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001628:	2302      	movs	r3, #2
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001630:	2308      	movs	r3, #8
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800163c:	2304      	movs	r3, #4
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f006 fc35 	bl	8007eb4 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001650:	f000 fbcc 	bl	8001dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001660:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001666:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2103      	movs	r1, #3
 8001672:	4618      	mov	r0, r3
 8001674:	f006 fe96 	bl	80083a4 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800167e:	f000 fbb5 	bl	8001dec <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3750      	adds	r7, #80	; 0x50
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000

08001694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800169a:	463b      	mov	r3, r7
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_ADC1_Init+0x98>)
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <MX_ADC1_Init+0x9c>)
 80016aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_ADC1_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_ADC1_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_ADC1_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_ADC1_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_ADC1_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_ADC1_Init+0x98>)
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <MX_ADC1_Init+0xa0>)
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_ADC1_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_ADC1_Init+0x98>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_ADC1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_ADC1_Init+0x98>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <MX_ADC1_Init+0x98>)
 80016f4:	f003 f9a6 	bl	8004a44 <HAL_ADC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016fe:	f000 fb75 	bl	8001dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001702:	2304      	movs	r3, #4
 8001704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_ADC1_Init+0x98>)
 8001714:	f003 f9da 	bl	8004acc <HAL_ADC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800171e:	f000 fb65 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000184 	.word	0x20000184
 8001730:	40012000 	.word	0x40012000
 8001734:	0f000001 	.word	0x0f000001

08001738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_I2C1_Init+0x50>)
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <MX_I2C1_Init+0x54>)
 8001740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_I2C1_Init+0x50>)
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_I2C1_Init+0x58>)
 8001746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_I2C1_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_I2C1_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_I2C1_Init+0x50>)
 8001756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_I2C1_Init+0x50>)
 8001776:	f004 f8f7 	bl	8005968 <HAL_I2C_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001780:	f000 fb34 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001cc 	.word	0x200001cc
 800178c:	40005400 	.word	0x40005400
 8001790:	00061a80 	.word	0x00061a80

08001794 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_I2C2_Init+0x50>)
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <MX_I2C2_Init+0x54>)
 800179c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_I2C2_Init+0x58>)
 80017a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_I2C2_Init+0x50>)
 80017d2:	f004 f8c9 	bl	8005968 <HAL_I2C_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017dc:	f000 fb06 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000220 	.word	0x20000220
 80017e8:	40005800 	.word	0x40005800
 80017ec:	00061a80 	.word	0x00061a80

080017f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C3_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_I2C3_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C3_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_I2C3_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C3_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_I2C3_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_I2C3_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_I2C3_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_I2C3_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_I2C3_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_I2C3_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C3_Init+0x50>)
 800182e:	f004 f89b 	bl	8005968 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 fad8 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000274 	.word	0x20000274
 8001844:	40005c00 	.word	0x40005c00
 8001848:	00061a80 	.word	0x00061a80

0800184c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_SPI2_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001880:	2230      	movs	r2, #48	; 0x30
 8001882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001898:	220a      	movs	r2, #10
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI2_Init+0x64>)
 800189e:	f006 ff61 	bl	8008764 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018a8:	f000 faa0 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200002c8 	.word	0x200002c8
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b096      	sub	sp, #88	; 0x58
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2220      	movs	r2, #32
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f009 f90b 	bl	800ab0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x154>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018fe:	2218      	movs	r2, #24
 8001900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x150>)
 800190a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001916:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_TIM1_Init+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001922:	4839      	ldr	r0, [pc, #228]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001924:	f006 ffa7 	bl	8008876 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800192e:	f000 fa5d 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800193c:	4619      	mov	r1, r3
 800193e:	4832      	ldr	r0, [pc, #200]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001940:	f007 fc52 	bl	80091e8 <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800194a:	f000 fa4f 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194e:	482e      	ldr	r0, [pc, #184]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001950:	f007 f842 	bl	80089d8 <HAL_TIM_PWM_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800195a:	f000 fa47 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	4619      	mov	r1, r3
 800196c:	4826      	ldr	r0, [pc, #152]	; (8001a08 <MX_TIM1_Init+0x150>)
 800196e:	f008 f801 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001978:	f000 fa38 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	2204      	movs	r2, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019a2:	f007 fb5f 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019ac:	f000 fa1e 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	2208      	movs	r2, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ba:	f007 fb53 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019c4:	f000 fa12 	bl	8001dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ec:	f008 f830 	bl	8009a50 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f000 f9f9 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019fc:	f002 fd0e 	bl	800441c <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3758      	adds	r7, #88	; 0x58
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000320 	.word	0x20000320
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a4a:	2218      	movs	r2, #24
 8001a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a68:	4828      	ldr	r0, [pc, #160]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a6a:	f006 ff04 	bl	8008876 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a74:	f000 f9ba 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4821      	ldr	r0, [pc, #132]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a86:	f007 fbaf 	bl	80091e8 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a90:	f000 f9ac 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a94:	481d      	ldr	r0, [pc, #116]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001a96:	f006 ff9f 	bl	80089d8 <HAL_TIM_PWM_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001aa0:	f000 f9a4 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001ab4:	f007 ff5e 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001abe:	f000 f995 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac2:	2360      	movs	r3, #96	; 0x60
 8001ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001ada:	f007 fac3 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ae4:	f000 f982 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2204      	movs	r2, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001af0:	f007 fab8 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001afa:	f000 f977 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM2_Init+0xfc>)
 8001b00:	f002 fc8c 	bl	800441c <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3738      	adds	r7, #56	; 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000368 	.word	0x20000368

08001b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f008 fff4 	bl	800ab0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b52:	2303      	movs	r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b7e:	f007 f835 	bl	8008bec <HAL_TIM_Encoder_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f000 f930 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b9a:	f007 feeb 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba4:	f000 f922 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200003b0 	.word	0x200003b0
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 ffa0 	bl	800ab0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <MX_TIM5_Init+0xa4>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c12:	2301      	movs	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001c26:	f006 ffe1 	bl	8008bec <HAL_TIM_Encoder_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f000 f8dc 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM5_Init+0xa0>)
 8001c42:	f007 fe97 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c4c:	f000 f8ce 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200003f8 	.word	0x200003f8
 8001c5c:	40000c00 	.word	0x40000c00

08001c60 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <MX_TIM11_Init+0x44>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 24;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c6c:	2218      	movs	r2, #24
 8001c6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c78:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c8c:	f006 fdf3 	bl	8008876 <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c96:	f000 f8a9 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000440 	.word	0x20000440
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f007 ff1c 	bl	8009b1c <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cea:	f000 f87f 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000488 	.word	0x20000488
 8001cf8:	40004400 	.word	0x40004400

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d6c:	481d      	ldr	r0, [pc, #116]	; (8001de4 <MX_GPIO_Init+0xe8>)
 8001d6e:	f003 fdc7 	bl	8005900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	481b      	ldr	r0, [pc, #108]	; (8001de8 <MX_GPIO_Init+0xec>)
 8001d7a:	f003 fdc1 	bl	8005900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4813      	ldr	r0, [pc, #76]	; (8001de4 <MX_GPIO_Init+0xe8>)
 8001d98:	f003 fc2e 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <MX_GPIO_Init+0xe8>)
 8001db6:	f003 fc1f 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_GPIO_Init+0xec>)
 8001dd4:	f003 fc10 	bl	80055f8 <HAL_GPIO_Init>

}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020400 	.word	0x40020400

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001df4:	e7fe      	b.n	8001df4 <Error_Handler+0x8>
	...

08001df8 <maze_init>:
extern uint8_t target_y;
extern MouseStruct Mouse;

//extern TIM_HandleTypeDef htim5;

void maze_init(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
	// set all walls to zero, populate with manhattan dist
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e030      	b.n	8001e66 <maze_init+0x6e>
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	e027      	b.n	8001e5a <maze_init+0x62>
			maze[i][j].dist = abs(END_CELL_X-i) + abs(END_CELL_Y-j);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1c3 0305 	rsb	r3, r3, #5
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bfb8      	it	lt
 8001e14:	425b      	neglt	r3, r3
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bfb8      	it	lt
 8001e1e:	425b      	neglt	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b2d8      	uxtb	r0, r3
 8001e26:	4937      	ldr	r1, [pc, #220]	; (8001f04 <maze_init+0x10c>)
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	440b      	add	r3, r1
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	705a      	strb	r2, [r3, #1]
			maze[i][j].walls = 0;
 8001e3e:	4931      	ldr	r1, [pc, #196]	; (8001f04 <maze_init+0x10c>)
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	ddd4      	ble.n	8001e0a <maze_init+0x12>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	ddcb      	ble.n	8001e04 <maze_init+0xc>
		}
	}
	//should actually assume all walls filled in
	//fill top and bottom edge walls
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e010      	b.n	8001e94 <maze_init+0x9c>
		add_wall(i, 0, SOUTH);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2202      	movs	r2, #2
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fddc 	bl	8002a38 <add_wall>
		add_wall(i, MAZE_CELL_HEIGHT-1, NORTH);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	2105      	movs	r1, #5
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fdd5 	bl	8002a38 <add_wall>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	ddeb      	ble.n	8001e72 <maze_init+0x7a>
	}
	//fill left and right edge walls
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	e010      	b.n	8001ec2 <maze_init+0xca>
		add_wall(0, j, WEST);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 fdc5 	bl	8002a38 <add_wall>
		add_wall(MAZE_CELL_WIDTH-1, j, EAST);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f000 fdbe 	bl	8002a38 <add_wall>
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	ddeb      	ble.n	8001ea0 <maze_init+0xa8>
	}
	// explored starting square
    add_wall(0, 0, EAST);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 fdb3 	bl	8002a38 <add_wall>
    add_wall(0, 0, SOUTH);
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 fdae 	bl	8002a38 <add_wall>
    add_wall(0, 0, WEST);
 8001edc:	2203      	movs	r2, #3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 fda9 	bl	8002a38 <add_wall>
	set_explored(0, 0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 fed3 	bl	8002c94 <set_explored>
//    set_explored(2, 1);
//    set_explored(3, 2);
//
//    print_maze();
//    int t1 = HAL_GetTick();
    flood(END_CELL_X, END_CELL_Y);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2005      	movs	r0, #5
 8001ef2:	f000 ffad 	bl	8002e50 <flood>
//	HAL_Delay(15);
//	sprintf(send_buffer, "%d\n",t2);
//	uart_transmit(send_buffer, strlen(send_buffer));
//	HAL_Delay(15);
//
	print_maze();
 8001ef6:	f000 f807 	bl	8001f08 <print_maze>
//	save_maze();
//
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000138 	.word	0x20000138

08001f08 <print_maze>:
void print_maze(){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f002 fd74 	bl	80049fc <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001f14:	2305      	movs	r3, #5
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e034      	b.n	8001f84 <print_maze+0x7c>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	e01c      	b.n	8001f5a <print_maze+0x52>
			sprintf(send_buffer, "|%.2d",(int)maze[j][i].walls);
 8001f20:	4949      	ldr	r1, [pc, #292]	; (8002048 <print_maze+0x140>)
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4945      	ldr	r1, [pc, #276]	; (800204c <print_maze+0x144>)
 8001f38:	4845      	ldr	r0, [pc, #276]	; (8002050 <print_maze+0x148>)
 8001f3a:	f008 fdef 	bl	800ab1c <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 8001f3e:	4844      	ldr	r0, [pc, #272]	; (8002050 <print_maze+0x148>)
 8001f40:	f7fe f94e 	bl	80001e0 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4841      	ldr	r0, [pc, #260]	; (8002050 <print_maze+0x148>)
 8001f4a:	f002 fc71 	bl	8004830 <uart_transmit>
			HAL_Delay(15);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f002 fd54 	bl	80049fc <HAL_Delay>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	dddf      	ble.n	8001f20 <print_maze+0x18>
		}
		sprintf(send_buffer, "|\n");
 8001f60:	493c      	ldr	r1, [pc, #240]	; (8002054 <print_maze+0x14c>)
 8001f62:	483b      	ldr	r0, [pc, #236]	; (8002050 <print_maze+0x148>)
 8001f64:	f008 fdda 	bl	800ab1c <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8001f68:	4839      	ldr	r0, [pc, #228]	; (8002050 <print_maze+0x148>)
 8001f6a:	f7fe f939 	bl	80001e0 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	4837      	ldr	r0, [pc, #220]	; (8002050 <print_maze+0x148>)
 8001f74:	f002 fc5c 	bl	8004830 <uart_transmit>
		HAL_Delay(15);
 8001f78:	200f      	movs	r0, #15
 8001f7a:	f002 fd3f 	bl	80049fc <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dac7      	bge.n	8001f1a <print_maze+0x12>
	}
	sprintf(send_buffer, "\n");
 8001f8a:	4933      	ldr	r1, [pc, #204]	; (8002058 <print_maze+0x150>)
 8001f8c:	4830      	ldr	r0, [pc, #192]	; (8002050 <print_maze+0x148>)
 8001f8e:	f008 fdc5 	bl	800ab1c <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8001f92:	482f      	ldr	r0, [pc, #188]	; (8002050 <print_maze+0x148>)
 8001f94:	f7fe f924 	bl	80001e0 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	482c      	ldr	r0, [pc, #176]	; (8002050 <print_maze+0x148>)
 8001f9e:	f002 fc47 	bl	8004830 <uart_transmit>
	HAL_Delay(15);
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f002 fd2a 	bl	80049fc <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001fa8:	2305      	movs	r3, #5
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	e035      	b.n	800201a <print_maze+0x112>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	e01d      	b.n	8001ff0 <print_maze+0xe8>
			sprintf(send_buffer, "|%.2d",(int)maze[j][i].dist);
 8001fb4:	4924      	ldr	r1, [pc, #144]	; (8002048 <print_maze+0x140>)
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	440b      	add	r3, r1
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	491f      	ldr	r1, [pc, #124]	; (800204c <print_maze+0x144>)
 8001fce:	4820      	ldr	r0, [pc, #128]	; (8002050 <print_maze+0x148>)
 8001fd0:	f008 fda4 	bl	800ab1c <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 8001fd4:	481e      	ldr	r0, [pc, #120]	; (8002050 <print_maze+0x148>)
 8001fd6:	f7fe f903 	bl	80001e0 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4619      	mov	r1, r3
 8001fde:	481c      	ldr	r0, [pc, #112]	; (8002050 <print_maze+0x148>)
 8001fe0:	f002 fc26 	bl	8004830 <uart_transmit>
			HAL_Delay(15);
 8001fe4:	200f      	movs	r0, #15
 8001fe6:	f002 fd09 	bl	80049fc <HAL_Delay>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	ddde      	ble.n	8001fb4 <print_maze+0xac>
		}
		sprintf(send_buffer, "|\n");
 8001ff6:	4917      	ldr	r1, [pc, #92]	; (8002054 <print_maze+0x14c>)
 8001ff8:	4815      	ldr	r0, [pc, #84]	; (8002050 <print_maze+0x148>)
 8001ffa:	f008 fd8f 	bl	800ab1c <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8001ffe:	4814      	ldr	r0, [pc, #80]	; (8002050 <print_maze+0x148>)
 8002000:	f7fe f8ee 	bl	80001e0 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <print_maze+0x148>)
 800200a:	f002 fc11 	bl	8004830 <uart_transmit>
		HAL_Delay(15);
 800200e:	200f      	movs	r0, #15
 8002010:	f002 fcf4 	bl	80049fc <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	dac6      	bge.n	8001fae <print_maze+0xa6>
	}
	sprintf(send_buffer, "\n");
 8002020:	490d      	ldr	r1, [pc, #52]	; (8002058 <print_maze+0x150>)
 8002022:	480b      	ldr	r0, [pc, #44]	; (8002050 <print_maze+0x148>)
 8002024:	f008 fd7a 	bl	800ab1c <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <print_maze+0x148>)
 800202a:	f7fe f8d9 	bl	80001e0 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <print_maze+0x148>)
 8002034:	f002 fbfc 	bl	8004830 <uart_transmit>
	HAL_Delay(15);
 8002038:	200f      	movs	r0, #15
 800203a:	f002 fcdf 	bl	80049fc <HAL_Delay>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000138 	.word	0x20000138
 800204c:	0800b544 	.word	0x0800b544
 8002050:	200000a0 	.word	0x200000a0
 8002054:	0800b54c 	.word	0x0800b54c
 8002058:	0800b550 	.word	0x0800b550

0800205c <turn_to_direction>:
void turn_to_direction(uint8_t target_dir){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	uint8_t diff = (4 + target_dir - (Mouse.heading / 2)) % 4;
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3304      	adds	r3, #4
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <turn_to_direction+0x64>)
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	425a      	negs	r2, r3
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	bf58      	it	pl
 8002080:	4253      	negpl	r3, r2
 8002082:	73fb      	strb	r3, [r7, #15]
    if (diff == 1){
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d103      	bne.n	8002092 <turn_to_direction+0x36>
    	turn(90);
 800208a:	205a      	movs	r0, #90	; 0x5a
 800208c:	f001 f96c 	bl	8003368 <turn>
    }
    else if (diff == 3){
    	turn(-90);
//    	smooth_turn_L();
    }
}
 8002090:	e011      	b.n	80020b6 <turn_to_direction+0x5a>
    else if (diff == 2){
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d107      	bne.n	80020a8 <turn_to_direction+0x4c>
    	turn(180);
 8002098:	20b4      	movs	r0, #180	; 0xb4
 800209a:	f001 f965 	bl	8003368 <turn>
    	reverse(-150);
 800209e:	f06f 0095 	mvn.w	r0, #149	; 0x95
 80020a2:	f001 f92b 	bl	80032fc <reverse>
}
 80020a6:	e006      	b.n	80020b6 <turn_to_direction+0x5a>
    else if (diff == 3){
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d103      	bne.n	80020b6 <turn_to_direction+0x5a>
    	turn(-90);
 80020ae:	f06f 0059 	mvn.w	r0, #89	; 0x59
 80020b2:	f001 f959 	bl	8003368 <turn>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000180 	.word	0x20000180

080020c4 <explore>:
void explore(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

	while(!((Mouse.current_cell_x == target_x) && (Mouse.current_cell_y == target_y))){
 80020c8:	e024      	b.n	8002114 <explore+0x50>
		if (measurements[1]<20) break;
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <explore+0x88>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	2b13      	cmp	r3, #19
 80020d0:	d92d      	bls.n	800212e <explore+0x6a>
		flood(target_x, target_y);
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <explore+0x8c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <explore+0x90>)
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 feb7 	bl	8002e50 <flood>

		HAL_Delay(100);
 80020e2:	2064      	movs	r0, #100	; 0x64
 80020e4:	f002 fc8a 	bl	80049fc <HAL_Delay>

		turn_to_direction(dir_of_lowest(Mouse.current_cell_x,Mouse.current_cell_y));
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <explore+0x94>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <explore+0x94>)
 80020ee:	7892      	ldrb	r2, [r2, #2]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fdfc 	bl	8002cf0 <dir_of_lowest>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffae 	bl	800205c <turn_to_direction>
		HAL_Delay(100);
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	f002 fc7b 	bl	80049fc <HAL_Delay>

		move(300,0);
 8002106:	2100      	movs	r1, #0
 8002108:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800210c:	f001 f83c 	bl	8003188 <move>
		save_maze();
 8002110:	f000 fbe2 	bl	80028d8 <save_maze>
	while(!((Mouse.current_cell_x == target_x) && (Mouse.current_cell_y == target_y))){
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <explore+0x94>)
 8002116:	785a      	ldrb	r2, [r3, #1]
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <explore+0x8c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d1d4      	bne.n	80020ca <explore+0x6>
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <explore+0x94>)
 8002122:	789a      	ldrb	r2, [r3, #2]
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <explore+0x90>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d1ce      	bne.n	80020ca <explore+0x6>
 800212c:	e000      	b.n	8002130 <explore+0x6c>
		if (measurements[1]<20) break;
 800212e:	bf00      	nop
//		print_maze();


	}
	sprintf(send_buffer, "why\n");
 8002130:	490a      	ldr	r1, [pc, #40]	; (800215c <explore+0x98>)
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <explore+0x9c>)
 8002134:	f008 fcf2 	bl	800ab1c <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <explore+0x9c>)
 800213a:	f7fe f851 	bl	80001e0 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	4619      	mov	r1, r3
 8002142:	4807      	ldr	r0, [pc, #28]	; (8002160 <explore+0x9c>)
 8002144:	f002 fb74 	bl	8004830 <uart_transmit>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000130 	.word	0x20000130
 8002150:	20000000 	.word	0x20000000
 8002154:	20000137 	.word	0x20000137
 8002158:	20000180 	.word	0x20000180
 800215c:	0800b554 	.word	0x0800b554
 8002160:	200000a0 	.word	0x200000a0

08002164 <go_home>:
void go_home(){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	target_x = 0;
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <go_home+0xac>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
	target_y = 0;
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <go_home+0xb0>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
	flood(target_x, target_y);
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <go_home+0xac>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <go_home+0xb0>)
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fe66 	bl	8002e50 <flood>
	HAL_Delay(500);
 8002184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002188:	f002 fc38 	bl	80049fc <HAL_Delay>
	while(!((Mouse.current_cell_x == target_x) && (Mouse.current_cell_y == target_y))){
 800218c:	e024      	b.n	80021d8 <go_home+0x74>
		if (measurements[1]<20) break;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <go_home+0xb4>)
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	2b13      	cmp	r3, #19
 8002194:	d92d      	bls.n	80021f2 <go_home+0x8e>
		flood(target_x, target_y);
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <go_home+0xac>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <go_home+0xb0>)
 800219c:	7812      	ldrb	r2, [r2, #0]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fe55 	bl	8002e50 <flood>

		HAL_Delay(100);
 80021a6:	2064      	movs	r0, #100	; 0x64
 80021a8:	f002 fc28 	bl	80049fc <HAL_Delay>

		turn_to_direction(dir_of_lowest(Mouse.current_cell_x,Mouse.current_cell_y));
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <go_home+0xb8>)
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <go_home+0xb8>)
 80021b2:	7892      	ldrb	r2, [r2, #2]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fd9a 	bl	8002cf0 <dir_of_lowest>
 80021bc:	4603      	mov	r3, r0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff4c 	bl	800205c <turn_to_direction>
		HAL_Delay(100);
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	f002 fc19 	bl	80049fc <HAL_Delay>

		move(300,0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021d0:	f000 ffda 	bl	8003188 <move>
		save_maze();
 80021d4:	f000 fb80 	bl	80028d8 <save_maze>
	while(!((Mouse.current_cell_x == target_x) && (Mouse.current_cell_y == target_y))){
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <go_home+0xb8>)
 80021da:	785a      	ldrb	r2, [r3, #1]
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <go_home+0xac>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1d4      	bne.n	800218e <go_home+0x2a>
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <go_home+0xb8>)
 80021e6:	789a      	ldrb	r2, [r3, #2]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <go_home+0xb0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1ce      	bne.n	800218e <go_home+0x2a>
 80021f0:	e000      	b.n	80021f4 <go_home+0x90>
		if (measurements[1]<20) break;
 80021f2:	bf00      	nop
//		print_maze();


	}
	sprintf(send_buffer, "why\n");
 80021f4:	490a      	ldr	r1, [pc, #40]	; (8002220 <go_home+0xbc>)
 80021f6:	480b      	ldr	r0, [pc, #44]	; (8002224 <go_home+0xc0>)
 80021f8:	f008 fc90 	bl	800ab1c <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <go_home+0xc0>)
 80021fe:	f7fd ffef 	bl	80001e0 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	4619      	mov	r1, r3
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <go_home+0xc0>)
 8002208:	f002 fb12 	bl	8004830 <uart_transmit>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	20000137 	.word	0x20000137
 8002218:	20000130 	.word	0x20000130
 800221c:	20000180 	.word	0x20000180
 8002220:	0800b554 	.word	0x0800b554
 8002224:	200000a0 	.word	0x200000a0

08002228 <update>:
void update(){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	static uint8_t L_open_count = 0;
	static uint8_t R_open_count = 0;
	//update current cell coords
	// at 400mm/s, 9-10 counts per loop
	switch (Mouse.heading) {
 800222c:	4b66      	ldr	r3, [pc, #408]	; (80023c8 <update+0x1a0>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b07      	cmp	r3, #7
 8002232:	f200 832b 	bhi.w	800288c <update+0x664>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <update+0x14>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800225d 	.word	0x0800225d
 8002240:	0800236f 	.word	0x0800236f
 8002244:	080023ed 	.word	0x080023ed
 8002248:	080024ff 	.word	0x080024ff
 800224c:	0800257d 	.word	0x0800257d
 8002250:	0800268f 	.word	0x0800268f
 8002254:	0800270d 	.word	0x0800270d
 8002258:	08002837 	.word	0x08002837
	case 0:
		// update coords
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 800225c:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <update+0x1a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2bcf      	cmp	r3, #207	; 0xcf
 8002262:	dd45      	ble.n	80022f0 <update+0xc8>
 8002264:	4b5a      	ldr	r3, [pc, #360]	; (80023d0 <update+0x1a8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2bcf      	cmp	r3, #207	; 0xcf
 800226a:	dd41      	ble.n	80022f0 <update+0xc8>
			if (L_open_count == 0){
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <update+0x1ac>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <update+0x60>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, WEST);
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <update+0x1a0>)
 8002276:	7858      	ldrb	r0, [r3, #1]
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <update+0x1a0>)
 800227a:	789b      	ldrb	r3, [r3, #2]
 800227c:	3301      	adds	r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2203      	movs	r2, #3
 8002282:	4619      	mov	r1, r3
 8002284:	f000 fbd8 	bl	8002a38 <add_wall>
			}
			if (R_open_count == 0){
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <update+0x1b0>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <update+0x7c>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, EAST);
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <update+0x1a0>)
 8002292:	7858      	ldrb	r0, [r3, #1]
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <update+0x1a0>)
 8002296:	789b      	ldrb	r3, [r3, #2]
 8002298:	3301      	adds	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	f000 fbca 	bl	8002a38 <add_wall>
			}
			L_open_count = 0;
 80022a4:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <update+0x1ac>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <update+0x1b0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80022b0:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <update+0x1a0>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	4a44      	ldr	r2, [pc, #272]	; (80023c8 <update+0x1a0>)
 80022b6:	7892      	ldrb	r2, [r2, #2]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fcea 	bl	8002c94 <set_explored>
			Mouse.current_cell_y ++; //208 = (120*180)/33pi
 80022c0:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <update+0x1a0>)
 80022c2:	789b      	ldrb	r3, [r3, #2]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <update+0x1a0>)
 80022ca:	709a      	strb	r2, [r3, #2]

			L_acc -= COUNTS_PER_CELL;
 80022cc:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <update+0x1a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3bd0      	subs	r3, #208	; 0xd0
 80022d2:	4a3e      	ldr	r2, [pc, #248]	; (80023cc <update+0x1a4>)
 80022d4:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 80022d6:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <update+0x1a8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3bd0      	subs	r3, #208	; 0xd0
 80022dc:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <update+0x1a8>)
 80022de:	6013      	str	r3, [r2, #0]

			flood(target_x, target_y);
 80022e0:	4b3e      	ldr	r3, [pc, #248]	; (80023dc <update+0x1b4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4a3e      	ldr	r2, [pc, #248]	; (80023e0 <update+0x1b8>)
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fdb0 	bl	8002e50 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 80022f0:	4b36      	ldr	r3, [pc, #216]	; (80023cc <update+0x1a4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b95      	cmp	r3, #149	; 0x95
 80022f6:	dd19      	ble.n	800232c <update+0x104>
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <update+0x1a4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2bc8      	cmp	r3, #200	; 0xc8
 80022fe:	dc15      	bgt.n	800232c <update+0x104>
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <update+0x1a8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b95      	cmp	r3, #149	; 0x95
 8002306:	dd11      	ble.n	800232c <update+0x104>
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <update+0x1a8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2bc8      	cmp	r3, #200	; 0xc8
 800230e:	dc0d      	bgt.n	800232c <update+0x104>
			if(measurements[1] < 200){
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <update+0x1bc>)
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	2bc7      	cmp	r3, #199	; 0xc7
 8002316:	d809      	bhi.n	800232c <update+0x104>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, NORTH);
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <update+0x1a0>)
 800231a:	7858      	ldrb	r0, [r3, #1]
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <update+0x1a0>)
 800231e:	789b      	ldrb	r3, [r3, #2]
 8002320:	3301      	adds	r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	f000 fb86 	bl	8002a38 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 200){
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <update+0x1bc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <update+0x1c0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b32      	cmp	r3, #50	; 0x32
 800233a:	dd06      	ble.n	800234a <update+0x122>
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <update+0x1bc>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2bc8      	cmp	r3, #200	; 0xc8
 8002342:	d902      	bls.n	800234a <update+0x122>
			L_open_count = 1;
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <update+0x1ac>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 200){
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <update+0x1bc>)
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	461a      	mov	r2, r3
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <update+0x1c0>)
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b32      	cmp	r3, #50	; 0x32
 8002358:	f340 829a 	ble.w	8002890 <update+0x668>
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <update+0x1bc>)
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	2bc8      	cmp	r3, #200	; 0xc8
 8002362:	f240 8295 	bls.w	8002890 <update+0x668>
			R_open_count = 1;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <update+0x1b0>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800236c:	e290      	b.n	8002890 <update+0x668>
	case 1:
		if (L_acc >= 295 && R_acc >= 295){
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <update+0x1a4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002376:	f340 828d 	ble.w	8002894 <update+0x66c>
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <update+0x1a8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002382:	f340 8287 	ble.w	8002894 <update+0x66c>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <update+0x1a0>)
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <update+0x1a0>)
 800238c:	7892      	ldrb	r2, [r2, #2]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fc7f 	bl	8002c94 <set_explored>
			Mouse.current_cell_x ++; //sqrt(2) * 208
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <update+0x1a0>)
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <update+0x1a0>)
 80023a0:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <update+0x1a0>)
 80023a4:	789b      	ldrb	r3, [r3, #2]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <update+0x1a0>)
 80023ac:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <update+0x1a4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <update+0x1a4>)
 80023b8:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <update+0x1a8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80023c2:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <update+0x1a8>)
 80023c4:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 80023c6:	e265      	b.n	8002894 <update+0x66c>
 80023c8:	20000180 	.word	0x20000180
 80023cc:	20000124 	.word	0x20000124
 80023d0:	20000128 	.word	0x20000128
 80023d4:	200004cc 	.word	0x200004cc
 80023d8:	200004cd 	.word	0x200004cd
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000137 	.word	0x20000137
 80023e4:	20000130 	.word	0x20000130
 80023e8:	20000134 	.word	0x20000134
	case 2:
		// update coords
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 80023ec:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <update+0x330>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2bcf      	cmp	r3, #207	; 0xcf
 80023f2:	dd45      	ble.n	8002480 <update+0x258>
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <update+0x334>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2bcf      	cmp	r3, #207	; 0xcf
 80023fa:	dd41      	ble.n	8002480 <update+0x258>
			if (L_open_count == 0){
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <update+0x338>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <update+0x1f0>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, NORTH);
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <update+0x33c>)
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	3301      	adds	r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4a55      	ldr	r2, [pc, #340]	; (8002564 <update+0x33c>)
 800240e:	7891      	ldrb	r1, [r2, #2]
 8002410:	2200      	movs	r2, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb10 	bl	8002a38 <add_wall>
			}
			if (R_open_count == 0){
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <update+0x340>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <update+0x20c>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, SOUTH);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <update+0x33c>)
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	3301      	adds	r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <update+0x33c>)
 800242a:	7891      	ldrb	r1, [r2, #2]
 800242c:	2202      	movs	r2, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fb02 	bl	8002a38 <add_wall>
			}
			L_open_count = 0;
 8002434:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <update+0x338>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 800243a:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <update+0x340>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <update+0x33c>)
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <update+0x33c>)
 8002446:	7892      	ldrb	r2, [r2, #2]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fc22 	bl	8002c94 <set_explored>
			Mouse.current_cell_x ++; //208 = (120*180)/33pi
 8002450:	4b44      	ldr	r3, [pc, #272]	; (8002564 <update+0x33c>)
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	3301      	adds	r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <update+0x33c>)
 800245a:	705a      	strb	r2, [r3, #1]

			L_acc -= COUNTS_PER_CELL;
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <update+0x330>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3bd0      	subs	r3, #208	; 0xd0
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <update+0x330>)
 8002464:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <update+0x334>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3bd0      	subs	r3, #208	; 0xd0
 800246c:	4a3b      	ldr	r2, [pc, #236]	; (800255c <update+0x334>)
 800246e:	6013      	str	r3, [r2, #0]
			flood(target_x, target_y);
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <update+0x344>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4a3e      	ldr	r2, [pc, #248]	; (8002570 <update+0x348>)
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fce8 	bl	8002e50 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <update+0x330>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b95      	cmp	r3, #149	; 0x95
 8002486:	dd19      	ble.n	80024bc <update+0x294>
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <update+0x330>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2bc8      	cmp	r3, #200	; 0xc8
 800248e:	dc15      	bgt.n	80024bc <update+0x294>
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <update+0x334>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b95      	cmp	r3, #149	; 0x95
 8002496:	dd11      	ble.n	80024bc <update+0x294>
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <update+0x334>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2bc8      	cmp	r3, #200	; 0xc8
 800249e:	dc0d      	bgt.n	80024bc <update+0x294>
			if(measurements[1] < 200){
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <update+0x34c>)
 80024a2:	785b      	ldrb	r3, [r3, #1]
 80024a4:	2bc7      	cmp	r3, #199	; 0xc7
 80024a6:	d809      	bhi.n	80024bc <update+0x294>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, EAST);
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <update+0x33c>)
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <update+0x33c>)
 80024b2:	7891      	ldrb	r1, [r2, #2]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fabe 	bl	8002a38 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 200){
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <update+0x34c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <update+0x350>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b32      	cmp	r3, #50	; 0x32
 80024ca:	dd06      	ble.n	80024da <update+0x2b2>
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <update+0x34c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2bc8      	cmp	r3, #200	; 0xc8
 80024d2:	d902      	bls.n	80024da <update+0x2b2>
			L_open_count = 1;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <update+0x338>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 200){
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <update+0x34c>)
 80024dc:	789b      	ldrb	r3, [r3, #2]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <update+0x350>)
 80024e2:	789b      	ldrb	r3, [r3, #2]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b32      	cmp	r3, #50	; 0x32
 80024e8:	f340 81d6 	ble.w	8002898 <update+0x670>
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <update+0x34c>)
 80024ee:	789b      	ldrb	r3, [r3, #2]
 80024f0:	2bc8      	cmp	r3, #200	; 0xc8
 80024f2:	f240 81d1 	bls.w	8002898 <update+0x670>
			R_open_count = 1;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <update+0x340>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80024fc:	e1cc      	b.n	8002898 <update+0x670>
	case 3:
		if (L_acc >= 295 && R_acc >= 295){
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <update+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002506:	f340 81c9 	ble.w	800289c <update+0x674>
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <update+0x334>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002512:	f340 81c3 	ble.w	800289c <update+0x674>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <update+0x33c>)
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <update+0x33c>)
 800251c:	7892      	ldrb	r2, [r2, #2]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fbb7 	bl	8002c94 <set_explored>
			Mouse.current_cell_x ++;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <update+0x33c>)
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <update+0x33c>)
 8002530:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <update+0x33c>)
 8002534:	789b      	ldrb	r3, [r3, #2]
 8002536:	3b01      	subs	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <update+0x33c>)
 800253c:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <update+0x330>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <update+0x330>)
 8002548:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <update+0x334>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002552:	4a02      	ldr	r2, [pc, #8]	; (800255c <update+0x334>)
 8002554:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 8002556:	e1a1      	b.n	800289c <update+0x674>
 8002558:	20000124 	.word	0x20000124
 800255c:	20000128 	.word	0x20000128
 8002560:	200004cc 	.word	0x200004cc
 8002564:	20000180 	.word	0x20000180
 8002568:	200004cd 	.word	0x200004cd
 800256c:	20000000 	.word	0x20000000
 8002570:	20000137 	.word	0x20000137
 8002574:	20000130 	.word	0x20000130
 8002578:	20000134 	.word	0x20000134
	case 4:
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <update+0x4c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2bcf      	cmp	r3, #207	; 0xcf
 8002582:	dd45      	ble.n	8002610 <update+0x3e8>
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <update+0x4c4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2bcf      	cmp	r3, #207	; 0xcf
 800258a:	dd41      	ble.n	8002610 <update+0x3e8>
			if (L_open_count == 0){
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <update+0x4c8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <update+0x380>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, EAST);
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <update+0x4cc>)
 8002596:	7858      	ldrb	r0, [r3, #1]
 8002598:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <update+0x4cc>)
 800259a:	789b      	ldrb	r3, [r3, #2]
 800259c:	3b01      	subs	r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2201      	movs	r2, #1
 80025a2:	4619      	mov	r1, r3
 80025a4:	f000 fa48 	bl	8002a38 <add_wall>
			}
			if (R_open_count == 0){
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <update+0x4d0>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <update+0x39c>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, WEST);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <update+0x4cc>)
 80025b2:	7858      	ldrb	r0, [r3, #1]
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <update+0x4cc>)
 80025b6:	789b      	ldrb	r3, [r3, #2]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2203      	movs	r2, #3
 80025be:	4619      	mov	r1, r3
 80025c0:	f000 fa3a 	bl	8002a38 <add_wall>
			}
			L_open_count = 0;
 80025c4:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <update+0x4c8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <update+0x4d0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <update+0x4cc>)
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <update+0x4cc>)
 80025d6:	7892      	ldrb	r2, [r2, #2]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fb5a 	bl	8002c94 <set_explored>
			Mouse.current_cell_y --;
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <update+0x4cc>)
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <update+0x4cc>)
 80025ea:	709a      	strb	r2, [r3, #2]

			L_acc -= COUNTS_PER_CELL;
 80025ec:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <update+0x4c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3bd0      	subs	r3, #208	; 0xd0
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <update+0x4c0>)
 80025f4:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <update+0x4c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3bd0      	subs	r3, #208	; 0xd0
 80025fc:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <update+0x4c4>)
 80025fe:	6013      	str	r3, [r2, #0]
			flood(target_x, target_y);
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <update+0x4d4>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4a3e      	ldr	r2, [pc, #248]	; (8002700 <update+0x4d8>)
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fc20 	bl	8002e50 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <update+0x4c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b95      	cmp	r3, #149	; 0x95
 8002616:	dd19      	ble.n	800264c <update+0x424>
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <update+0x4c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2bc8      	cmp	r3, #200	; 0xc8
 800261e:	dc15      	bgt.n	800264c <update+0x424>
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <update+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b95      	cmp	r3, #149	; 0x95
 8002626:	dd11      	ble.n	800264c <update+0x424>
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <update+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2bc8      	cmp	r3, #200	; 0xc8
 800262e:	dc0d      	bgt.n	800264c <update+0x424>
			if(measurements[1] < 200){
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <update+0x4dc>)
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2bc7      	cmp	r3, #199	; 0xc7
 8002636:	d809      	bhi.n	800264c <update+0x424>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, SOUTH);
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <update+0x4cc>)
 800263a:	7858      	ldrb	r0, [r3, #1]
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <update+0x4cc>)
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	3b01      	subs	r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2202      	movs	r2, #2
 8002646:	4619      	mov	r1, r3
 8002648:	f000 f9f6 	bl	8002a38 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 200){
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <update+0x4dc>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <update+0x4e0>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b32      	cmp	r3, #50	; 0x32
 800265a:	dd06      	ble.n	800266a <update+0x442>
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <update+0x4dc>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2bc8      	cmp	r3, #200	; 0xc8
 8002662:	d902      	bls.n	800266a <update+0x442>
			L_open_count = 1;
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <update+0x4c8>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 200){
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <update+0x4dc>)
 800266c:	789b      	ldrb	r3, [r3, #2]
 800266e:	461a      	mov	r2, r3
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <update+0x4e0>)
 8002672:	789b      	ldrb	r3, [r3, #2]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b32      	cmp	r3, #50	; 0x32
 8002678:	f340 8112 	ble.w	80028a0 <update+0x678>
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <update+0x4dc>)
 800267e:	789b      	ldrb	r3, [r3, #2]
 8002680:	2bc8      	cmp	r3, #200	; 0xc8
 8002682:	f240 810d 	bls.w	80028a0 <update+0x678>
			R_open_count = 1;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <update+0x4d0>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800268c:	e108      	b.n	80028a0 <update+0x678>
	case 5:
		if (L_acc >= 295 && R_acc >= 295){
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <update+0x4c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002696:	f340 8105 	ble.w	80028a4 <update+0x67c>
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <update+0x4c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80026a2:	f340 80ff 	ble.w	80028a4 <update+0x67c>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <update+0x4cc>)
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <update+0x4cc>)
 80026ac:	7892      	ldrb	r2, [r2, #2]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 faef 	bl	8002c94 <set_explored>
			Mouse.current_cell_x --;
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <update+0x4cc>)
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <update+0x4cc>)
 80026c0:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <update+0x4cc>)
 80026c4:	789b      	ldrb	r3, [r3, #2]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <update+0x4cc>)
 80026cc:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <update+0x4c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <update+0x4c0>)
 80026d8:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <update+0x4c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80026e2:	4a02      	ldr	r2, [pc, #8]	; (80026ec <update+0x4c4>)
 80026e4:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 80026e6:	e0dd      	b.n	80028a4 <update+0x67c>
 80026e8:	20000124 	.word	0x20000124
 80026ec:	20000128 	.word	0x20000128
 80026f0:	200004cc 	.word	0x200004cc
 80026f4:	20000180 	.word	0x20000180
 80026f8:	200004cd 	.word	0x200004cd
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000137 	.word	0x20000137
 8002704:	20000130 	.word	0x20000130
 8002708:	20000134 	.word	0x20000134
	case 6:
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 800270c:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <update+0x68c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2bcf      	cmp	r3, #207	; 0xcf
 8002712:	dd53      	ble.n	80027bc <update+0x594>
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <update+0x690>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2bcf      	cmp	r3, #207	; 0xcf
 800271a:	dd4f      	ble.n	80027bc <update+0x594>
			if (L_open_count == 0){
 800271c:	4b67      	ldr	r3, [pc, #412]	; (80028bc <update+0x694>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <update+0x510>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, SOUTH);
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <update+0x698>)
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	3b01      	subs	r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4a64      	ldr	r2, [pc, #400]	; (80028c0 <update+0x698>)
 800272e:	7891      	ldrb	r1, [r2, #2]
 8002730:	2202      	movs	r2, #2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f980 	bl	8002a38 <add_wall>
			}
			if (R_open_count == 0){
 8002738:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <update+0x69c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <update+0x52c>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, NORTH);
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <update+0x698>)
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	3b01      	subs	r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <update+0x698>)
 800274a:	7891      	ldrb	r1, [r2, #2]
 800274c:	2200      	movs	r2, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f972 	bl	8002a38 <add_wall>
			}
			L_open_count = 0;
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <update+0x694>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <update+0x69c>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
			if(measurements[1] < 200){
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <update+0x6a0>)
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2bc7      	cmp	r3, #199	; 0xc7
 8002766:	d809      	bhi.n	800277c <update+0x554>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, WEST);
 8002768:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <update+0x698>)
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	3b01      	subs	r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4a53      	ldr	r2, [pc, #332]	; (80028c0 <update+0x698>)
 8002772:	7891      	ldrb	r1, [r2, #2]
 8002774:	2203      	movs	r2, #3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f95e 	bl	8002a38 <add_wall>
			}
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <update+0x698>)
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <update+0x698>)
 8002782:	7892      	ldrb	r2, [r2, #2]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fa84 	bl	8002c94 <set_explored>
			Mouse.current_cell_x --;
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <update+0x698>)
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	3b01      	subs	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <update+0x698>)
 8002796:	705a      	strb	r2, [r3, #1]

			L_acc -= COUNTS_PER_CELL;
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <update+0x68c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3bd0      	subs	r3, #208	; 0xd0
 800279e:	4a45      	ldr	r2, [pc, #276]	; (80028b4 <update+0x68c>)
 80027a0:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <update+0x690>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3bd0      	subs	r3, #208	; 0xd0
 80027a8:	4a43      	ldr	r2, [pc, #268]	; (80028b8 <update+0x690>)
 80027aa:	6013      	str	r3, [r2, #0]
			flood(target_x, target_y);
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <update+0x6a4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <update+0x6a8>)
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fb4a 	bl	8002e50 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <update+0x68c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b95      	cmp	r3, #149	; 0x95
 80027c2:	dd19      	ble.n	80027f8 <update+0x5d0>
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <update+0x68c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2bc8      	cmp	r3, #200	; 0xc8
 80027ca:	dc15      	bgt.n	80027f8 <update+0x5d0>
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <update+0x690>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b95      	cmp	r3, #149	; 0x95
 80027d2:	dd11      	ble.n	80027f8 <update+0x5d0>
 80027d4:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <update+0x690>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2bc8      	cmp	r3, #200	; 0xc8
 80027da:	dc0d      	bgt.n	80027f8 <update+0x5d0>
			if(measurements[1] < 200){
 80027dc:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <update+0x6a0>)
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	2bc7      	cmp	r3, #199	; 0xc7
 80027e2:	d809      	bhi.n	80027f8 <update+0x5d0>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, WEST);
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <update+0x698>)
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <update+0x698>)
 80027ee:	7891      	ldrb	r1, [r2, #2]
 80027f0:	2203      	movs	r2, #3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f920 	bl	8002a38 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0] - prev_measurements[0]>50)&& measurements[0] > 200){
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <update+0x6a0>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <update+0x6ac>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b32      	cmp	r3, #50	; 0x32
 8002806:	dd06      	ble.n	8002816 <update+0x5ee>
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <update+0x6a0>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2bc8      	cmp	r3, #200	; 0xc8
 800280e:	d902      	bls.n	8002816 <update+0x5ee>
			L_open_count = 1;
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <update+0x694>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 200){
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <update+0x6a0>)
 8002818:	789b      	ldrb	r3, [r3, #2]
 800281a:	461a      	mov	r2, r3
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <update+0x6ac>)
 800281e:	789b      	ldrb	r3, [r3, #2]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b32      	cmp	r3, #50	; 0x32
 8002824:	dd40      	ble.n	80028a8 <update+0x680>
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <update+0x6a0>)
 8002828:	789b      	ldrb	r3, [r3, #2]
 800282a:	2bc8      	cmp	r3, #200	; 0xc8
 800282c:	d93c      	bls.n	80028a8 <update+0x680>
			R_open_count = 1;
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <update+0x69c>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002834:	e038      	b.n	80028a8 <update+0x680>
	case 7:
		if (L_acc >= 295 && R_acc >= 295){
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <update+0x68c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800283e:	dd35      	ble.n	80028ac <update+0x684>
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <update+0x690>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002848:	dd30      	ble.n	80028ac <update+0x684>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <update+0x698>)
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <update+0x698>)
 8002850:	7892      	ldrb	r2, [r2, #2]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fa1d 	bl	8002c94 <set_explored>
			Mouse.current_cell_x --;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <update+0x698>)
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	3b01      	subs	r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <update+0x698>)
 8002864:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <update+0x698>)
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	3301      	adds	r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <update+0x698>)
 8002870:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <update+0x68c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <update+0x68c>)
 800287c:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <update+0x690>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <update+0x690>)
 8002888:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 800288a:	e00f      	b.n	80028ac <update+0x684>
	default:
		break;
 800288c:	bf00      	nop
 800288e:	e00e      	b.n	80028ae <update+0x686>
		break;
 8002890:	bf00      	nop
 8002892:	e00c      	b.n	80028ae <update+0x686>
		break;
 8002894:	bf00      	nop
 8002896:	e00a      	b.n	80028ae <update+0x686>
		break;
 8002898:	bf00      	nop
 800289a:	e008      	b.n	80028ae <update+0x686>
		break;
 800289c:	bf00      	nop
 800289e:	e006      	b.n	80028ae <update+0x686>
		break;
 80028a0:	bf00      	nop
 80028a2:	e004      	b.n	80028ae <update+0x686>
		break;
 80028a4:	bf00      	nop
 80028a6:	e002      	b.n	80028ae <update+0x686>
		break;
 80028a8:	bf00      	nop
 80028aa:	e000      	b.n	80028ae <update+0x686>
		break;
 80028ac:	bf00      	nop
	}
//	sprintf(send_buffer, "x:%d Y:%d LC:%d H:%d \n",(int)current_cell_x,(int)current_cell_y ,(int)L_acc, (int)heading);
//	uart_transmit(send_buffer, strlen(send_buffer));
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000124 	.word	0x20000124
 80028b8:	20000128 	.word	0x20000128
 80028bc:	200004cc 	.word	0x200004cc
 80028c0:	20000180 	.word	0x20000180
 80028c4:	200004cd 	.word	0x200004cd
 80028c8:	20000130 	.word	0x20000130
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000137 	.word	0x20000137
 80028d4:	20000134 	.word	0x20000134

080028d8 <save_maze>:
//	sprintf(send_buffer, "x:%d Y:%d LC:%d H:%d\n",(int)current_cell_x,(int)current_cell_y ,(int)L_acc, (int)heading);

void save_maze(){
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0

//	FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
	if (HAL_FLASH_Unlock() != HAL_OK) while(1){  HAL_Delay(10);}
 80028de:	f002 fd29 	bl	8005334 <HAL_FLASH_Unlock>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <save_maze+0x18>
 80028e8:	200a      	movs	r0, #10
 80028ea:	f002 f887 	bl	80049fc <HAL_Delay>
 80028ee:	e7fb      	b.n	80028e8 <save_maze+0x10>
	static uint32_t Laddress = 0x08020000;
	//	uint32_t Raddress = 0x08030000;
	for (int i = 0; i<MAZE_CELL_HEIGHT; i++){
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	e028      	b.n	8002948 <save_maze+0x70>
		for (int j = 0; j<MAZE_CELL_WIDTH; j++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e01f      	b.n	800293c <save_maze+0x64>
			HAL_FLASH_Program(TYPEPROGRAM_BYTE, Laddress+j + i*0x10, maze[j][MAZE_CELL_HEIGHT-i-1].walls);//
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <save_maze+0x88>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4413      	add	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	1898      	adds	r0, r3, r2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1c3 0105 	rsb	r1, r3, #5
 8002910:	4e14      	ldr	r6, [pc, #80]	; (8002964 <save_maze+0x8c>)
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	f816 3013 	ldrb.w	r3, [r6, r3, lsl #1]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2200      	movs	r2, #0
 8002926:	461c      	mov	r4, r3
 8002928:	4615      	mov	r5, r2
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	4601      	mov	r1, r0
 8002930:	2000      	movs	r0, #0
 8002932:	f002 fcab 	bl	800528c <HAL_FLASH_Program>
		for (int j = 0; j<MAZE_CELL_WIDTH; j++){
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b05      	cmp	r3, #5
 8002940:	dddc      	ble.n	80028fc <save_maze+0x24>
	for (int i = 0; i<MAZE_CELL_HEIGHT; i++){
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3301      	adds	r3, #1
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b05      	cmp	r3, #5
 800294c:	ddd3      	ble.n	80028f6 <save_maze+0x1e>
		}
		//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
	}
	Laddress += MAZE_CELL_HEIGHT*0x10;
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <save_maze+0x88>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	4a02      	ldr	r2, [pc, #8]	; (8002960 <save_maze+0x88>)
 8002956:	6013      	str	r3, [r2, #0]
//	HAL_FLASH_Lock();
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	20000004 	.word	0x20000004
 8002964:	20000138 	.word	0x20000138

08002968 <dlog>:
void dlog(){
 8002968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	af00      	add	r7, sp, #0
	static uint32_t address = 0x08030000;
	// Lacc, R_acc, heading, time
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, L_acc);
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <dlog+0x88>)
 8002970:	681e      	ldr	r6, [r3, #0]
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <dlog+0x8c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	17da      	asrs	r2, r3, #31
 8002978:	4618      	mov	r0, r3
 800297a:	4611      	mov	r1, r2
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4631      	mov	r1, r6
 8002982:	2002      	movs	r0, #2
 8002984:	f002 fc82 	bl	800528c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+4, R_acc);
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <dlog+0x88>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1d19      	adds	r1, r3, #4
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <dlog+0x90>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	17da      	asrs	r2, r3, #31
 8002994:	469a      	mov	sl, r3
 8002996:	4693      	mov	fp, r2
 8002998:	4652      	mov	r2, sl
 800299a:	465b      	mov	r3, fp
 800299c:	2002      	movs	r0, #2
 800299e:	f002 fc75 	bl	800528c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+8, Mouse.heading);
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <dlog+0x88>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f103 0108 	add.w	r1, r3, #8
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <dlog+0x94>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	4698      	mov	r8, r3
 80029b4:	4691      	mov	r9, r2
 80029b6:	4642      	mov	r2, r8
 80029b8:	464b      	mov	r3, r9
 80029ba:	2002      	movs	r0, #2
 80029bc:	f002 fc66 	bl	800528c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+12, HAL_GetTick());
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <dlog+0x88>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f103 060c 	add.w	r6, r3, #12
 80029c8:	f002 f80c 	bl	80049e4 <HAL_GetTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2200      	movs	r2, #0
 80029d0:	461c      	mov	r4, r3
 80029d2:	4615      	mov	r5, r2
 80029d4:	4622      	mov	r2, r4
 80029d6:	462b      	mov	r3, r5
 80029d8:	4631      	mov	r1, r6
 80029da:	2002      	movs	r0, #2
 80029dc:	f002 fc56 	bl	800528c <HAL_FLASH_Program>
	address += 0x10;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <dlog+0x88>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3310      	adds	r3, #16
 80029e6:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <dlog+0x88>)
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000124 	.word	0x20000124
 80029f8:	20000128 	.word	0x20000128
 80029fc:	20000180 	.word	0x20000180

08002a00 <rel_to_fixed_dir>:
Direction rel_to_fixed_dir(Relative_Direction mouse_dir){
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	return ((Mouse.heading/2)+ mouse_dir)%4;
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <rel_to_fixed_dir+0x34>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4413      	add	r3, r2
 8002a18:	425a      	negs	r2, r3
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	bf58      	it	pl
 8002a24:	4253      	negpl	r3, r2
 8002a26:	b2db      	uxtb	r3, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	20000180 	.word	0x20000180

08002a38 <add_wall>:
        } else if (dir == WEST && x > 0) {
            maze[x - 1][y].walls &= ~(1 << EAST);
        }
    }
}
void add_wall(uint8_t x, uint8_t y, uint8_t dir) {
 8002a38:	b490      	push	{r4, r7}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	460b      	mov	r3, r1
 8002a44:	71bb      	strb	r3, [r7, #6]
 8002a46:	4613      	mov	r3, r2
 8002a48:	717b      	strb	r3, [r7, #5]
	if (y < MAZE_CELL_HEIGHT && y >= 0 && x < MAZE_CELL_WIDTH && x >= 0){
 8002a4a:	79bb      	ldrb	r3, [r7, #6]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	f200 80f3 	bhi.w	8002c38 <add_wall+0x200>
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	f200 80ef 	bhi.w	8002c38 <add_wall+0x200>
		if ((maze[x][y].walls & 0xF0) == 0) {
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	79b9      	ldrb	r1, [r7, #6]
 8002a5e:	4879      	ldr	r0, [pc, #484]	; (8002c44 <add_wall+0x20c>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	440b      	add	r3, r1
 8002a6a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 80e0 	bne.w	8002c38 <add_wall+0x200>
			maze[x][y].walls |= (0b01 << dir);
 8002a78:	79fa      	ldrb	r2, [r7, #7]
 8002a7a:	79b9      	ldrb	r1, [r7, #6]
 8002a7c:	4871      	ldr	r0, [pc, #452]	; (8002c44 <add_wall+0x20c>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	440b      	add	r3, r1
 8002a88:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	797b      	ldrb	r3, [r7, #5]
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b25b      	sxtb	r3, r3
 8002a9c:	79fa      	ldrb	r2, [r7, #7]
 8002a9e:	79b9      	ldrb	r1, [r7, #6]
 8002aa0:	b2dc      	uxtb	r4, r3
 8002aa2:	4868      	ldr	r0, [pc, #416]	; (8002c44 <add_wall+0x20c>)
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	4622      	mov	r2, r4
 8002ab0:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
			if (dir == NORTH) {
 8002ab4:	797b      	ldrb	r3, [r7, #5]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12e      	bne.n	8002b18 <add_wall+0xe0>
				if (y + 1 < MAZE_CELL_HEIGHT) {
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	f200 80bb 	bhi.w	8002c38 <add_wall+0x200>
					if ((maze[x][y+1].walls & 0xF0) == 0) maze[x][y + 1].walls |= (0b01 << SOUTH);
 8002ac2:	79fa      	ldrb	r2, [r7, #7]
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	485e      	ldr	r0, [pc, #376]	; (8002c44 <add_wall+0x20c>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 80ab 	bne.w	8002c38 <add_wall+0x200>
 8002ae2:	79fa      	ldrb	r2, [r7, #7]
 8002ae4:	79bb      	ldrb	r3, [r7, #6]
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	4856      	ldr	r0, [pc, #344]	; (8002c44 <add_wall+0x20c>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	79b9      	ldrb	r1, [r7, #6]
 8002afc:	3101      	adds	r1, #1
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	b2dc      	uxtb	r4, r3
 8002b04:	484f      	ldr	r0, [pc, #316]	; (8002c44 <add_wall+0x20c>)
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	4622      	mov	r2, r4
 8002b12:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
					if ((maze[x-1][y].walls & 0xF0) == 0)maze[x - 1][y].walls |= (0b01 << EAST);
				}
			}
		}
	}
}
 8002b16:	e08f      	b.n	8002c38 <add_wall+0x200>
			} else if (dir == EAST) {
 8002b18:	797b      	ldrb	r3, [r7, #5]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d12d      	bne.n	8002b7a <add_wall+0x142>
				if (x + 1 < MAZE_CELL_WIDTH) {
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	f200 8089 	bhi.w	8002c38 <add_wall+0x200>
					if ((maze[x+1][y].walls & 0xF0) == 0)maze[x + 1][y].walls |= (0b01 << WEST);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	79b9      	ldrb	r1, [r7, #6]
 8002b2c:	4845      	ldr	r0, [pc, #276]	; (8002c44 <add_wall+0x20c>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d179      	bne.n	8002c38 <add_wall+0x200>
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	79b9      	ldrb	r1, [r7, #6]
 8002b4a:	483e      	ldr	r0, [pc, #248]	; (8002c44 <add_wall+0x20c>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	3201      	adds	r2, #1
 8002b5e:	79b9      	ldrb	r1, [r7, #6]
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	b2dc      	uxtb	r4, r3
 8002b66:	4837      	ldr	r0, [pc, #220]	; (8002c44 <add_wall+0x20c>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	440b      	add	r3, r1
 8002b72:	4622      	mov	r2, r4
 8002b74:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 8002b78:	e05e      	b.n	8002c38 <add_wall+0x200>
			} else if (dir == SOUTH) {
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d12c      	bne.n	8002bda <add_wall+0x1a2>
				if (y > 0) {
 8002b80:	79bb      	ldrb	r3, [r7, #6]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d058      	beq.n	8002c38 <add_wall+0x200>
					if ((maze[x][y-1].walls & 0xF0) == 0)maze[x][y - 1].walls |= (0b01 << NORTH);
 8002b86:	79fa      	ldrb	r2, [r7, #7]
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	482d      	ldr	r0, [pc, #180]	; (8002c44 <add_wall+0x20c>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d149      	bne.n	8002c38 <add_wall+0x200>
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	1e59      	subs	r1, r3, #1
 8002baa:	4826      	ldr	r0, [pc, #152]	; (8002c44 <add_wall+0x20c>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002bba:	79fa      	ldrb	r2, [r7, #7]
 8002bbc:	79b9      	ldrb	r1, [r7, #6]
 8002bbe:	3901      	subs	r1, #1
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	b2dc      	uxtb	r4, r3
 8002bc6:	481f      	ldr	r0, [pc, #124]	; (8002c44 <add_wall+0x20c>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 8002bd8:	e02e      	b.n	8002c38 <add_wall+0x200>
			} else if (dir == WEST) {
 8002bda:	797b      	ldrb	r3, [r7, #5]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d12b      	bne.n	8002c38 <add_wall+0x200>
				if (x > 0) {
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <add_wall+0x200>
					if ((maze[x-1][y].walls & 0xF0) == 0)maze[x - 1][y].walls |= (0b01 << EAST);
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	79b9      	ldrb	r1, [r7, #6]
 8002bec:	4815      	ldr	r0, [pc, #84]	; (8002c44 <add_wall+0x20c>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d119      	bne.n	8002c38 <add_wall+0x200>
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	1e5a      	subs	r2, r3, #1
 8002c08:	79b9      	ldrb	r1, [r7, #6]
 8002c0a:	480e      	ldr	r0, [pc, #56]	; (8002c44 <add_wall+0x20c>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	440b      	add	r3, r1
 8002c16:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	79b9      	ldrb	r1, [r7, #6]
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	b2dc      	uxtb	r4, r3
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <add_wall+0x20c>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	4622      	mov	r2, r4
 8002c34:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc90      	pop	{r4, r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000138 	.word	0x20000138

08002c48 <read_wall>:
uint8_t read_wall(uint8_t x, uint8_t y, Direction dir){
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	460b      	mov	r3, r1
 8002c54:	71bb      	strb	r3, [r7, #6]
 8002c56:	4613      	mov	r3, r2
 8002c58:	717b      	strb	r3, [r7, #5]
	if ((maze[x][y].walls & (0x01<<dir))==0){
 8002c5a:	79fa      	ldrb	r2, [r7, #7]
 8002c5c:	79b9      	ldrb	r1, [r7, #6]
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <read_wall+0x48>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	440b      	add	r3, r1
 8002c6a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	797b      	ldrb	r3, [r7, #5]
 8002c72:	fa42 f303 	asr.w	r3, r2, r3
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <read_wall+0x3a>
		return 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <read_wall+0x3c>
	}
	else return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	20000138 	.word	0x20000138

08002c94 <set_explored>:
	if ((maze[x][y].walls & (0x01<<rel_to_fixed_dir(RIGHT)))==0){
		return 0;
	}
	else return 1;
}
void set_explored(uint8_t x, uint8_t y) {
 8002c94:	b490      	push	{r4, r7}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71bb      	strb	r3, [r7, #6]
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d81a      	bhi.n	8002ce0 <set_explored+0x4c>
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d817      	bhi.n	8002ce0 <set_explored+0x4c>
        maze[x][y].walls |= 0xF0;
 8002cb0:	79fa      	ldrb	r2, [r7, #7]
 8002cb2:	79b9      	ldrb	r1, [r7, #6]
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <set_explored+0x58>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002cc4:	79fa      	ldrb	r2, [r7, #7]
 8002cc6:	79b9      	ldrb	r1, [r7, #6]
 8002cc8:	f063 030f 	orn	r3, r3, #15
 8002ccc:	b2dc      	uxtb	r4, r3
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <set_explored+0x58>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	4622      	mov	r2, r4
 8002cdc:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
    }
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc90      	pop	{r4, r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000138 	.word	0x20000138

08002cf0 <dir_of_lowest>:
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
        return (maze[x][y].walls & 0xF0) != 0;
    }
    return 1;
}
uint8_t dir_of_lowest(uint8_t x, uint8_t y) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	71fb      	strb	r3, [r7, #7]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t min = 255;
 8002d00:	23ff      	movs	r3, #255	; 0xff
 8002d02:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = NORTH;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73bb      	strb	r3, [r7, #14]
    if (read_wall(x, y, NORTH) == 0) {
 8002d08:	79b9      	ldrb	r1, [r7, #6]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff9a 	bl	8002c48 <read_wall>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11d      	bne.n	8002d56 <dir_of_lowest+0x66>
        if (maze[x][y + 1].dist < min) {
 8002d1a:	79fa      	ldrb	r2, [r7, #7]
 8002d1c:	79bb      	ldrb	r3, [r7, #6]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	484a      	ldr	r0, [pc, #296]	; (8002e4c <dir_of_lowest+0x15c>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4403      	add	r3, r0
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d90e      	bls.n	8002d56 <dir_of_lowest+0x66>
            min = maze[x][y + 1].dist;
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	79bb      	ldrb	r3, [r7, #6]
 8002d3c:	1c59      	adds	r1, r3, #1
 8002d3e:	4843      	ldr	r0, [pc, #268]	; (8002e4c <dir_of_lowest+0x15c>)
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4403      	add	r3, r0
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	73fb      	strb	r3, [r7, #15]
            dir = NORTH;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, EAST) == 0) {
 8002d56:	79b9      	ldrb	r1, [r7, #6]
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff73 	bl	8002c48 <read_wall>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11d      	bne.n	8002da4 <dir_of_lowest+0xb4>
        if (maze[x + 1][y].dist < min) {
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	79b9      	ldrb	r1, [r7, #6]
 8002d6e:	4837      	ldr	r0, [pc, #220]	; (8002e4c <dir_of_lowest+0x15c>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4403      	add	r3, r0
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90e      	bls.n	8002da4 <dir_of_lowest+0xb4>
            min = maze[x + 1][y].dist;
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	79b9      	ldrb	r1, [r7, #6]
 8002d8c:	482f      	ldr	r0, [pc, #188]	; (8002e4c <dir_of_lowest+0x15c>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	440b      	add	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	73fb      	strb	r3, [r7, #15]
            dir = EAST;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, SOUTH) == 0) {
 8002da4:	79b9      	ldrb	r1, [r7, #6]
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2202      	movs	r2, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff4c 	bl	8002c48 <read_wall>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <dir_of_lowest+0x102>
        if (maze[x][y - 1].dist < min) {
 8002db6:	79fa      	ldrb	r2, [r7, #7]
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	4823      	ldr	r0, [pc, #140]	; (8002e4c <dir_of_lowest+0x15c>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	440b      	add	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4403      	add	r3, r0
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d90e      	bls.n	8002df2 <dir_of_lowest+0x102>
            min = maze[x][y - 1].dist;
 8002dd4:	79fa      	ldrb	r2, [r7, #7]
 8002dd6:	79bb      	ldrb	r3, [r7, #6]
 8002dd8:	1e59      	subs	r1, r3, #1
 8002dda:	481c      	ldr	r0, [pc, #112]	; (8002e4c <dir_of_lowest+0x15c>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	440b      	add	r3, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4403      	add	r3, r0
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	73fb      	strb	r3, [r7, #15]
            dir = SOUTH;
 8002dee:	2302      	movs	r3, #2
 8002df0:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, WEST) == 0) {
 8002df2:	79b9      	ldrb	r1, [r7, #6]
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff25 	bl	8002c48 <read_wall>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11d      	bne.n	8002e40 <dir_of_lowest+0x150>
        if (maze[x - 1][y].dist < min) {
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	79b9      	ldrb	r1, [r7, #6]
 8002e0a:	4810      	ldr	r0, [pc, #64]	; (8002e4c <dir_of_lowest+0x15c>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90e      	bls.n	8002e40 <dir_of_lowest+0x150>
            min = maze[x - 1][y].dist;
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	79b9      	ldrb	r1, [r7, #6]
 8002e28:	4808      	ldr	r0, [pc, #32]	; (8002e4c <dir_of_lowest+0x15c>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	440b      	add	r3, r1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4403      	add	r3, r0
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	73fb      	strb	r3, [r7, #15]
            dir = WEST;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	73bb      	strb	r3, [r7, #14]
        }
    }
    return dir;
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000138 	.word	0x20000138

08002e50 <flood>:
void flood(uint8_t ex, uint8_t ey) {
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	460a      	mov	r2, r1
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71bb      	strb	r3, [r7, #6]
	uint8_t nochange_flag = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
    maze[ex][ey].dist = 0;
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	79b9      	ldrb	r1, [r7, #6]
 8002e68:	4878      	ldr	r0, [pc, #480]	; (800304c <flood+0x1fc>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4403      	add	r3, r0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	705a      	strb	r2, [r3, #1]

    while (nochange_flag == 0) {
 8002e7c:	e0dd      	b.n	800303a <flood+0x1ea>
    	uint8_t change_flag = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73bb      	strb	r3, [r7, #14]

        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	737b      	strb	r3, [r7, #13]
 8002e86:	e0cf      	b.n	8003028 <flood+0x1d8>
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8002e88:	2300      	movs	r3, #0
 8002e8a:	733b      	strb	r3, [r7, #12]
 8002e8c:	e0c5      	b.n	800301a <flood+0x1ca>
                if (!(x == ex && y == ey)) {
 8002e8e:	7b7a      	ldrb	r2, [r7, #13]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d104      	bne.n	8002ea0 <flood+0x50>
 8002e96:	7b3a      	ldrb	r2, [r7, #12]
 8002e98:	79bb      	ldrb	r3, [r7, #6]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f000 80ba 	beq.w	8003014 <flood+0x1c4>
                	uint8_t min = MAZE_CELL_HEIGHT * MAZE_CELL_WIDTH -1;
 8002ea0:	2323      	movs	r3, #35	; 0x23
 8002ea2:	72fb      	strb	r3, [r7, #11]
                    if (read_wall(x, y, NORTH) == 0) {
 8002ea4:	7b39      	ldrb	r1, [r7, #12]
 8002ea6:	7b7b      	ldrb	r3, [r7, #13]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fecc 	bl	8002c48 <read_wall>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11b      	bne.n	8002eee <flood+0x9e>
                        if (maze[x][y + 1].dist < min) {
 8002eb6:	7b7a      	ldrb	r2, [r7, #13]
 8002eb8:	7b3b      	ldrb	r3, [r7, #12]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	4863      	ldr	r0, [pc, #396]	; (800304c <flood+0x1fc>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	440b      	add	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4403      	add	r3, r0
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	7afa      	ldrb	r2, [r7, #11]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d90c      	bls.n	8002eee <flood+0x9e>
                            min = maze[x][y + 1].dist;
 8002ed4:	7b7a      	ldrb	r2, [r7, #13]
 8002ed6:	7b3b      	ldrb	r3, [r7, #12]
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	485c      	ldr	r0, [pc, #368]	; (800304c <flood+0x1fc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4403      	add	r3, r0
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, EAST) == 0) {
 8002eee:	7b39      	ldrb	r1, [r7, #12]
 8002ef0:	7b7b      	ldrb	r3, [r7, #13]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fea7 	bl	8002c48 <read_wall>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11b      	bne.n	8002f38 <flood+0xe8>
                        if (maze[x + 1][y].dist < min) {
 8002f00:	7b7b      	ldrb	r3, [r7, #13]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	7b39      	ldrb	r1, [r7, #12]
 8002f06:	4851      	ldr	r0, [pc, #324]	; (800304c <flood+0x1fc>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	440b      	add	r3, r1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	7afa      	ldrb	r2, [r7, #11]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d90c      	bls.n	8002f38 <flood+0xe8>
                            min = maze[x + 1][y].dist;
 8002f1e:	7b7b      	ldrb	r3, [r7, #13]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	7b39      	ldrb	r1, [r7, #12]
 8002f24:	4849      	ldr	r0, [pc, #292]	; (800304c <flood+0x1fc>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4403      	add	r3, r0
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, SOUTH) == 0) {
 8002f38:	7b39      	ldrb	r1, [r7, #12]
 8002f3a:	7b7b      	ldrb	r3, [r7, #13]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe82 	bl	8002c48 <read_wall>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11b      	bne.n	8002f82 <flood+0x132>
                        if (maze[x][y - 1].dist < min) {
 8002f4a:	7b7a      	ldrb	r2, [r7, #13]
 8002f4c:	7b3b      	ldrb	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	483e      	ldr	r0, [pc, #248]	; (800304c <flood+0x1fc>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4403      	add	r3, r0
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	7afa      	ldrb	r2, [r7, #11]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d90c      	bls.n	8002f82 <flood+0x132>
                            min = maze[x][y - 1].dist;
 8002f68:	7b7a      	ldrb	r2, [r7, #13]
 8002f6a:	7b3b      	ldrb	r3, [r7, #12]
 8002f6c:	1e59      	subs	r1, r3, #1
 8002f6e:	4837      	ldr	r0, [pc, #220]	; (800304c <flood+0x1fc>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	440b      	add	r3, r1
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4403      	add	r3, r0
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, WEST) == 0) {
 8002f82:	7b39      	ldrb	r1, [r7, #12]
 8002f84:	7b7b      	ldrb	r3, [r7, #13]
 8002f86:	2203      	movs	r2, #3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe5d 	bl	8002c48 <read_wall>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11b      	bne.n	8002fcc <flood+0x17c>
                        if (maze[x - 1][y].dist < min) {
 8002f94:	7b7b      	ldrb	r3, [r7, #13]
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	7b39      	ldrb	r1, [r7, #12]
 8002f9a:	482c      	ldr	r0, [pc, #176]	; (800304c <flood+0x1fc>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	440b      	add	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4403      	add	r3, r0
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	7afa      	ldrb	r2, [r7, #11]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <flood+0x17c>
                            min = maze[x - 1][y].dist;
 8002fb2:	7b7b      	ldrb	r3, [r7, #13]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	7b39      	ldrb	r1, [r7, #12]
 8002fb8:	4824      	ldr	r0, [pc, #144]	; (800304c <flood+0x1fc>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4403      	add	r3, r0
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	72fb      	strb	r3, [r7, #11]
                        }
                    }

                    if ((min != MAZE_CELL_HEIGHT * MAZE_CELL_WIDTH -1) && (maze[x][y].dist != min + 1)) {
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	2b23      	cmp	r3, #35	; 0x23
 8002fd0:	d020      	beq.n	8003014 <flood+0x1c4>
 8002fd2:	7b7a      	ldrb	r2, [r7, #13]
 8002fd4:	7b39      	ldrb	r1, [r7, #12]
 8002fd6:	481d      	ldr	r0, [pc, #116]	; (800304c <flood+0x1fc>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4403      	add	r3, r0
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	3301      	adds	r3, #1
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d010      	beq.n	8003014 <flood+0x1c4>
                        change_flag = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73bb      	strb	r3, [r7, #14]
                        maze[x][y].dist = min + 1;
 8002ff6:	7b7a      	ldrb	r2, [r7, #13]
 8002ff8:	7b39      	ldrb	r1, [r7, #12]
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2dc      	uxtb	r4, r3
 8003000:	4812      	ldr	r0, [pc, #72]	; (800304c <flood+0x1fc>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	440b      	add	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4403      	add	r3, r0
 8003010:	4622      	mov	r2, r4
 8003012:	705a      	strb	r2, [r3, #1]
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8003014:	7b3b      	ldrb	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	733b      	strb	r3, [r7, #12]
 800301a:	7b3b      	ldrb	r3, [r7, #12]
 800301c:	2b05      	cmp	r3, #5
 800301e:	f67f af36 	bls.w	8002e8e <flood+0x3e>
        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8003022:	7b7b      	ldrb	r3, [r7, #13]
 8003024:	3301      	adds	r3, #1
 8003026:	737b      	strb	r3, [r7, #13]
 8003028:	7b7b      	ldrb	r3, [r7, #13]
 800302a:	2b05      	cmp	r3, #5
 800302c:	f67f af2c 	bls.w	8002e88 <flood+0x38>
                    }
                }
            }
        }
        // Check if there were no changes in this iteration
        if (change_flag == 0) {
 8003030:	7bbb      	ldrb	r3, [r7, #14]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <flood+0x1ea>
            nochange_flag = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
    while (nochange_flag == 0) {
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f43f af1e 	beq.w	8002e7e <flood+0x2e>
        }
//        print_maze();

    }

}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000138 	.word	0x20000138

08003050 <motorsInit>:
extern int32_t Dist_error_acc;

extern MouseStruct Mouse;
extern uint8_t measurements[3]; //L:M:R
extern char send_buffer[64];
void motorsInit(){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003054:	2104      	movs	r1, #4
 8003056:	4818      	ldr	r0, [pc, #96]	; (80030b8 <motorsInit+0x68>)
 8003058:	f005 fd18 	bl	8008a8c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800305c:	2108      	movs	r1, #8
 800305e:	4816      	ldr	r0, [pc, #88]	; (80030b8 <motorsInit+0x68>)
 8003060:	f005 fd14 	bl	8008a8c <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <motorsInit+0x68>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <motorsInit+0x68>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003074:	2100      	movs	r1, #0
 8003076:	4811      	ldr	r0, [pc, #68]	; (80030bc <motorsInit+0x6c>)
 8003078:	f005 fd08 	bl	8008a8c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800307c:	2104      	movs	r1, #4
 800307e:	480f      	ldr	r0, [pc, #60]	; (80030bc <motorsInit+0x6c>)
 8003080:	f005 fd04 	bl	8008a8c <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <motorsInit+0x6c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <motorsInit+0x6c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003094:	213c      	movs	r1, #60	; 0x3c
 8003096:	480a      	ldr	r0, [pc, #40]	; (80030c0 <motorsInit+0x70>)
 8003098:	f005 fe4e 	bl	8008d38 <HAL_TIM_Encoder_Start>
	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800309c:	213c      	movs	r1, #60	; 0x3c
 800309e:	4809      	ldr	r0, [pc, #36]	; (80030c4 <motorsInit+0x74>)
 80030a0:	f005 fe4a 	bl	8008d38 <HAL_TIM_Encoder_Start>
	  htim3.Instance->CNT = 0;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <motorsInit+0x70>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <motorsInit+0x74>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000320 	.word	0x20000320
 80030bc:	20000368 	.word	0x20000368
 80030c0:	200003b0 	.word	0x200003b0
 80030c4:	200003f8 	.word	0x200003f8

080030c8 <reset_counts>:
void reset_counts(){
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	  htim3.Instance->CNT = 0;
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <reset_counts+0x80>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <reset_counts+0x84>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
//	  L_speed_setpoint = 0; //mm/s
//	  R_speed_setpoint = 0;//mm/s
	  L_prev_enc_count = 0;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <reset_counts+0x88>)
 80030de:	2200      	movs	r2, #0
 80030e0:	801a      	strh	r2, [r3, #0]
	  R_prev_enc_count = 0;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <reset_counts+0x8c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	801a      	strh	r2, [r3, #0]
	  L_ctrl_signal = 0;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <reset_counts+0x90>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
	  R_ctrl_signal = 0;
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <reset_counts+0x94>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
	  L_error = 0;
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <reset_counts+0x98>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
	  R_error = 0;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <reset_counts+0x9c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
	  L_acc_error = 0;
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <reset_counts+0xa0>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
	  R_acc_error = 0;
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <reset_counts+0xa4>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
	  L_acc = 0;
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <reset_counts+0xa8>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
	  R_acc = 0;
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <reset_counts+0xac>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
	  Dist_error_acc = 0;
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <reset_counts+0xb0>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
	  //Motor 1
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <reset_counts+0xb4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <reset_counts+0xb4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <reset_counts+0xb8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <reset_counts+0xb8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	200003b0 	.word	0x200003b0
 800314c:	200003f8 	.word	0x200003f8
 8003150:	20000106 	.word	0x20000106
 8003154:	20000108 	.word	0x20000108
 8003158:	2000010c 	.word	0x2000010c
 800315c:	20000110 	.word	0x20000110
 8003160:	20000114 	.word	0x20000114
 8003164:	20000118 	.word	0x20000118
 8003168:	2000011c 	.word	0x2000011c
 800316c:	20000120 	.word	0x20000120
 8003170:	20000124 	.word	0x20000124
 8003174:	20000128 	.word	0x20000128
 8003178:	2000012c 	.word	0x2000012c
 800317c:	20000320 	.word	0x20000320
 8003180:	20000368 	.word	0x20000368
 8003184:	00000000 	.word	0x00000000

08003188 <move>:
void move(int16_t velocity, int16_t omega){ // velocity in mm/s, omega in deg/s
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	460a      	mov	r2, r1
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	4613      	mov	r3, r2
 8003196:	80bb      	strh	r3, [r7, #4]
	L_speed_setpoint = velocity + (int)((WHEEL_SPACING_MM*omega*PI)/(2.0*180)); //mm/s
 8003198:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	00da      	lsls	r2, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f9c4 	bl	8000534 <__aeabi_i2d>
 80031ac:	a34c      	add	r3, pc, #304	; (adr r3, 80032e0 <move+0x158>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fa29 	bl	8000608 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <move+0x160>)
 80031c4:	f7fd fb4a 	bl	800085c <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fc2c 	bl	8000a2c <__aeabi_d2iz>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	4413      	add	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b21a      	sxth	r2, r3
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <move+0x164>)
 80031e2:	801a      	strh	r2, [r3, #0]
	R_speed_setpoint = velocity - (int)((WHEEL_SPACING_MM*omega*PI)/(2.0*180));//mm/s
 80031e4:	88fc      	ldrh	r4, [r7, #6]
 80031e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	00da      	lsls	r2, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f99d 	bl	8000534 <__aeabi_i2d>
 80031fa:	a339      	add	r3, pc, #228	; (adr r3, 80032e0 <move+0x158>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd fa02 	bl	8000608 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <move+0x160>)
 8003212:	f7fd fb23 	bl	800085c <__aeabi_ddiv>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f7fd fc05 	bl	8000a2c <__aeabi_d2iz>
 8003222:	4603      	mov	r3, r0
 8003224:	b29b      	uxth	r3, r3
 8003226:	1ae3      	subs	r3, r4, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	b21a      	sxth	r2, r3
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <move+0x168>)
 800322e:	801a      	strh	r2, [r3, #0]

	int8_t kickL = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
	int8_t kickR = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	73bb      	strb	r3, [r7, #14]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8003238:	f001 fbd4 	bl	80049e4 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

	while(measurements[1]>70 && (velocity != 0) && (dir_of_lowest(Mouse.current_cell_x, Mouse.current_cell_y)==rel_to_fixed_dir(STRAIGHT))){
 800323e:	e02c      	b.n	800329a <move+0x112>
		if (HAL_GetTick() - prev_ctr_loop_time > STR_CONTROL_LOOP_PERIOD_MS-1){
 8003240:	f001 fbd0 	bl	80049e4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b13      	cmp	r3, #19
 800324c:	d925      	bls.n	800329a <move+0x112>
			prev_ctr_loop_time = HAL_GetTick();
 800324e:	f001 fbc9 	bl	80049e4 <HAL_GetTick>
 8003252:	60b8      	str	r0, [r7, #8]

			if (measurements[0]<60) {
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <move+0x16c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b3b      	cmp	r3, #59	; 0x3b
 800325a:	d804      	bhi.n	8003266 <move+0xde>
				kickR = -1;
 800325c:	23ff      	movs	r3, #255	; 0xff
 800325e:	73bb      	strb	r3, [r7, #14]
				kickL = 1;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e007      	b.n	8003276 <move+0xee>
			}
			else if (measurements[2]<60){
 8003266:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <move+0x16c>)
 8003268:	789b      	ldrb	r3, [r3, #2]
 800326a:	2b3b      	cmp	r3, #59	; 0x3b
 800326c:	d803      	bhi.n	8003276 <move+0xee>
				kickR = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	73bb      	strb	r3, [r7, #14]
				kickL = -1;
 8003272:	23ff      	movs	r3, #255	; 0xff
 8003274:	73fb      	strb	r3, [r7, #15]
//			}
//			else if (measurements[2]>80 && read_right_wall(Mouse.current_cell_x, Mouse.current_cell_y)){
//				kickR = -1;
//				kickL = 1;
//			}
			R_motor_feedback_control(kickR);
 8003276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fa84 	bl	8003788 <R_motor_feedback_control>
			L_motor_feedback_control(kickL);
 8003280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fb7b 	bl	8003980 <L_motor_feedback_control>
			update();
 800328a:	f7fe ffcd 	bl	8002228 <update>
			dlog();
 800328e:	f7ff fb6b 	bl	8002968 <dlog>
//			sprintf(send_buffer, "L:%d R:%d x:%d y:%d\n",(int)L_acc,(int)R_acc, (int)Mouse.current_cell_x, (int)Mouse.current_cell_y );
//			uart_transmit(send_buffer, strlen(send_buffer));

			kickL = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
			kickR = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	73bb      	strb	r3, [r7, #14]
	while(measurements[1]>70 && (velocity != 0) && (dir_of_lowest(Mouse.current_cell_x, Mouse.current_cell_y)==rel_to_fixed_dir(STRAIGHT))){
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <move+0x16c>)
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b46      	cmp	r3, #70	; 0x46
 80032a0:	d913      	bls.n	80032ca <move+0x142>
 80032a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <move+0x142>
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <move+0x170>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <move+0x170>)
 80032b0:	7892      	ldrb	r2, [r2, #2]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fd1b 	bl	8002cf0 <dir_of_lowest>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461c      	mov	r4, r3
 80032be:	2000      	movs	r0, #0
 80032c0:	f7ff fb9e 	bl	8002a00 <rel_to_fixed_dir>
 80032c4:	4603      	mov	r3, r0
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d0ba      	beq.n	8003240 <move+0xb8>
		}
	}
	smooth_stop2(50);
 80032ca:	2032      	movs	r0, #50	; 0x32
 80032cc:	f000 fc54 	bl	8003b78 <smooth_stop2>

	reset_counts();
 80032d0:	f7ff fefa 	bl	80030c8 <reset_counts>
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	f3af 8000 	nop.w
 80032e0:	f01b866e 	.word	0xf01b866e
 80032e4:	400921f9 	.word	0x400921f9
 80032e8:	40768000 	.word	0x40768000
 80032ec:	20000102 	.word	0x20000102
 80032f0:	20000104 	.word	0x20000104
 80032f4:	20000130 	.word	0x20000130
 80032f8:	20000180 	.word	0x20000180

080032fc <reverse>:
void reverse(int16_t velocity){ // velocity in mm/s, omega in deg/s
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
	L_speed_setpoint = velocity; //mm/s
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <reverse+0x64>)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	8013      	strh	r3, [r2, #0]
	R_speed_setpoint = velocity;//mm/s
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <reverse+0x68>)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	8013      	strh	r3, [r2, #0]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8003312:	f001 fb67 	bl	80049e4 <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]
	uint8_t count = 30;
 8003318:	231e      	movs	r3, #30
 800331a:	72fb      	strb	r3, [r7, #11]
	while(count>0){
 800331c:	e016      	b.n	800334c <reverse+0x50>
		if (HAL_GetTick() - prev_ctr_loop_time > STR_CONTROL_LOOP_PERIOD_MS-1){
 800331e:	f001 fb61 	bl	80049e4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b13      	cmp	r3, #19
 800332a:	d90f      	bls.n	800334c <reverse+0x50>
			prev_ctr_loop_time = HAL_GetTick();
 800332c:	f001 fb5a 	bl	80049e4 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

			R_motor_feedback_control(0);
 8003332:	2000      	movs	r0, #0
 8003334:	f000 fa28 	bl	8003788 <R_motor_feedback_control>
			L_motor_feedback_control(0);
 8003338:	2000      	movs	r0, #0
 800333a:	f000 fb21 	bl	8003980 <L_motor_feedback_control>
			update();
 800333e:	f7fe ff73 	bl	8002228 <update>
			dlog();
 8003342:	f7ff fb11 	bl	8002968 <dlog>
			count--;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	3b01      	subs	r3, #1
 800334a:	72fb      	strb	r3, [r7, #11]
	while(count>0){
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e5      	bne.n	800331e <reverse+0x22>
		}
	}
	reset_counts();
 8003352:	f7ff feb9 	bl	80030c8 <reset_counts>
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000102 	.word	0x20000102
 8003364:	20000104 	.word	0x20000104

08003368 <turn>:
void turn(int16_t deg){
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
	reset_counts();
 8003372:	f7ff fea9 	bl	80030c8 <reset_counts>
	int16_t L_count_target = (int)((WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360.0));
 8003376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337a:	f242 52f8 	movw	r2, #9720	; 0x25f8
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8d6 	bl	8000534 <__aeabi_i2d>
 8003388:	a3a1      	add	r3, pc, #644	; (adr r3, 8003610 <turn+0x2a8>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd fa65 	bl	800085c <__aeabi_ddiv>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f7fd fb47 	bl	8000a2c <__aeabi_d2iz>
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
	int16_t R_count_target = (int)(-(WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360.0));
 80033a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a6:	4a9c      	ldr	r2, [pc, #624]	; (8003618 <turn+0x2b0>)
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8c1 	bl	8000534 <__aeabi_i2d>
 80033b2:	a397      	add	r3, pc, #604	; (adr r3, 8003610 <turn+0x2a8>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd fa50 	bl	800085c <__aeabi_ddiv>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7fd fb32 	bl	8000a2c <__aeabi_d2iz>
 80033c8:	4603      	mov	r3, r0
 80033ca:	813b      	strh	r3, [r7, #8]
	int16_t L_prev_error = L_count_target;
 80033cc:	897b      	ldrh	r3, [r7, #10]
 80033ce:	82fb      	strh	r3, [r7, #22]
	int16_t R_prev_error = R_count_target;
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	82bb      	strh	r3, [r7, #20]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80033d4:	f001 fb06 	bl	80049e4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]
	uint8_t turn_cmplt = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
	uint16_t max_loops = 65; //max time before stop
 80033de:	2341      	movs	r3, #65	; 0x41
 80033e0:	81bb      	strh	r3, [r7, #12]
	while(turn_cmplt == 0){
 80033e2:	e171      	b.n	80036c8 <turn+0x360>
		if (HAL_GetTick() - prev_ctr_loop_time > TURN_CONTROL_LOOP_PERIOD_MS-1){
 80033e4:	f001 fafe 	bl	80049e4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	f240 816a 	bls.w	80036c8 <turn+0x360>
			prev_ctr_loop_time = HAL_GetTick();
 80033f4:	f001 faf6 	bl	80049e4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]
			R_prev_enc_count = htim3.Instance->CNT;
 80033fa:	4b88      	ldr	r3, [pc, #544]	; (800361c <turn+0x2b4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b21a      	sxth	r2, r3
 8003402:	4b87      	ldr	r3, [pc, #540]	; (8003620 <turn+0x2b8>)
 8003404:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 8003406:	4b87      	ldr	r3, [pc, #540]	; (8003624 <turn+0x2bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b21a      	sxth	r2, r3
 800340e:	4b86      	ldr	r3, [pc, #536]	; (8003628 <turn+0x2c0>)
 8003410:	801a      	strh	r2, [r3, #0]
			R_acc = htim3.Instance->CNT;
 8003412:	4b82      	ldr	r3, [pc, #520]	; (800361c <turn+0x2b4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	461a      	mov	r2, r3
 800341a:	4b84      	ldr	r3, [pc, #528]	; (800362c <turn+0x2c4>)
 800341c:	601a      	str	r2, [r3, #0]
			L_acc = htim5.Instance->CNT;
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <turn+0x2bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	461a      	mov	r2, r3
 8003426:	4b82      	ldr	r3, [pc, #520]	; (8003630 <turn+0x2c8>)
 8003428:	601a      	str	r2, [r3, #0]
//			Right;
			R_error = R_count_target - R_prev_enc_count;
 800342a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800342e:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <turn+0x2b8>)
 8003430:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	4a7f      	ldr	r2, [pc, #508]	; (8003634 <turn+0x2cc>)
 8003438:	6013      	str	r3, [r2, #0]
			//if (abs(R_error)<5) R_acc_error += R_error;
			R_ctrl_signal = R_Kpt*R_error + R_Kdt*(R_error-R_prev_error)*100;// + R_Kit*R_acc_error;
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <turn+0x2cc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f877 	bl	8000534 <__aeabi_i2d>
 8003446:	4604      	mov	r4, r0
 8003448:	460d      	mov	r5, r1
 800344a:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <turn+0x2cc>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f86d 	bl	8000534 <__aeabi_i2d>
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <turn+0x2d0>)
 8003460:	f7fd f8d2 	bl	8000608 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	4b72      	ldr	r3, [pc, #456]	; (800363c <turn+0x2d4>)
 8003472:	f7fd f8c9 	bl	8000608 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fc ff0d 	bl	800029c <__adddf3>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd facf 	bl	8000a2c <__aeabi_d2iz>
 800348e:	4603      	mov	r3, r0
 8003490:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <turn+0x2d8>)
 8003492:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal > 0) R_ctrl_signal += R_ff_offset_t;
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <turn+0x2d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	dd04      	ble.n	80034a6 <turn+0x13e>
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <turn+0x2d8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	337d      	adds	r3, #125	; 0x7d
 80034a2:	4a67      	ldr	r2, [pc, #412]	; (8003640 <turn+0x2d8>)
 80034a4:	6013      	str	r3, [r2, #0]
			if (R_ctrl_signal < 0) R_ctrl_signal -= R_ff_offset_t;
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <turn+0x2d8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da04      	bge.n	80034b8 <turn+0x150>
 80034ae:	4b64      	ldr	r3, [pc, #400]	; (8003640 <turn+0x2d8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b7d      	subs	r3, #125	; 0x7d
 80034b4:	4a62      	ldr	r2, [pc, #392]	; (8003640 <turn+0x2d8>)
 80034b6:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= 300) R_ctrl_signal = 300;
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <turn+0x2d8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80034c0:	db03      	blt.n	80034ca <turn+0x162>
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <turn+0x2d8>)
 80034c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c8:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -300) R_ctrl_signal = -300;
 80034ca:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <turn+0x2d8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80034d2:	dc02      	bgt.n	80034da <turn+0x172>
 80034d4:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <turn+0x2d8>)
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <turn+0x2dc>)
 80034d8:	601a      	str	r2, [r3, #0]

			if (R_ctrl_signal == 0){
 80034da:	4b59      	ldr	r3, [pc, #356]	; (8003640 <turn+0x2d8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <turn+0x18c>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80034e2:	4b59      	ldr	r3, [pc, #356]	; (8003648 <turn+0x2e0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <turn+0x2e0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f2:	e017      	b.n	8003524 <turn+0x1bc>
			}
			else if (R_ctrl_signal > 0){
 80034f4:	4b52      	ldr	r3, [pc, #328]	; (8003640 <turn+0x2d8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dd09      	ble.n	8003510 <turn+0x1a8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <turn+0x2d8>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b51      	ldr	r3, [pc, #324]	; (8003648 <turn+0x2e0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003506:	4b50      	ldr	r3, [pc, #320]	; (8003648 <turn+0x2e0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
 800350e:	e009      	b.n	8003524 <turn+0x1bc>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <turn+0x2e0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8003518:	4b49      	ldr	r3, [pc, #292]	; (8003640 <turn+0x2d8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	425a      	negs	r2, r3
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <turn+0x2e0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
			}
//			Left
			L_error = L_count_target - L_prev_enc_count;
 8003524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003528:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <turn+0x2c0>)
 800352a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	4a46      	ldr	r2, [pc, #280]	; (800364c <turn+0x2e4>)
 8003532:	6013      	str	r3, [r2, #0]
			//if (abs(L_error)<5)L_acc_error += L_error;
			L_ctrl_signal = L_Kpt*L_error + L_Kdt*(L_error-L_prev_error)*100;// + L_Kit*L_acc_error;
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <turn+0x2e4>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc fff8 	bl	8000534 <__aeabi_i2d>
 8003544:	4604      	mov	r4, r0
 8003546:	460d      	mov	r5, r1
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <turn+0x2e4>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	4618      	mov	r0, r3
 8003554:	f7fc ffee 	bl	8000534 <__aeabi_i2d>
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <turn+0x2d0>)
 800355e:	f7fd f853 	bl	8000608 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <turn+0x2d4>)
 8003570:	f7fd f84a 	bl	8000608 <__aeabi_dmul>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4620      	mov	r0, r4
 800357a:	4629      	mov	r1, r5
 800357c:	f7fc fe8e 	bl	800029c <__adddf3>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f7fd fa50 	bl	8000a2c <__aeabi_d2iz>
 800358c:	4603      	mov	r3, r0
 800358e:	4a30      	ldr	r2, [pc, #192]	; (8003650 <turn+0x2e8>)
 8003590:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal > 0) L_ctrl_signal += L_ff_offset_t;
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <turn+0x2e8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	dd04      	ble.n	80035a4 <turn+0x23c>
 800359a:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <turn+0x2e8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	337d      	adds	r3, #125	; 0x7d
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <turn+0x2e8>)
 80035a2:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal < 0) L_ctrl_signal -= L_ff_offset_t;
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <turn+0x2e8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da04      	bge.n	80035b6 <turn+0x24e>
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <turn+0x2e8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3b7d      	subs	r3, #125	; 0x7d
 80035b2:	4a27      	ldr	r2, [pc, #156]	; (8003650 <turn+0x2e8>)
 80035b4:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=300) L_ctrl_signal = 300;
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <turn+0x2e8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80035be:	db03      	blt.n	80035c8 <turn+0x260>
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <turn+0x2e8>)
 80035c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035c6:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-300) L_ctrl_signal = -300;
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <turn+0x2e8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80035d0:	dc02      	bgt.n	80035d8 <turn+0x270>
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <turn+0x2e8>)
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <turn+0x2dc>)
 80035d6:	601a      	str	r2, [r3, #0]

			if (L_ctrl_signal == 0){
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <turn+0x2e8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d108      	bne.n	80035f2 <turn+0x28a>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <turn+0x2ec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <turn+0x2ec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
 80035f0:	e03c      	b.n	800366c <turn+0x304>
			}
			else if (L_ctrl_signal > 0){
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <turn+0x2e8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dd2e      	ble.n	8003658 <turn+0x2f0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <turn+0x2e8>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <turn+0x2ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <turn+0x2ec>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
 800360c:	e02e      	b.n	800366c <turn+0x304>
 800360e:	bf00      	nop
 8003610:	00000000 	.word	0x00000000
 8003614:	40c73400 	.word	0x40c73400
 8003618:	ffffda08 	.word	0xffffda08
 800361c:	200003b0 	.word	0x200003b0
 8003620:	20000108 	.word	0x20000108
 8003624:	200003f8 	.word	0x200003f8
 8003628:	20000106 	.word	0x20000106
 800362c:	20000128 	.word	0x20000128
 8003630:	20000124 	.word	0x20000124
 8003634:	20000118 	.word	0x20000118
 8003638:	3fe00000 	.word	0x3fe00000
 800363c:	40590000 	.word	0x40590000
 8003640:	20000110 	.word	0x20000110
 8003644:	fffffed4 	.word	0xfffffed4
 8003648:	20000320 	.word	0x20000320
 800364c:	20000114 	.word	0x20000114
 8003650:	2000010c 	.word	0x2000010c
 8003654:	20000368 	.word	0x20000368
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <turn+0x400>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <turn+0x404>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	425a      	negs	r2, r3
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <turn+0x400>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (L_error <= Enc_Turn_Error && L_error >= -Enc_Turn_Error  && L_error == L_prev_error) {
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <turn+0x408>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	dc1b      	bgt.n	80036ac <turn+0x344>
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <turn+0x408>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	db16      	blt.n	80036ac <turn+0x344>
 800367e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <turn+0x408>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d110      	bne.n	80036ac <turn+0x344>
				if (R_error <= Enc_Turn_Error && R_error >= -Enc_Turn_Error  && R_error == R_prev_error) {
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <turn+0x40c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	dc0c      	bgt.n	80036ac <turn+0x344>
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <turn+0x40c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	db07      	blt.n	80036ac <turn+0x344>
 800369c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <turn+0x40c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d101      	bne.n	80036ac <turn+0x344>
					turn_cmplt=1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
				}
			}

			L_prev_error = L_error;
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <turn+0x408>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	82fb      	strh	r3, [r7, #22]
			R_prev_error = R_error;
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <turn+0x40c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	82bb      	strh	r3, [r7, #20]
			dlog();
 80036b8:	f7ff f956 	bl	8002968 <dlog>
			max_loops--;
 80036bc:	89bb      	ldrh	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	81bb      	strh	r3, [r7, #12]
			if (max_loops == 0) break;
 80036c2:	89bb      	ldrh	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <turn+0x36a>
	while(turn_cmplt == 0){
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f43f ae8a 	beq.w	80033e4 <turn+0x7c>
 80036d0:	e000      	b.n	80036d4 <turn+0x36c>
			if (max_loops == 0) break;
 80036d2:	bf00      	nop
//			sprintf(send_buffer, "L:%d R:%d LT:%d RT:%d\n",(int)L_prev_enc_count,(int)R_prev_enc_count, (int)L_count_target , (int)R_count_target);
//			uart_transmit(send_buffer, strlen(send_buffer));
		}
	}
	Mouse.heading = (8 + Mouse.heading + (8+(8*deg)/360)%8)%8;
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <turn+0x410>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	f103 0208 	add.w	r2, r3, #8
 80036dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e0:	4926      	ldr	r1, [pc, #152]	; (800377c <turn+0x414>)
 80036e2:	fb81 0103 	smull	r0, r1, r1, r3
 80036e6:	4419      	add	r1, r3
 80036e8:	1149      	asrs	r1, r1, #5
 80036ea:	17db      	asrs	r3, r3, #31
 80036ec:	1acb      	subs	r3, r1, r3
 80036ee:	3308      	adds	r3, #8
 80036f0:	4259      	negs	r1, r3
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	f001 0107 	and.w	r1, r1, #7
 80036fa:	bf58      	it	pl
 80036fc:	424b      	negpl	r3, r1
 80036fe:	4413      	add	r3, r2
 8003700:	425a      	negs	r2, r3
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	f002 0207 	and.w	r2, r2, #7
 800370a:	bf58      	it	pl
 800370c:	4253      	negpl	r3, r2
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <turn+0x410>)
 8003712:	701a      	strb	r2, [r3, #0]
	reset_counts();
 8003714:	f7ff fcd8 	bl	80030c8 <reset_counts>
	set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <turn+0x410>)
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	4a16      	ldr	r2, [pc, #88]	; (8003778 <turn+0x410>)
 800371e:	7892      	ldrb	r2, [r2, #2]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fab6 	bl	8002c94 <set_explored>
	//need to take into account that after turn, mouse is in middle of cell
	if (abs(deg) == 90){
 8003728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfb8      	it	lt
 8003730:	425b      	neglt	r3, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b5a      	cmp	r3, #90	; 0x5a
 8003736:	d105      	bne.n	8003744 <turn+0x3dc>
		R_acc = 50;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <turn+0x418>)
 800373a:	2232      	movs	r2, #50	; 0x32
 800373c:	601a      	str	r2, [r3, #0]
		L_acc = 50;
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <turn+0x41c>)
 8003740:	2232      	movs	r2, #50	; 0x32
 8003742:	601a      	str	r2, [r3, #0]
	}
	if (abs(deg) == 180){
 8003744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	bfb8      	it	lt
 800374c:	425b      	neglt	r3, r3
 800374e:	b29b      	uxth	r3, r3
 8003750:	2bb4      	cmp	r3, #180	; 0xb4
 8003752:	d105      	bne.n	8003760 <turn+0x3f8>
		R_acc = 70;
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <turn+0x418>)
 8003756:	2246      	movs	r2, #70	; 0x46
 8003758:	601a      	str	r2, [r3, #0]
		L_acc = 70;
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <turn+0x41c>)
 800375c:	2246      	movs	r2, #70	; 0x46
 800375e:	601a      	str	r2, [r3, #0]
	}
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bdb0      	pop	{r4, r5, r7, pc}
 8003768:	20000368 	.word	0x20000368
 800376c:	2000010c 	.word	0x2000010c
 8003770:	20000114 	.word	0x20000114
 8003774:	20000118 	.word	0x20000118
 8003778:	20000180 	.word	0x20000180
 800377c:	b60b60b7 	.word	0xb60b60b7
 8003780:	20000128 	.word	0x20000128
 8003784:	20000124 	.word	0x20000124

08003788 <R_motor_feedback_control>:
	set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
	//need to take into account that after turn, mouse is in middle of cell
	R_acc = 50;
	L_acc = 50;
}
void R_motor_feedback_control(int8_t kick){//speed in mm/s
 8003788:	b5b0      	push	{r4, r5, r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	R_prev_enc_count = htim3.Instance->CNT;
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <R_motor_feedback_control+0x1c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b21a      	sxth	r2, r3
 800379a:	4b6e      	ldr	r3, [pc, #440]	; (8003954 <R_motor_feedback_control+0x1cc>)
 800379c:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <R_motor_feedback_control+0x1cc>)
 80037a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <R_motor_feedback_control+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a6a      	ldr	r2, [pc, #424]	; (8003958 <R_motor_feedback_control+0x1d0>)
 80037ae:	6013      	str	r3, [r2, #0]

	//error in encoder count for that ctrl period
	R_error = (int)((R_speed_setpoint*COUNTS_PER_ROTATION*STR_CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - R_prev_enc_count;
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <R_motor_feedback_control+0x1d4>)
 80037b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc feb7 	bl	8000534 <__aeabi_i2d>
 80037c6:	a360      	add	r3, pc, #384	; (adr r3, 8003948 <R_motor_feedback_control+0x1c0>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fd f846 	bl	800085c <__aeabi_ddiv>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f928 	bl	8000a2c <__aeabi_d2iz>
 80037dc:	4603      	mov	r3, r0
 80037de:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <R_motor_feedback_control+0x1cc>)
 80037e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <R_motor_feedback_control+0x1d8>)
 80037e8:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error *(1-abs(kick));
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bfb8      	it	lt
 80037f2:	425b      	neglt	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f1c3 0301 	rsb	r3, r3, #1
 80037fa:	4a59      	ldr	r2, [pc, #356]	; (8003960 <R_motor_feedback_control+0x1d8>)
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	fb03 f202 	mul.w	r2, r3, r2
 8003802:	4b58      	ldr	r3, [pc, #352]	; (8003964 <R_motor_feedback_control+0x1dc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4413      	add	r3, r2
 8003808:	4a56      	ldr	r2, [pc, #344]	; (8003964 <R_motor_feedback_control+0x1dc>)
 800380a:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <R_motor_feedback_control+0x1dc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003814:	dd03      	ble.n	800381e <R_motor_feedback_control+0x96>
 8003816:	4b53      	ldr	r3, [pc, #332]	; (8003964 <R_motor_feedback_control+0x1dc>)
 8003818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800381c:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 800381e:	4b51      	ldr	r3, [pc, #324]	; (8003964 <R_motor_feedback_control+0x1dc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003826:	da02      	bge.n	800382e <R_motor_feedback_control+0xa6>
 8003828:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <R_motor_feedback_control+0x1dc>)
 800382a:	4a4f      	ldr	r2, [pc, #316]	; (8003968 <R_motor_feedback_control+0x1e0>)
 800382c:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward 				proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint + K_kick*kick;// + K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 800382e:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <R_motor_feedback_control+0x1d8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2232      	movs	r2, #50	; 0x32
 8003834:	fb03 f202 	mul.w	r2, r3, r2
 8003838:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <R_motor_feedback_control+0x1dc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4413      	add	r3, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe78 	bl	8000534 <__aeabi_i2d>
 8003844:	4604      	mov	r4, r0
 8003846:	460d      	mov	r5, r1
 8003848:	4b44      	ldr	r3, [pc, #272]	; (800395c <R_motor_feedback_control+0x1d4>)
 800384a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe70 	bl	8000534 <__aeabi_i2d>
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	4b44      	ldr	r3, [pc, #272]	; (800396c <R_motor_feedback_control+0x1e4>)
 800385a:	f7fc fed5 	bl	8000608 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	f7fc fd19 	bl	800029c <__adddf3>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4614      	mov	r4, r2
 8003870:	461d      	mov	r5, r3
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2216      	movs	r2, #22
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fe59 	bl	8000534 <__aeabi_i2d>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fc fd07 	bl	800029c <__adddf3>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f8c9 	bl	8000a2c <__aeabi_d2iz>
 800389a:	4603      	mov	r3, r0
 800389c:	4a34      	ldr	r2, [pc, #208]	; (8003970 <R_motor_feedback_control+0x1e8>)
 800389e:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint > 0) R_ctrl_signal += R_ff_offset;
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <R_motor_feedback_control+0x1d4>)
 80038a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	dd04      	ble.n	80038b4 <R_motor_feedback_control+0x12c>
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	337d      	adds	r3, #125	; 0x7d
 80038b0:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038b2:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint < 0) R_ctrl_signal -= R_ff_offset;
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <R_motor_feedback_control+0x1d4>)
 80038b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da04      	bge.n	80038c8 <R_motor_feedback_control+0x140>
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b7d      	subs	r3, #125	; 0x7d
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038c6:	6013      	str	r3, [r2, #0]

	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038d0:	db03      	blt.n	80038da <R_motor_feedback_control+0x152>
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d8:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 80038da:	4b25      	ldr	r3, [pc, #148]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80038e2:	dc02      	bgt.n	80038ea <R_motor_feedback_control+0x162>
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038e6:	4a23      	ldr	r2, [pc, #140]	; (8003974 <R_motor_feedback_control+0x1ec>)
 80038e8:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <R_motor_feedback_control+0x1e8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <R_motor_feedback_control+0x17c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <R_motor_feedback_control+0x1f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <R_motor_feedback_control+0x1f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	63da      	str	r2, [r3, #60]	; 0x3c
 8003902:	e017      	b.n	8003934 <R_motor_feedback_control+0x1ac>
	}
	else if (R_ctrl_signal > 0){
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <R_motor_feedback_control+0x1e8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	dd09      	ble.n	8003920 <R_motor_feedback_control+0x198>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <R_motor_feedback_control+0x1e8>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <R_motor_feedback_control+0x1f0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <R_motor_feedback_control+0x1f0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
 800391e:	e009      	b.n	8003934 <R_motor_feedback_control+0x1ac>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <R_motor_feedback_control+0x1f0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <R_motor_feedback_control+0x1e8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	425a      	negs	r2, r3
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <R_motor_feedback_control+0x1f0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	htim3.Instance->CNT = 0;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <R_motor_feedback_control+0x1c8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bdb0      	pop	{r4, r5, r7, pc}
 8003944:	f3af 8000 	nop.w
 8003948:	851eb851 	.word	0x851eb851
 800394c:	40f94f87 	.word	0x40f94f87
 8003950:	200003b0 	.word	0x200003b0
 8003954:	20000108 	.word	0x20000108
 8003958:	20000128 	.word	0x20000128
 800395c:	20000104 	.word	0x20000104
 8003960:	20000118 	.word	0x20000118
 8003964:	20000120 	.word	0x20000120
 8003968:	fffffc18 	.word	0xfffffc18
 800396c:	3fe00000 	.word	0x3fe00000
 8003970:	20000110 	.word	0x20000110
 8003974:	fffffc19 	.word	0xfffffc19
 8003978:	20000320 	.word	0x20000320
 800397c:	00000000 	.word	0x00000000

08003980 <L_motor_feedback_control>:

void L_motor_feedback_control(int8_t kick){//speed in mm/s
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	L_prev_enc_count = htim5.Instance->CNT;
 800398a:	4b71      	ldr	r3, [pc, #452]	; (8003b50 <L_motor_feedback_control+0x1d0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b21a      	sxth	r2, r3
 8003992:	4b70      	ldr	r3, [pc, #448]	; (8003b54 <L_motor_feedback_control+0x1d4>)
 8003994:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 8003996:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <L_motor_feedback_control+0x1d4>)
 8003998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399c:	461a      	mov	r2, r3
 800399e:	4b6e      	ldr	r3, [pc, #440]	; (8003b58 <L_motor_feedback_control+0x1d8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a6c      	ldr	r2, [pc, #432]	; (8003b58 <L_motor_feedback_control+0x1d8>)
 80039a6:	6013      	str	r3, [r2, #0]
	//error in encoder count for that ctrl period
	L_error = (int)((L_speed_setpoint*COUNTS_PER_ROTATION*STR_CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - L_prev_enc_count;
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <L_motor_feedback_control+0x1dc>)
 80039aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fdbb 	bl	8000534 <__aeabi_i2d>
 80039be:	a360      	add	r3, pc, #384	; (adr r3, 8003b40 <L_motor_feedback_control+0x1c0>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc ff4a 	bl	800085c <__aeabi_ddiv>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fd f82c 	bl	8000a2c <__aeabi_d2iz>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4a5f      	ldr	r2, [pc, #380]	; (8003b54 <L_motor_feedback_control+0x1d4>)
 80039d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	4a60      	ldr	r2, [pc, #384]	; (8003b60 <L_motor_feedback_control+0x1e0>)
 80039e0:	6013      	str	r3, [r2, #0]

	L_acc_error += L_error * (1-abs(kick));
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	425b      	neglt	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f1c3 0301 	rsb	r3, r3, #1
 80039f2:	4a5b      	ldr	r2, [pc, #364]	; (8003b60 <L_motor_feedback_control+0x1e0>)
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	fb03 f202 	mul.w	r2, r3, r2
 80039fa:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	4a58      	ldr	r2, [pc, #352]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a02:	6013      	str	r3, [r2, #0]
	if(L_acc_error > 1000) L_acc_error = 1000;
 8003a04:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a0c:	dd03      	ble.n	8003a16 <L_motor_feedback_control+0x96>
 8003a0e:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a14:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;  //limits integral term
 8003a16:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003a1e:	da02      	bge.n	8003a26 <L_motor_feedback_control+0xa6>
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a22:	4a51      	ldr	r2, [pc, #324]	; (8003b68 <L_motor_feedback_control+0x1e8>)
 8003a24:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint + K_kick*kick;//K_pdisterror*(R_acc-L_acc) - K_idisterror*Dist_error_acc;
 8003a26:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <L_motor_feedback_control+0x1e0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2232      	movs	r2, #50	; 0x32
 8003a2c:	fb03 f202 	mul.w	r2, r3, r2
 8003a30:	4b4c      	ldr	r3, [pc, #304]	; (8003b64 <L_motor_feedback_control+0x1e4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fd7c 	bl	8000534 <__aeabi_i2d>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	460d      	mov	r5, r1
 8003a40:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <L_motor_feedback_control+0x1dc>)
 8003a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd74 	bl	8000534 <__aeabi_i2d>
 8003a4c:	a33e      	add	r3, pc, #248	; (adr r3, 8003b48 <L_motor_feedback_control+0x1c8>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fdd9 	bl	8000608 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fc1d 	bl	800029c <__adddf3>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	461d      	mov	r5, r3
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	2216      	movs	r2, #22
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fd5d 	bl	8000534 <__aeabi_i2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f7fc fc0b 	bl	800029c <__adddf3>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f7fc ffcd 	bl	8000a2c <__aeabi_d2iz>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003a96:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint > 0) L_ctrl_signal += L_ff_offset;
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <L_motor_feedback_control+0x1dc>)
 8003a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	dd04      	ble.n	8003aac <L_motor_feedback_control+0x12c>
 8003aa2:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	337d      	adds	r3, #125	; 0x7d
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003aaa:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint < 0) L_ctrl_signal -= L_ff_offset;
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <L_motor_feedback_control+0x1dc>)
 8003aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da04      	bge.n	8003ac0 <L_motor_feedback_control+0x140>
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3b7d      	subs	r3, #125	; 0x7d
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003abe:	6013      	str	r3, [r2, #0]


	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac8:	dd03      	ble.n	8003ad2 <L_motor_feedback_control+0x152>
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ad0:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 8003ad2:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003ada:	da02      	bge.n	8003ae2 <L_motor_feedback_control+0x162>
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <L_motor_feedback_control+0x1f0>)
 8003ae0:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <L_motor_feedback_control+0x17c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
 8003afa:	e017      	b.n	8003b2c <L_motor_feedback_control+0x1ac>
	}
	else if (L_ctrl_signal > 0){
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dd09      	ble.n	8003b18 <L_motor_feedback_control+0x198>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
 8003b16:	e009      	b.n	8003b2c <L_motor_feedback_control+0x1ac>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <L_motor_feedback_control+0x1ec>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	425a      	negs	r2, r3
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <L_motor_feedback_control+0x1f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	htim5.Instance->CNT = 0;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <L_motor_feedback_control+0x1d0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3c:	f3af 8000 	nop.w
 8003b40:	851eb851 	.word	0x851eb851
 8003b44:	40f94f87 	.word	0x40f94f87
 8003b48:	66666666 	.word	0x66666666
 8003b4c:	3fde6666 	.word	0x3fde6666
 8003b50:	200003f8 	.word	0x200003f8
 8003b54:	20000106 	.word	0x20000106
 8003b58:	20000124 	.word	0x20000124
 8003b5c:	20000102 	.word	0x20000102
 8003b60:	20000114 	.word	0x20000114
 8003b64:	2000011c 	.word	0x2000011c
 8003b68:	fffffc18 	.word	0xfffffc18
 8003b6c:	2000010c 	.word	0x2000010c
 8003b70:	fffffc19 	.word	0xfffffc19
 8003b74:	20000368 	.word	0x20000368

08003b78 <smooth_stop2>:
			num_steps--;
		}
	}
	reset_counts();
}
void smooth_stop2(uint16_t dist){
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8003b82:	f000 ff2f 	bl	80049e4 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]
//	int16_t diff = R_acc - L_acc;
	int16_t L_count_target = dist;
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	81bb      	strh	r3, [r7, #12]
	int16_t R_count_target = dist;
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	817b      	strh	r3, [r7, #10]
	int16_t L_prev_error = L_count_target;
 8003b90:	89bb      	ldrh	r3, [r7, #12]
 8003b92:	827b      	strh	r3, [r7, #18]
	int16_t R_prev_error = R_count_target;
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	823b      	strh	r3, [r7, #16]

	reset_counts();
 8003b98:	f7ff fa96 	bl	80030c8 <reset_counts>
	uint8_t stp_cmplt = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]
	uint8_t max_loops = 16; //max time before stop
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	73bb      	strb	r3, [r7, #14]
	while(stp_cmplt == 0){
 8003ba4:	e15c      	b.n	8003e60 <smooth_stop2+0x2e8>
		if (HAL_GetTick() - prev_ctr_loop_time > TURN_CONTROL_LOOP_PERIOD_MS-1){
 8003ba6:	f000 ff1d 	bl	80049e4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	f240 8155 	bls.w	8003e60 <smooth_stop2+0x2e8>
			prev_ctr_loop_time = HAL_GetTick();
 8003bb6:	f000 ff15 	bl	80049e4 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]
			R_prev_enc_count = htim3.Instance->CNT;
 8003bbc:	4b7f      	ldr	r3, [pc, #508]	; (8003dbc <smooth_stop2+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	4b7e      	ldr	r3, [pc, #504]	; (8003dc0 <smooth_stop2+0x248>)
 8003bc6:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <smooth_stop2+0x24c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	b21a      	sxth	r2, r3
 8003bd0:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <smooth_stop2+0x250>)
 8003bd2:	801a      	strh	r2, [r3, #0]
//			Right
			R_error = R_count_target - R_prev_enc_count;
 8003bd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bd8:	4a79      	ldr	r2, [pc, #484]	; (8003dc0 <smooth_stop2+0x248>)
 8003bda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <smooth_stop2+0x254>)
 8003be2:	6013      	str	r3, [r2, #0]
			R_ctrl_signal = R_Kpss*R_error + R_Kdss*(R_error-R_prev_error)*50;
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <smooth_stop2+0x254>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fca0 	bl	8000534 <__aeabi_i2d>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <smooth_stop2+0x254>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc96 	bl	8000534 <__aeabi_i2d>
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <smooth_stop2+0x258>)
 8003c0e:	f7fc fcfb 	bl	8000608 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <smooth_stop2+0x25c>)
 8003c20:	f7fc fcf2 	bl	8000608 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fb36 	bl	800029c <__adddf3>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7fc fef8 	bl	8000a2c <__aeabi_d2iz>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4a66      	ldr	r2, [pc, #408]	; (8003dd8 <smooth_stop2+0x260>)
 8003c40:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal > 0) R_ctrl_signal += R_ff_offset;
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <smooth_stop2+0x260>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	dd04      	ble.n	8003c54 <smooth_stop2+0xdc>
 8003c4a:	4b63      	ldr	r3, [pc, #396]	; (8003dd8 <smooth_stop2+0x260>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	337d      	adds	r3, #125	; 0x7d
 8003c50:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <smooth_stop2+0x260>)
 8003c52:	6013      	str	r3, [r2, #0]
			if (R_ctrl_signal < 0) R_ctrl_signal -= R_ff_offset;
 8003c54:	4b60      	ldr	r3, [pc, #384]	; (8003dd8 <smooth_stop2+0x260>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da04      	bge.n	8003c66 <smooth_stop2+0xee>
 8003c5c:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <smooth_stop2+0x260>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3b7d      	subs	r3, #125	; 0x7d
 8003c62:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <smooth_stop2+0x260>)
 8003c64:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= 300) R_ctrl_signal = 300;
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <smooth_stop2+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003c6e:	db03      	blt.n	8003c78 <smooth_stop2+0x100>
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <smooth_stop2+0x260>)
 8003c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c76:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -300) R_ctrl_signal = -300;
 8003c78:	4b57      	ldr	r3, [pc, #348]	; (8003dd8 <smooth_stop2+0x260>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8003c80:	dc02      	bgt.n	8003c88 <smooth_stop2+0x110>
 8003c82:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <smooth_stop2+0x260>)
 8003c84:	4a55      	ldr	r2, [pc, #340]	; (8003ddc <smooth_stop2+0x264>)
 8003c86:	601a      	str	r2, [r3, #0]

			if (R_ctrl_signal == 0){
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <smooth_stop2+0x260>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <smooth_stop2+0x12a>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <smooth_stop2+0x268>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003c98:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <smooth_stop2+0x268>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ca0:	e017      	b.n	8003cd2 <smooth_stop2+0x15a>
			}
			else if (R_ctrl_signal > 0){
 8003ca2:	4b4d      	ldr	r3, [pc, #308]	; (8003dd8 <smooth_stop2+0x260>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dd09      	ble.n	8003cbe <smooth_stop2+0x146>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 8003caa:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <smooth_stop2+0x260>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <smooth_stop2+0x268>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <smooth_stop2+0x268>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cbc:	e009      	b.n	8003cd2 <smooth_stop2+0x15a>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003cbe:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <smooth_stop2+0x268>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8003cc6:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <smooth_stop2+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	425a      	negs	r2, r3
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <smooth_stop2+0x268>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c
			}
//			Left
			L_error = L_count_target - L_prev_enc_count;
 8003cd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cd6:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <smooth_stop2+0x250>)
 8003cd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	4a41      	ldr	r2, [pc, #260]	; (8003de4 <smooth_stop2+0x26c>)
 8003ce0:	6013      	str	r3, [r2, #0]
			L_ctrl_signal = L_Kpss*L_error + L_Kdss*(L_error-L_prev_error)*50;
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <smooth_stop2+0x26c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fc21 	bl	8000534 <__aeabi_i2d>
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	460d      	mov	r5, r1
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <smooth_stop2+0x26c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fc17 	bl	8000534 <__aeabi_i2d>
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <smooth_stop2+0x258>)
 8003d0c:	f7fc fc7c 	bl	8000608 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <smooth_stop2+0x25c>)
 8003d1e:	f7fc fc73 	bl	8000608 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7fc fab7 	bl	800029c <__adddf3>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fc fe79 	bl	8000a2c <__aeabi_d2iz>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <smooth_stop2+0x270>)
 8003d3e:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal > 0) L_ctrl_signal += L_ff_offset;
 8003d40:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <smooth_stop2+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	dd04      	ble.n	8003d52 <smooth_stop2+0x1da>
 8003d48:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <smooth_stop2+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	337d      	adds	r3, #125	; 0x7d
 8003d4e:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <smooth_stop2+0x270>)
 8003d50:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal < 0) L_ctrl_signal -= L_ff_offset;
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <smooth_stop2+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da04      	bge.n	8003d64 <smooth_stop2+0x1ec>
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <smooth_stop2+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3b7d      	subs	r3, #125	; 0x7d
 8003d60:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <smooth_stop2+0x270>)
 8003d62:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=300) L_ctrl_signal = 300;
 8003d64:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <smooth_stop2+0x270>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003d6c:	db03      	blt.n	8003d76 <smooth_stop2+0x1fe>
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <smooth_stop2+0x270>)
 8003d70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d74:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-300) L_ctrl_signal = -300;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <smooth_stop2+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8003d7e:	dc02      	bgt.n	8003d86 <smooth_stop2+0x20e>
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <smooth_stop2+0x270>)
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <smooth_stop2+0x264>)
 8003d84:	601a      	str	r2, [r3, #0]

			if (L_ctrl_signal == 0){
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <smooth_stop2+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <smooth_stop2+0x228>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <smooth_stop2+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <smooth_stop2+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d9e:	e031      	b.n	8003e04 <smooth_stop2+0x28c>
			}
			else if (L_ctrl_signal > 0){
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <smooth_stop2+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dd23      	ble.n	8003df0 <smooth_stop2+0x278>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <smooth_stop2+0x270>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <smooth_stop2+0x274>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <smooth_stop2+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dba:	e023      	b.n	8003e04 <smooth_stop2+0x28c>
 8003dbc:	200003b0 	.word	0x200003b0
 8003dc0:	20000108 	.word	0x20000108
 8003dc4:	200003f8 	.word	0x200003f8
 8003dc8:	20000106 	.word	0x20000106
 8003dcc:	20000118 	.word	0x20000118
 8003dd0:	3fe00000 	.word	0x3fe00000
 8003dd4:	40490000 	.word	0x40490000
 8003dd8:	20000110 	.word	0x20000110
 8003ddc:	fffffed4 	.word	0xfffffed4
 8003de0:	20000320 	.word	0x20000320
 8003de4:	20000114 	.word	0x20000114
 8003de8:	2000010c 	.word	0x2000010c
 8003dec:	20000368 	.word	0x20000368
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <smooth_stop2+0x2fc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <smooth_stop2+0x300>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	425a      	negs	r2, r3
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <smooth_stop2+0x2fc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (L_error <= Enc_Turn_Error && L_error >= -Enc_Turn_Error  && L_error == L_prev_error) {
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <smooth_stop2+0x304>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	dc1b      	bgt.n	8003e44 <smooth_stop2+0x2cc>
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <smooth_stop2+0x304>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	db16      	blt.n	8003e44 <smooth_stop2+0x2cc>
 8003e16:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <smooth_stop2+0x304>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d110      	bne.n	8003e44 <smooth_stop2+0x2cc>
				if (R_error <= Enc_Turn_Error && R_error >= -Enc_Turn_Error  && R_error == R_prev_error) {
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <smooth_stop2+0x308>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	dc0c      	bgt.n	8003e44 <smooth_stop2+0x2cc>
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <smooth_stop2+0x308>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	db07      	blt.n	8003e44 <smooth_stop2+0x2cc>
 8003e34:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <smooth_stop2+0x308>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d101      	bne.n	8003e44 <smooth_stop2+0x2cc>
					stp_cmplt=1;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
				}
			}
			L_prev_error = L_error;
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <smooth_stop2+0x304>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	827b      	strh	r3, [r7, #18]
			R_prev_error = R_error;
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <smooth_stop2+0x308>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	823b      	strh	r3, [r7, #16]
			dlog();
 8003e50:	f7fe fd8a 	bl	8002968 <dlog>
			max_loops--;
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	73bb      	strb	r3, [r7, #14]
			if (max_loops == 0) break;
 8003e5a:	7bbb      	ldrb	r3, [r7, #14]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <smooth_stop2+0x2f2>
	while(stp_cmplt == 0){
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f43f ae9f 	beq.w	8003ba6 <smooth_stop2+0x2e>
		}
	}
}
 8003e68:	e000      	b.n	8003e6c <smooth_stop2+0x2f4>
			if (max_loops == 0) break;
 8003e6a:	bf00      	nop
}
 8003e6c:	bf00      	nop
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdb0      	pop	{r4, r5, r7, pc}
 8003e74:	20000368 	.word	0x20000368
 8003e78:	2000010c 	.word	0x2000010c
 8003e7c:	20000114 	.word	0x20000114
 8003e80:	20000118 	.word	0x20000118

08003e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <HAL_ADC_MspInit+0x7c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d127      	bne.n	8003f46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6453      	str	r3, [r2, #68]	; 0x44
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_ADC_MspInit+0x80>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8003f2e:	2310      	movs	r3, #16
 8003f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f32:	2303      	movs	r3, #3
 8003f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4805      	ldr	r0, [pc, #20]	; (8003f58 <HAL_ADC_MspInit+0x84>)
 8003f42:	f001 fb59 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f46:	bf00      	nop
 8003f48:	3728      	adds	r7, #40	; 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40012000 	.word	0x40012000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020000 	.word	0x40020000

08003f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a83      	ldr	r2, [pc, #524]	; (8004188 <HAL_I2C_MspInit+0x22c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d14c      	bne.n	8004018 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a81      	ldr	r2, [pc, #516]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b7f      	ldr	r3, [pc, #508]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f9e:	2312      	movs	r3, #18
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003faa:	2304      	movs	r3, #4
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4876      	ldr	r0, [pc, #472]	; (8004190 <HAL_I2C_MspInit+0x234>)
 8003fb6:	f001 fb1f 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fbe:	2312      	movs	r3, #18
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fca:	2304      	movs	r3, #4
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	486e      	ldr	r0, [pc, #440]	; (8004190 <HAL_I2C_MspInit+0x234>)
 8003fd6:	f001 fb0f 	bl	80055f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	4b6b      	ldr	r3, [pc, #428]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a6a      	ldr	r2, [pc, #424]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_I2C_MspInit+0x230>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	201f      	movs	r0, #31
 8003ffc:	f001 f86f 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004000:	201f      	movs	r0, #31
 8004002:	f001 f888 	bl	8005116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	2020      	movs	r0, #32
 800400c:	f001 f867 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004010:	2020      	movs	r0, #32
 8004012:	f001 f880 	bl	8005116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004016:	e0b3      	b.n	8004180 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5d      	ldr	r2, [pc, #372]	; (8004194 <HAL_I2C_MspInit+0x238>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d14e      	bne.n	80040c0 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_I2C_MspInit+0x230>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_I2C_MspInit+0x230>)
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b56      	ldr	r3, [pc, #344]	; (800418c <HAL_I2C_MspInit+0x230>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800403e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004044:	2312      	movs	r3, #18
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004050:	2304      	movs	r3, #4
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004058:	4619      	mov	r1, r3
 800405a:	484d      	ldr	r0, [pc, #308]	; (8004190 <HAL_I2C_MspInit+0x234>)
 800405c:	f001 facc 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004066:	2312      	movs	r3, #18
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406e:	2303      	movs	r3, #3
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004072:	2309      	movs	r3, #9
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800407a:	4619      	mov	r1, r3
 800407c:	4844      	ldr	r0, [pc, #272]	; (8004190 <HAL_I2C_MspInit+0x234>)
 800407e:	f001 fabb 	bl	80055f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_I2C_MspInit+0x230>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <HAL_I2C_MspInit+0x230>)
 800408c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_I2C_MspInit+0x230>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	2021      	movs	r0, #33	; 0x21
 80040a4:	f001 f81b 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80040a8:	2021      	movs	r0, #33	; 0x21
 80040aa:	f001 f834 	bl	8005116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	2022      	movs	r0, #34	; 0x22
 80040b4:	f001 f813 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80040b8:	2022      	movs	r0, #34	; 0x22
 80040ba:	f001 f82c 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 80040be:	e05f      	b.n	8004180 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a34      	ldr	r2, [pc, #208]	; (8004198 <HAL_I2C_MspInit+0x23c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d15a      	bne.n	8004180 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	4a2e      	ldr	r2, [pc, #184]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6313      	str	r3, [r2, #48]	; 0x30
 80040da:	4b2c      	ldr	r3, [pc, #176]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a27      	ldr	r2, [pc, #156]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_I2C_MspInit+0x230>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004108:	2312      	movs	r3, #18
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004110:	2303      	movs	r3, #3
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004114:	2304      	movs	r3, #4
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800411c:	4619      	mov	r1, r3
 800411e:	481f      	ldr	r0, [pc, #124]	; (800419c <HAL_I2C_MspInit+0x240>)
 8004120:	f001 fa6a 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004124:	2310      	movs	r3, #16
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004128:	2312      	movs	r3, #18
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004130:	2303      	movs	r3, #3
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004134:	2309      	movs	r3, #9
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4619      	mov	r1, r3
 800413e:	4814      	ldr	r0, [pc, #80]	; (8004190 <HAL_I2C_MspInit+0x234>)
 8004140:	f001 fa5a 	bl	80055f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_I2C_MspInit+0x230>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a0f      	ldr	r2, [pc, #60]	; (800418c <HAL_I2C_MspInit+0x230>)
 800414e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_I2C_MspInit+0x230>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	2048      	movs	r0, #72	; 0x48
 8004166:	f000 ffba 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800416a:	2048      	movs	r0, #72	; 0x48
 800416c:	f000 ffd3 	bl	8005116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004170:	2200      	movs	r2, #0
 8004172:	2100      	movs	r1, #0
 8004174:	2049      	movs	r0, #73	; 0x49
 8004176:	f000 ffb2 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800417a:	2049      	movs	r0, #73	; 0x49
 800417c:	f000 ffcb 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 8004180:	bf00      	nop
 8004182:	3738      	adds	r7, #56	; 0x38
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40005400 	.word	0x40005400
 800418c:	40023800 	.word	0x40023800
 8004190:	40020400 	.word	0x40020400
 8004194:	40005800 	.word	0x40005800
 8004198:	40005c00 	.word	0x40005c00
 800419c:	40020000 	.word	0x40020000

080041a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_SPI_MspInit+0x84>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d12c      	bne.n	800421c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a10      	ldr	r2, [pc, #64]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_SPI_MspInit+0x88>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80041fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800420c:	2305      	movs	r3, #5
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	4619      	mov	r1, r3
 8004216:	4805      	ldr	r0, [pc, #20]	; (800422c <HAL_SPI_MspInit+0x8c>)
 8004218:	f001 f9ee 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40003800 	.word	0x40003800
 8004228:	40023800 	.word	0x40023800
 800422c:	40020400 	.word	0x40020400

08004230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_TIM_Base_MspInit+0xa8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d116      	bne.n	8004270 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	4b25      	ldr	r3, [pc, #148]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6453      	str	r3, [r2, #68]	; 0x44
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2100      	movs	r1, #0
 8004262:	201a      	movs	r0, #26
 8004264:	f000 ff3b 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004268:	201a      	movs	r0, #26
 800426a:	f000 ff54 	bl	8005116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800426e:	e02e      	b.n	80042ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	4b17      	ldr	r3, [pc, #92]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
}
 8004296:	e01a      	b.n	80042ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <HAL_TIM_Base_MspInit+0xb0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d115      	bne.n	80042ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6453      	str	r3, [r2, #68]	; 0x44
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_TIM_Base_MspInit+0xac>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	201a      	movs	r0, #26
 80042c4:	f000 ff0b 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80042c8:	201a      	movs	r0, #26
 80042ca:	f000 ff24 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40014800 	.word	0x40014800

080042e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08c      	sub	sp, #48	; 0x30
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 031c 	add.w	r3, r7, #28
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a41      	ldr	r2, [pc, #260]	; (8004408 <HAL_TIM_Encoder_MspInit+0x124>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d14a      	bne.n	800439c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	4b32      	ldr	r3, [pc, #200]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a31      	ldr	r2, [pc, #196]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435e:	2302      	movs	r3, #2
 8004360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800436a:	2302      	movs	r3, #2
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4619      	mov	r1, r3
 8004374:	4826      	ldr	r0, [pc, #152]	; (8004410 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004376:	f001 f93f 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 800437a:	2320      	movs	r3, #32
 800437c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437e:	2302      	movs	r3, #2
 8004380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800438a:	2302      	movs	r3, #2
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 800438e:	f107 031c 	add.w	r3, r7, #28
 8004392:	4619      	mov	r1, r3
 8004394:	481f      	ldr	r0, [pc, #124]	; (8004414 <HAL_TIM_Encoder_MspInit+0x130>)
 8004396:	f001 f92f 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800439a:	e030      	b.n	80043fe <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_TIM_Encoder_MspInit+0x134>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d12b      	bne.n	80043fe <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043b0:	f043 0308 	orr.w	r3, r3, #8
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_TIM_Encoder_MspInit+0x128>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 80043de:	2303      	movs	r3, #3
 80043e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043ee:	2302      	movs	r3, #2
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f2:	f107 031c 	add.w	r3, r7, #28
 80043f6:	4619      	mov	r1, r3
 80043f8:	4805      	ldr	r0, [pc, #20]	; (8004410 <HAL_TIM_Encoder_MspInit+0x12c>)
 80043fa:	f001 f8fd 	bl	80055f8 <HAL_GPIO_Init>
}
 80043fe:	bf00      	nop
 8004400:	3730      	adds	r7, #48	; 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40000400 	.word	0x40000400
 800440c:	40023800 	.word	0x40023800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40000c00 	.word	0x40000c00

0800441c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a34      	ldr	r2, [pc, #208]	; (800450c <HAL_TIM_MspPostInit+0xf0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d11f      	bne.n	800447e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	4b33      	ldr	r3, [pc, #204]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 800445a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800445e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	4827      	ldr	r0, [pc, #156]	; (8004514 <HAL_TIM_MspPostInit+0xf8>)
 8004478:	f001 f8be 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800447c:	e041      	b.n	8004502 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d13c      	bne.n	8004502 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6313      	str	r3, [r2, #48]	; 0x30
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 80044ae:	f043 0302 	orr.w	r3, r3, #2
 80044b2:	6313      	str	r3, [r2, #48]	; 0x30
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_TIM_MspPostInit+0xf4>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 80044c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d2:	2301      	movs	r3, #1
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 80044d6:	f107 0314 	add.w	r3, r7, #20
 80044da:	4619      	mov	r1, r3
 80044dc:	480d      	ldr	r0, [pc, #52]	; (8004514 <HAL_TIM_MspPostInit+0xf8>)
 80044de:	f001 f88b 	bl	80055f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 80044e2:	2308      	movs	r3, #8
 80044e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044f2:	2301      	movs	r3, #1
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4619      	mov	r1, r3
 80044fc:	4806      	ldr	r0, [pc, #24]	; (8004518 <HAL_TIM_MspPostInit+0xfc>)
 80044fe:	f001 f87b 	bl	80055f8 <HAL_GPIO_Init>
}
 8004502:	bf00      	nop
 8004504:	3728      	adds	r7, #40	; 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40023800 	.word	0x40023800
 8004514:	40020000 	.word	0x40020000
 8004518:	40020400 	.word	0x40020400

0800451c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_UART_MspInit+0x94>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d133      	bne.n	80045a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <HAL_UART_MspInit+0x98>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <HAL_UART_MspInit+0x98>)
 8004548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454c:	6413      	str	r3, [r2, #64]	; 0x40
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_UART_MspInit+0x98>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_UART_MspInit+0x98>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <HAL_UART_MspInit+0x98>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_UART_MspInit+0x98>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004576:	230c      	movs	r3, #12
 8004578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457a:	2302      	movs	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004582:	2303      	movs	r3, #3
 8004584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004586:	2307      	movs	r3, #7
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	f107 0314 	add.w	r3, r7, #20
 800458e:	4619      	mov	r1, r3
 8004590:	4809      	ldr	r0, [pc, #36]	; (80045b8 <HAL_UART_MspInit+0x9c>)
 8004592:	f001 f831 	bl	80055f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2100      	movs	r1, #0
 800459a:	2026      	movs	r0, #38	; 0x26
 800459c:	f000 fd9f 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045a0:	2026      	movs	r0, #38	; 0x26
 80045a2:	f000 fdb8 	bl	8005116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045a6:	bf00      	nop
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40004400 	.word	0x40004400
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40020000 	.word	0x40020000

080045bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c0:	e7fe      	b.n	80045c0 <NMI_Handler+0x4>

080045c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045c6:	e7fe      	b.n	80045c6 <HardFault_Handler+0x4>

080045c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045cc:	e7fe      	b.n	80045cc <MemManage_Handler+0x4>

080045ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045d2:	e7fe      	b.n	80045d2 <BusFault_Handler+0x4>

080045d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045d8:	e7fe      	b.n	80045d8 <UsageFault_Handler+0x4>

080045da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004608:	f000 f9d8 	bl	80049bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}

08004610 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	static uint8_t flag = 0;
	if (flag ==0){
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>
		prev_measurements[0] = measurements[0];
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 8004622:	701a      	strb	r2, [r3, #0]
		prev_measurements[1] = measurements[1];
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 8004626:	785a      	ldrb	r2, [r3, #1]
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 800462a:	705a      	strb	r2, [r3, #1]
		prev_measurements[2] = measurements[2];
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 800462e:	789a      	ldrb	r2, [r3, #2]
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 8004632:	709a      	strb	r2, [r3, #2]
		TOF_get_measurement();
 8004634:	f7fc fef6 	bl	8001424 <TOF_get_measurement>
		flag = 1;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e009      	b.n	8004654 <TIM1_TRG_COM_TIM11_IRQHandler+0x44>
	}
	else{
		TOF_start_measurement();
 8004640:	f7fc fec0 	bl	80013c4 <TOF_start_measurement>
		flag = 0;
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800464a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800464e:	4808      	ldr	r0, [pc, #32]	; (8004670 <TIM1_TRG_COM_TIM11_IRQHandler+0x60>)
 8004650:	f001 f96f 	bl	8005932 <HAL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004654:	4807      	ldr	r0, [pc, #28]	; (8004674 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>)
 8004656:	f004 fbfd 	bl	8008e54 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800465a:	4807      	ldr	r0, [pc, #28]	; (8004678 <TIM1_TRG_COM_TIM11_IRQHandler+0x68>)
 800465c:	f004 fbfa 	bl	8008e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200004ce 	.word	0x200004ce
 8004668:	20000130 	.word	0x20000130
 800466c:	20000134 	.word	0x20000134
 8004670:	40020800 	.word	0x40020800
 8004674:	20000320 	.word	0x20000320
 8004678:	20000440 	.word	0x20000440

0800467c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <I2C1_EV_IRQHandler+0x10>)
 8004682:	f001 fd1f 	bl	80060c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200001cc 	.word	0x200001cc

08004690 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <I2C1_ER_IRQHandler+0x10>)
 8004696:	f001 fe86 	bl	80063a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200001cc 	.word	0x200001cc

080046a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <I2C2_EV_IRQHandler+0x10>)
 80046aa:	f001 fd0b 	bl	80060c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000220 	.word	0x20000220

080046b8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <I2C2_ER_IRQHandler+0x10>)
 80046be:	f001 fe72 	bl	80063a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000220 	.word	0x20000220

080046cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <USART2_IRQHandler+0x10>)
 80046d2:	f005 fae5 	bl	8009ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000488 	.word	0x20000488

080046e0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <I2C3_EV_IRQHandler+0x10>)
 80046e6:	f001 fced 	bl	80060c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000274 	.word	0x20000274

080046f4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <I2C3_ER_IRQHandler+0x10>)
 80046fa:	f001 fe54 	bl	80063a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000274 	.word	0x20000274

08004708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <_sbrk+0x5c>)
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <_sbrk+0x60>)
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <_sbrk+0x64>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <_sbrk+0x64>)
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <_sbrk+0x68>)
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <_sbrk+0x64>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	429a      	cmp	r2, r3
 8004736:	d207      	bcs.n	8004748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004738:	f006 f9b0 	bl	800aa9c <__errno>
 800473c:	4603      	mov	r3, r0
 800473e:	220c      	movs	r2, #12
 8004740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e009      	b.n	800475c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <_sbrk+0x64>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <_sbrk+0x64>)
 8004758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20020000 	.word	0x20020000
 8004768:	00000400 	.word	0x00000400
 800476c:	200004d0 	.word	0x200004d0
 8004770:	20000510 	.word	0x20000510

08004774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <SystemInit+0x20>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <SystemInit+0x20>)
 8004780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 800479e:	2005      	movs	r0, #5
 80047a0:	f000 f92c 	bl	80049fc <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <uart_startup_transmit+0x40>)
 80047a6:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	480c      	ldr	r0, [pc, #48]	; (80047dc <uart_startup_transmit+0x44>)
 80047ac:	f006 f9d6 	bl	800ab5c <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 80047b0:	480a      	ldr	r0, [pc, #40]	; (80047dc <uart_startup_transmit+0x44>)
 80047b2:	f7fb fd15 	bl	80001e0 <strlen>
 80047b6:	4603      	mov	r3, r0
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	4907      	ldr	r1, [pc, #28]	; (80047dc <uart_startup_transmit+0x44>)
 80047be:	4808      	ldr	r0, [pc, #32]	; (80047e0 <uart_startup_transmit+0x48>)
 80047c0:	f005 f9f9 	bl	8009bb6 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 80047c4:	2201      	movs	r2, #1
 80047c6:	4907      	ldr	r1, [pc, #28]	; (80047e4 <uart_startup_transmit+0x4c>)
 80047c8:	4805      	ldr	r0, [pc, #20]	; (80047e0 <uart_startup_transmit+0x48>)
 80047ca:	f005 fa39 	bl	8009c40 <HAL_UART_Receive_IT>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	0800b55c 	.word	0x0800b55c
 80047dc:	200000a0 	.word	0x200000a0
 80047e0:	20000488 	.word	0x20000488
 80047e4:	200000e0 	.word	0x200000e0

080047e8 <uart_task>:

void uart_task()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <uart_task+0x3c>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d014      	beq.n	800481e <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 80047f4:	480c      	ldr	r0, [pc, #48]	; (8004828 <uart_task+0x40>)
 80047f6:	f7fb fcf3 	bl	80001e0 <strlen>
 80047fa:	4603      	mov	r3, r0
 80047fc:	4619      	mov	r1, r3
 80047fe:	480a      	ldr	r0, [pc, #40]	; (8004828 <uart_task+0x40>)
 8004800:	f000 f816 	bl	8004830 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8004804:	4808      	ldr	r0, [pc, #32]	; (8004828 <uart_task+0x40>)
 8004806:	f006 f945 	bl	800aa94 <atoi>
 800480a:	4603      	mov	r3, r0
 800480c:	b21a      	sxth	r2, r3
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <uart_task+0x44>)
 8004810:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <uart_task+0x3c>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <uart_task+0x40>)
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
	}
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000100 	.word	0x20000100
 8004828:	200000e0 	.word	0x200000e0
 800482c:	20000104 	.word	0x20000104

08004830 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4803      	ldr	r0, [pc, #12]	; (8004850 <uart_transmit+0x20>)
 8004844:	f005 f9b7 	bl	8009bb6 <HAL_UART_Transmit_IT>
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000488 	.word	0x20000488

08004854 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_UART_RxCpltCallback+0x64>)
 8004864:	5c9b      	ldrb	r3, [r3, r2]
 8004866:	2b0a      	cmp	r3, #10
 8004868:	d10c      	bne.n	8004884 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <HAL_UART_RxCpltCallback+0x64>)
 8004872:	2100      	movs	r1, #0
 8004874:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_UART_RxCpltCallback+0x68>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
		index = 0;
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e009      	b.n	8004898 <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b1d      	cmp	r3, #29
 800488a:	d805      	bhi.n	8004898 <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 8004896:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_UART_RxCpltCallback+0x60>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_UART_RxCpltCallback+0x64>)
 80048a0:	4413      	add	r3, r2
 80048a2:	2201      	movs	r2, #1
 80048a4:	4619      	mov	r1, r3
 80048a6:	4806      	ldr	r0, [pc, #24]	; (80048c0 <HAL_UART_RxCpltCallback+0x6c>)
 80048a8:	f005 f9ca 	bl	8009c40 <HAL_UART_Receive_IT>

}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200004d4 	.word	0x200004d4
 80048b8:	200000e0 	.word	0x200000e0
 80048bc:	20000100 	.word	0x20000100
 80048c0:	20000488 	.word	0x20000488

080048c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80048c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048c8:	480d      	ldr	r0, [pc, #52]	; (8004900 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048ca:	490e      	ldr	r1, [pc, #56]	; (8004904 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048d0:	e002      	b.n	80048d8 <LoopCopyDataInit>

080048d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048d6:	3304      	adds	r3, #4

080048d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048dc:	d3f9      	bcc.n	80048d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048de:	4a0b      	ldr	r2, [pc, #44]	; (800490c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048e0:	4c0b      	ldr	r4, [pc, #44]	; (8004910 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048e4:	e001      	b.n	80048ea <LoopFillZerobss>

080048e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e8:	3204      	adds	r2, #4

080048ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048ec:	d3fb      	bcc.n	80048e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ee:	f7ff ff41 	bl	8004774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048f2:	f006 f8d9 	bl	800aaa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048f6:	f7fc fdc5 	bl	8001484 <main>
  bx  lr    
 80048fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004904:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004908:	0800b6c8 	.word	0x0800b6c8
  ldr r2, =_sbss
 800490c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004910:	2000050c 	.word	0x2000050c

08004914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004914:	e7fe      	b.n	8004914 <ADC_IRQHandler>
	...

08004918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <HAL_Init+0x40>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0d      	ldr	r2, [pc, #52]	; (8004958 <HAL_Init+0x40>)
 8004922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_Init+0x40>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <HAL_Init+0x40>)
 800492e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HAL_Init+0x40>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a07      	ldr	r2, [pc, #28]	; (8004958 <HAL_Init+0x40>)
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004940:	2003      	movs	r0, #3
 8004942:	f000 fbc1 	bl	80050c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004946:	200f      	movs	r0, #15
 8004948:	f000 f808 	bl	800495c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800494c:	f7ff fa9a 	bl	8003e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00

0800495c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_InitTick+0x54>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_InitTick+0x58>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004972:	fbb3 f3f1 	udiv	r3, r3, r1
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fbd9 	bl	8005132 <HAL_SYSTICK_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e00e      	b.n	80049a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d80a      	bhi.n	80049a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004990:	2200      	movs	r2, #0
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	f000 fba1 	bl	80050de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800499c:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <HAL_InitTick+0x5c>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	2000000c 	.word	0x2000000c
 80049b4:	20000014 	.word	0x20000014
 80049b8:	20000010 	.word	0x20000010

080049bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_IncTick+0x20>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_IncTick+0x24>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <HAL_IncTick+0x24>)
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000014 	.word	0x20000014
 80049e0:	200004d8 	.word	0x200004d8

080049e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return uwTick;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_GetTick+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	200004d8 	.word	0x200004d8

080049fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a04:	f7ff ffee 	bl	80049e4 <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d005      	beq.n	8004a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_Delay+0x44>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a22:	bf00      	nop
 8004a24:	f7ff ffde 	bl	80049e4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d8f7      	bhi.n	8004a24 <HAL_Delay+0x28>
  {
  }
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000014 	.word	0x20000014

08004a44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e033      	b.n	8004ac2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fa36 	bl	8003ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d118      	bne.n	8004ab4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a8a:	f023 0302 	bic.w	r3, r3, #2
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f94a 	bl	8004d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	f043 0201 	orr.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab2:	e001      	b.n	8004ab8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x1c>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e113      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x244>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d925      	bls.n	8004b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3b1e      	subs	r3, #30
 8004b0e:	2207      	movs	r2, #7
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43da      	mvns	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68d9      	ldr	r1, [r3, #12]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4603      	mov	r3, r0
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4403      	add	r3, r0
 8004b36:	3b1e      	subs	r3, #30
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	e022      	b.n	8004b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6919      	ldr	r1, [r3, #16]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	2207      	movs	r2, #7
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	400a      	ands	r2, r1
 8004b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6919      	ldr	r1, [r3, #16]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4403      	add	r3, r0
 8004b80:	409a      	lsls	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d824      	bhi.n	8004bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3b05      	subs	r3, #5
 8004ba4:	221f      	movs	r2, #31
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b05      	subs	r3, #5
 8004bce:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8004bda:	e04c      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d824      	bhi.n	8004c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b23      	subs	r3, #35	; 0x23
 8004bf6:	221f      	movs	r2, #31
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	400a      	ands	r2, r1
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4618      	mov	r0, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3b23      	subs	r3, #35	; 0x23
 8004c20:	fa00 f203 	lsl.w	r2, r0, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c2c:	e023      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3b41      	subs	r3, #65	; 0x41
 8004c40:	221f      	movs	r2, #31
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43da      	mvns	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	3b41      	subs	r3, #65	; 0x41
 8004c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_ADC_ConfigChannel+0x250>)
 8004c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <HAL_ADC_ConfigChannel+0x254>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10f      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b12      	cmp	r3, #18
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <HAL_ADC_ConfigChannel+0x254>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d12b      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x23a>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_ADC_ConfigChannel+0x258>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b11      	cmp	r3, #17
 8004cbe:	d122      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <HAL_ADC_ConfigChannel+0x258>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <HAL_ADC_ConfigChannel+0x25c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <HAL_ADC_ConfigChannel+0x260>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	0c9a      	lsrs	r2, r3, #18
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cf8:	e002      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f9      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40012300 	.word	0x40012300
 8004d20:	40012000 	.word	0x40012000
 8004d24:	10000012 	.word	0x10000012
 8004d28:	2000000c 	.word	0x2000000c
 8004d2c:	431bde83 	.word	0x431bde83

08004d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d38:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <ADC_Init+0x1f0>)
 8004d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	021a      	lsls	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	4a58      	ldr	r2, [pc, #352]	; (8004f24 <ADC_Init+0x1f4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	e00f      	b.n	8004e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0202 	bic.w	r2, r2, #2
 8004e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7e1b      	ldrb	r3, [r3, #24]
 8004e48:	005a      	lsls	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	3b01      	subs	r3, #1
 8004e88:	035a      	lsls	r2, r3, #13
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e007      	b.n	8004ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	051a      	lsls	r2, r3, #20
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ee6:	025a      	lsls	r2, r3, #9
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6899      	ldr	r1, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	029a      	lsls	r2, r3, #10
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40012300 	.word	0x40012300
 8004f24:	0f000001 	.word	0x0f000001

08004f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	60d3      	str	r3, [r2, #12]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <__NVIC_GetPriorityGrouping+0x18>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 0307 	and.w	r3, r3, #7
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <__NVIC_EnableIRQ+0x38>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf28      	it	cs
 800503a:	2304      	movcs	r3, #4
 800503c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3304      	adds	r3, #4
 8005042:	2b06      	cmp	r3, #6
 8005044:	d902      	bls.n	800504c <NVIC_EncodePriority+0x30>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3b03      	subs	r3, #3
 800504a:	e000      	b.n	800504e <NVIC_EncodePriority+0x32>
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	401a      	ands	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43d9      	mvns	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	4313      	orrs	r3, r2
         );
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005094:	d301      	bcc.n	800509a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005096:	2301      	movs	r3, #1
 8005098:	e00f      	b.n	80050ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <SysTick_Config+0x40>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a2:	210f      	movs	r1, #15
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	f7ff ff8e 	bl	8004fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <SysTick_Config+0x40>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b2:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <SysTick_Config+0x40>)
 80050b4:	2207      	movs	r2, #7
 80050b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff29 	bl	8004f28 <__NVIC_SetPriorityGrouping>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	4603      	mov	r3, r0
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050f0:	f7ff ff3e 	bl	8004f70 <__NVIC_GetPriorityGrouping>
 80050f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff ff8e 	bl	800501c <NVIC_EncodePriority>
 8005100:	4602      	mov	r2, r0
 8005102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff5d 	bl	8004fc8 <__NVIC_SetPriority>
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff31 	bl	8004f8c <__NVIC_EnableIRQ>
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ffa2 	bl	8005084 <SysTick_Config>
 8005140:	4603      	mov	r3, r0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005158:	f7ff fc44 	bl	80049e4 <HAL_GetTick>
 800515c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d008      	beq.n	800517c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e052      	b.n	8005222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0216 	bic.w	r2, r2, #22
 800518a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800519a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <HAL_DMA_Abort+0x62>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0208 	bic.w	r2, r2, #8
 80051ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051cc:	e013      	b.n	80051f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ce:	f7ff fc09 	bl	80049e4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d90c      	bls.n	80051f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2203      	movs	r2, #3
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e015      	b.n	8005222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e4      	bne.n	80051ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005208:	223f      	movs	r2, #63	; 0x3f
 800520a:	409a      	lsls	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d004      	beq.n	8005248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e00c      	b.n	8005262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2205      	movs	r2, #5
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800527c:	b2db      	uxtb	r3, r3
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800529e:	4b23      	ldr	r3, [pc, #140]	; (800532c <HAL_FLASH_Program+0xa0>)
 80052a0:	7e1b      	ldrb	r3, [r3, #24]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_FLASH_Program+0x1e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e03b      	b.n	8005322 <HAL_FLASH_Program+0x96>
 80052aa:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_FLASH_Program+0xa0>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052b4:	f000 f860 	bl	8005378 <FLASH_WaitForLastOperation>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d12b      	bne.n	800531a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80052c8:	783b      	ldrb	r3, [r7, #0]
 80052ca:	4619      	mov	r1, r3
 80052cc:	68b8      	ldr	r0, [r7, #8]
 80052ce:	f000 f90b 	bl	80054e8 <FLASH_Program_Byte>
 80052d2:	e016      	b.n	8005302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80052da:	883b      	ldrh	r3, [r7, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	68b8      	ldr	r0, [r7, #8]
 80052e0:	f000 f8de 	bl	80054a0 <FLASH_Program_HalfWord>
 80052e4:	e00d      	b.n	8005302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d105      	bne.n	80052f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	68b8      	ldr	r0, [r7, #8]
 80052f2:	f000 f8b3 	bl	800545c <FLASH_Program_Word>
 80052f6:	e004      	b.n	8005302 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80052f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fc:	68b8      	ldr	r0, [r7, #8]
 80052fe:	f000 f87b 	bl	80053f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005302:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005306:	f000 f837 	bl	8005378 <FLASH_WaitForLastOperation>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_FLASH_Program+0xa4>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <HAL_FLASH_Program+0xa4>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <HAL_FLASH_Program+0xa0>)
 800531c:	2200      	movs	r2, #0
 800531e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200004dc 	.word	0x200004dc
 8005330:	40023c00 	.word	0x40023c00

08005334 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_FLASH_Unlock+0x38>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	da0b      	bge.n	800535e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_FLASH_Unlock+0x38>)
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <HAL_FLASH_Unlock+0x3c>)
 800534a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_FLASH_Unlock+0x38>)
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_FLASH_Unlock+0x40>)
 8005350:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_FLASH_Unlock+0x38>)
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	da01      	bge.n	800535e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800535e:	79fb      	ldrb	r3, [r7, #7]
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40023c00 	.word	0x40023c00
 8005370:	45670123 	.word	0x45670123
 8005374:	cdef89ab 	.word	0xcdef89ab

08005378 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <FLASH_WaitForLastOperation+0x78>)
 8005386:	2200      	movs	r2, #0
 8005388:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800538a:	f7ff fb2b 	bl	80049e4 <HAL_GetTick>
 800538e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005390:	e010      	b.n	80053b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d00c      	beq.n	80053b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <FLASH_WaitForLastOperation+0x38>
 80053a0:	f7ff fb20 	bl	80049e4 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d201      	bcs.n	80053b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e019      	b.n	80053e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <FLASH_WaitForLastOperation+0x7c>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e8      	bne.n	8005392 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <FLASH_WaitForLastOperation+0x7c>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <FLASH_WaitForLastOperation+0x7c>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <FLASH_WaitForLastOperation+0x7c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80053de:	f000 f8a5 	bl	800552c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
  
}  
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200004dc 	.word	0x200004dc
 80053f4:	40023c00 	.word	0x40023c00

080053f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005404:	4b14      	ldr	r3, [pc, #80]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	4a13      	ldr	r2, [pc, #76]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 8005416:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800541a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <FLASH_Program_DoubleWord+0x60>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800542e:	f3bf 8f6f 	isb	sy
}
 8005432:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	000a      	movs	r2, r1
 8005442:	2300      	movs	r3, #0
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	3104      	adds	r1, #4
 8005448:	4613      	mov	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40023c00 	.word	0x40023c00

0800545c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <FLASH_Program_Word+0x40>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <FLASH_Program_Word+0x40>)
 800546c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <FLASH_Program_Word+0x40>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <FLASH_Program_Word+0x40>)
 8005478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800547c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <FLASH_Program_Word+0x40>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	4a06      	ldr	r2, [pc, #24]	; (800549c <FLASH_Program_Word+0x40>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	601a      	str	r2, [r3, #0]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40023c00 	.word	0x40023c00

080054a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <FLASH_Program_HalfWord+0x44>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	887a      	ldrh	r2, [r7, #2]
 80054d4:	801a      	strh	r2, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40023c00 	.word	0x40023c00

080054e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <FLASH_Program_Byte+0x40>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <FLASH_Program_Byte+0x40>)
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <FLASH_Program_Byte+0x40>)
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <FLASH_Program_Byte+0x40>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005508:	4b07      	ldr	r3, [pc, #28]	; (8005528 <FLASH_Program_Byte+0x40>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	4a06      	ldr	r2, [pc, #24]	; (8005528 <FLASH_Program_Byte+0x40>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	701a      	strb	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023c00 	.word	0x40023c00

0800552c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800553c:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f043 0310 	orr.w	r3, r3, #16
 8005544:	4a2b      	ldr	r2, [pc, #172]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 8005546:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005548:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 800554a:	2210      	movs	r2, #16
 800554c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f043 0308 	orr.w	r3, r3, #8
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 8005564:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 8005568:	2220      	movs	r2, #32
 800556a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 8005582:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005584:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800558a:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 80055a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 80055be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 80055c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80055d4:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f043 0320 	orr.w	r3, r3, #32
 80055dc:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <FLASH_SetErrorCode+0xc8>)
 80055de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <FLASH_SetErrorCode+0xc4>)
 80055e2:	2202      	movs	r2, #2
 80055e4:	60da      	str	r2, [r3, #12]
  }
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40023c00 	.word	0x40023c00
 80055f4:	200004dc 	.word	0x200004dc

080055f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e159      	b.n	80058c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005614:	2201      	movs	r2, #1
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	429a      	cmp	r2, r3
 800562e:	f040 8148 	bne.w	80058c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d005      	beq.n	800564a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005646:	2b02      	cmp	r3, #2
 8005648:	d130      	bne.n	80056ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	2203      	movs	r2, #3
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4313      	orrs	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005680:	2201      	movs	r2, #1
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 0201 	and.w	r2, r3, #1
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d017      	beq.n	80056e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d123      	bne.n	800573c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	08da      	lsrs	r2, r3, #3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3208      	adds	r2, #8
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	220f      	movs	r2, #15
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	08da      	lsrs	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3208      	adds	r2, #8
 8005736:	69b9      	ldr	r1, [r7, #24]
 8005738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	2203      	movs	r2, #3
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0203 	and.w	r2, r3, #3
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a2 	beq.w	80058c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	4b57      	ldr	r3, [pc, #348]	; (80058e0 <HAL_GPIO_Init+0x2e8>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	4a56      	ldr	r2, [pc, #344]	; (80058e0 <HAL_GPIO_Init+0x2e8>)
 8005788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800578c:	6453      	str	r3, [r2, #68]	; 0x44
 800578e:	4b54      	ldr	r3, [pc, #336]	; (80058e0 <HAL_GPIO_Init+0x2e8>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800579a:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_GPIO_Init+0x2ec>)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a49      	ldr	r2, [pc, #292]	; (80058e8 <HAL_GPIO_Init+0x2f0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d019      	beq.n	80057fa <HAL_GPIO_Init+0x202>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a48      	ldr	r2, [pc, #288]	; (80058ec <HAL_GPIO_Init+0x2f4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_GPIO_Init+0x1fe>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a47      	ldr	r2, [pc, #284]	; (80058f0 <HAL_GPIO_Init+0x2f8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00d      	beq.n	80057f2 <HAL_GPIO_Init+0x1fa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a46      	ldr	r2, [pc, #280]	; (80058f4 <HAL_GPIO_Init+0x2fc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <HAL_GPIO_Init+0x1f6>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a45      	ldr	r2, [pc, #276]	; (80058f8 <HAL_GPIO_Init+0x300>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <HAL_GPIO_Init+0x1f2>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e008      	b.n	80057fc <HAL_GPIO_Init+0x204>
 80057ea:	2307      	movs	r3, #7
 80057ec:	e006      	b.n	80057fc <HAL_GPIO_Init+0x204>
 80057ee:	2303      	movs	r3, #3
 80057f0:	e004      	b.n	80057fc <HAL_GPIO_Init+0x204>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e002      	b.n	80057fc <HAL_GPIO_Init+0x204>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_GPIO_Init+0x204>
 80057fa:	2300      	movs	r3, #0
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f002 0203 	and.w	r2, r2, #3
 8005802:	0092      	lsls	r2, r2, #2
 8005804:	4093      	lsls	r3, r2
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800580c:	4935      	ldr	r1, [pc, #212]	; (80058e4 <HAL_GPIO_Init+0x2ec>)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	089b      	lsrs	r3, r3, #2
 8005812:	3302      	adds	r3, #2
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <HAL_GPIO_Init+0x304>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800583e:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <HAL_GPIO_Init+0x304>)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005844:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <HAL_GPIO_Init+0x304>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <HAL_GPIO_Init+0x304>)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_GPIO_Init+0x304>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <HAL_GPIO_Init+0x304>)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <HAL_GPIO_Init+0x304>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058bc:	4a0f      	ldr	r2, [pc, #60]	; (80058fc <HAL_GPIO_Init+0x304>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	f67f aea2 	bls.w	8005614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	3724      	adds	r7, #36	; 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40023800 	.word	0x40023800
 80058e4:	40013800 	.word	0x40013800
 80058e8:	40020000 	.word	0x40020000
 80058ec:	40020400 	.word	0x40020400
 80058f0:	40020800 	.word	0x40020800
 80058f4:	40020c00 	.word	0x40020c00
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40013c00 	.word	0x40013c00

08005900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
 800590c:	4613      	mov	r3, r2
 800590e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005910:	787b      	ldrb	r3, [r7, #1]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005916:	887a      	ldrh	r2, [r7, #2]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800591c:	e003      	b.n	8005926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800591e:	887b      	ldrh	r3, [r7, #2]
 8005920:	041a      	lsls	r2, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	619a      	str	r2, [r3, #24]
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	460b      	mov	r3, r1
 800593c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005944:	887a      	ldrh	r2, [r7, #2]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	041a      	lsls	r2, r3, #16
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	43d9      	mvns	r1, r3
 8005950:	887b      	ldrh	r3, [r7, #2]
 8005952:	400b      	ands	r3, r1
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	619a      	str	r2, [r3, #24]
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e12b      	b.n	8005bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fe fae4 	bl	8003f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059cc:	f002 fea2 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 80059d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4a81      	ldr	r2, [pc, #516]	; (8005bdc <HAL_I2C_Init+0x274>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d807      	bhi.n	80059ec <HAL_I2C_Init+0x84>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a80      	ldr	r2, [pc, #512]	; (8005be0 <HAL_I2C_Init+0x278>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bf94      	ite	ls
 80059e4:	2301      	movls	r3, #1
 80059e6:	2300      	movhi	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e006      	b.n	80059fa <HAL_I2C_Init+0x92>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a7d      	ldr	r2, [pc, #500]	; (8005be4 <HAL_I2C_Init+0x27c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	bf94      	ite	ls
 80059f4:	2301      	movls	r3, #1
 80059f6:	2300      	movhi	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0e7      	b.n	8005bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a78      	ldr	r2, [pc, #480]	; (8005be8 <HAL_I2C_Init+0x280>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	0c9b      	lsrs	r3, r3, #18
 8005a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a6a      	ldr	r2, [pc, #424]	; (8005bdc <HAL_I2C_Init+0x274>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d802      	bhi.n	8005a3c <HAL_I2C_Init+0xd4>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	e009      	b.n	8005a50 <HAL_I2C_Init+0xe8>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	4a69      	ldr	r2, [pc, #420]	; (8005bec <HAL_I2C_Init+0x284>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	099b      	lsrs	r3, r3, #6
 8005a4e:	3301      	adds	r3, #1
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	495c      	ldr	r1, [pc, #368]	; (8005bdc <HAL_I2C_Init+0x274>)
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	d819      	bhi.n	8005aa4 <HAL_I2C_Init+0x13c>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1e59      	subs	r1, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a84:	400b      	ands	r3, r1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_I2C_Init+0x138>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1e59      	subs	r1, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9e:	e051      	b.n	8005b44 <HAL_I2C_Init+0x1dc>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e04f      	b.n	8005b44 <HAL_I2C_Init+0x1dc>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d111      	bne.n	8005ad0 <HAL_I2C_Init+0x168>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1e58      	subs	r0, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	440b      	add	r3, r1
 8005aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e012      	b.n	8005af6 <HAL_I2C_Init+0x18e>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1e58      	subs	r0, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6859      	ldr	r1, [r3, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	0099      	lsls	r1, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Init+0x196>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e022      	b.n	8005b44 <HAL_I2C_Init+0x1dc>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10e      	bne.n	8005b24 <HAL_I2C_Init+0x1bc>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1e58      	subs	r0, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6859      	ldr	r1, [r3, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	440b      	add	r3, r1
 8005b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	e00f      	b.n	8005b44 <HAL_I2C_Init+0x1dc>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	0099      	lsls	r1, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	6809      	ldr	r1, [r1, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6911      	ldr	r1, [r2, #16]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	000186a0 	.word	0x000186a0
 8005be0:	001e847f 	.word	0x001e847f
 8005be4:	003d08ff 	.word	0x003d08ff
 8005be8:	431bde83 	.word	0x431bde83
 8005bec:	10624dd3 	.word	0x10624dd3

08005bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	817b      	strh	r3, [r7, #10]
 8005c02:	460b      	mov	r3, r1
 8005c04:	813b      	strh	r3, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c0a:	f7fe feeb 	bl	80049e4 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f040 80d9 	bne.w	8005dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	2319      	movs	r3, #25
 8005c24:	2201      	movs	r2, #1
 8005c26:	496d      	ldr	r1, [pc, #436]	; (8005ddc <HAL_I2C_Mem_Write+0x1ec>)
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 ff6f 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c34:	2302      	movs	r3, #2
 8005c36:	e0cc      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_I2C_Mem_Write+0x56>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e0c5      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d007      	beq.n	8005c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2221      	movs	r2, #33	; 0x21
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a4d      	ldr	r2, [pc, #308]	; (8005de0 <HAL_I2C_Mem_Write+0x1f0>)
 8005cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cae:	88f8      	ldrh	r0, [r7, #6]
 8005cb0:	893a      	ldrh	r2, [r7, #8]
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f001 fde6 	bl	8007890 <I2C_RequestMemoryWrite>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d052      	beq.n	8005d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e081      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f001 fff0 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00d      	beq.n	8005cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d107      	bne.n	8005cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06b      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d11b      	bne.n	8005d70 <HAL_I2C_Mem_Write+0x180>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1aa      	bne.n	8005cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f001 ffdc 	bl	8007d3a <I2C_WaitOnBTFFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d107      	bne.n	8005da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e016      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	00100002 	.word	0x00100002
 8005de0:	ffff0000 	.word	0xffff0000

08005de4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	817b      	strh	r3, [r7, #10]
 8005df6:	460b      	mov	r3, r1
 8005df8:	813b      	strh	r3, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	f040 808e 	bne.w	8005f2c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e10:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_I2C_Mem_Write_IT+0x158>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	08db      	lsrs	r3, r3, #3
 8005e16:	4a4a      	ldr	r2, [pc, #296]	; (8005f40 <HAL_I2C_Mem_Write_IT+0x15c>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	0a1a      	lsrs	r2, r3, #8
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009a      	lsls	r2, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d116      	bne.n	8005e64 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e064      	b.n	8005f2e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d0db      	beq.n	8005e2a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2C_Mem_Write_IT+0x9c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e056      	b.n	8005f2e <HAL_I2C_Mem_Write_IT+0x14a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d007      	beq.n	8005ea6 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2221      	movs	r2, #33	; 0x21
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2240      	movs	r2, #64	; 0x40
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_I2C_Mem_Write_IT+0x160>)
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005ee8:	897a      	ldrh	r2, [r7, #10]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005eee:	893a      	ldrh	r2, [r7, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005f26:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f2c:	2302      	movs	r3, #2
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	14f8b589 	.word	0x14f8b589
 8005f44:	ffff0000 	.word	0xffff0000

08005f48 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	817b      	strh	r3, [r7, #10]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	813b      	strh	r3, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	f040 809a 	bne.w	80060a8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f74:	4b50      	ldr	r3, [pc, #320]	; (80060b8 <HAL_I2C_Mem_Read_IT+0x170>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	4a50      	ldr	r2, [pc, #320]	; (80060bc <HAL_I2C_Mem_Read_IT+0x174>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	0a1a      	lsrs	r2, r3, #8
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009a      	lsls	r2, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e070      	b.n	80060aa <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d0db      	beq.n	8005f8e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_I2C_Mem_Read_IT+0x9c>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e062      	b.n	80060aa <HAL_I2C_Mem_Read_IT+0x162>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d007      	beq.n	800600a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006018:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2222      	movs	r2, #34	; 0x22
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <HAL_I2C_Mem_Read_IT+0x178>)
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800604c:	897a      	ldrh	r2, [r7, #10]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006052:	893a      	ldrh	r2, [r7, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006072:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006082:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80060a2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	2000000c 	.word	0x2000000c
 80060bc:	14f8b589 	.word	0x14f8b589
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d003      	beq.n	80060fc <HAL_I2C_EV_IRQHandler+0x38>
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	f040 80c1 	bne.w	800627e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10d      	bne.n	8006132 <HAL_I2C_EV_IRQHandler+0x6e>
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800611c:	d003      	beq.n	8006126 <HAL_I2C_EV_IRQHandler+0x62>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006124:	d101      	bne.n	800612a <HAL_I2C_EV_IRQHandler+0x66>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <HAL_I2C_EV_IRQHandler+0x68>
 800612a:	2300      	movs	r3, #0
 800612c:	2b01      	cmp	r3, #1
 800612e:	f000 8132 	beq.w	8006396 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00c      	beq.n	8006156 <HAL_I2C_EV_IRQHandler+0x92>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fe98 	bl	8007e7e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fd83 	bl	8006c5a <I2C_Master_SB>
 8006154:	e092      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0xb2>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	0a5b      	lsrs	r3, r3, #9
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fdf9 	bl	8006d66 <I2C_Master_ADD10>
 8006174:	e082      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_I2C_EV_IRQHandler+0xd2>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fe13 	bl	8006dba <I2C_Master_ADDR>
 8006194:	e072      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	089b      	lsrs	r3, r3, #2
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03b      	beq.n	800621a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b0:	f000 80f3 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	0a9b      	lsrs	r3, r3, #10
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f9f3 	bl	80065c4 <I2C_MasterTransmit_TXE>
 80061de:	e04d      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 80d6 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	0a5b      	lsrs	r3, r3, #9
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80cf 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b21      	cmp	r3, #33	; 0x21
 8006200:	d103      	bne.n	800620a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa7a 	bl	80066fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006208:	e0c7      	b.n	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	f040 80c4 	bne.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fae8 	bl	80067e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006218:	e0bf      	b.n	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006228:	f000 80b7 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	099b      	lsrs	r3, r3, #6
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <HAL_I2C_EV_IRQHandler+0x194>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	0a9b      	lsrs	r3, r3, #10
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <HAL_I2C_EV_IRQHandler+0x194>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d103      	bne.n	8006258 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb5d 	bl	8006910 <I2C_MasterReceive_RXNE>
 8006256:	e011      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 809a 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	0a5b      	lsrs	r3, r3, #9
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8093 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fc06 	bl	8006a86 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800627a:	e08e      	b.n	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
 800627c:	e08d      	b.n	800639a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e007      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	0a5b      	lsrs	r3, r3, #9
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 ffc4 	bl	8007258 <I2C_Slave_ADDR>
 80062d0:	e066      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	0a5b      	lsrs	r3, r3, #9
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fffe 	bl	80072ec <I2C_Slave_STOPF>
 80062f0:	e056      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d002      	beq.n	80062fe <HAL_I2C_EV_IRQHandler+0x23a>
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	2b29      	cmp	r3, #41	; 0x29
 80062fc:	d125      	bne.n	800634a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	09db      	lsrs	r3, r3, #7
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <HAL_I2C_EV_IRQHandler+0x266>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	0a9b      	lsrs	r3, r3, #10
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_I2C_EV_IRQHandler+0x266>
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 feda 	bl	80070dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006328:	e039      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d033      	beq.n	800639e <HAL_I2C_EV_IRQHandler+0x2da>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	0a5b      	lsrs	r3, r3, #9
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d02d      	beq.n	800639e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 ff07 	bl	8007156 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006348:	e029      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	099b      	lsrs	r3, r3, #6
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00f      	beq.n	8006376 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	0a9b      	lsrs	r3, r3, #10
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 ff12 	bl	8007198 <I2C_SlaveReceive_RXNE>
 8006374:	e014      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00e      	beq.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	0a5b      	lsrs	r3, r3, #9
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 ff40 	bl	8007214 <I2C_SlaveReceive_BTF>
 8006394:	e004      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800639e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b08a      	sub	sp, #40	; 0x28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	0a5b      	lsrs	r3, r3, #9
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00e      	beq.n	800641e <HAL_I2C_ER_IRQHandler+0x78>
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	f043 0302 	orr.w	r3, r3, #2
 8006412:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800641c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	0a9b      	lsrs	r3, r3, #10
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d03f      	beq.n	80064aa <HAL_I2C_ER_IRQHandler+0x104>
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d039      	beq.n	80064aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006436:	7efb      	ldrb	r3, [r7, #27]
 8006438:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006450:	7ebb      	ldrb	r3, [r7, #26]
 8006452:	2b20      	cmp	r3, #32
 8006454:	d112      	bne.n	800647c <HAL_I2C_ER_IRQHandler+0xd6>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <HAL_I2C_ER_IRQHandler+0xd6>
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b21      	cmp	r3, #33	; 0x21
 8006460:	d008      	beq.n	8006474 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	2b29      	cmp	r3, #41	; 0x29
 8006466:	d005      	beq.n	8006474 <HAL_I2C_ER_IRQHandler+0xce>
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	2b28      	cmp	r3, #40	; 0x28
 800646c:	d106      	bne.n	800647c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b21      	cmp	r3, #33	; 0x21
 8006472:	d103      	bne.n	800647c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 f869 	bl	800754c <I2C_Slave_AF>
 800647a:	e016      	b.n	80064aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006484:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800648e:	7efb      	ldrb	r3, [r7, #27]
 8006490:	2b10      	cmp	r3, #16
 8006492:	d002      	beq.n	800649a <HAL_I2C_ER_IRQHandler+0xf4>
 8006494:	7efb      	ldrb	r3, [r7, #27]
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d107      	bne.n	80064aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	0adb      	lsrs	r3, r3, #11
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	f043 0308 	orr.w	r3, r3, #8
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80064d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 f8a0 	bl	800762c <I2C_ITError>
  }
}
 80064ec:	bf00      	nop
 80064ee:	3728      	adds	r7, #40	; 0x28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
 8006550:	4613      	mov	r3, r2
 8006552:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d150      	bne.n	800668c <I2C_MasterTransmit_TXE+0xc8>
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b21      	cmp	r3, #33	; 0x21
 80065ee:	d14d      	bne.n	800668c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d01d      	beq.n	8006632 <I2C_MasterTransmit_TXE+0x6e>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d01a      	beq.n	8006632 <I2C_MasterTransmit_TXE+0x6e>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006602:	d016      	beq.n	8006632 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006612:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2211      	movs	r2, #17
 8006618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ff62 	bl	80064f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006630:	e060      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006640:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006650:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d107      	bne.n	800667c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff7d 	bl	8006574 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800667a:	e03b      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff35 	bl	80064f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800668a:	e033      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b21      	cmp	r3, #33	; 0x21
 8006690:	d005      	beq.n	800669e <I2C_MasterTransmit_TXE+0xda>
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d12d      	bne.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b22      	cmp	r3, #34	; 0x22
 800669c:	d12a      	bne.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d108      	bne.n	80066ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80066b8:	e01c      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d103      	bne.n	80066ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f88e 	bl	80067e8 <I2C_MemoryTransmit_TXE_BTF>
}
 80066cc:	e012      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066f2:	e7ff      	b.n	80066f4 <I2C_MasterTransmit_TXE+0x130>
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b21      	cmp	r3, #33	; 0x21
 8006714:	d164      	bne.n	80067e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	781a      	ldrb	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006744:	e04c      	b.n	80067e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d01d      	beq.n	8006788 <I2C_MasterTransmit_BTF+0x8c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b20      	cmp	r3, #32
 8006750:	d01a      	beq.n	8006788 <I2C_MasterTransmit_BTF+0x8c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006758:	d016      	beq.n	8006788 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006768:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2211      	movs	r2, #17
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff feb7 	bl	80064f4 <HAL_I2C_MasterTxCpltCallback>
}
 8006786:	e02b      	b.n	80067e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006796:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d107      	bne.n	80067d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fed2 	bl	8006574 <HAL_I2C_MemTxCpltCallback>
}
 80067d0:	e006      	b.n	80067e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fe8a 	bl	80064f4 <HAL_I2C_MasterTxCpltCallback>
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11d      	bne.n	800683c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10b      	bne.n	8006820 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800681e:	e073      	b.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006824:	b29b      	uxth	r3, r3
 8006826:	121b      	asrs	r3, r3, #8
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
}
 800683a:	e065      	b.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	2b01      	cmp	r3, #1
 8006842:	d10b      	bne.n	800685c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800685a:	e055      	b.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006860:	2b02      	cmp	r3, #2
 8006862:	d151      	bne.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b22      	cmp	r3, #34	; 0x22
 8006868:	d10d      	bne.n	8006886 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006878:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006884:	e040      	b.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d015      	beq.n	80068bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b21      	cmp	r3, #33	; 0x21
 8006894:	d112      	bne.n	80068bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068ba:	e025      	b.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d120      	bne.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b21      	cmp	r3, #33	; 0x21
 80068ca:	d11d      	bne.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe36 	bl	8006574 <HAL_I2C_MemTxCpltCallback>
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	f040 80ac 	bne.w	8006a7e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b03      	cmp	r3, #3
 8006932:	d921      	bls.n	8006978 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b03      	cmp	r3, #3
 8006962:	f040 808c 	bne.w	8006a7e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006974:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006976:	e082      	b.n	8006a7e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	2b02      	cmp	r3, #2
 800697e:	d075      	beq.n	8006a6c <I2C_MasterReceive_RXNE+0x15c>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d002      	beq.n	800698c <I2C_MasterReceive_RXNE+0x7c>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d16f      	bne.n	8006a6c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fa15 	bl	8007dbc <I2C_WaitOnSTOPRequestThroughIT>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d142      	bne.n	8006a1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d10a      	bne.n	8006a08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fdc1 	bl	8006588 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a06:	e03a      	b.n	8006a7e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2212      	movs	r2, #18
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fd76 	bl	8006508 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a1c:	e02f      	b.n	8006a7e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fd99 	bl	800659c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a6a:	e008      	b.n	8006a7e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7a:	605a      	str	r2, [r3, #4]
}
 8006a7c:	e7ff      	b.n	8006a7e <I2C_MasterReceive_RXNE+0x16e>
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d11b      	bne.n	8006ad6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ad4:	e0bd      	b.n	8006c52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d129      	bne.n	8006b34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00a      	beq.n	8006b0c <I2C_MasterReceive_BTF+0x86>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d007      	beq.n	8006b0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b32:	e08e      	b.n	8006c52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d176      	bne.n	8006c2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d002      	beq.n	8006b4a <I2C_MasterReceive_BTF+0xc4>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d108      	bne.n	8006b5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e019      	b.n	8006b90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d002      	beq.n	8006b68 <I2C_MasterReceive_BTF+0xe2>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d108      	bne.n	8006b7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e00a      	b.n	8006b90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d007      	beq.n	8006b90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d10a      	bne.n	8006c16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fcba 	bl	8006588 <HAL_I2C_MemRxCpltCallback>
}
 8006c14:	e01d      	b.n	8006c52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2212      	movs	r2, #18
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fc6f 	bl	8006508 <HAL_I2C_MasterRxCpltCallback>
}
 8006c2a:	e012      	b.n	8006c52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d117      	bne.n	8006c9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006c88:	e067      	b.n	8006d5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]
}
 8006c9c:	e05d      	b.n	8006d5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca6:	d133      	bne.n	8006d10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b21      	cmp	r3, #33	; 0x21
 8006cb2:	d109      	bne.n	8006cc8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cc4:	611a      	str	r2, [r3, #16]
 8006cc6:	e008      	b.n	8006cda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <I2C_Master_SB+0x92>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d108      	bne.n	8006cfe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d032      	beq.n	8006d5a <I2C_Master_SB+0x100>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02d      	beq.n	8006d5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d0c:	605a      	str	r2, [r3, #4]
}
 8006d0e:	e024      	b.n	8006d5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10e      	bne.n	8006d36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	11db      	asrs	r3, r3, #7
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0306 	and.w	r3, r3, #6
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f063 030f 	orn	r3, r3, #15
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	611a      	str	r2, [r3, #16]
}
 8006d34:	e011      	b.n	8006d5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10d      	bne.n	8006d5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	11db      	asrs	r3, r3, #7
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0306 	and.w	r3, r3, #6
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f063 030e 	orn	r3, r3, #14
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	611a      	str	r2, [r3, #16]
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <I2C_Master_ADD10+0x26>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <I2C_Master_ADD10+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	605a      	str	r2, [r3, #4]
  }
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b091      	sub	sp, #68	; 0x44
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b22      	cmp	r3, #34	; 0x22
 8006de2:	f040 8169 	bne.w	80070b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10f      	bne.n	8006e0e <I2C_Master_ADDR+0x54>
 8006dee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d10b      	bne.n	8006e0e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df6:	2300      	movs	r3, #0
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	e160      	b.n	80070d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d11d      	bne.n	8006e52 <I2C_Master_ADDR+0x98>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e1e:	d118      	bne.n	8006e52 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e44:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e50:	e13e      	b.n	80070d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d113      	bne.n	8006e84 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e115      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	f040 808a 	bne.w	8006fa4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e96:	d137      	bne.n	8006f08 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d113      	bne.n	8006ee0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	e0e7      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e0d3      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d02e      	beq.n	8006f6c <I2C_Master_ADDR+0x1b2>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d02b      	beq.n	8006f6c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	2b12      	cmp	r3, #18
 8006f18:	d102      	bne.n	8006f20 <I2C_Master_ADDR+0x166>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d125      	bne.n	8006f6c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d00e      	beq.n	8006f44 <I2C_Master_ADDR+0x18a>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d00b      	beq.n	8006f44 <I2C_Master_ADDR+0x18a>
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d008      	beq.n	8006f44 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e007      	b.n	8006f54 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f52:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	e0a1      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e085      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d14d      	bne.n	800704a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d016      	beq.n	8006fe2 <I2C_Master_ADDR+0x228>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d013      	beq.n	8006fe2 <I2C_Master_ADDR+0x228>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d010      	beq.n	8006fe2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e007      	b.n	8006ff2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ff0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007000:	d117      	bne.n	8007032 <I2C_Master_ADDR+0x278>
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007008:	d00b      	beq.n	8007022 <I2C_Master_ADDR+0x268>
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2b01      	cmp	r3, #1
 800700e:	d008      	beq.n	8007022 <I2C_Master_ADDR+0x268>
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	2b08      	cmp	r3, #8
 8007014:	d005      	beq.n	8007022 <I2C_Master_ADDR+0x268>
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	2b10      	cmp	r3, #16
 800701a:	d002      	beq.n	8007022 <I2C_Master_ADDR+0x268>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	2b20      	cmp	r3, #32
 8007020:	d107      	bne.n	8007032 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007030:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	e032      	b.n	80070b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007058:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007068:	d117      	bne.n	800709a <I2C_Master_ADDR+0x2e0>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007070:	d00b      	beq.n	800708a <I2C_Master_ADDR+0x2d0>
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2b01      	cmp	r3, #1
 8007076:	d008      	beq.n	800708a <I2C_Master_ADDR+0x2d0>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	2b08      	cmp	r3, #8
 800707c:	d005      	beq.n	800708a <I2C_Master_ADDR+0x2d0>
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2b10      	cmp	r3, #16
 8007082:	d002      	beq.n	800708a <I2C_Master_ADDR+0x2d0>
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	2b20      	cmp	r3, #32
 8007088:	d107      	bne.n	800709a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007098:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80070b6:	e00b      	b.n	80070d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
}
 80070ce:	e7ff      	b.n	80070d0 <I2C_Master_ADDR+0x316>
 80070d0:	bf00      	nop
 80070d2:	3744      	adds	r7, #68	; 0x44
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d02b      	beq.n	800714e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d114      	bne.n	800714e <I2C_SlaveTransmit_TXE+0x72>
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b29      	cmp	r3, #41	; 0x29
 8007128:	d111      	bne.n	800714e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007138:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2228      	movs	r2, #40	; 0x28
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff f9e7 	bl	800651c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d011      	beq.n	800718c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d02c      	beq.n	800720c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d114      	bne.n	800720c <I2C_SlaveReceive_RXNE+0x74>
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b2a      	cmp	r3, #42	; 0x2a
 80071e6:	d111      	bne.n	800720c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2222      	movs	r2, #34	; 0x22
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2228      	movs	r2, #40	; 0x28
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff f992 	bl	8006530 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007272:	2b28      	cmp	r3, #40	; 0x28
 8007274:	d127      	bne.n	80072c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007284:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	089b      	lsrs	r3, r3, #2
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007292:	2301      	movs	r3, #1
 8007294:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	09db      	lsrs	r3, r3, #7
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	81bb      	strh	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072b8:	89ba      	ldrh	r2, [r7, #12]
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff f940 	bl	8006544 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072c4:	e00e      	b.n	80072e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800730a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007338:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007348:	d172      	bne.n	8007430 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b22      	cmp	r3, #34	; 0x22
 800734e:	d002      	beq.n	8007356 <I2C_Slave_STOPF+0x6a>
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b2a      	cmp	r3, #42	; 0x2a
 8007354:	d135      	bne.n	80073c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0204 	orr.w	r2, r3, #4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007388:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	4618      	mov	r0, r3
 8007390:	f7fd ff6d 	bl	800526e <HAL_DMA_GetState>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d049      	beq.n	800742e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	4a69      	ldr	r2, [pc, #420]	; (8007544 <I2C_Slave_STOPF+0x258>)
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fd ff3f 	bl	800522a <HAL_DMA_Abort_IT>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03d      	beq.n	800742e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073c0:	e035      	b.n	800742e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f043 0204 	orr.w	r2, r3, #4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd ff37 	bl	800526e <HAL_DMA_GetState>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d014      	beq.n	8007430 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	4a4e      	ldr	r2, [pc, #312]	; (8007544 <I2C_Slave_STOPF+0x258>)
 800740c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd ff09 	bl	800522a <HAL_DMA_Abort_IT>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	e000      	b.n	8007430 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800742e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d03e      	beq.n	80074b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b04      	cmp	r3, #4
 8007446:	d112      	bne.n	800746e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d112      	bne.n	80074a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f043 0204 	orr.w	r2, r3, #4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8b3 	bl	800762c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80074c6:	e039      	b.n	800753c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	2b2a      	cmp	r3, #42	; 0x2a
 80074cc:	d109      	bne.n	80074e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2228      	movs	r2, #40	; 0x28
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff f827 	bl	8006530 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b28      	cmp	r3, #40	; 0x28
 80074ec:	d111      	bne.n	8007512 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a15      	ldr	r2, [pc, #84]	; (8007548 <I2C_Slave_STOPF+0x25c>)
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff f828 	bl	8006560 <HAL_I2C_ListenCpltCallback>
}
 8007510:	e014      	b.n	800753c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	2b22      	cmp	r3, #34	; 0x22
 8007518:	d002      	beq.n	8007520 <I2C_Slave_STOPF+0x234>
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b22      	cmp	r3, #34	; 0x22
 800751e:	d10d      	bne.n	800753c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fe fffa 	bl	8006530 <HAL_I2C_SlaveRxCpltCallback>
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	080079bd 	.word	0x080079bd
 8007548:	ffff0000 	.word	0xffff0000

0800754c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d002      	beq.n	800756e <I2C_Slave_AF+0x22>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b20      	cmp	r3, #32
 800756c:	d129      	bne.n	80075c2 <I2C_Slave_AF+0x76>
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b28      	cmp	r3, #40	; 0x28
 8007572:	d126      	bne.n	80075c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <I2C_Slave_AF+0xdc>)
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007588:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007592:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fe ffd0 	bl	8006560 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80075c0:	e02e      	b.n	8007620 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b21      	cmp	r3, #33	; 0x21
 80075c6:	d126      	bne.n	8007616 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <I2C_Slave_AF+0xdc>)
 80075cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2221      	movs	r2, #33	; 0x21
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fe ff84 	bl	800651c <HAL_I2C_SlaveTxCpltCallback>
}
 8007614:	e004      	b.n	8007620 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800761e:	615a      	str	r2, [r3, #20]
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	ffff0000 	.word	0xffff0000

0800762c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007642:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b10      	cmp	r3, #16
 8007648:	d002      	beq.n	8007650 <I2C_ITError+0x24>
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d10a      	bne.n	8007666 <I2C_ITError+0x3a>
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b22      	cmp	r3, #34	; 0x22
 8007654:	d107      	bne.n	8007666 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007664:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800766c:	2b28      	cmp	r3, #40	; 0x28
 800766e:	d107      	bne.n	8007680 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2228      	movs	r2, #40	; 0x28
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800767e:	e015      	b.n	80076ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d00a      	beq.n	80076a6 <I2C_ITError+0x7a>
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b60      	cmp	r3, #96	; 0x60
 8007694:	d007      	beq.n	80076a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ba:	d162      	bne.n	8007782 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d020      	beq.n	800771c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	4a6a      	ldr	r2, [pc, #424]	; (8007888 <I2C_ITError+0x25c>)
 80076e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fd9f 	bl	800522a <HAL_DMA_Abort_IT>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8089 	beq.w	8007806 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007716:	4610      	mov	r0, r2
 8007718:	4798      	blx	r3
 800771a:	e074      	b.n	8007806 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	4a59      	ldr	r2, [pc, #356]	; (8007888 <I2C_ITError+0x25c>)
 8007722:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	4618      	mov	r0, r3
 800772a:	f7fd fd7e 	bl	800522a <HAL_DMA_Abort_IT>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d068      	beq.n	8007806 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d10b      	bne.n	800775a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0201 	bic.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	e041      	b.n	8007806 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b60      	cmp	r3, #96	; 0x60
 800778c:	d125      	bne.n	80077da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d10b      	bne.n	80077c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fe feec 	bl	80065b0 <HAL_I2C_AbortCpltCallback>
 80077d8:	e015      	b.n	8007806 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d10b      	bne.n	8007800 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fe fecb 	bl	800659c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10e      	bne.n	8007834 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007842:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b04      	cmp	r3, #4
 8007856:	d113      	bne.n	8007880 <I2C_ITError+0x254>
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b28      	cmp	r3, #40	; 0x28
 800785c:	d110      	bne.n	8007880 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <I2C_ITError+0x260>)
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe fe70 	bl	8006560 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	080079bd 	.word	0x080079bd
 800788c:	ffff0000 	.word	0xffff0000

08007890 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	461a      	mov	r2, r3
 800789e:	4603      	mov	r3, r0
 80078a0:	817b      	strh	r3, [r7, #10]
 80078a2:	460b      	mov	r3, r1
 80078a4:	813b      	strh	r3, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f920 	bl	8007b0c <I2C_WaitOnFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e0:	d103      	bne.n	80078ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e05f      	b.n	80079ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078ee:	897b      	ldrh	r3, [r7, #10]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	492d      	ldr	r1, [pc, #180]	; (80079b8 <I2C_RequestMemoryWrite+0x128>)
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f958 	bl	8007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e04c      	b.n	80079ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800792a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792c:	6a39      	ldr	r1, [r7, #32]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f9c2 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b04      	cmp	r3, #4
 8007940:	d107      	bne.n	8007952 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007950:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e02b      	b.n	80079ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d105      	bne.n	8007968 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	611a      	str	r2, [r3, #16]
 8007966:	e021      	b.n	80079ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007968:	893b      	ldrh	r3, [r7, #8]
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	b29b      	uxth	r3, r3
 800796e:	b2da      	uxtb	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007978:	6a39      	ldr	r1, [r7, #32]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f99c 	bl	8007cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b04      	cmp	r3, #4
 800798c:	d107      	bne.n	800799e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e005      	b.n	80079ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	00010002 	.word	0x00010002

080079bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079d6:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <I2C_DMAAbort+0x148>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	4a4a      	ldr	r2, [pc, #296]	; (8007b08 <I2C_DMAAbort+0x14c>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0a1a      	lsrs	r2, r3, #8
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a02:	e00a      	b.n	8007a1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d0ea      	beq.n	80079f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2200      	movs	r2, #0
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2200      	movs	r2, #0
 8007a38:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b60      	cmp	r3, #96	; 0x60
 8007a8a:	d10e      	bne.n	8007aaa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f7fe fd84 	bl	80065b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007aa8:	e027      	b.n	8007afa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aaa:	7cfb      	ldrb	r3, [r7, #19]
 8007aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab0:	2b28      	cmp	r3, #40	; 0x28
 8007ab2:	d117      	bne.n	8007ae4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2228      	movs	r2, #40	; 0x28
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ae2:	e007      	b.n	8007af4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f7fe fd51 	bl	800659c <HAL_I2C_ErrorCallback>
}
 8007afa:	bf00      	nop
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000000c 	.word	0x2000000c
 8007b08:	14f8b589 	.word	0x14f8b589

08007b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b1c:	e025      	b.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d021      	beq.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b26:	f7fc ff5d 	bl	80049e4 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d116      	bne.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e023      	b.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10d      	bne.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	43da      	mvns	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf0c      	ite	eq
 8007b86:	2301      	moveq	r3, #1
 8007b88:	2300      	movne	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	e00c      	b.n	8007baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	43da      	mvns	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d0b6      	beq.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bc8:	e051      	b.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd8:	d123      	bne.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0204 	orr.w	r2, r3, #4
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e046      	b.n	8007cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d021      	beq.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2a:	f7fc fedb 	bl	80049e4 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d116      	bne.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f043 0220 	orr.w	r2, r3, #32
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e020      	b.n	8007cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10c      	bne.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	43da      	mvns	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bf14      	ite	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	2300      	moveq	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e00b      	b.n	8007caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	43da      	mvns	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d18d      	bne.n	8007bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cc4:	e02d      	b.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f8aa 	bl	8007e20 <I2C_IsAcknowledgeFailed>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e02d      	b.n	8007d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d021      	beq.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cde:	f7fc fe81 	bl	80049e4 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d116      	bne.n	8007d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e007      	b.n	8007d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d1ca      	bne.n	8007cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d46:	e02d      	b.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f869 	bl	8007e20 <I2C_IsAcknowledgeFailed>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e02d      	b.n	8007db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d021      	beq.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d60:	f7fc fe40 	bl	80049e4 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d116      	bne.n	8007da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e007      	b.n	8007db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d1ca      	bne.n	8007d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dc8:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	4a13      	ldr	r2, [pc, #76]	; (8007e1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	0a1a      	lsrs	r2, r3, #8
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f043 0220 	orr.w	r2, r3, #32
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e008      	b.n	8007e0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e08:	d0e9      	beq.n	8007dde <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	2000000c 	.word	0x2000000c
 8007e1c:	14f8b589 	.word	0x14f8b589

08007e20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e36:	d11b      	bne.n	8007e70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	f043 0204 	orr.w	r2, r3, #4
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e8e:	d103      	bne.n	8007e98 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e96:	e007      	b.n	8007ea8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007ea0:	d102      	bne.n	8007ea8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e267      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d075      	beq.n	8007fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ed2:	4b88      	ldr	r3, [pc, #544]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 030c 	and.w	r3, r3, #12
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d00c      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ede:	4b85      	ldr	r3, [pc, #532]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d112      	bne.n	8007f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eea:	4b82      	ldr	r3, [pc, #520]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef6:	d10b      	bne.n	8007f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef8:	4b7e      	ldr	r3, [pc, #504]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d05b      	beq.n	8007fbc <HAL_RCC_OscConfig+0x108>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d157      	bne.n	8007fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e242      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f18:	d106      	bne.n	8007f28 <HAL_RCC_OscConfig+0x74>
 8007f1a:	4b76      	ldr	r3, [pc, #472]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a75      	ldr	r2, [pc, #468]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	e01d      	b.n	8007f64 <HAL_RCC_OscConfig+0xb0>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f30:	d10c      	bne.n	8007f4c <HAL_RCC_OscConfig+0x98>
 8007f32:	4b70      	ldr	r3, [pc, #448]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a6f      	ldr	r2, [pc, #444]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	4b6d      	ldr	r3, [pc, #436]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a6c      	ldr	r2, [pc, #432]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e00b      	b.n	8007f64 <HAL_RCC_OscConfig+0xb0>
 8007f4c:	4b69      	ldr	r3, [pc, #420]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a68      	ldr	r2, [pc, #416]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	4b66      	ldr	r3, [pc, #408]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a65      	ldr	r2, [pc, #404]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f6c:	f7fc fd3a 	bl	80049e4 <HAL_GetTick>
 8007f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f74:	f7fc fd36 	bl	80049e4 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b64      	cmp	r3, #100	; 0x64
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e207      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f86:	4b5b      	ldr	r3, [pc, #364]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0xc0>
 8007f92:	e014      	b.n	8007fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f94:	f7fc fd26 	bl	80049e4 <HAL_GetTick>
 8007f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f9c:	f7fc fd22 	bl	80049e4 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b64      	cmp	r3, #100	; 0x64
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e1f3      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fae:	4b51      	ldr	r3, [pc, #324]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f0      	bne.n	8007f9c <HAL_RCC_OscConfig+0xe8>
 8007fba:	e000      	b.n	8007fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d063      	beq.n	8008092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fca:	4b4a      	ldr	r3, [pc, #296]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 030c 	and.w	r3, r3, #12
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fd6:	4b47      	ldr	r3, [pc, #284]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d11c      	bne.n	800801c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fe2:	4b44      	ldr	r3, [pc, #272]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d116      	bne.n	800801c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fee:	4b41      	ldr	r3, [pc, #260]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_RCC_OscConfig+0x152>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d001      	beq.n	8008006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e1c7      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008006:	4b3b      	ldr	r3, [pc, #236]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4937      	ldr	r1, [pc, #220]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008016:	4313      	orrs	r3, r2
 8008018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800801a:	e03a      	b.n	8008092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008024:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <HAL_RCC_OscConfig+0x244>)
 8008026:	2201      	movs	r2, #1
 8008028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fc fcdb 	bl	80049e4 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008032:	f7fc fcd7 	bl	80049e4 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e1a8      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008044:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f0      	beq.n	8008032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008050:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4925      	ldr	r1, [pc, #148]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008060:	4313      	orrs	r3, r2
 8008062:	600b      	str	r3, [r1, #0]
 8008064:	e015      	b.n	8008092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <HAL_RCC_OscConfig+0x244>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fc fcba 	bl	80049e4 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008074:	f7fc fcb6 	bl	80049e4 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e187      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008086:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f0      	bne.n	8008074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d036      	beq.n	800810c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080a6:	4b15      	ldr	r3, [pc, #84]	; (80080fc <HAL_RCC_OscConfig+0x248>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ac:	f7fc fc9a 	bl	80049e4 <HAL_GetTick>
 80080b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080b4:	f7fc fc96 	bl	80049e4 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e167      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <HAL_RCC_OscConfig+0x240>)
 80080c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0x200>
 80080d2:	e01b      	b.n	800810c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <HAL_RCC_OscConfig+0x248>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080da:	f7fc fc83 	bl	80049e4 <HAL_GetTick>
 80080de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e0:	e00e      	b.n	8008100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fc fc7f 	bl	80049e4 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d907      	bls.n	8008100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e150      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
 80080f4:	40023800 	.word	0x40023800
 80080f8:	42470000 	.word	0x42470000
 80080fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008100:	4b88      	ldr	r3, [pc, #544]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ea      	bne.n	80080e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8097 	beq.w	8008248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800811e:	4b81      	ldr	r3, [pc, #516]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10f      	bne.n	800814a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	4b7d      	ldr	r3, [pc, #500]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	4a7c      	ldr	r2, [pc, #496]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008138:	6413      	str	r3, [r2, #64]	; 0x40
 800813a:	4b7a      	ldr	r3, [pc, #488]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800814a:	4b77      	ldr	r3, [pc, #476]	; (8008328 <HAL_RCC_OscConfig+0x474>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d118      	bne.n	8008188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008156:	4b74      	ldr	r3, [pc, #464]	; (8008328 <HAL_RCC_OscConfig+0x474>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a73      	ldr	r2, [pc, #460]	; (8008328 <HAL_RCC_OscConfig+0x474>)
 800815c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008162:	f7fc fc3f 	bl	80049e4 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816a:	f7fc fc3b 	bl	80049e4 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e10c      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800817c:	4b6a      	ldr	r3, [pc, #424]	; (8008328 <HAL_RCC_OscConfig+0x474>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d106      	bne.n	800819e <HAL_RCC_OscConfig+0x2ea>
 8008190:	4b64      	ldr	r3, [pc, #400]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008194:	4a63      	ldr	r2, [pc, #396]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	6713      	str	r3, [r2, #112]	; 0x70
 800819c:	e01c      	b.n	80081d8 <HAL_RCC_OscConfig+0x324>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	d10c      	bne.n	80081c0 <HAL_RCC_OscConfig+0x30c>
 80081a6:	4b5f      	ldr	r3, [pc, #380]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	4a5e      	ldr	r2, [pc, #376]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081ac:	f043 0304 	orr.w	r3, r3, #4
 80081b0:	6713      	str	r3, [r2, #112]	; 0x70
 80081b2:	4b5c      	ldr	r3, [pc, #368]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	4a5b      	ldr	r2, [pc, #364]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	6713      	str	r3, [r2, #112]	; 0x70
 80081be:	e00b      	b.n	80081d8 <HAL_RCC_OscConfig+0x324>
 80081c0:	4b58      	ldr	r3, [pc, #352]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	4a57      	ldr	r2, [pc, #348]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	6713      	str	r3, [r2, #112]	; 0x70
 80081cc:	4b55      	ldr	r3, [pc, #340]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	4a54      	ldr	r2, [pc, #336]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80081d2:	f023 0304 	bic.w	r3, r3, #4
 80081d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d015      	beq.n	800820c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e0:	f7fc fc00 	bl	80049e4 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e6:	e00a      	b.n	80081fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081e8:	f7fc fbfc 	bl	80049e4 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e0cb      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081fe:	4b49      	ldr	r3, [pc, #292]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ee      	beq.n	80081e8 <HAL_RCC_OscConfig+0x334>
 800820a:	e014      	b.n	8008236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800820c:	f7fc fbea 	bl	80049e4 <HAL_GetTick>
 8008210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008212:	e00a      	b.n	800822a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008214:	f7fc fbe6 	bl	80049e4 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e0b5      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800822a:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1ee      	bne.n	8008214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d105      	bne.n	8008248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800823c:	4b39      	ldr	r3, [pc, #228]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	4a38      	ldr	r2, [pc, #224]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80a1 	beq.w	8008394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008252:	4b34      	ldr	r3, [pc, #208]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
 800825a:	2b08      	cmp	r3, #8
 800825c:	d05c      	beq.n	8008318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d141      	bne.n	80082ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008266:	4b31      	ldr	r3, [pc, #196]	; (800832c <HAL_RCC_OscConfig+0x478>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800826c:	f7fc fbba 	bl	80049e4 <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008272:	e008      	b.n	8008286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008274:	f7fc fbb6 	bl	80049e4 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e087      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008286:	4b27      	ldr	r3, [pc, #156]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f0      	bne.n	8008274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	3b01      	subs	r3, #1
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	491b      	ldr	r1, [pc, #108]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <HAL_RCC_OscConfig+0x478>)
 80082be:	2201      	movs	r2, #1
 80082c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c2:	f7fc fb8f 	bl	80049e4 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fc fb8b 	bl	80049e4 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e05c      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082dc:	4b11      	ldr	r3, [pc, #68]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0f0      	beq.n	80082ca <HAL_RCC_OscConfig+0x416>
 80082e8:	e054      	b.n	8008394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ea:	4b10      	ldr	r3, [pc, #64]	; (800832c <HAL_RCC_OscConfig+0x478>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f0:	f7fc fb78 	bl	80049e4 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fc fb74 	bl	80049e4 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e045      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830a:	4b06      	ldr	r3, [pc, #24]	; (8008324 <HAL_RCC_OscConfig+0x470>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x444>
 8008316:	e03d      	b.n	8008394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d107      	bne.n	8008330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e038      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
 8008324:	40023800 	.word	0x40023800
 8008328:	40007000 	.word	0x40007000
 800832c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008330:	4b1b      	ldr	r3, [pc, #108]	; (80083a0 <HAL_RCC_OscConfig+0x4ec>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d028      	beq.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008348:	429a      	cmp	r2, r3
 800834a:	d121      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008356:	429a      	cmp	r2, r3
 8008358:	d11a      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008368:	4293      	cmp	r3, r2
 800836a:	d111      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	3b01      	subs	r3, #1
 800837a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800837c:	429a      	cmp	r2, r3
 800837e:	d107      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40023800 	.word	0x40023800

080083a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e0cc      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083b8:	4b68      	ldr	r3, [pc, #416]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d90c      	bls.n	80083e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c6:	4b65      	ldr	r3, [pc, #404]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ce:	4b63      	ldr	r3, [pc, #396]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d001      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e0b8      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d020      	beq.n	800842e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083f8:	4b59      	ldr	r3, [pc, #356]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4a58      	ldr	r2, [pc, #352]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008410:	4b53      	ldr	r3, [pc, #332]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	4a52      	ldr	r2, [pc, #328]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800841a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800841c:	4b50      	ldr	r3, [pc, #320]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	494d      	ldr	r1, [pc, #308]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d044      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008442:	4b47      	ldr	r3, [pc, #284]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d119      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e07f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d003      	beq.n	8008462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800845e:	2b03      	cmp	r3, #3
 8008460:	d107      	bne.n	8008472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008462:	4b3f      	ldr	r3, [pc, #252]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e06f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008472:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e067      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008482:	4b37      	ldr	r3, [pc, #220]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f023 0203 	bic.w	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4934      	ldr	r1, [pc, #208]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008490:	4313      	orrs	r3, r2
 8008492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008494:	f7fc faa6 	bl	80049e4 <HAL_GetTick>
 8008498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849a:	e00a      	b.n	80084b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800849c:	f7fc faa2 	bl	80049e4 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e04f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b2:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 020c 	and.w	r2, r3, #12
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d1eb      	bne.n	800849c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d20c      	bcs.n	80084ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d2:	4b22      	ldr	r3, [pc, #136]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e032      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4916      	ldr	r1, [pc, #88]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	4313      	orrs	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008516:	4b12      	ldr	r3, [pc, #72]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	490e      	ldr	r1, [pc, #56]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	4313      	orrs	r3, r2
 8008528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800852a:	f000 f821 	bl	8008570 <HAL_RCC_GetSysClockFreq>
 800852e:	4602      	mov	r2, r0
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	490a      	ldr	r1, [pc, #40]	; (8008564 <HAL_RCC_ClockConfig+0x1c0>)
 800853c:	5ccb      	ldrb	r3, [r1, r3]
 800853e:	fa22 f303 	lsr.w	r3, r2, r3
 8008542:	4a09      	ldr	r2, [pc, #36]	; (8008568 <HAL_RCC_ClockConfig+0x1c4>)
 8008544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <HAL_RCC_ClockConfig+0x1c8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc fa06 	bl	800495c <HAL_InitTick>

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40023c00 	.word	0x40023c00
 8008560:	40023800 	.word	0x40023800
 8008564:	0800b56c 	.word	0x0800b56c
 8008568:	2000000c 	.word	0x2000000c
 800856c:	20000010 	.word	0x20000010

08008570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008574:	b090      	sub	sp, #64	; 0x40
 8008576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
 800857c:	2300      	movs	r3, #0
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	2300      	movs	r3, #0
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008588:	4b59      	ldr	r3, [pc, #356]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 030c 	and.w	r3, r3, #12
 8008590:	2b08      	cmp	r3, #8
 8008592:	d00d      	beq.n	80085b0 <HAL_RCC_GetSysClockFreq+0x40>
 8008594:	2b08      	cmp	r3, #8
 8008596:	f200 80a1 	bhi.w	80086dc <HAL_RCC_GetSysClockFreq+0x16c>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_RCC_GetSysClockFreq+0x34>
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d003      	beq.n	80085aa <HAL_RCC_GetSysClockFreq+0x3a>
 80085a2:	e09b      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085a4:	4b53      	ldr	r3, [pc, #332]	; (80086f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80085a8:	e09b      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085aa:	4b53      	ldr	r3, [pc, #332]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085ae:	e098      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085b0:	4b4f      	ldr	r3, [pc, #316]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ba:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d028      	beq.n	8008618 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085c6:	4b4a      	ldr	r3, [pc, #296]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	099b      	lsrs	r3, r3, #6
 80085cc:	2200      	movs	r2, #0
 80085ce:	623b      	str	r3, [r7, #32]
 80085d0:	627a      	str	r2, [r7, #36]	; 0x24
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085d8:	2100      	movs	r1, #0
 80085da:	4b47      	ldr	r3, [pc, #284]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085dc:	fb03 f201 	mul.w	r2, r3, r1
 80085e0:	2300      	movs	r3, #0
 80085e2:	fb00 f303 	mul.w	r3, r0, r3
 80085e6:	4413      	add	r3, r2
 80085e8:	4a43      	ldr	r2, [pc, #268]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085ea:	fba0 1202 	umull	r1, r2, r0, r2
 80085ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085f0:	460a      	mov	r2, r1
 80085f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80085f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f6:	4413      	add	r3, r2
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	2200      	movs	r2, #0
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	61fa      	str	r2, [r7, #28]
 8008602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800860a:	f7f8 fa37 	bl	8000a7c <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4613      	mov	r3, r2
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008616:	e053      	b.n	80086c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008618:	4b35      	ldr	r3, [pc, #212]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	099b      	lsrs	r3, r3, #6
 800861e:	2200      	movs	r2, #0
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	617a      	str	r2, [r7, #20]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800862a:	f04f 0b00 	mov.w	fp, #0
 800862e:	4652      	mov	r2, sl
 8008630:	465b      	mov	r3, fp
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f04f 0100 	mov.w	r1, #0
 800863a:	0159      	lsls	r1, r3, #5
 800863c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008640:	0150      	lsls	r0, r2, #5
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	ebb2 080a 	subs.w	r8, r2, sl
 800864a:	eb63 090b 	sbc.w	r9, r3, fp
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800865a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800865e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008662:	ebb2 0408 	subs.w	r4, r2, r8
 8008666:	eb63 0509 	sbc.w	r5, r3, r9
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	00eb      	lsls	r3, r5, #3
 8008674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008678:	00e2      	lsls	r2, r4, #3
 800867a:	4614      	mov	r4, r2
 800867c:	461d      	mov	r5, r3
 800867e:	eb14 030a 	adds.w	r3, r4, sl
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	eb45 030b 	adc.w	r3, r5, fp
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008696:	4629      	mov	r1, r5
 8008698:	028b      	lsls	r3, r1, #10
 800869a:	4621      	mov	r1, r4
 800869c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086a0:	4621      	mov	r1, r4
 80086a2:	028a      	lsls	r2, r1, #10
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086aa:	2200      	movs	r2, #0
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	60fa      	str	r2, [r7, #12]
 80086b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086b4:	f7f8 f9e2 	bl	8000a7c <__aeabi_uldivmod>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4613      	mov	r3, r2
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	3301      	adds	r3, #1
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80086d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086da:	e002      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80086de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3740      	adds	r7, #64	; 0x40
 80086e8:	46bd      	mov	sp, r7
 80086ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ee:	bf00      	nop
 80086f0:	40023800 	.word	0x40023800
 80086f4:	00f42400 	.word	0x00f42400
 80086f8:	017d7840 	.word	0x017d7840

080086fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008700:	4b03      	ldr	r3, [pc, #12]	; (8008710 <HAL_RCC_GetHCLKFreq+0x14>)
 8008702:	681b      	ldr	r3, [r3, #0]
}
 8008704:	4618      	mov	r0, r3
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	2000000c 	.word	0x2000000c

08008714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008718:	f7ff fff0 	bl	80086fc <HAL_RCC_GetHCLKFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	4b05      	ldr	r3, [pc, #20]	; (8008734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	0a9b      	lsrs	r3, r3, #10
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	4903      	ldr	r1, [pc, #12]	; (8008738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800872a:	5ccb      	ldrb	r3, [r1, r3]
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008730:	4618      	mov	r0, r3
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40023800 	.word	0x40023800
 8008738:	0800b57c 	.word	0x0800b57c

0800873c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008740:	f7ff ffdc 	bl	80086fc <HAL_RCC_GetHCLKFreq>
 8008744:	4602      	mov	r2, r0
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	0b5b      	lsrs	r3, r3, #13
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	4903      	ldr	r1, [pc, #12]	; (8008760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008752:	5ccb      	ldrb	r3, [r1, r3]
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	40023800 	.word	0x40023800
 8008760:	0800b57c 	.word	0x0800b57c

08008764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e07b      	b.n	800886e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008786:	d009      	beq.n	800879c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	61da      	str	r2, [r3, #28]
 800878e:	e005      	b.n	800879c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fb fcf2 	bl	80041a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087e4:	431a      	orrs	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008820:	ea42 0103 	orr.w	r1, r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	0c1b      	lsrs	r3, r3, #16
 800883a:	f003 0104 	and.w	r1, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	f003 0210 	and.w	r2, r3, #16
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e041      	b.n	800890c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fb fcc7 	bl	8004230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f000 fd91 	bl	80093dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d001      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e044      	b.n	80089b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d018      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008956:	d013      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a1a      	ldr	r2, [pc, #104]	; (80089c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00e      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a19      	ldr	r2, [pc, #100]	; (80089cc <HAL_TIM_Base_Start_IT+0xb8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d009      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d004      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a16      	ldr	r2, [pc, #88]	; (80089d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d111      	bne.n	80089a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b06      	cmp	r3, #6
 8008990:	d010      	beq.n	80089b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a2:	e007      	b.n	80089b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0201 	orr.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40014000 	.word	0x40014000

080089d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e041      	b.n	8008a6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f839 	bl	8008a76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f000 fce0 	bl	80093dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <HAL_TIM_PWM_Start+0x24>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	bf14      	ite	ne
 8008aa8:	2301      	movne	r3, #1
 8008aaa:	2300      	moveq	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	e022      	b.n	8008af6 <HAL_TIM_PWM_Start+0x6a>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d109      	bne.n	8008aca <HAL_TIM_PWM_Start+0x3e>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	e015      	b.n	8008af6 <HAL_TIM_PWM_Start+0x6a>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d109      	bne.n	8008ae4 <HAL_TIM_PWM_Start+0x58>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	bf14      	ite	ne
 8008adc:	2301      	movne	r3, #1
 8008ade:	2300      	moveq	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	e008      	b.n	8008af6 <HAL_TIM_PWM_Start+0x6a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	bf14      	ite	ne
 8008af0:	2301      	movne	r3, #1
 8008af2:	2300      	moveq	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e068      	b.n	8008bd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x82>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b0c:	e013      	b.n	8008b36 <HAL_TIM_PWM_Start+0xaa>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d104      	bne.n	8008b1e <HAL_TIM_PWM_Start+0x92>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b1c:	e00b      	b.n	8008b36 <HAL_TIM_PWM_Start+0xaa>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d104      	bne.n	8008b2e <HAL_TIM_PWM_Start+0xa2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b2c:	e003      	b.n	8008b36 <HAL_TIM_PWM_Start+0xaa>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2202      	movs	r2, #2
 8008b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fef2 	bl	8009928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a23      	ldr	r2, [pc, #140]	; (8008bd8 <HAL_TIM_PWM_Start+0x14c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d107      	bne.n	8008b5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_TIM_PWM_Start+0x14c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d018      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x10e>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b70:	d013      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x10e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <HAL_TIM_PWM_Start+0x150>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00e      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x10e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a17      	ldr	r2, [pc, #92]	; (8008be0 <HAL_TIM_PWM_Start+0x154>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d009      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x10e>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <HAL_TIM_PWM_Start+0x158>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d004      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x10e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <HAL_TIM_PWM_Start+0x15c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d111      	bne.n	8008bbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d010      	beq.n	8008bce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbc:	e007      	b.n	8008bce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40014000 	.word	0x40014000

08008bec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e097      	b.n	8008d30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7fb fb65 	bl	80042e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c30:	f023 0307 	bic.w	r3, r3, #7
 8008c34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f000 fbcb 	bl	80093dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c8c:	f023 030c 	bic.w	r3, r3, #12
 8008c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	011a      	lsls	r2, r3, #4
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	031b      	lsls	r3, r3, #12
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008cca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d110      	bne.n	8008d8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d102      	bne.n	8008d74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d6e:	7b7b      	ldrb	r3, [r7, #13]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d001      	beq.n	8008d78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e069      	b.n	8008e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d88:	e031      	b.n	8008dee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d110      	bne.n	8008db2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d102      	bne.n	8008d9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d96:	7b3b      	ldrb	r3, [r7, #12]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d001      	beq.n	8008da0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e055      	b.n	8008e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db0:	e01d      	b.n	8008dee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d108      	bne.n	8008dca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d105      	bne.n	8008dca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dbe:	7b7b      	ldrb	r3, [r7, #13]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d102      	bne.n	8008dca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dc4:	7b3b      	ldrb	r3, [r7, #12]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d001      	beq.n	8008dce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e03e      	b.n	8008e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2202      	movs	r2, #2
 8008dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2202      	movs	r2, #2
 8008de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_TIM_Encoder_Start+0xc4>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d008      	beq.n	8008e0c <HAL_TIM_Encoder_Start+0xd4>
 8008dfa:	e00f      	b.n	8008e1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2201      	movs	r2, #1
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fd8f 	bl	8009928 <TIM_CCxChannelCmd>
      break;
 8008e0a:	e016      	b.n	8008e3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2201      	movs	r2, #1
 8008e12:	2104      	movs	r1, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fd87 	bl	8009928 <TIM_CCxChannelCmd>
      break;
 8008e1a:	e00e      	b.n	8008e3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2201      	movs	r2, #1
 8008e22:	2100      	movs	r1, #0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fd7f 	bl	8009928 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	2104      	movs	r1, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fd78 	bl	8009928 <TIM_CCxChannelCmd>
      break;
 8008e38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f042 0201 	orr.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d122      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d11b      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0202 	mvn.w	r2, #2
 8008e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa81 	bl	800939e <HAL_TIM_IC_CaptureCallback>
 8008e9c:	e005      	b.n	8008eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa73 	bl	800938a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fa84 	bl	80093b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d122      	bne.n	8008f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d11b      	bne.n	8008f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0204 	mvn.w	r2, #4
 8008ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa57 	bl	800939e <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa49 	bl	800938a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa5a 	bl	80093b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d122      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d11b      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f06f 0208 	mvn.w	r2, #8
 8008f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2204      	movs	r2, #4
 8008f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa2d 	bl	800939e <HAL_TIM_IC_CaptureCallback>
 8008f44:	e005      	b.n	8008f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa1f 	bl	800938a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fa30 	bl	80093b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b10      	cmp	r3, #16
 8008f64:	d122      	bne.n	8008fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	d11b      	bne.n	8008fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0210 	mvn.w	r2, #16
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2208      	movs	r2, #8
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa03 	bl	800939e <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9f5 	bl	800938a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fa06 	bl	80093b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d10e      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d107      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0201 	mvn.w	r2, #1
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9cf 	bl	8009376 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d10e      	bne.n	8009004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff0:	2b80      	cmp	r3, #128	; 0x80
 8008ff2:	d107      	bne.n	8009004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fd82 	bl	8009b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d10e      	bne.n	8009030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d107      	bne.n	8009030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9cb 	bl	80093c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d10e      	bne.n	800905c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b20      	cmp	r3, #32
 800904a:	d107      	bne.n	800905c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0220 	mvn.w	r2, #32
 8009054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fd4c 	bl	8009af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800907e:	2302      	movs	r3, #2
 8009080:	e0ae      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b0c      	cmp	r3, #12
 800908e:	f200 809f 	bhi.w	80091d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009092:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090cd 	.word	0x080090cd
 800909c:	080091d1 	.word	0x080091d1
 80090a0:	080091d1 	.word	0x080091d1
 80090a4:	080091d1 	.word	0x080091d1
 80090a8:	0800910d 	.word	0x0800910d
 80090ac:	080091d1 	.word	0x080091d1
 80090b0:	080091d1 	.word	0x080091d1
 80090b4:	080091d1 	.word	0x080091d1
 80090b8:	0800914f 	.word	0x0800914f
 80090bc:	080091d1 	.word	0x080091d1
 80090c0:	080091d1 	.word	0x080091d1
 80090c4:	080091d1 	.word	0x080091d1
 80090c8:	0800918f 	.word	0x0800918f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fa02 	bl	80094dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0208 	orr.w	r2, r2, #8
 80090e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0204 	bic.w	r2, r2, #4
 80090f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6999      	ldr	r1, [r3, #24]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	619a      	str	r2, [r3, #24]
      break;
 800910a:	e064      	b.n	80091d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fa48 	bl	80095a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699a      	ldr	r2, [r3, #24]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6999      	ldr	r1, [r3, #24]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	021a      	lsls	r2, r3, #8
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	619a      	str	r2, [r3, #24]
      break;
 800914c:	e043      	b.n	80091d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fa93 	bl	8009680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0208 	orr.w	r2, r2, #8
 8009168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0204 	bic.w	r2, r2, #4
 8009178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69d9      	ldr	r1, [r3, #28]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	61da      	str	r2, [r3, #28]
      break;
 800918c:	e023      	b.n	80091d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fadd 	bl	8009754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69da      	ldr	r2, [r3, #28]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69d9      	ldr	r1, [r3, #28]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	021a      	lsls	r2, r3, #8
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	61da      	str	r2, [r3, #28]
      break;
 80091ce:	e002      	b.n	80091d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	75fb      	strb	r3, [r7, #23]
      break;
 80091d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_TIM_ConfigClockSource+0x1c>
 8009200:	2302      	movs	r3, #2
 8009202:	e0b4      	b.n	800936e <HAL_TIM_ConfigClockSource+0x186>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800922a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800923c:	d03e      	beq.n	80092bc <HAL_TIM_ConfigClockSource+0xd4>
 800923e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009242:	f200 8087 	bhi.w	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 8009246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924a:	f000 8086 	beq.w	800935a <HAL_TIM_ConfigClockSource+0x172>
 800924e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009252:	d87f      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 8009254:	2b70      	cmp	r3, #112	; 0x70
 8009256:	d01a      	beq.n	800928e <HAL_TIM_ConfigClockSource+0xa6>
 8009258:	2b70      	cmp	r3, #112	; 0x70
 800925a:	d87b      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 800925c:	2b60      	cmp	r3, #96	; 0x60
 800925e:	d050      	beq.n	8009302 <HAL_TIM_ConfigClockSource+0x11a>
 8009260:	2b60      	cmp	r3, #96	; 0x60
 8009262:	d877      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 8009264:	2b50      	cmp	r3, #80	; 0x50
 8009266:	d03c      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0xfa>
 8009268:	2b50      	cmp	r3, #80	; 0x50
 800926a:	d873      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d058      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0x13a>
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	d86f      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 8009274:	2b30      	cmp	r3, #48	; 0x30
 8009276:	d064      	beq.n	8009342 <HAL_TIM_ConfigClockSource+0x15a>
 8009278:	2b30      	cmp	r3, #48	; 0x30
 800927a:	d86b      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 800927c:	2b20      	cmp	r3, #32
 800927e:	d060      	beq.n	8009342 <HAL_TIM_ConfigClockSource+0x15a>
 8009280:	2b20      	cmp	r3, #32
 8009282:	d867      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d05c      	beq.n	8009342 <HAL_TIM_ConfigClockSource+0x15a>
 8009288:	2b10      	cmp	r3, #16
 800928a:	d05a      	beq.n	8009342 <HAL_TIM_ConfigClockSource+0x15a>
 800928c:	e062      	b.n	8009354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6899      	ldr	r1, [r3, #8]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f000 fb23 	bl	80098e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	609a      	str	r2, [r3, #8]
      break;
 80092ba:	e04f      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	6899      	ldr	r1, [r3, #8]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f000 fb0c 	bl	80098e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092de:	609a      	str	r2, [r3, #8]
      break;
 80092e0:	e03c      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	6859      	ldr	r1, [r3, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f000 fa80 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2150      	movs	r1, #80	; 0x50
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fad9 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009300:	e02c      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	461a      	mov	r2, r3
 8009310:	f000 fa9f 	bl	8009852 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2160      	movs	r1, #96	; 0x60
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fac9 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009320:	e01c      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6859      	ldr	r1, [r3, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	461a      	mov	r2, r3
 8009330:	f000 fa60 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2140      	movs	r1, #64	; 0x40
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fab9 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009340:	e00c      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f000 fab0 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009352:	e003      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
      break;
 8009358:	e000      	b.n	800935c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800935a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a34      	ldr	r2, [pc, #208]	; (80094c0 <TIM_Base_SetConfig+0xe4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00f      	beq.n	8009414 <TIM_Base_SetConfig+0x38>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fa:	d00b      	beq.n	8009414 <TIM_Base_SetConfig+0x38>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a31      	ldr	r2, [pc, #196]	; (80094c4 <TIM_Base_SetConfig+0xe8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d007      	beq.n	8009414 <TIM_Base_SetConfig+0x38>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a30      	ldr	r2, [pc, #192]	; (80094c8 <TIM_Base_SetConfig+0xec>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_Base_SetConfig+0x38>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a2f      	ldr	r2, [pc, #188]	; (80094cc <TIM_Base_SetConfig+0xf0>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d108      	bne.n	8009426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a25      	ldr	r2, [pc, #148]	; (80094c0 <TIM_Base_SetConfig+0xe4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d01b      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009434:	d017      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a22      	ldr	r2, [pc, #136]	; (80094c4 <TIM_Base_SetConfig+0xe8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a21      	ldr	r2, [pc, #132]	; (80094c8 <TIM_Base_SetConfig+0xec>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00f      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <TIM_Base_SetConfig+0xf0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00b      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <TIM_Base_SetConfig+0xf4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <TIM_Base_SetConfig+0xf8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_Base_SetConfig+0x8a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <TIM_Base_SetConfig+0xfc>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d108      	bne.n	8009478 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800946c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <TIM_Base_SetConfig+0xe4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d103      	bne.n	80094ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	691a      	ldr	r2, [r3, #16]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	615a      	str	r2, [r3, #20]
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40010000 	.word	0x40010000
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40014000 	.word	0x40014000
 80094d4:	40014400 	.word	0x40014400
 80094d8:	40014800 	.word	0x40014800

080094dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f023 0201 	bic.w	r2, r3, #1
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0303 	bic.w	r3, r3, #3
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f023 0302 	bic.w	r3, r3, #2
 8009524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <TIM_OC1_SetConfig+0xc8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d10c      	bne.n	8009552 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0308 	bic.w	r3, r3, #8
 800953e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f023 0304 	bic.w	r3, r3, #4
 8009550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <TIM_OC1_SetConfig+0xc8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d111      	bne.n	800957e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	621a      	str	r2, [r3, #32]
}
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	40010000 	.word	0x40010000

080095a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	f023 0210 	bic.w	r2, r3, #16
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 0320 	bic.w	r3, r3, #32
 80095f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	011b      	lsls	r3, r3, #4
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a1e      	ldr	r2, [pc, #120]	; (800967c <TIM_OC2_SetConfig+0xd4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10d      	bne.n	8009624 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800960e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	011b      	lsls	r3, r3, #4
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4313      	orrs	r3, r2
 800961a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a15      	ldr	r2, [pc, #84]	; (800967c <TIM_OC2_SetConfig+0xd4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d113      	bne.n	8009654 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800963a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	4313      	orrs	r3, r2
 8009646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	bf00      	nop
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	40010000 	.word	0x40010000

08009680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0303 	bic.w	r3, r3, #3
 80096b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <TIM_OC3_SetConfig+0xd0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d10d      	bne.n	80096fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	021b      	lsls	r3, r3, #8
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a14      	ldr	r2, [pc, #80]	; (8009750 <TIM_OC3_SetConfig+0xd0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d113      	bne.n	800972a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	621a      	str	r2, [r3, #32]
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	40010000 	.word	0x40010000

08009754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800978a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800979e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	031b      	lsls	r3, r3, #12
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <TIM_OC4_SetConfig+0x9c>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d109      	bne.n	80097c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	019b      	lsls	r3, r3, #6
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	621a      	str	r2, [r3, #32]
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40010000 	.word	0x40010000

080097f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0201 	bic.w	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800981e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f023 030a 	bic.w	r3, r3, #10
 8009830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	621a      	str	r2, [r3, #32]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009852:	b480      	push	{r7}
 8009854:	b087      	sub	sp, #28
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f023 0210 	bic.w	r2, r3, #16
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800987c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	031b      	lsls	r3, r3, #12
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800988e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	621a      	str	r2, [r3, #32]
}
 80098a6:	bf00      	nop
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f043 0307 	orr.w	r3, r3, #7
 80098d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	609a      	str	r2, [r3, #8]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	021a      	lsls	r2, r3, #8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	431a      	orrs	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4313      	orrs	r3, r2
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	609a      	str	r2, [r3, #8]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2201      	movs	r2, #1
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1a      	ldr	r2, [r3, #32]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	43db      	mvns	r3, r3
 800994a:	401a      	ands	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a1a      	ldr	r2, [r3, #32]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f003 031f 	and.w	r3, r3, #31
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	fa01 f303 	lsl.w	r3, r1, r3
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009988:	2302      	movs	r3, #2
 800998a:	e050      	b.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d018      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d013      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a16      	ldr	r2, [pc, #88]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a15      	ldr	r2, [pc, #84]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a13      	ldr	r2, [pc, #76]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10c      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40000400 	.word	0x40000400
 8009a44:	40000800 	.word	0x40000800
 8009a48:	40000c00 	.word	0x40000c00
 8009a4c:	40014000 	.word	0x40014000

08009a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e03d      	b.n	8009ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e03f      	b.n	8009bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fa fcea 	bl	800451c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2224      	movs	r2, #36	; 0x24
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fd23 	bl	800a5ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d130      	bne.n	8009c32 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <HAL_UART_Transmit_IT+0x26>
 8009bd6:	88fb      	ldrh	r3, [r7, #6]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e029      	b.n	8009c34 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_UART_Transmit_IT+0x38>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e022      	b.n	8009c34 <HAL_UART_Transmit_IT+0x7e>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2221      	movs	r2, #33	; 0x21
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e000      	b.n	8009c34 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009c32:	2302      	movs	r3, #2
  }
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d11d      	bne.n	8009c96 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_UART_Receive_IT+0x26>
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e016      	b.n	8009c98 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_UART_Receive_IT+0x38>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e00f      	b.n	8009c98 <HAL_UART_Receive_IT+0x58>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c86:	88fb      	ldrh	r3, [r7, #6]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fab5 	bl	800a1fc <UART_Start_Receive_IT>
 8009c92:	4603      	mov	r3, r0
 8009c94:	e000      	b.n	8009c98 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c96:	2302      	movs	r3, #2
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b0ba      	sub	sp, #232	; 0xe8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd6:	f003 030f 	and.w	r3, r3, #15
 8009cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10f      	bne.n	8009d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <HAL_UART_IRQHandler+0x66>
 8009cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fb99 	bl	800a436 <UART_Receive_IT>
      return;
 8009d04:	e256      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80de 	beq.w	8009ecc <HAL_UART_IRQHandler+0x22c>
 8009d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80d1 	beq.w	8009ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <HAL_UART_IRQHandler+0xae>
 8009d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f043 0201 	orr.w	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <HAL_UART_IRQHandler+0xd2>
 8009d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f043 0202 	orr.w	r2, r3, #2
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <HAL_UART_IRQHandler+0xf6>
 8009d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f043 0204 	orr.w	r2, r3, #4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x126>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f043 0208 	orr.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 81ed 	beq.w	800a1aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d008      	beq.n	8009dee <HAL_UART_IRQHandler+0x14e>
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fb24 	bl	800a436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2301      	moveq	r3, #1
 8009dfe:	2300      	movne	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d103      	bne.n	8009e1a <HAL_UART_IRQHandler+0x17a>
 8009e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04f      	beq.n	8009eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa2c 	bl	800a278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d141      	bne.n	8009eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3314      	adds	r3, #20
 8009e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3314      	adds	r3, #20
 8009e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1d9      	bne.n	8009e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d013      	beq.n	8009eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e86:	4a7d      	ldr	r2, [pc, #500]	; (800a07c <HAL_UART_IRQHandler+0x3dc>)
 8009e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fb f9cb 	bl	800522a <HAL_DMA_Abort_IT>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea8:	e00e      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f990 	bl	800a1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb0:	e00a      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f98c 	bl	800a1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	e006      	b.n	8009ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f988 	bl	800a1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ec6:	e170      	b.n	800a1aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	bf00      	nop
    return;
 8009eca:	e16e      	b.n	800a1aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f040 814a 	bne.w	800a16a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8143 	beq.w	800a16a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 813c 	beq.w	800a16a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	60bb      	str	r3, [r7, #8]
 8009f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	f040 80b4 	bne.w	800a080 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 8140 	beq.w	800a1ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f36:	429a      	cmp	r2, r3
 8009f38:	f080 8139 	bcs.w	800a1ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4e:	f000 8088 	beq.w	800a062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d9      	bne.n	8009f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3314      	adds	r3, #20
 8009fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e1      	bne.n	8009f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3314      	adds	r3, #20
 8009fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e3      	bne.n	8009fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a044:	65ba      	str	r2, [r7, #88]	; 0x58
 800a046:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a04a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e3      	bne.n	800a020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fb f874 	bl	800514a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	b29b      	uxth	r3, r3
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f8b6 	bl	800a1e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a078:	e099      	b.n	800a1ae <HAL_UART_IRQHandler+0x50e>
 800a07a:	bf00      	nop
 800a07c:	0800a33f 	.word	0x0800a33f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 808b 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a09c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8086 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0ca:	647a      	str	r2, [r7, #68]	; 0x44
 800a0cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e3      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3314      	adds	r3, #20
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a102:	633a      	str	r2, [r7, #48]	; 0x30
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e3      	bne.n	800a0de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	330c      	adds	r3, #12
 800a12a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	60fb      	str	r3, [r7, #12]
   return(result);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0310 	bic.w	r3, r3, #16
 800a13a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	330c      	adds	r3, #12
 800a144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a148:	61fa      	str	r2, [r7, #28]
 800a14a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	617b      	str	r3, [r7, #20]
   return(result);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e3      	bne.n	800a124 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a15c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f83e 	bl	800a1e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a168:	e023      	b.n	800a1b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <HAL_UART_IRQHandler+0x4ea>
 800a176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8ef 	bl	800a366 <UART_Transmit_IT>
    return;
 800a188:	e014      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x514>
 800a196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f92f 	bl	800a406 <UART_EndTransmit_IT>
    return;
 800a1a8:	e004      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
    return;
 800a1aa:	bf00      	nop
 800a1ac:	e002      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_UART_IRQHandler+0x514>
      return;
 800a1b2:	bf00      	nop
  }
}
 800a1b4:	37e8      	adds	r7, #232	; 0xe8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop

0800a1bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	88fa      	ldrh	r2, [r7, #6]
 800a214:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	88fa      	ldrh	r2, [r7, #6]
 800a21a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2222      	movs	r2, #34	; 0x22
 800a226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d007      	beq.n	800a24a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a248:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695a      	ldr	r2, [r3, #20]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f042 0201 	orr.w	r2, r2, #1
 800a258:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f042 0220 	orr.w	r2, r2, #32
 800a268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b095      	sub	sp, #84	; 0x54
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	330c      	adds	r3, #12
 800a286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28a:	e853 3f00 	ldrex	r3, [r3]
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2a0:	643a      	str	r2, [r7, #64]	; 0x40
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a8:	e841 2300 	strex	r3, r2, [r1]
 800a2ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1e5      	bne.n	800a280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3314      	adds	r3, #20
 800a2ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f023 0301 	bic.w	r3, r3, #1
 800a2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e5      	bne.n	800a2b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d119      	bne.n	800a324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f023 0310 	bic.w	r3, r3, #16
 800a306:	647b      	str	r3, [r7, #68]	; 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	330c      	adds	r3, #12
 800a30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a310:	61ba      	str	r2, [r7, #24]
 800a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	6979      	ldr	r1, [r7, #20]
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	613b      	str	r3, [r7, #16]
   return(result);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e5      	bne.n	800a2f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2220      	movs	r2, #32
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a332:	bf00      	nop
 800a334:	3754      	adds	r7, #84	; 0x54
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff ff39 	bl	800a1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b21      	cmp	r3, #33	; 0x21
 800a378:	d13e      	bne.n	800a3f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a382:	d114      	bne.n	800a3ae <UART_Transmit_IT+0x48>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d110      	bne.n	800a3ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	621a      	str	r2, [r3, #32]
 800a3ac:	e008      	b.n	800a3c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	1c59      	adds	r1, r3, #1
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6211      	str	r1, [r2, #32]
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10f      	bne.n	800a3f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e000      	b.n	800a3fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3f8:	2302      	movs	r3, #2
  }
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a41c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2220      	movs	r2, #32
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fec8 	bl	800a1bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b08c      	sub	sp, #48	; 0x30
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b22      	cmp	r3, #34	; 0x22
 800a448:	f040 80ab 	bne.w	800a5a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a454:	d117      	bne.n	800a486 <UART_Receive_IT+0x50>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d113      	bne.n	800a486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a474:	b29a      	uxth	r2, r3
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	1c9a      	adds	r2, r3, #2
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	629a      	str	r2, [r3, #40]	; 0x28
 800a484:	e026      	b.n	800a4d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a498:	d007      	beq.n	800a4aa <UART_Receive_IT+0x74>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <UART_Receive_IT+0x82>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	e008      	b.n	800a4ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d15a      	bne.n	800a59e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0220 	bic.w	r2, r2, #32
 800a4f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695a      	ldr	r2, [r3, #20]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f022 0201 	bic.w	r2, r2, #1
 800a516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2220      	movs	r2, #32
 800a51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a524:	2b01      	cmp	r3, #1
 800a526:	d135      	bne.n	800a594 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	330c      	adds	r3, #12
 800a534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	613b      	str	r3, [r7, #16]
   return(result);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f023 0310 	bic.w	r3, r3, #16
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	330c      	adds	r3, #12
 800a54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54e:	623a      	str	r2, [r7, #32]
 800a550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	69f9      	ldr	r1, [r7, #28]
 800a554:	6a3a      	ldr	r2, [r7, #32]
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e5      	bne.n	800a52e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0310 	and.w	r3, r3, #16
 800a56c:	2b10      	cmp	r3, #16
 800a56e:	d10a      	bne.n	800a586 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a570:	2300      	movs	r3, #0
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fe29 	bl	800a1e4 <HAL_UARTEx_RxEventCallback>
 800a592:	e002      	b.n	800a59a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7fa f95d 	bl	8004854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e002      	b.n	800a5a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e000      	b.n	800a5a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a5a2:	2302      	movs	r3, #2
  }
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3730      	adds	r7, #48	; 0x30
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b0:	b0c0      	sub	sp, #256	; 0x100
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c8:	68d9      	ldr	r1, [r3, #12]
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	ea40 0301 	orr.w	r3, r0, r1
 800a5d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a604:	f021 010c 	bic.w	r1, r1, #12
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a612:	430b      	orrs	r3, r1
 800a614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a626:	6999      	ldr	r1, [r3, #24]
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	ea40 0301 	orr.w	r3, r0, r1
 800a632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b8f      	ldr	r3, [pc, #572]	; (800a878 <UART_SetConfig+0x2cc>)
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d005      	beq.n	800a64c <UART_SetConfig+0xa0>
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b8d      	ldr	r3, [pc, #564]	; (800a87c <UART_SetConfig+0x2d0>)
 800a648:	429a      	cmp	r2, r3
 800a64a:	d104      	bne.n	800a656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a64c:	f7fe f876 	bl	800873c <HAL_RCC_GetPCLK2Freq>
 800a650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a654:	e003      	b.n	800a65e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a656:	f7fe f85d 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 800a65a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a668:	f040 810c 	bne.w	800a884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a66c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a670:	2200      	movs	r2, #0
 800a672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a67a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a67e:	4622      	mov	r2, r4
 800a680:	462b      	mov	r3, r5
 800a682:	1891      	adds	r1, r2, r2
 800a684:	65b9      	str	r1, [r7, #88]	; 0x58
 800a686:	415b      	adcs	r3, r3
 800a688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a68a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a68e:	4621      	mov	r1, r4
 800a690:	eb12 0801 	adds.w	r8, r2, r1
 800a694:	4629      	mov	r1, r5
 800a696:	eb43 0901 	adc.w	r9, r3, r1
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	f04f 0300 	mov.w	r3, #0
 800a6a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6ae:	4690      	mov	r8, r2
 800a6b0:	4699      	mov	r9, r3
 800a6b2:	4623      	mov	r3, r4
 800a6b4:	eb18 0303 	adds.w	r3, r8, r3
 800a6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6bc:	462b      	mov	r3, r5
 800a6be:	eb49 0303 	adc.w	r3, r9, r3
 800a6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a6da:	460b      	mov	r3, r1
 800a6dc:	18db      	adds	r3, r3, r3
 800a6de:	653b      	str	r3, [r7, #80]	; 0x50
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	eb42 0303 	adc.w	r3, r2, r3
 800a6e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6f0:	f7f6 f9c4 	bl	8000a7c <__aeabi_uldivmod>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4b61      	ldr	r3, [pc, #388]	; (800a880 <UART_SetConfig+0x2d4>)
 800a6fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	011c      	lsls	r4, r3, #4
 800a702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a706:	2200      	movs	r2, #0
 800a708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a70c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	1891      	adds	r1, r2, r2
 800a71a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a71c:	415b      	adcs	r3, r3
 800a71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a724:	4641      	mov	r1, r8
 800a726:	eb12 0a01 	adds.w	sl, r2, r1
 800a72a:	4649      	mov	r1, r9
 800a72c:	eb43 0b01 	adc.w	fp, r3, r1
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a73c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a744:	4692      	mov	sl, r2
 800a746:	469b      	mov	fp, r3
 800a748:	4643      	mov	r3, r8
 800a74a:	eb1a 0303 	adds.w	r3, sl, r3
 800a74e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a752:	464b      	mov	r3, r9
 800a754:	eb4b 0303 	adc.w	r3, fp, r3
 800a758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a76c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a770:	460b      	mov	r3, r1
 800a772:	18db      	adds	r3, r3, r3
 800a774:	643b      	str	r3, [r7, #64]	; 0x40
 800a776:	4613      	mov	r3, r2
 800a778:	eb42 0303 	adc.w	r3, r2, r3
 800a77c:	647b      	str	r3, [r7, #68]	; 0x44
 800a77e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a786:	f7f6 f979 	bl	8000a7c <__aeabi_uldivmod>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	4b3b      	ldr	r3, [pc, #236]	; (800a880 <UART_SetConfig+0x2d4>)
 800a792:	fba3 2301 	umull	r2, r3, r3, r1
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	2264      	movs	r2, #100	; 0x64
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
 800a79e:	1acb      	subs	r3, r1, r3
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a7a6:	4b36      	ldr	r3, [pc, #216]	; (800a880 <UART_SetConfig+0x2d4>)
 800a7a8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7b4:	441c      	add	r4, r3
 800a7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a7c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	1891      	adds	r1, r2, r2
 800a7ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7d0:	415b      	adcs	r3, r3
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7d8:	4641      	mov	r1, r8
 800a7da:	1851      	adds	r1, r2, r1
 800a7dc:	6339      	str	r1, [r7, #48]	; 0x30
 800a7de:	4649      	mov	r1, r9
 800a7e0:	414b      	adcs	r3, r1
 800a7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	f04f 0300 	mov.w	r3, #0
 800a7ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	00cb      	lsls	r3, r1, #3
 800a7f4:	4651      	mov	r1, sl
 800a7f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7fa:	4651      	mov	r1, sl
 800a7fc:	00ca      	lsls	r2, r1, #3
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	4603      	mov	r3, r0
 800a804:	4642      	mov	r2, r8
 800a806:	189b      	adds	r3, r3, r2
 800a808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a80c:	464b      	mov	r3, r9
 800a80e:	460a      	mov	r2, r1
 800a810:	eb42 0303 	adc.w	r3, r2, r3
 800a814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a82c:	460b      	mov	r3, r1
 800a82e:	18db      	adds	r3, r3, r3
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
 800a832:	4613      	mov	r3, r2
 800a834:	eb42 0303 	adc.w	r3, r2, r3
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a83e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a842:	f7f6 f91b 	bl	8000a7c <__aeabi_uldivmod>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <UART_SetConfig+0x2d4>)
 800a84c:	fba3 1302 	umull	r1, r3, r3, r2
 800a850:	095b      	lsrs	r3, r3, #5
 800a852:	2164      	movs	r1, #100	; 0x64
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3332      	adds	r3, #50	; 0x32
 800a85e:	4a08      	ldr	r2, [pc, #32]	; (800a880 <UART_SetConfig+0x2d4>)
 800a860:	fba2 2303 	umull	r2, r3, r2, r3
 800a864:	095b      	lsrs	r3, r3, #5
 800a866:	f003 0207 	and.w	r2, r3, #7
 800a86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4422      	add	r2, r4
 800a872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a874:	e105      	b.n	800aa82 <UART_SetConfig+0x4d6>
 800a876:	bf00      	nop
 800a878:	40011000 	.word	0x40011000
 800a87c:	40011400 	.word	0x40011400
 800a880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a88e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a896:	4642      	mov	r2, r8
 800a898:	464b      	mov	r3, r9
 800a89a:	1891      	adds	r1, r2, r2
 800a89c:	6239      	str	r1, [r7, #32]
 800a89e:	415b      	adcs	r3, r3
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	1854      	adds	r4, r2, r1
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	eb43 0501 	adc.w	r5, r3, r1
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	00eb      	lsls	r3, r5, #3
 800a8ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8be:	00e2      	lsls	r2, r4, #3
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	461d      	mov	r5, r3
 800a8c4:	4643      	mov	r3, r8
 800a8c6:	18e3      	adds	r3, r4, r3
 800a8c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	eb45 0303 	adc.w	r3, r5, r3
 800a8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8e6:	f04f 0200 	mov.w	r2, #0
 800a8ea:	f04f 0300 	mov.w	r3, #0
 800a8ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	008b      	lsls	r3, r1, #2
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	008a      	lsls	r2, r1, #2
 800a900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a904:	f7f6 f8ba 	bl	8000a7c <__aeabi_uldivmod>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	4b60      	ldr	r3, [pc, #384]	; (800aa90 <UART_SetConfig+0x4e4>)
 800a90e:	fba3 2302 	umull	r2, r3, r3, r2
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	011c      	lsls	r4, r3, #4
 800a916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	1891      	adds	r1, r2, r2
 800a92e:	61b9      	str	r1, [r7, #24]
 800a930:	415b      	adcs	r3, r3
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a938:	4641      	mov	r1, r8
 800a93a:	1851      	adds	r1, r2, r1
 800a93c:	6139      	str	r1, [r7, #16]
 800a93e:	4649      	mov	r1, r9
 800a940:	414b      	adcs	r3, r1
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a950:	4659      	mov	r1, fp
 800a952:	00cb      	lsls	r3, r1, #3
 800a954:	4651      	mov	r1, sl
 800a956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a95a:	4651      	mov	r1, sl
 800a95c:	00ca      	lsls	r2, r1, #3
 800a95e:	4610      	mov	r0, r2
 800a960:	4619      	mov	r1, r3
 800a962:	4603      	mov	r3, r0
 800a964:	4642      	mov	r2, r8
 800a966:	189b      	adds	r3, r3, r2
 800a968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a96c:	464b      	mov	r3, r9
 800a96e:	460a      	mov	r2, r1
 800a970:	eb42 0303 	adc.w	r3, r2, r3
 800a974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	67bb      	str	r3, [r7, #120]	; 0x78
 800a982:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a990:	4649      	mov	r1, r9
 800a992:	008b      	lsls	r3, r1, #2
 800a994:	4641      	mov	r1, r8
 800a996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a99a:	4641      	mov	r1, r8
 800a99c:	008a      	lsls	r2, r1, #2
 800a99e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a9a2:	f7f6 f86b 	bl	8000a7c <__aeabi_uldivmod>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4b39      	ldr	r3, [pc, #228]	; (800aa90 <UART_SetConfig+0x4e4>)
 800a9ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a9b0:	095b      	lsrs	r3, r3, #5
 800a9b2:	2164      	movs	r1, #100	; 0x64
 800a9b4:	fb01 f303 	mul.w	r3, r1, r3
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	3332      	adds	r3, #50	; 0x32
 800a9be:	4a34      	ldr	r2, [pc, #208]	; (800aa90 <UART_SetConfig+0x4e4>)
 800a9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c4:	095b      	lsrs	r3, r3, #5
 800a9c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9ca:	441c      	add	r4, r3
 800a9cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	673b      	str	r3, [r7, #112]	; 0x70
 800a9d4:	677a      	str	r2, [r7, #116]	; 0x74
 800a9d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a9da:	4642      	mov	r2, r8
 800a9dc:	464b      	mov	r3, r9
 800a9de:	1891      	adds	r1, r2, r2
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	415b      	adcs	r3, r3
 800a9e4:	60fb      	str	r3, [r7, #12]
 800a9e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	1851      	adds	r1, r2, r1
 800a9ee:	6039      	str	r1, [r7, #0]
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	414b      	adcs	r3, r1
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa02:	4659      	mov	r1, fp
 800aa04:	00cb      	lsls	r3, r1, #3
 800aa06:	4651      	mov	r1, sl
 800aa08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa0c:	4651      	mov	r1, sl
 800aa0e:	00ca      	lsls	r2, r1, #3
 800aa10:	4610      	mov	r0, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	4642      	mov	r2, r8
 800aa18:	189b      	adds	r3, r3, r2
 800aa1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	460a      	mov	r2, r1
 800aa20:	eb42 0303 	adc.w	r3, r2, r3
 800aa24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	663b      	str	r3, [r7, #96]	; 0x60
 800aa30:	667a      	str	r2, [r7, #100]	; 0x64
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa3e:	4649      	mov	r1, r9
 800aa40:	008b      	lsls	r3, r1, #2
 800aa42:	4641      	mov	r1, r8
 800aa44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa48:	4641      	mov	r1, r8
 800aa4a:	008a      	lsls	r2, r1, #2
 800aa4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa50:	f7f6 f814 	bl	8000a7c <__aeabi_uldivmod>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <UART_SetConfig+0x4e4>)
 800aa5a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa5e:	095b      	lsrs	r3, r3, #5
 800aa60:	2164      	movs	r1, #100	; 0x64
 800aa62:	fb01 f303 	mul.w	r3, r1, r3
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	3332      	adds	r3, #50	; 0x32
 800aa6c:	4a08      	ldr	r2, [pc, #32]	; (800aa90 <UART_SetConfig+0x4e4>)
 800aa6e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	f003 020f 	and.w	r2, r3, #15
 800aa78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4422      	add	r2, r4
 800aa80:	609a      	str	r2, [r3, #8]
}
 800aa82:	bf00      	nop
 800aa84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa8e:	bf00      	nop
 800aa90:	51eb851f 	.word	0x51eb851f

0800aa94 <atoi>:
 800aa94:	220a      	movs	r2, #10
 800aa96:	2100      	movs	r1, #0
 800aa98:	f000 b8ea 	b.w	800ac70 <strtol>

0800aa9c <__errno>:
 800aa9c:	4b01      	ldr	r3, [pc, #4]	; (800aaa4 <__errno+0x8>)
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000018 	.word	0x20000018

0800aaa8 <__libc_init_array>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	4d0d      	ldr	r5, [pc, #52]	; (800aae0 <__libc_init_array+0x38>)
 800aaac:	4c0d      	ldr	r4, [pc, #52]	; (800aae4 <__libc_init_array+0x3c>)
 800aaae:	1b64      	subs	r4, r4, r5
 800aab0:	10a4      	asrs	r4, r4, #2
 800aab2:	2600      	movs	r6, #0
 800aab4:	42a6      	cmp	r6, r4
 800aab6:	d109      	bne.n	800aacc <__libc_init_array+0x24>
 800aab8:	4d0b      	ldr	r5, [pc, #44]	; (800aae8 <__libc_init_array+0x40>)
 800aaba:	4c0c      	ldr	r4, [pc, #48]	; (800aaec <__libc_init_array+0x44>)
 800aabc:	f000 fd22 	bl	800b504 <_init>
 800aac0:	1b64      	subs	r4, r4, r5
 800aac2:	10a4      	asrs	r4, r4, #2
 800aac4:	2600      	movs	r6, #0
 800aac6:	42a6      	cmp	r6, r4
 800aac8:	d105      	bne.n	800aad6 <__libc_init_array+0x2e>
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad0:	4798      	blx	r3
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7ee      	b.n	800aab4 <__libc_init_array+0xc>
 800aad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aada:	4798      	blx	r3
 800aadc:	3601      	adds	r6, #1
 800aade:	e7f2      	b.n	800aac6 <__libc_init_array+0x1e>
 800aae0:	0800b6c0 	.word	0x0800b6c0
 800aae4:	0800b6c0 	.word	0x0800b6c0
 800aae8:	0800b6c0 	.word	0x0800b6c0
 800aaec:	0800b6c4 	.word	0x0800b6c4

0800aaf0 <memcpy>:
 800aaf0:	440a      	add	r2, r1
 800aaf2:	4291      	cmp	r1, r2
 800aaf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaf8:	d100      	bne.n	800aafc <memcpy+0xc>
 800aafa:	4770      	bx	lr
 800aafc:	b510      	push	{r4, lr}
 800aafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab06:	4291      	cmp	r1, r2
 800ab08:	d1f9      	bne.n	800aafe <memcpy+0xe>
 800ab0a:	bd10      	pop	{r4, pc}

0800ab0c <memset>:
 800ab0c:	4402      	add	r2, r0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d100      	bne.n	800ab16 <memset+0xa>
 800ab14:	4770      	bx	lr
 800ab16:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1a:	e7f9      	b.n	800ab10 <memset+0x4>

0800ab1c <siprintf>:
 800ab1c:	b40e      	push	{r1, r2, r3}
 800ab1e:	b500      	push	{lr}
 800ab20:	b09c      	sub	sp, #112	; 0x70
 800ab22:	ab1d      	add	r3, sp, #116	; 0x74
 800ab24:	9002      	str	r0, [sp, #8]
 800ab26:	9006      	str	r0, [sp, #24]
 800ab28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab2c:	4809      	ldr	r0, [pc, #36]	; (800ab54 <siprintf+0x38>)
 800ab2e:	9107      	str	r1, [sp, #28]
 800ab30:	9104      	str	r1, [sp, #16]
 800ab32:	4909      	ldr	r1, [pc, #36]	; (800ab58 <siprintf+0x3c>)
 800ab34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab38:	9105      	str	r1, [sp, #20]
 800ab3a:	6800      	ldr	r0, [r0, #0]
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	a902      	add	r1, sp, #8
 800ab40:	f000 f8fc 	bl	800ad3c <_svfiprintf_r>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	b01c      	add	sp, #112	; 0x70
 800ab4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab50:	b003      	add	sp, #12
 800ab52:	4770      	bx	lr
 800ab54:	20000018 	.word	0x20000018
 800ab58:	ffff0208 	.word	0xffff0208

0800ab5c <strcpy>:
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab62:	f803 2b01 	strb.w	r2, [r3], #1
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	d1f9      	bne.n	800ab5e <strcpy+0x2>
 800ab6a:	4770      	bx	lr

0800ab6c <_strtol_l.constprop.0>:
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab72:	d001      	beq.n	800ab78 <_strtol_l.constprop.0+0xc>
 800ab74:	2b24      	cmp	r3, #36	; 0x24
 800ab76:	d906      	bls.n	800ab86 <_strtol_l.constprop.0+0x1a>
 800ab78:	f7ff ff90 	bl	800aa9c <__errno>
 800ab7c:	2316      	movs	r3, #22
 800ab7e:	6003      	str	r3, [r0, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac6c <_strtol_l.constprop.0+0x100>
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	462e      	mov	r6, r5
 800ab8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab92:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ab96:	f017 0708 	ands.w	r7, r7, #8
 800ab9a:	d1f7      	bne.n	800ab8c <_strtol_l.constprop.0+0x20>
 800ab9c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab9e:	d132      	bne.n	800ac06 <_strtol_l.constprop.0+0x9a>
 800aba0:	782c      	ldrb	r4, [r5, #0]
 800aba2:	2701      	movs	r7, #1
 800aba4:	1cb5      	adds	r5, r6, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d05b      	beq.n	800ac62 <_strtol_l.constprop.0+0xf6>
 800abaa:	2b10      	cmp	r3, #16
 800abac:	d109      	bne.n	800abc2 <_strtol_l.constprop.0+0x56>
 800abae:	2c30      	cmp	r4, #48	; 0x30
 800abb0:	d107      	bne.n	800abc2 <_strtol_l.constprop.0+0x56>
 800abb2:	782c      	ldrb	r4, [r5, #0]
 800abb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abb8:	2c58      	cmp	r4, #88	; 0x58
 800abba:	d14d      	bne.n	800ac58 <_strtol_l.constprop.0+0xec>
 800abbc:	786c      	ldrb	r4, [r5, #1]
 800abbe:	2310      	movs	r3, #16
 800abc0:	3502      	adds	r5, #2
 800abc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abca:	f04f 0c00 	mov.w	ip, #0
 800abce:	fbb8 f9f3 	udiv	r9, r8, r3
 800abd2:	4666      	mov	r6, ip
 800abd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800abd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800abdc:	f1be 0f09 	cmp.w	lr, #9
 800abe0:	d816      	bhi.n	800ac10 <_strtol_l.constprop.0+0xa4>
 800abe2:	4674      	mov	r4, lr
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	dd24      	ble.n	800ac32 <_strtol_l.constprop.0+0xc6>
 800abe8:	f1bc 0f00 	cmp.w	ip, #0
 800abec:	db1e      	blt.n	800ac2c <_strtol_l.constprop.0+0xc0>
 800abee:	45b1      	cmp	r9, r6
 800abf0:	d31c      	bcc.n	800ac2c <_strtol_l.constprop.0+0xc0>
 800abf2:	d101      	bne.n	800abf8 <_strtol_l.constprop.0+0x8c>
 800abf4:	45a2      	cmp	sl, r4
 800abf6:	db19      	blt.n	800ac2c <_strtol_l.constprop.0+0xc0>
 800abf8:	fb06 4603 	mla	r6, r6, r3, r4
 800abfc:	f04f 0c01 	mov.w	ip, #1
 800ac00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac04:	e7e8      	b.n	800abd8 <_strtol_l.constprop.0+0x6c>
 800ac06:	2c2b      	cmp	r4, #43	; 0x2b
 800ac08:	bf04      	itt	eq
 800ac0a:	782c      	ldrbeq	r4, [r5, #0]
 800ac0c:	1cb5      	addeq	r5, r6, #2
 800ac0e:	e7ca      	b.n	800aba6 <_strtol_l.constprop.0+0x3a>
 800ac10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac14:	f1be 0f19 	cmp.w	lr, #25
 800ac18:	d801      	bhi.n	800ac1e <_strtol_l.constprop.0+0xb2>
 800ac1a:	3c37      	subs	r4, #55	; 0x37
 800ac1c:	e7e2      	b.n	800abe4 <_strtol_l.constprop.0+0x78>
 800ac1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac22:	f1be 0f19 	cmp.w	lr, #25
 800ac26:	d804      	bhi.n	800ac32 <_strtol_l.constprop.0+0xc6>
 800ac28:	3c57      	subs	r4, #87	; 0x57
 800ac2a:	e7db      	b.n	800abe4 <_strtol_l.constprop.0+0x78>
 800ac2c:	f04f 3cff 	mov.w	ip, #4294967295
 800ac30:	e7e6      	b.n	800ac00 <_strtol_l.constprop.0+0x94>
 800ac32:	f1bc 0f00 	cmp.w	ip, #0
 800ac36:	da05      	bge.n	800ac44 <_strtol_l.constprop.0+0xd8>
 800ac38:	2322      	movs	r3, #34	; 0x22
 800ac3a:	6003      	str	r3, [r0, #0]
 800ac3c:	4646      	mov	r6, r8
 800ac3e:	b942      	cbnz	r2, 800ac52 <_strtol_l.constprop.0+0xe6>
 800ac40:	4630      	mov	r0, r6
 800ac42:	e79e      	b.n	800ab82 <_strtol_l.constprop.0+0x16>
 800ac44:	b107      	cbz	r7, 800ac48 <_strtol_l.constprop.0+0xdc>
 800ac46:	4276      	negs	r6, r6
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d0f9      	beq.n	800ac40 <_strtol_l.constprop.0+0xd4>
 800ac4c:	f1bc 0f00 	cmp.w	ip, #0
 800ac50:	d000      	beq.n	800ac54 <_strtol_l.constprop.0+0xe8>
 800ac52:	1e69      	subs	r1, r5, #1
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	e7f3      	b.n	800ac40 <_strtol_l.constprop.0+0xd4>
 800ac58:	2430      	movs	r4, #48	; 0x30
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1b1      	bne.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac5e:	2308      	movs	r3, #8
 800ac60:	e7af      	b.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac62:	2c30      	cmp	r4, #48	; 0x30
 800ac64:	d0a5      	beq.n	800abb2 <_strtol_l.constprop.0+0x46>
 800ac66:	230a      	movs	r3, #10
 800ac68:	e7ab      	b.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac6a:	bf00      	nop
 800ac6c:	0800b585 	.word	0x0800b585

0800ac70 <strtol>:
 800ac70:	4613      	mov	r3, r2
 800ac72:	460a      	mov	r2, r1
 800ac74:	4601      	mov	r1, r0
 800ac76:	4802      	ldr	r0, [pc, #8]	; (800ac80 <strtol+0x10>)
 800ac78:	6800      	ldr	r0, [r0, #0]
 800ac7a:	f7ff bf77 	b.w	800ab6c <_strtol_l.constprop.0>
 800ac7e:	bf00      	nop
 800ac80:	20000018 	.word	0x20000018

0800ac84 <__ssputs_r>:
 800ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	688e      	ldr	r6, [r1, #8]
 800ac8a:	429e      	cmp	r6, r3
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4690      	mov	r8, r2
 800ac92:	461f      	mov	r7, r3
 800ac94:	d838      	bhi.n	800ad08 <__ssputs_r+0x84>
 800ac96:	898a      	ldrh	r2, [r1, #12]
 800ac98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac9c:	d032      	beq.n	800ad04 <__ssputs_r+0x80>
 800ac9e:	6825      	ldr	r5, [r4, #0]
 800aca0:	6909      	ldr	r1, [r1, #16]
 800aca2:	eba5 0901 	sub.w	r9, r5, r1
 800aca6:	6965      	ldr	r5, [r4, #20]
 800aca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb0:	3301      	adds	r3, #1
 800acb2:	444b      	add	r3, r9
 800acb4:	106d      	asrs	r5, r5, #1
 800acb6:	429d      	cmp	r5, r3
 800acb8:	bf38      	it	cc
 800acba:	461d      	movcc	r5, r3
 800acbc:	0553      	lsls	r3, r2, #21
 800acbe:	d531      	bpl.n	800ad24 <__ssputs_r+0xa0>
 800acc0:	4629      	mov	r1, r5
 800acc2:	f000 fb55 	bl	800b370 <_malloc_r>
 800acc6:	4606      	mov	r6, r0
 800acc8:	b950      	cbnz	r0, 800ace0 <__ssputs_r+0x5c>
 800acca:	230c      	movs	r3, #12
 800accc:	f8ca 3000 	str.w	r3, [sl]
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace0:	6921      	ldr	r1, [r4, #16]
 800ace2:	464a      	mov	r2, r9
 800ace4:	f7ff ff04 	bl	800aaf0 <memcpy>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf2:	81a3      	strh	r3, [r4, #12]
 800acf4:	6126      	str	r6, [r4, #16]
 800acf6:	6165      	str	r5, [r4, #20]
 800acf8:	444e      	add	r6, r9
 800acfa:	eba5 0509 	sub.w	r5, r5, r9
 800acfe:	6026      	str	r6, [r4, #0]
 800ad00:	60a5      	str	r5, [r4, #8]
 800ad02:	463e      	mov	r6, r7
 800ad04:	42be      	cmp	r6, r7
 800ad06:	d900      	bls.n	800ad0a <__ssputs_r+0x86>
 800ad08:	463e      	mov	r6, r7
 800ad0a:	6820      	ldr	r0, [r4, #0]
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4641      	mov	r1, r8
 800ad10:	f000 faa8 	bl	800b264 <memmove>
 800ad14:	68a3      	ldr	r3, [r4, #8]
 800ad16:	1b9b      	subs	r3, r3, r6
 800ad18:	60a3      	str	r3, [r4, #8]
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	4433      	add	r3, r6
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	2000      	movs	r0, #0
 800ad22:	e7db      	b.n	800acdc <__ssputs_r+0x58>
 800ad24:	462a      	mov	r2, r5
 800ad26:	f000 fb97 	bl	800b458 <_realloc_r>
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1e1      	bne.n	800acf4 <__ssputs_r+0x70>
 800ad30:	6921      	ldr	r1, [r4, #16]
 800ad32:	4650      	mov	r0, sl
 800ad34:	f000 fab0 	bl	800b298 <_free_r>
 800ad38:	e7c7      	b.n	800acca <__ssputs_r+0x46>
	...

0800ad3c <_svfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	4698      	mov	r8, r3
 800ad42:	898b      	ldrh	r3, [r1, #12]
 800ad44:	061b      	lsls	r3, r3, #24
 800ad46:	b09d      	sub	sp, #116	; 0x74
 800ad48:	4607      	mov	r7, r0
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	d50e      	bpl.n	800ad6e <_svfiprintf_r+0x32>
 800ad50:	690b      	ldr	r3, [r1, #16]
 800ad52:	b963      	cbnz	r3, 800ad6e <_svfiprintf_r+0x32>
 800ad54:	2140      	movs	r1, #64	; 0x40
 800ad56:	f000 fb0b 	bl	800b370 <_malloc_r>
 800ad5a:	6028      	str	r0, [r5, #0]
 800ad5c:	6128      	str	r0, [r5, #16]
 800ad5e:	b920      	cbnz	r0, 800ad6a <_svfiprintf_r+0x2e>
 800ad60:	230c      	movs	r3, #12
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	e0d1      	b.n	800af0e <_svfiprintf_r+0x1d2>
 800ad6a:	2340      	movs	r3, #64	; 0x40
 800ad6c:	616b      	str	r3, [r5, #20]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	9309      	str	r3, [sp, #36]	; 0x24
 800ad72:	2320      	movs	r3, #32
 800ad74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad7c:	2330      	movs	r3, #48	; 0x30
 800ad7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af28 <_svfiprintf_r+0x1ec>
 800ad82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad86:	f04f 0901 	mov.w	r9, #1
 800ad8a:	4623      	mov	r3, r4
 800ad8c:	469a      	mov	sl, r3
 800ad8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad92:	b10a      	cbz	r2, 800ad98 <_svfiprintf_r+0x5c>
 800ad94:	2a25      	cmp	r2, #37	; 0x25
 800ad96:	d1f9      	bne.n	800ad8c <_svfiprintf_r+0x50>
 800ad98:	ebba 0b04 	subs.w	fp, sl, r4
 800ad9c:	d00b      	beq.n	800adb6 <_svfiprintf_r+0x7a>
 800ad9e:	465b      	mov	r3, fp
 800ada0:	4622      	mov	r2, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff ff6d 	bl	800ac84 <__ssputs_r>
 800adaa:	3001      	adds	r0, #1
 800adac:	f000 80aa 	beq.w	800af04 <_svfiprintf_r+0x1c8>
 800adb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb2:	445a      	add	r2, fp
 800adb4:	9209      	str	r2, [sp, #36]	; 0x24
 800adb6:	f89a 3000 	ldrb.w	r3, [sl]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 80a2 	beq.w	800af04 <_svfiprintf_r+0x1c8>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f04f 32ff 	mov.w	r2, #4294967295
 800adc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adca:	f10a 0a01 	add.w	sl, sl, #1
 800adce:	9304      	str	r3, [sp, #16]
 800add0:	9307      	str	r3, [sp, #28]
 800add2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800add6:	931a      	str	r3, [sp, #104]	; 0x68
 800add8:	4654      	mov	r4, sl
 800adda:	2205      	movs	r2, #5
 800addc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade0:	4851      	ldr	r0, [pc, #324]	; (800af28 <_svfiprintf_r+0x1ec>)
 800ade2:	f7f5 fa05 	bl	80001f0 <memchr>
 800ade6:	9a04      	ldr	r2, [sp, #16]
 800ade8:	b9d8      	cbnz	r0, 800ae22 <_svfiprintf_r+0xe6>
 800adea:	06d0      	lsls	r0, r2, #27
 800adec:	bf44      	itt	mi
 800adee:	2320      	movmi	r3, #32
 800adf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf4:	0711      	lsls	r1, r2, #28
 800adf6:	bf44      	itt	mi
 800adf8:	232b      	movmi	r3, #43	; 0x2b
 800adfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ae02:	2b2a      	cmp	r3, #42	; 0x2a
 800ae04:	d015      	beq.n	800ae32 <_svfiprintf_r+0xf6>
 800ae06:	9a07      	ldr	r2, [sp, #28]
 800ae08:	4654      	mov	r4, sl
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	f04f 0c0a 	mov.w	ip, #10
 800ae10:	4621      	mov	r1, r4
 800ae12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae16:	3b30      	subs	r3, #48	; 0x30
 800ae18:	2b09      	cmp	r3, #9
 800ae1a:	d94e      	bls.n	800aeba <_svfiprintf_r+0x17e>
 800ae1c:	b1b0      	cbz	r0, 800ae4c <_svfiprintf_r+0x110>
 800ae1e:	9207      	str	r2, [sp, #28]
 800ae20:	e014      	b.n	800ae4c <_svfiprintf_r+0x110>
 800ae22:	eba0 0308 	sub.w	r3, r0, r8
 800ae26:	fa09 f303 	lsl.w	r3, r9, r3
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	9304      	str	r3, [sp, #16]
 800ae2e:	46a2      	mov	sl, r4
 800ae30:	e7d2      	b.n	800add8 <_svfiprintf_r+0x9c>
 800ae32:	9b03      	ldr	r3, [sp, #12]
 800ae34:	1d19      	adds	r1, r3, #4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	9103      	str	r1, [sp, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	bfbb      	ittet	lt
 800ae3e:	425b      	neglt	r3, r3
 800ae40:	f042 0202 	orrlt.w	r2, r2, #2
 800ae44:	9307      	strge	r3, [sp, #28]
 800ae46:	9307      	strlt	r3, [sp, #28]
 800ae48:	bfb8      	it	lt
 800ae4a:	9204      	strlt	r2, [sp, #16]
 800ae4c:	7823      	ldrb	r3, [r4, #0]
 800ae4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae50:	d10c      	bne.n	800ae6c <_svfiprintf_r+0x130>
 800ae52:	7863      	ldrb	r3, [r4, #1]
 800ae54:	2b2a      	cmp	r3, #42	; 0x2a
 800ae56:	d135      	bne.n	800aec4 <_svfiprintf_r+0x188>
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	1d1a      	adds	r2, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	9203      	str	r2, [sp, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfb8      	it	lt
 800ae64:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae68:	3402      	adds	r4, #2
 800ae6a:	9305      	str	r3, [sp, #20]
 800ae6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af38 <_svfiprintf_r+0x1fc>
 800ae70:	7821      	ldrb	r1, [r4, #0]
 800ae72:	2203      	movs	r2, #3
 800ae74:	4650      	mov	r0, sl
 800ae76:	f7f5 f9bb 	bl	80001f0 <memchr>
 800ae7a:	b140      	cbz	r0, 800ae8e <_svfiprintf_r+0x152>
 800ae7c:	2340      	movs	r3, #64	; 0x40
 800ae7e:	eba0 000a 	sub.w	r0, r0, sl
 800ae82:	fa03 f000 	lsl.w	r0, r3, r0
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	4303      	orrs	r3, r0
 800ae8a:	3401      	adds	r4, #1
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae92:	4826      	ldr	r0, [pc, #152]	; (800af2c <_svfiprintf_r+0x1f0>)
 800ae94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae98:	2206      	movs	r2, #6
 800ae9a:	f7f5 f9a9 	bl	80001f0 <memchr>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d038      	beq.n	800af14 <_svfiprintf_r+0x1d8>
 800aea2:	4b23      	ldr	r3, [pc, #140]	; (800af30 <_svfiprintf_r+0x1f4>)
 800aea4:	bb1b      	cbnz	r3, 800aeee <_svfiprintf_r+0x1b2>
 800aea6:	9b03      	ldr	r3, [sp, #12]
 800aea8:	3307      	adds	r3, #7
 800aeaa:	f023 0307 	bic.w	r3, r3, #7
 800aeae:	3308      	adds	r3, #8
 800aeb0:	9303      	str	r3, [sp, #12]
 800aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb4:	4433      	add	r3, r6
 800aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb8:	e767      	b.n	800ad8a <_svfiprintf_r+0x4e>
 800aeba:	fb0c 3202 	mla	r2, ip, r2, r3
 800aebe:	460c      	mov	r4, r1
 800aec0:	2001      	movs	r0, #1
 800aec2:	e7a5      	b.n	800ae10 <_svfiprintf_r+0xd4>
 800aec4:	2300      	movs	r3, #0
 800aec6:	3401      	adds	r4, #1
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	4619      	mov	r1, r3
 800aecc:	f04f 0c0a 	mov.w	ip, #10
 800aed0:	4620      	mov	r0, r4
 800aed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aed6:	3a30      	subs	r2, #48	; 0x30
 800aed8:	2a09      	cmp	r2, #9
 800aeda:	d903      	bls.n	800aee4 <_svfiprintf_r+0x1a8>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0c5      	beq.n	800ae6c <_svfiprintf_r+0x130>
 800aee0:	9105      	str	r1, [sp, #20]
 800aee2:	e7c3      	b.n	800ae6c <_svfiprintf_r+0x130>
 800aee4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aee8:	4604      	mov	r4, r0
 800aeea:	2301      	movs	r3, #1
 800aeec:	e7f0      	b.n	800aed0 <_svfiprintf_r+0x194>
 800aeee:	ab03      	add	r3, sp, #12
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	462a      	mov	r2, r5
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <_svfiprintf_r+0x1f8>)
 800aef6:	a904      	add	r1, sp, #16
 800aef8:	4638      	mov	r0, r7
 800aefa:	f3af 8000 	nop.w
 800aefe:	1c42      	adds	r2, r0, #1
 800af00:	4606      	mov	r6, r0
 800af02:	d1d6      	bne.n	800aeb2 <_svfiprintf_r+0x176>
 800af04:	89ab      	ldrh	r3, [r5, #12]
 800af06:	065b      	lsls	r3, r3, #25
 800af08:	f53f af2c 	bmi.w	800ad64 <_svfiprintf_r+0x28>
 800af0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af0e:	b01d      	add	sp, #116	; 0x74
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	ab03      	add	r3, sp, #12
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	462a      	mov	r2, r5
 800af1a:	4b06      	ldr	r3, [pc, #24]	; (800af34 <_svfiprintf_r+0x1f8>)
 800af1c:	a904      	add	r1, sp, #16
 800af1e:	4638      	mov	r0, r7
 800af20:	f000 f87a 	bl	800b018 <_printf_i>
 800af24:	e7eb      	b.n	800aefe <_svfiprintf_r+0x1c2>
 800af26:	bf00      	nop
 800af28:	0800b685 	.word	0x0800b685
 800af2c:	0800b68f 	.word	0x0800b68f
 800af30:	00000000 	.word	0x00000000
 800af34:	0800ac85 	.word	0x0800ac85
 800af38:	0800b68b 	.word	0x0800b68b

0800af3c <_printf_common>:
 800af3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af40:	4616      	mov	r6, r2
 800af42:	4699      	mov	r9, r3
 800af44:	688a      	ldr	r2, [r1, #8]
 800af46:	690b      	ldr	r3, [r1, #16]
 800af48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af4c:	4293      	cmp	r3, r2
 800af4e:	bfb8      	it	lt
 800af50:	4613      	movlt	r3, r2
 800af52:	6033      	str	r3, [r6, #0]
 800af54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af58:	4607      	mov	r7, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	b10a      	cbz	r2, 800af62 <_printf_common+0x26>
 800af5e:	3301      	adds	r3, #1
 800af60:	6033      	str	r3, [r6, #0]
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	0699      	lsls	r1, r3, #26
 800af66:	bf42      	ittt	mi
 800af68:	6833      	ldrmi	r3, [r6, #0]
 800af6a:	3302      	addmi	r3, #2
 800af6c:	6033      	strmi	r3, [r6, #0]
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	f015 0506 	ands.w	r5, r5, #6
 800af74:	d106      	bne.n	800af84 <_printf_common+0x48>
 800af76:	f104 0a19 	add.w	sl, r4, #25
 800af7a:	68e3      	ldr	r3, [r4, #12]
 800af7c:	6832      	ldr	r2, [r6, #0]
 800af7e:	1a9b      	subs	r3, r3, r2
 800af80:	42ab      	cmp	r3, r5
 800af82:	dc26      	bgt.n	800afd2 <_printf_common+0x96>
 800af84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af88:	1e13      	subs	r3, r2, #0
 800af8a:	6822      	ldr	r2, [r4, #0]
 800af8c:	bf18      	it	ne
 800af8e:	2301      	movne	r3, #1
 800af90:	0692      	lsls	r2, r2, #26
 800af92:	d42b      	bmi.n	800afec <_printf_common+0xb0>
 800af94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af98:	4649      	mov	r1, r9
 800af9a:	4638      	mov	r0, r7
 800af9c:	47c0      	blx	r8
 800af9e:	3001      	adds	r0, #1
 800afa0:	d01e      	beq.n	800afe0 <_printf_common+0xa4>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	68e5      	ldr	r5, [r4, #12]
 800afa6:	6832      	ldr	r2, [r6, #0]
 800afa8:	f003 0306 	and.w	r3, r3, #6
 800afac:	2b04      	cmp	r3, #4
 800afae:	bf08      	it	eq
 800afb0:	1aad      	subeq	r5, r5, r2
 800afb2:	68a3      	ldr	r3, [r4, #8]
 800afb4:	6922      	ldr	r2, [r4, #16]
 800afb6:	bf0c      	ite	eq
 800afb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afbc:	2500      	movne	r5, #0
 800afbe:	4293      	cmp	r3, r2
 800afc0:	bfc4      	itt	gt
 800afc2:	1a9b      	subgt	r3, r3, r2
 800afc4:	18ed      	addgt	r5, r5, r3
 800afc6:	2600      	movs	r6, #0
 800afc8:	341a      	adds	r4, #26
 800afca:	42b5      	cmp	r5, r6
 800afcc:	d11a      	bne.n	800b004 <_printf_common+0xc8>
 800afce:	2000      	movs	r0, #0
 800afd0:	e008      	b.n	800afe4 <_printf_common+0xa8>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4652      	mov	r2, sl
 800afd6:	4649      	mov	r1, r9
 800afd8:	4638      	mov	r0, r7
 800afda:	47c0      	blx	r8
 800afdc:	3001      	adds	r0, #1
 800afde:	d103      	bne.n	800afe8 <_printf_common+0xac>
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295
 800afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe8:	3501      	adds	r5, #1
 800afea:	e7c6      	b.n	800af7a <_printf_common+0x3e>
 800afec:	18e1      	adds	r1, r4, r3
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	2030      	movs	r0, #48	; 0x30
 800aff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aff6:	4422      	add	r2, r4
 800aff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800affc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b000:	3302      	adds	r3, #2
 800b002:	e7c7      	b.n	800af94 <_printf_common+0x58>
 800b004:	2301      	movs	r3, #1
 800b006:	4622      	mov	r2, r4
 800b008:	4649      	mov	r1, r9
 800b00a:	4638      	mov	r0, r7
 800b00c:	47c0      	blx	r8
 800b00e:	3001      	adds	r0, #1
 800b010:	d0e6      	beq.n	800afe0 <_printf_common+0xa4>
 800b012:	3601      	adds	r6, #1
 800b014:	e7d9      	b.n	800afca <_printf_common+0x8e>
	...

0800b018 <_printf_i>:
 800b018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	7e0f      	ldrb	r7, [r1, #24]
 800b01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b020:	2f78      	cmp	r7, #120	; 0x78
 800b022:	4691      	mov	r9, r2
 800b024:	4680      	mov	r8, r0
 800b026:	460c      	mov	r4, r1
 800b028:	469a      	mov	sl, r3
 800b02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b02e:	d807      	bhi.n	800b040 <_printf_i+0x28>
 800b030:	2f62      	cmp	r7, #98	; 0x62
 800b032:	d80a      	bhi.n	800b04a <_printf_i+0x32>
 800b034:	2f00      	cmp	r7, #0
 800b036:	f000 80d8 	beq.w	800b1ea <_printf_i+0x1d2>
 800b03a:	2f58      	cmp	r7, #88	; 0x58
 800b03c:	f000 80a3 	beq.w	800b186 <_printf_i+0x16e>
 800b040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b048:	e03a      	b.n	800b0c0 <_printf_i+0xa8>
 800b04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b04e:	2b15      	cmp	r3, #21
 800b050:	d8f6      	bhi.n	800b040 <_printf_i+0x28>
 800b052:	a101      	add	r1, pc, #4	; (adr r1, 800b058 <_printf_i+0x40>)
 800b054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b058:	0800b0b1 	.word	0x0800b0b1
 800b05c:	0800b0c5 	.word	0x0800b0c5
 800b060:	0800b041 	.word	0x0800b041
 800b064:	0800b041 	.word	0x0800b041
 800b068:	0800b041 	.word	0x0800b041
 800b06c:	0800b041 	.word	0x0800b041
 800b070:	0800b0c5 	.word	0x0800b0c5
 800b074:	0800b041 	.word	0x0800b041
 800b078:	0800b041 	.word	0x0800b041
 800b07c:	0800b041 	.word	0x0800b041
 800b080:	0800b041 	.word	0x0800b041
 800b084:	0800b1d1 	.word	0x0800b1d1
 800b088:	0800b0f5 	.word	0x0800b0f5
 800b08c:	0800b1b3 	.word	0x0800b1b3
 800b090:	0800b041 	.word	0x0800b041
 800b094:	0800b041 	.word	0x0800b041
 800b098:	0800b1f3 	.word	0x0800b1f3
 800b09c:	0800b041 	.word	0x0800b041
 800b0a0:	0800b0f5 	.word	0x0800b0f5
 800b0a4:	0800b041 	.word	0x0800b041
 800b0a8:	0800b041 	.word	0x0800b041
 800b0ac:	0800b1bb 	.word	0x0800b1bb
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	1d1a      	adds	r2, r3, #4
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	602a      	str	r2, [r5, #0]
 800b0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0a3      	b.n	800b20c <_printf_i+0x1f4>
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	6829      	ldr	r1, [r5, #0]
 800b0c8:	0606      	lsls	r6, r0, #24
 800b0ca:	f101 0304 	add.w	r3, r1, #4
 800b0ce:	d50a      	bpl.n	800b0e6 <_printf_i+0xce>
 800b0d0:	680e      	ldr	r6, [r1, #0]
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	2e00      	cmp	r6, #0
 800b0d6:	da03      	bge.n	800b0e0 <_printf_i+0xc8>
 800b0d8:	232d      	movs	r3, #45	; 0x2d
 800b0da:	4276      	negs	r6, r6
 800b0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e0:	485e      	ldr	r0, [pc, #376]	; (800b25c <_printf_i+0x244>)
 800b0e2:	230a      	movs	r3, #10
 800b0e4:	e019      	b.n	800b11a <_printf_i+0x102>
 800b0e6:	680e      	ldr	r6, [r1, #0]
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0ee:	bf18      	it	ne
 800b0f0:	b236      	sxthne	r6, r6
 800b0f2:	e7ef      	b.n	800b0d4 <_printf_i+0xbc>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	6820      	ldr	r0, [r4, #0]
 800b0f8:	1d19      	adds	r1, r3, #4
 800b0fa:	6029      	str	r1, [r5, #0]
 800b0fc:	0601      	lsls	r1, r0, #24
 800b0fe:	d501      	bpl.n	800b104 <_printf_i+0xec>
 800b100:	681e      	ldr	r6, [r3, #0]
 800b102:	e002      	b.n	800b10a <_printf_i+0xf2>
 800b104:	0646      	lsls	r6, r0, #25
 800b106:	d5fb      	bpl.n	800b100 <_printf_i+0xe8>
 800b108:	881e      	ldrh	r6, [r3, #0]
 800b10a:	4854      	ldr	r0, [pc, #336]	; (800b25c <_printf_i+0x244>)
 800b10c:	2f6f      	cmp	r7, #111	; 0x6f
 800b10e:	bf0c      	ite	eq
 800b110:	2308      	moveq	r3, #8
 800b112:	230a      	movne	r3, #10
 800b114:	2100      	movs	r1, #0
 800b116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b11a:	6865      	ldr	r5, [r4, #4]
 800b11c:	60a5      	str	r5, [r4, #8]
 800b11e:	2d00      	cmp	r5, #0
 800b120:	bfa2      	ittt	ge
 800b122:	6821      	ldrge	r1, [r4, #0]
 800b124:	f021 0104 	bicge.w	r1, r1, #4
 800b128:	6021      	strge	r1, [r4, #0]
 800b12a:	b90e      	cbnz	r6, 800b130 <_printf_i+0x118>
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	d04d      	beq.n	800b1cc <_printf_i+0x1b4>
 800b130:	4615      	mov	r5, r2
 800b132:	fbb6 f1f3 	udiv	r1, r6, r3
 800b136:	fb03 6711 	mls	r7, r3, r1, r6
 800b13a:	5dc7      	ldrb	r7, [r0, r7]
 800b13c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b140:	4637      	mov	r7, r6
 800b142:	42bb      	cmp	r3, r7
 800b144:	460e      	mov	r6, r1
 800b146:	d9f4      	bls.n	800b132 <_printf_i+0x11a>
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d10b      	bne.n	800b164 <_printf_i+0x14c>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	07de      	lsls	r6, r3, #31
 800b150:	d508      	bpl.n	800b164 <_printf_i+0x14c>
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	6861      	ldr	r1, [r4, #4]
 800b156:	4299      	cmp	r1, r3
 800b158:	bfde      	ittt	le
 800b15a:	2330      	movle	r3, #48	; 0x30
 800b15c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b160:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b164:	1b52      	subs	r2, r2, r5
 800b166:	6122      	str	r2, [r4, #16]
 800b168:	f8cd a000 	str.w	sl, [sp]
 800b16c:	464b      	mov	r3, r9
 800b16e:	aa03      	add	r2, sp, #12
 800b170:	4621      	mov	r1, r4
 800b172:	4640      	mov	r0, r8
 800b174:	f7ff fee2 	bl	800af3c <_printf_common>
 800b178:	3001      	adds	r0, #1
 800b17a:	d14c      	bne.n	800b216 <_printf_i+0x1fe>
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	b004      	add	sp, #16
 800b182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b186:	4835      	ldr	r0, [pc, #212]	; (800b25c <_printf_i+0x244>)
 800b188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b18c:	6829      	ldr	r1, [r5, #0]
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	f851 6b04 	ldr.w	r6, [r1], #4
 800b194:	6029      	str	r1, [r5, #0]
 800b196:	061d      	lsls	r5, r3, #24
 800b198:	d514      	bpl.n	800b1c4 <_printf_i+0x1ac>
 800b19a:	07df      	lsls	r7, r3, #31
 800b19c:	bf44      	itt	mi
 800b19e:	f043 0320 	orrmi.w	r3, r3, #32
 800b1a2:	6023      	strmi	r3, [r4, #0]
 800b1a4:	b91e      	cbnz	r6, 800b1ae <_printf_i+0x196>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	f023 0320 	bic.w	r3, r3, #32
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	2310      	movs	r3, #16
 800b1b0:	e7b0      	b.n	800b114 <_printf_i+0xfc>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	f043 0320 	orr.w	r3, r3, #32
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	2378      	movs	r3, #120	; 0x78
 800b1bc:	4828      	ldr	r0, [pc, #160]	; (800b260 <_printf_i+0x248>)
 800b1be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1c2:	e7e3      	b.n	800b18c <_printf_i+0x174>
 800b1c4:	0659      	lsls	r1, r3, #25
 800b1c6:	bf48      	it	mi
 800b1c8:	b2b6      	uxthmi	r6, r6
 800b1ca:	e7e6      	b.n	800b19a <_printf_i+0x182>
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	e7bb      	b.n	800b148 <_printf_i+0x130>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	6826      	ldr	r6, [r4, #0]
 800b1d4:	6961      	ldr	r1, [r4, #20]
 800b1d6:	1d18      	adds	r0, r3, #4
 800b1d8:	6028      	str	r0, [r5, #0]
 800b1da:	0635      	lsls	r5, r6, #24
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0x1cc>
 800b1e0:	6019      	str	r1, [r3, #0]
 800b1e2:	e002      	b.n	800b1ea <_printf_i+0x1d2>
 800b1e4:	0670      	lsls	r0, r6, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0x1c8>
 800b1e8:	8019      	strh	r1, [r3, #0]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	4615      	mov	r5, r2
 800b1f0:	e7ba      	b.n	800b168 <_printf_i+0x150>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	681d      	ldr	r5, [r3, #0]
 800b1fa:	6862      	ldr	r2, [r4, #4]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7f4 fff6 	bl	80001f0 <memchr>
 800b204:	b108      	cbz	r0, 800b20a <_printf_i+0x1f2>
 800b206:	1b40      	subs	r0, r0, r5
 800b208:	6060      	str	r0, [r4, #4]
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	2300      	movs	r3, #0
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b214:	e7a8      	b.n	800b168 <_printf_i+0x150>
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	462a      	mov	r2, r5
 800b21a:	4649      	mov	r1, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	47d0      	blx	sl
 800b220:	3001      	adds	r0, #1
 800b222:	d0ab      	beq.n	800b17c <_printf_i+0x164>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	079b      	lsls	r3, r3, #30
 800b228:	d413      	bmi.n	800b252 <_printf_i+0x23a>
 800b22a:	68e0      	ldr	r0, [r4, #12]
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	4298      	cmp	r0, r3
 800b230:	bfb8      	it	lt
 800b232:	4618      	movlt	r0, r3
 800b234:	e7a4      	b.n	800b180 <_printf_i+0x168>
 800b236:	2301      	movs	r3, #1
 800b238:	4632      	mov	r2, r6
 800b23a:	4649      	mov	r1, r9
 800b23c:	4640      	mov	r0, r8
 800b23e:	47d0      	blx	sl
 800b240:	3001      	adds	r0, #1
 800b242:	d09b      	beq.n	800b17c <_printf_i+0x164>
 800b244:	3501      	adds	r5, #1
 800b246:	68e3      	ldr	r3, [r4, #12]
 800b248:	9903      	ldr	r1, [sp, #12]
 800b24a:	1a5b      	subs	r3, r3, r1
 800b24c:	42ab      	cmp	r3, r5
 800b24e:	dcf2      	bgt.n	800b236 <_printf_i+0x21e>
 800b250:	e7eb      	b.n	800b22a <_printf_i+0x212>
 800b252:	2500      	movs	r5, #0
 800b254:	f104 0619 	add.w	r6, r4, #25
 800b258:	e7f5      	b.n	800b246 <_printf_i+0x22e>
 800b25a:	bf00      	nop
 800b25c:	0800b696 	.word	0x0800b696
 800b260:	0800b6a7 	.word	0x0800b6a7

0800b264 <memmove>:
 800b264:	4288      	cmp	r0, r1
 800b266:	b510      	push	{r4, lr}
 800b268:	eb01 0402 	add.w	r4, r1, r2
 800b26c:	d902      	bls.n	800b274 <memmove+0x10>
 800b26e:	4284      	cmp	r4, r0
 800b270:	4623      	mov	r3, r4
 800b272:	d807      	bhi.n	800b284 <memmove+0x20>
 800b274:	1e43      	subs	r3, r0, #1
 800b276:	42a1      	cmp	r1, r4
 800b278:	d008      	beq.n	800b28c <memmove+0x28>
 800b27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b282:	e7f8      	b.n	800b276 <memmove+0x12>
 800b284:	4402      	add	r2, r0
 800b286:	4601      	mov	r1, r0
 800b288:	428a      	cmp	r2, r1
 800b28a:	d100      	bne.n	800b28e <memmove+0x2a>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b296:	e7f7      	b.n	800b288 <memmove+0x24>

0800b298 <_free_r>:
 800b298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b29a:	2900      	cmp	r1, #0
 800b29c:	d044      	beq.n	800b328 <_free_r+0x90>
 800b29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a2:	9001      	str	r0, [sp, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2aa:	bfb8      	it	lt
 800b2ac:	18e4      	addlt	r4, r4, r3
 800b2ae:	f000 f913 	bl	800b4d8 <__malloc_lock>
 800b2b2:	4a1e      	ldr	r2, [pc, #120]	; (800b32c <_free_r+0x94>)
 800b2b4:	9801      	ldr	r0, [sp, #4]
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	b933      	cbnz	r3, 800b2c8 <_free_r+0x30>
 800b2ba:	6063      	str	r3, [r4, #4]
 800b2bc:	6014      	str	r4, [r2, #0]
 800b2be:	b003      	add	sp, #12
 800b2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2c4:	f000 b90e 	b.w	800b4e4 <__malloc_unlock>
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d908      	bls.n	800b2de <_free_r+0x46>
 800b2cc:	6825      	ldr	r5, [r4, #0]
 800b2ce:	1961      	adds	r1, r4, r5
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	bf01      	itttt	eq
 800b2d4:	6819      	ldreq	r1, [r3, #0]
 800b2d6:	685b      	ldreq	r3, [r3, #4]
 800b2d8:	1949      	addeq	r1, r1, r5
 800b2da:	6021      	streq	r1, [r4, #0]
 800b2dc:	e7ed      	b.n	800b2ba <_free_r+0x22>
 800b2de:	461a      	mov	r2, r3
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	b10b      	cbz	r3, 800b2e8 <_free_r+0x50>
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	d9fa      	bls.n	800b2de <_free_r+0x46>
 800b2e8:	6811      	ldr	r1, [r2, #0]
 800b2ea:	1855      	adds	r5, r2, r1
 800b2ec:	42a5      	cmp	r5, r4
 800b2ee:	d10b      	bne.n	800b308 <_free_r+0x70>
 800b2f0:	6824      	ldr	r4, [r4, #0]
 800b2f2:	4421      	add	r1, r4
 800b2f4:	1854      	adds	r4, r2, r1
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	6011      	str	r1, [r2, #0]
 800b2fa:	d1e0      	bne.n	800b2be <_free_r+0x26>
 800b2fc:	681c      	ldr	r4, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	6053      	str	r3, [r2, #4]
 800b302:	4421      	add	r1, r4
 800b304:	6011      	str	r1, [r2, #0]
 800b306:	e7da      	b.n	800b2be <_free_r+0x26>
 800b308:	d902      	bls.n	800b310 <_free_r+0x78>
 800b30a:	230c      	movs	r3, #12
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	e7d6      	b.n	800b2be <_free_r+0x26>
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1961      	adds	r1, r4, r5
 800b314:	428b      	cmp	r3, r1
 800b316:	bf04      	itt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	6063      	str	r3, [r4, #4]
 800b31e:	bf04      	itt	eq
 800b320:	1949      	addeq	r1, r1, r5
 800b322:	6021      	streq	r1, [r4, #0]
 800b324:	6054      	str	r4, [r2, #4]
 800b326:	e7ca      	b.n	800b2be <_free_r+0x26>
 800b328:	b003      	add	sp, #12
 800b32a:	bd30      	pop	{r4, r5, pc}
 800b32c:	200004fc 	.word	0x200004fc

0800b330 <sbrk_aligned>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4e0e      	ldr	r6, [pc, #56]	; (800b36c <sbrk_aligned+0x3c>)
 800b334:	460c      	mov	r4, r1
 800b336:	6831      	ldr	r1, [r6, #0]
 800b338:	4605      	mov	r5, r0
 800b33a:	b911      	cbnz	r1, 800b342 <sbrk_aligned+0x12>
 800b33c:	f000 f8bc 	bl	800b4b8 <_sbrk_r>
 800b340:	6030      	str	r0, [r6, #0]
 800b342:	4621      	mov	r1, r4
 800b344:	4628      	mov	r0, r5
 800b346:	f000 f8b7 	bl	800b4b8 <_sbrk_r>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	d00a      	beq.n	800b364 <sbrk_aligned+0x34>
 800b34e:	1cc4      	adds	r4, r0, #3
 800b350:	f024 0403 	bic.w	r4, r4, #3
 800b354:	42a0      	cmp	r0, r4
 800b356:	d007      	beq.n	800b368 <sbrk_aligned+0x38>
 800b358:	1a21      	subs	r1, r4, r0
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 f8ac 	bl	800b4b8 <_sbrk_r>
 800b360:	3001      	adds	r0, #1
 800b362:	d101      	bne.n	800b368 <sbrk_aligned+0x38>
 800b364:	f04f 34ff 	mov.w	r4, #4294967295
 800b368:	4620      	mov	r0, r4
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	20000500 	.word	0x20000500

0800b370 <_malloc_r>:
 800b370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b374:	1ccd      	adds	r5, r1, #3
 800b376:	f025 0503 	bic.w	r5, r5, #3
 800b37a:	3508      	adds	r5, #8
 800b37c:	2d0c      	cmp	r5, #12
 800b37e:	bf38      	it	cc
 800b380:	250c      	movcc	r5, #12
 800b382:	2d00      	cmp	r5, #0
 800b384:	4607      	mov	r7, r0
 800b386:	db01      	blt.n	800b38c <_malloc_r+0x1c>
 800b388:	42a9      	cmp	r1, r5
 800b38a:	d905      	bls.n	800b398 <_malloc_r+0x28>
 800b38c:	230c      	movs	r3, #12
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	2600      	movs	r6, #0
 800b392:	4630      	mov	r0, r6
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	4e2e      	ldr	r6, [pc, #184]	; (800b454 <_malloc_r+0xe4>)
 800b39a:	f000 f89d 	bl	800b4d8 <__malloc_lock>
 800b39e:	6833      	ldr	r3, [r6, #0]
 800b3a0:	461c      	mov	r4, r3
 800b3a2:	bb34      	cbnz	r4, 800b3f2 <_malloc_r+0x82>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f7ff ffc2 	bl	800b330 <sbrk_aligned>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	d14d      	bne.n	800b44e <_malloc_r+0xde>
 800b3b2:	6834      	ldr	r4, [r6, #0]
 800b3b4:	4626      	mov	r6, r4
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	d140      	bne.n	800b43c <_malloc_r+0xcc>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4638      	mov	r0, r7
 800b3c0:	eb04 0803 	add.w	r8, r4, r3
 800b3c4:	f000 f878 	bl	800b4b8 <_sbrk_r>
 800b3c8:	4580      	cmp	r8, r0
 800b3ca:	d13a      	bne.n	800b442 <_malloc_r+0xd2>
 800b3cc:	6821      	ldr	r1, [r4, #0]
 800b3ce:	3503      	adds	r5, #3
 800b3d0:	1a6d      	subs	r5, r5, r1
 800b3d2:	f025 0503 	bic.w	r5, r5, #3
 800b3d6:	3508      	adds	r5, #8
 800b3d8:	2d0c      	cmp	r5, #12
 800b3da:	bf38      	it	cc
 800b3dc:	250c      	movcc	r5, #12
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7ff ffa5 	bl	800b330 <sbrk_aligned>
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	d02b      	beq.n	800b442 <_malloc_r+0xd2>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	442b      	add	r3, r5
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	e00e      	b.n	800b410 <_malloc_r+0xa0>
 800b3f2:	6822      	ldr	r2, [r4, #0]
 800b3f4:	1b52      	subs	r2, r2, r5
 800b3f6:	d41e      	bmi.n	800b436 <_malloc_r+0xc6>
 800b3f8:	2a0b      	cmp	r2, #11
 800b3fa:	d916      	bls.n	800b42a <_malloc_r+0xba>
 800b3fc:	1961      	adds	r1, r4, r5
 800b3fe:	42a3      	cmp	r3, r4
 800b400:	6025      	str	r5, [r4, #0]
 800b402:	bf18      	it	ne
 800b404:	6059      	strne	r1, [r3, #4]
 800b406:	6863      	ldr	r3, [r4, #4]
 800b408:	bf08      	it	eq
 800b40a:	6031      	streq	r1, [r6, #0]
 800b40c:	5162      	str	r2, [r4, r5]
 800b40e:	604b      	str	r3, [r1, #4]
 800b410:	4638      	mov	r0, r7
 800b412:	f104 060b 	add.w	r6, r4, #11
 800b416:	f000 f865 	bl	800b4e4 <__malloc_unlock>
 800b41a:	f026 0607 	bic.w	r6, r6, #7
 800b41e:	1d23      	adds	r3, r4, #4
 800b420:	1af2      	subs	r2, r6, r3
 800b422:	d0b6      	beq.n	800b392 <_malloc_r+0x22>
 800b424:	1b9b      	subs	r3, r3, r6
 800b426:	50a3      	str	r3, [r4, r2]
 800b428:	e7b3      	b.n	800b392 <_malloc_r+0x22>
 800b42a:	6862      	ldr	r2, [r4, #4]
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	bf0c      	ite	eq
 800b430:	6032      	streq	r2, [r6, #0]
 800b432:	605a      	strne	r2, [r3, #4]
 800b434:	e7ec      	b.n	800b410 <_malloc_r+0xa0>
 800b436:	4623      	mov	r3, r4
 800b438:	6864      	ldr	r4, [r4, #4]
 800b43a:	e7b2      	b.n	800b3a2 <_malloc_r+0x32>
 800b43c:	4634      	mov	r4, r6
 800b43e:	6876      	ldr	r6, [r6, #4]
 800b440:	e7b9      	b.n	800b3b6 <_malloc_r+0x46>
 800b442:	230c      	movs	r3, #12
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	4638      	mov	r0, r7
 800b448:	f000 f84c 	bl	800b4e4 <__malloc_unlock>
 800b44c:	e7a1      	b.n	800b392 <_malloc_r+0x22>
 800b44e:	6025      	str	r5, [r4, #0]
 800b450:	e7de      	b.n	800b410 <_malloc_r+0xa0>
 800b452:	bf00      	nop
 800b454:	200004fc 	.word	0x200004fc

0800b458 <_realloc_r>:
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45c:	4680      	mov	r8, r0
 800b45e:	4614      	mov	r4, r2
 800b460:	460e      	mov	r6, r1
 800b462:	b921      	cbnz	r1, 800b46e <_realloc_r+0x16>
 800b464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	4611      	mov	r1, r2
 800b46a:	f7ff bf81 	b.w	800b370 <_malloc_r>
 800b46e:	b92a      	cbnz	r2, 800b47c <_realloc_r+0x24>
 800b470:	f7ff ff12 	bl	800b298 <_free_r>
 800b474:	4625      	mov	r5, r4
 800b476:	4628      	mov	r0, r5
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	f000 f838 	bl	800b4f0 <_malloc_usable_size_r>
 800b480:	4284      	cmp	r4, r0
 800b482:	4607      	mov	r7, r0
 800b484:	d802      	bhi.n	800b48c <_realloc_r+0x34>
 800b486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b48a:	d812      	bhi.n	800b4b2 <_realloc_r+0x5a>
 800b48c:	4621      	mov	r1, r4
 800b48e:	4640      	mov	r0, r8
 800b490:	f7ff ff6e 	bl	800b370 <_malloc_r>
 800b494:	4605      	mov	r5, r0
 800b496:	2800      	cmp	r0, #0
 800b498:	d0ed      	beq.n	800b476 <_realloc_r+0x1e>
 800b49a:	42bc      	cmp	r4, r7
 800b49c:	4622      	mov	r2, r4
 800b49e:	4631      	mov	r1, r6
 800b4a0:	bf28      	it	cs
 800b4a2:	463a      	movcs	r2, r7
 800b4a4:	f7ff fb24 	bl	800aaf0 <memcpy>
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	f7ff fef4 	bl	800b298 <_free_r>
 800b4b0:	e7e1      	b.n	800b476 <_realloc_r+0x1e>
 800b4b2:	4635      	mov	r5, r6
 800b4b4:	e7df      	b.n	800b476 <_realloc_r+0x1e>
	...

0800b4b8 <_sbrk_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d06      	ldr	r5, [pc, #24]	; (800b4d4 <_sbrk_r+0x1c>)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	f7f9 f920 	bl	8004708 <_sbrk>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_sbrk_r+0x1a>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_sbrk_r+0x1a>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	20000504 	.word	0x20000504

0800b4d8 <__malloc_lock>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	; (800b4e0 <__malloc_lock+0x8>)
 800b4da:	f000 b811 	b.w	800b500 <__retarget_lock_acquire_recursive>
 800b4de:	bf00      	nop
 800b4e0:	20000508 	.word	0x20000508

0800b4e4 <__malloc_unlock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_unlock+0x8>)
 800b4e6:	f000 b80c 	b.w	800b502 <__retarget_lock_release_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20000508 	.word	0x20000508

0800b4f0 <_malloc_usable_size_r>:
 800b4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f4:	1f18      	subs	r0, r3, #4
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	bfbc      	itt	lt
 800b4fa:	580b      	ldrlt	r3, [r1, r0]
 800b4fc:	18c0      	addlt	r0, r0, r3
 800b4fe:	4770      	bx	lr

0800b500 <__retarget_lock_acquire_recursive>:
 800b500:	4770      	bx	lr

0800b502 <__retarget_lock_release_recursive>:
 800b502:	4770      	bx	lr

0800b504 <_init>:
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b506:	bf00      	nop
 800b508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50a:	bc08      	pop	{r3}
 800b50c:	469e      	mov	lr, r3
 800b50e:	4770      	bx	lr

0800b510 <_fini>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	bf00      	nop
 800b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b516:	bc08      	pop	{r3}
 800b518:	469e      	mov	lr, r3
 800b51a:	4770      	bx	lr
