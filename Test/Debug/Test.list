
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb0  08007fb0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb8  08007fb8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000084  08008044  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08008044  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c92  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ceb  00000000  00000000  00035d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00038a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00039d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a842  00000000  00000000  0003afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a690  00000000  00000000  00055802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d9d  00000000  00000000  0006fe92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  00110c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e28 	.word	0x08007e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08007e28 	.word	0x08007e28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[128];
extern uint8_t measurements[3]; //L:M:R


void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2a      	ldr	r4, [pc, #168]	; (8000e30 <TOF_init+0xb0>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f006 fb3f 	bl	8007414 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f851 	bl	8000e40 <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c25      	ldr	r4, [pc, #148]	; (8000e34 <TOF_init+0xb4>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f006 fb33 	bl	8007414 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f845 	bl	8000e40 <writeMM>
	writeMM(hi2c3);
 8000db6:	4c20      	ldr	r4, [pc, #128]	; (8000e38 <TOF_init+0xb8>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f006 fb27 	bl	8007414 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f839 	bl	8000e40 <writeMM>
	//begin continuous ranging
	i2c_buff[0] = 0x01;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <TOF_init+0xbc>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f001 ff83 	bl	8002ce0 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <TOF_init+0xbc>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <TOF_init+0xb4>)
 8000df0:	f002 ff60 	bl	8003cb4 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <TOF_init+0xbc>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <TOF_init+0xb0>)
 8000e0a:	f002 ff53 	bl	8003cb4 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <TOF_init+0xbc>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <TOF_init+0xb8>)
 8000e24:	f002 ff46 	bl	8003cb4 <HAL_I2C_Mem_Write>
}
 8000e28:	bf00      	nop
 8000e2a:	3704      	adds	r7, #4
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	200001fc 	.word	0x200001fc
 8000e34:	20000250 	.word	0x20000250
 8000e38:	200002a4 	.word	0x200002a4
 8000e3c:	200000a0 	.word	0x200000a0

08000e40 <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e40:	b084      	sub	sp, #16
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af04      	add	r7, sp, #16
 8000e48:	f107 0c08 	add.w	ip, r7, #8
 8000e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e50:	4bcb      	ldr	r3, [pc, #812]	; (8001180 <writeMM+0x340>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4bc7      	ldr	r3, [pc, #796]	; (8001180 <writeMM+0x340>)
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2310      	movs	r3, #16
 8000e66:	f240 2207 	movw	r2, #519	; 0x207
 8000e6a:	2152      	movs	r1, #82	; 0x52
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	f002 ff20 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 ff33 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e7a:	4bc1      	ldr	r3, [pc, #772]	; (8001180 <writeMM+0x340>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	4bbd      	ldr	r3, [pc, #756]	; (8001180 <writeMM+0x340>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2310      	movs	r3, #16
 8000e90:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000e94:	2152      	movs	r1, #82	; 0x52
 8000e96:	f107 0008 	add.w	r0, r7, #8
 8000e9a:	f002 ff0b 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f001 ff1e 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000ea4:	4bb6      	ldr	r3, [pc, #728]	; (8001180 <writeMM+0x340>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	4bb2      	ldr	r3, [pc, #712]	; (8001180 <writeMM+0x340>)
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2310      	movs	r3, #16
 8000eba:	2296      	movs	r2, #150	; 0x96
 8000ebc:	2152      	movs	r1, #82	; 0x52
 8000ebe:	f107 0008 	add.w	r0, r7, #8
 8000ec2:	f002 fef7 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f001 ff0a 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ecc:	4bac      	ldr	r3, [pc, #688]	; (8001180 <writeMM+0x340>)
 8000ece:	22fd      	movs	r2, #253	; 0xfd
 8000ed0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	4ba8      	ldr	r3, [pc, #672]	; (8001180 <writeMM+0x340>)
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	2297      	movs	r2, #151	; 0x97
 8000ee4:	2152      	movs	r1, #82	; 0x52
 8000ee6:	f107 0008 	add.w	r0, r7, #8
 8000eea:	f002 fee3 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 fef6 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000ef4:	4ba2      	ldr	r3, [pc, #648]	; (8001180 <writeMM+0x340>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4b9e      	ldr	r3, [pc, #632]	; (8001180 <writeMM+0x340>)
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2310      	movs	r3, #16
 8000f0a:	22e3      	movs	r2, #227	; 0xe3
 8000f0c:	2152      	movs	r1, #82	; 0x52
 8000f0e:	f107 0008 	add.w	r0, r7, #8
 8000f12:	f002 fecf 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f001 fee2 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f1c:	4b98      	ldr	r3, [pc, #608]	; (8001180 <writeMM+0x340>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b94      	ldr	r3, [pc, #592]	; (8001180 <writeMM+0x340>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	22e4      	movs	r2, #228	; 0xe4
 8000f34:	2152      	movs	r1, #82	; 0x52
 8000f36:	f107 0008 	add.w	r0, r7, #8
 8000f3a:	f002 febb 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f001 fece 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f44:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <writeMM+0x340>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <writeMM+0x340>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2310      	movs	r3, #16
 8000f5a:	22e5      	movs	r2, #229	; 0xe5
 8000f5c:	2152      	movs	r1, #82	; 0x52
 8000f5e:	f107 0008 	add.w	r0, r7, #8
 8000f62:	f002 fea7 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 feba 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f6c:	4b84      	ldr	r3, [pc, #528]	; (8001180 <writeMM+0x340>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <writeMM+0x340>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2310      	movs	r3, #16
 8000f82:	22e6      	movs	r2, #230	; 0xe6
 8000f84:	2152      	movs	r1, #82	; 0x52
 8000f86:	f107 0008 	add.w	r0, r7, #8
 8000f8a:	f002 fe93 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f001 fea6 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000f94:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <writeMM+0x340>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	4b76      	ldr	r3, [pc, #472]	; (8001180 <writeMM+0x340>)
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2310      	movs	r3, #16
 8000faa:	22e7      	movs	r2, #231	; 0xe7
 8000fac:	2152      	movs	r1, #82	; 0x52
 8000fae:	f107 0008 	add.w	r0, r7, #8
 8000fb2:	f002 fe7f 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f001 fe92 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fbc:	4b70      	ldr	r3, [pc, #448]	; (8001180 <writeMM+0x340>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <writeMM+0x340>)
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	22f5      	movs	r2, #245	; 0xf5
 8000fd4:	2152      	movs	r1, #82	; 0x52
 8000fd6:	f107 0008 	add.w	r0, r7, #8
 8000fda:	f002 fe6b 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 fe7e 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000fe4:	4b66      	ldr	r3, [pc, #408]	; (8001180 <writeMM+0x340>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <writeMM+0x340>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	22d9      	movs	r2, #217	; 0xd9
 8000ffc:	2152      	movs	r1, #82	; 0x52
 8000ffe:	f107 0008 	add.w	r0, r7, #8
 8001002:	f002 fe57 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f001 fe6a 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0xce;
 800100c:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <writeMM+0x340>)
 800100e:	22ce      	movs	r2, #206	; 0xce
 8001010:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <writeMM+0x340>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2310      	movs	r3, #16
 8001022:	22db      	movs	r2, #219	; 0xdb
 8001024:	2152      	movs	r1, #82	; 0x52
 8001026:	f107 0008 	add.w	r0, r7, #8
 800102a:	f002 fe43 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f001 fe56 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <writeMM+0x340>)
 8001036:	2203      	movs	r2, #3
 8001038:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <writeMM+0x340>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2310      	movs	r3, #16
 800104a:	22dc      	movs	r2, #220	; 0xdc
 800104c:	2152      	movs	r1, #82	; 0x52
 800104e:	f107 0008 	add.w	r0, r7, #8
 8001052:	f002 fe2f 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 fe42 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <writeMM+0x340>)
 800105e:	22f8      	movs	r2, #248	; 0xf8
 8001060:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <writeMM+0x340>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2310      	movs	r3, #16
 8001072:	22dd      	movs	r2, #221	; 0xdd
 8001074:	2152      	movs	r1, #82	; 0x52
 8001076:	f107 0008 	add.w	r0, r7, #8
 800107a:	f002 fe1b 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f001 fe2e 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <writeMM+0x340>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <writeMM+0x340>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2310      	movs	r3, #16
 800109a:	229f      	movs	r2, #159	; 0x9f
 800109c:	2152      	movs	r1, #82	; 0x52
 800109e:	f107 0008 	add.w	r0, r7, #8
 80010a2:	f002 fe07 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 fe1a 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <writeMM+0x340>)
 80010ae:	223c      	movs	r2, #60	; 0x3c
 80010b0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <writeMM+0x340>)
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2310      	movs	r3, #16
 80010c2:	22a3      	movs	r2, #163	; 0xa3
 80010c4:	2152      	movs	r1, #82	; 0x52
 80010c6:	f107 0008 	add.w	r0, r7, #8
 80010ca:	f002 fdf3 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 fe06 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <writeMM+0x340>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <writeMM+0x340>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2310      	movs	r3, #16
 80010ea:	22b7      	movs	r2, #183	; 0xb7
 80010ec:	2152      	movs	r1, #82	; 0x52
 80010ee:	f107 0008 	add.w	r0, r7, #8
 80010f2:	f002 fddf 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f001 fdf2 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <writeMM+0x340>)
 80010fe:	223c      	movs	r2, #60	; 0x3c
 8001100:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <writeMM+0x340>)
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2310      	movs	r3, #16
 8001112:	22bb      	movs	r2, #187	; 0xbb
 8001114:	2152      	movs	r1, #82	; 0x52
 8001116:	f107 0008 	add.w	r0, r7, #8
 800111a:	f002 fdcb 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f001 fdde 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <writeMM+0x340>)
 8001126:	2209      	movs	r2, #9
 8001128:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <writeMM+0x340>)
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2310      	movs	r3, #16
 800113a:	22b2      	movs	r2, #178	; 0xb2
 800113c:	2152      	movs	r1, #82	; 0x52
 800113e:	f107 0008 	add.w	r0, r7, #8
 8001142:	f002 fdb7 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fdca 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <writeMM+0x340>)
 800114e:	2209      	movs	r2, #9
 8001150:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <writeMM+0x340>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2310      	movs	r3, #16
 8001162:	22ca      	movs	r2, #202	; 0xca
 8001164:	2152      	movs	r1, #82	; 0x52
 8001166:	f107 0008 	add.w	r0, r7, #8
 800116a:	f002 fda3 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f001 fdb6 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <writeMM+0x340>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	e001      	b.n	8001184 <writeMM+0x344>
 8001180:	200000a0 	.word	0x200000a0
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	4b67      	ldr	r3, [pc, #412]	; (8001328 <writeMM+0x4e8>)
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2310      	movs	r3, #16
 8001190:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8001194:	2152      	movs	r1, #82	; 0x52
 8001196:	f107 0008 	add.w	r0, r7, #8
 800119a:	f002 fd8b 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f001 fd9e 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011a4:	4b60      	ldr	r3, [pc, #384]	; (8001328 <writeMM+0x4e8>)
 80011a6:	2217      	movs	r2, #23
 80011a8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <writeMM+0x4e8>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2310      	movs	r3, #16
 80011ba:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011be:	2152      	movs	r1, #82	; 0x52
 80011c0:	f107 0008 	add.w	r0, r7, #8
 80011c4:	f002 fd76 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 fd89 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011ce:	4b56      	ldr	r3, [pc, #344]	; (8001328 <writeMM+0x4e8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b52      	ldr	r3, [pc, #328]	; (8001328 <writeMM+0x4e8>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2310      	movs	r3, #16
 80011e4:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011e8:	2152      	movs	r1, #82	; 0x52
 80011ea:	f107 0008 	add.w	r0, r7, #8
 80011ee:	f002 fd61 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f001 fd74 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 80011f8:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <writeMM+0x4e8>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	4b47      	ldr	r3, [pc, #284]	; (8001328 <writeMM+0x4e8>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2310      	movs	r3, #16
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	2152      	movs	r1, #82	; 0x52
 8001212:	f107 0008 	add.w	r0, r7, #8
 8001216:	f002 fd4d 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f001 fd60 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <writeMM+0x4e8>)
 8001222:	2205      	movs	r2, #5
 8001224:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <writeMM+0x4e8>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2310      	movs	r3, #16
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	2152      	movs	r1, #82	; 0x52
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	f002 fd38 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f001 fd4b 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <writeMM+0x4e8>)
 800124c:	2205      	movs	r2, #5
 800124e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <writeMM+0x4e8>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2310      	movs	r3, #16
 8001260:	f240 1299 	movw	r2, #409	; 0x199
 8001264:	2152      	movs	r1, #82	; 0x52
 8001266:	f107 0008 	add.w	r0, r7, #8
 800126a:	f002 fd23 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 fd36 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <writeMM+0x4e8>)
 8001276:	221b      	movs	r2, #27
 8001278:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <writeMM+0x4e8>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2310      	movs	r3, #16
 800128a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800128e:	2152      	movs	r1, #82	; 0x52
 8001290:	f107 0008 	add.w	r0, r7, #8
 8001294:	f002 fd0e 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fd21 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <writeMM+0x4e8>)
 80012a0:	223e      	movs	r2, #62	; 0x3e
 80012a2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <writeMM+0x4e8>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2310      	movs	r3, #16
 80012b4:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012b8:	2152      	movs	r1, #82	; 0x52
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	f002 fcf9 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f001 fd0c 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <writeMM+0x4e8>)
 80012ca:	221f      	movs	r2, #31
 80012cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <writeMM+0x4e8>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2310      	movs	r3, #16
 80012de:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012e2:	2152      	movs	r1, #82	; 0x52
 80012e4:	f107 0008 	add.w	r0, r7, #8
 80012e8:	f002 fce4 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 fcf7 	bl	8002ce0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <writeMM+0x4e8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <writeMM+0x4e8>)
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2310      	movs	r3, #16
 8001308:	2230      	movs	r2, #48	; 0x30
 800130a:	2152      	movs	r1, #82	; 0x52
 800130c:	f107 0008 	add.w	r0, r7, #8
 8001310:	f002 fcd0 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f001 fce3 	bl	8002ce0 <HAL_Delay>
//	// period to 100ms
//	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
//	HAL_Delay(1);
//	i2c_buff[0] = 0x14;// Set max convergence time to
//	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001322:	b004      	add	sp, #16
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200000a0 	.word	0x200000a0

0800132c <TOF_get_measurment>:
		HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x015, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);

//	}
}

void TOF_get_measurment(){ //single shot
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af04      	add	r7, sp, #16
	i2c_buff[0] = 0x01;
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <TOF_get_measurment+0xc8>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
	uint8_t range = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <TOF_get_measurment+0xc8>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2310      	movs	r3, #16
 800134c:	2218      	movs	r2, #24
 800134e:	2152      	movs	r1, #82	; 0x52
 8001350:	4829      	ldr	r0, [pc, #164]	; (80013f8 <TOF_get_measurment+0xcc>)
 8001352:	f002 fcaf 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &range, 1, 1000);
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2310      	movs	r3, #16
 8001366:	2262      	movs	r2, #98	; 0x62
 8001368:	2152      	movs	r1, #82	; 0x52
 800136a:	4823      	ldr	r0, [pc, #140]	; (80013f8 <TOF_get_measurment+0xcc>)
 800136c:	f002 fd9c 	bl	8003ea8 <HAL_I2C_Mem_Read>
	measurements[0] = range;
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <TOF_get_measurment+0xd0>)
 8001374:	701a      	strb	r2, [r3, #0]
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <TOF_get_measurment+0xc8>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2310      	movs	r3, #16
 8001386:	2218      	movs	r2, #24
 8001388:	2152      	movs	r1, #82	; 0x52
 800138a:	481d      	ldr	r0, [pc, #116]	; (8001400 <TOF_get_measurment+0xd4>)
 800138c:	f002 fc92 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &range, 1, 1000);
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2301      	movs	r3, #1
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2310      	movs	r3, #16
 80013a0:	2262      	movs	r2, #98	; 0x62
 80013a2:	2152      	movs	r1, #82	; 0x52
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <TOF_get_measurment+0xd4>)
 80013a6:	f002 fd7f 	bl	8003ea8 <HAL_I2C_Mem_Read>
	measurements[1] = range;
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <TOF_get_measurment+0xd0>)
 80013ae:	705a      	strb	r2, [r3, #1]
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <TOF_get_measurment+0xc8>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2310      	movs	r3, #16
 80013c0:	2218      	movs	r2, #24
 80013c2:	2152      	movs	r1, #82	; 0x52
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <TOF_get_measurment+0xd8>)
 80013c6:	f002 fc75 	bl	8003cb4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &range, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	2262      	movs	r2, #98	; 0x62
 80013dc:	2152      	movs	r1, #82	; 0x52
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <TOF_get_measurment+0xd8>)
 80013e0:	f002 fd62 	bl	8003ea8 <HAL_I2C_Mem_Read>
	measurements[2] = range;
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <TOF_get_measurment+0xd0>)
 80013e8:	709a      	strb	r2, [r3, #2]
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000a0 	.word	0x200000a0
 80013f8:	20000250 	.word	0x20000250
 80013fc:	200001b0 	.word	0x200001b0
 8001400:	200001fc 	.word	0x200001fc
 8001404:	200002a4 	.word	0x200002a4

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f001 fbf5 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f88d 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 fbf9 	bl	8001c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 800141a:	f000 f939 	bl	8001690 <MX_I2C1_Init>
  MX_I2C2_Init();
 800141e:	f000 f965 	bl	80016ec <MX_I2C2_Init>
  MX_ADC1_Init();
 8001422:	f000 f8e3 	bl	80015ec <MX_ADC1_Init>
  MX_I2C3_Init();
 8001426:	f000 f98f 	bl	8001748 <MX_I2C3_Init>
  MX_TIM3_Init();
 800142a:	f000 fb1d 	bl	8001a68 <MX_TIM3_Init>
  MX_TIM5_Init();
 800142e:	f000 fb6f 	bl	8001b10 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001432:	f000 f9ed 	bl	8001810 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001436:	f000 fa97 	bl	8001968 <MX_TIM2_Init>
  MX_FATFS_Init();
 800143a:	f005 fef7 	bl	800722c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800143e:	f000 fbbb 	bl	8001bb8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001442:	f000 f9af 	bl	80017a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 8001446:	f000 fc5f 	bl	8001d08 <motorsInit>
	TOF_init();
 800144a:	f7ff fc99 	bl	8000d80 <TOF_init>
	uart_startup_transmit();
 800144e:	f001 fb15 	bl	8002a7c <uart_startup_transmit>
	HAL_ADC_Start(&hadc1);
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <main+0x100>)
 8001454:	f001 fcac 	bl	8002db0 <HAL_ADC_Start>

//	uint16_t L_vals[512];
//	uint16_t R_vals[512];

	forward(0);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 fc91 	bl	8001d80 <forward>
	HAL_Delay(3000);
 800145e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001462:	f001 fc3d 	bl	8002ce0 <HAL_Delay>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8001466:	f001 fc2f 	bl	8002cc8 <HAL_GetTick>
 800146a:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 800146c:	f001 fc2c 	bl	8002cc8 <HAL_GetTick>
 8001470:	6038      	str	r0, [r7, #0]
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Laddress+2*i, L_vals[i]);
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
//		HAL_Delay(1);
//	}
//	HAL_FLASH_Lock();
	R_speed_setpoint = 600;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <main+0x104>)
 8001474:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001478:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 600;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <main+0x108>)
 800147c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001480:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		//	  sprintf(buff, "L:%d R:%d V:%d\n",(int)htim5.Instance->CNT,(int)htim3.Instance->CNT, (int)HAL_ADC_GetValue(&hadc1));

		//	  sprintf(buff, "%d",(int)HAL_I2C_GetError(&hi2c1));
		uart_task();
 8001482:	f001 fb23 	bl	8002acc <uart_task>
		if (HAL_GetTick() - prev_main_loop_time >= 100){
 8001486:	f001 fc1f 	bl	8002cc8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b63      	cmp	r3, #99	; 0x63
 8001492:	d921      	bls.n	80014d8 <main+0xd0>
			prev_main_loop_time = HAL_GetTick();
 8001494:	f001 fc18 	bl	8002cc8 <HAL_GetTick>
 8001498:	6038      	str	r0, [r7, #0]
//			sprintf(send_buffer, "L:%d > %d R:%d > %d\n",(int)L_prev_enc_count,(int)L_ctrl_signal,(int)R_prev_enc_count, (int)R_ctrl_signal);
			sprintf(send_buffer, "R:%d C: %d E:%d\n", (int)L_prev_enc_count, (int)L_ctrl_signal, (int)measurements[1]);
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <main+0x10c>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <main+0x110>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1d      	ldr	r2, [pc, #116]	; (800151c <main+0x114>)
 80014a8:	7852      	ldrb	r2, [r2, #1]
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	460a      	mov	r2, r1
 80014ae:	491c      	ldr	r1, [pc, #112]	; (8001520 <main+0x118>)
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <main+0x11c>)
 80014b2:	f005 ffc5 	bl	8007440 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 80014b6:	481b      	ldr	r0, [pc, #108]	; (8001524 <main+0x11c>)
 80014b8:	f7fe fe92 	bl	80001e0 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4918      	ldr	r1, [pc, #96]	; (8001524 <main+0x11c>)
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <main+0x120>)
 80014c6:	f004 ff42 	bl	800634e <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <main+0x124>)
 80014d0:	f002 fa91 	bl	80039f6 <HAL_GPIO_TogglePin>
			TOF_get_measurment();
 80014d4:	f7ff ff2a 	bl	800132c <TOF_get_measurment>
		}
		// main control loop:
		if (HAL_GetTick() - prev_ctr_loop_time >= CONTROL_LOOP_PERIOD_MS){
 80014d8:	f001 fbf6 	bl	8002cc8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b13      	cmp	r3, #19
 80014e4:	d9cd      	bls.n	8001482 <main+0x7a>

			prev_ctr_loop_time = HAL_GetTick();
 80014e6:	f001 fbef 	bl	8002cc8 <HAL_GetTick>
 80014ea:	6078      	str	r0, [r7, #4]
			if(measurements[1]>190){
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <main+0x114>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	2bbe      	cmp	r3, #190	; 0xbe
 80014f2:	d904      	bls.n	80014fe <main+0xf6>
				R_motor_feedback_control();
 80014f4:	f000 fca4 	bl	8001e40 <R_motor_feedback_control>
				L_motor_feedback_control();
 80014f8:	f000 fdd6 	bl	80020a8 <L_motor_feedback_control>
 80014fc:	e7c1      	b.n	8001482 <main+0x7a>
			}
			else{
				forward(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 fc3e 	bl	8001d80 <forward>
		uart_task();
 8001504:	e7bd      	b.n	8001482 <main+0x7a>
 8001506:	bf00      	nop
 8001508:	200001b4 	.word	0x200001b4
 800150c:	20000184 	.word	0x20000184
 8001510:	20000182 	.word	0x20000182
 8001514:	20000186 	.word	0x20000186
 8001518:	2000018c 	.word	0x2000018c
 800151c:	200001b0 	.word	0x200001b0
 8001520:	08007e40 	.word	0x08007e40
 8001524:	20000120 	.word	0x20000120
 8001528:	20000470 	.word	0x20000470
 800152c:	40020800 	.word	0x40020800

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f005 ff76 	bl	8007430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xb4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xb4>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xb4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <SystemClock_Config+0xb8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <SystemClock_Config+0xb8>)
 800157a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <SystemClock_Config+0xb8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fa03 	bl	80049ac <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015ac:	f000 fba6 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b0:	230f      	movs	r3, #15
 80015b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fc66 	bl	8004e9c <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015d6:	f000 fb91 	bl	8001cfc <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000

080015ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_ADC1_Init+0x98>)
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <MX_ADC1_Init+0x9c>)
 8001602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_ADC1_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_ADC1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_ADC1_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_ADC1_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_ADC1_Init+0x98>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_ADC1_Init+0x98>)
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_ADC1_Init+0xa0>)
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_ADC1_Init+0x98>)
 8001638:	2201      	movs	r2, #1
 800163a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_ADC1_Init+0x98>)
 8001646:	2201      	movs	r2, #1
 8001648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_ADC1_Init+0x98>)
 800164c:	f001 fb6c 	bl	8002d28 <HAL_ADC_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001656:	f000 fb51 	bl	8001cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800165a:	2304      	movs	r3, #4
 800165c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_ADC1_Init+0x98>)
 800166c:	f001 fc54 	bl	8002f18 <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001676:	f000 fb41 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001b4 	.word	0x200001b4
 8001688:	40012000 	.word	0x40012000
 800168c:	0f000001 	.word	0x0f000001

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <MX_I2C1_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ce:	f002 f9ad 	bl	8003a2c <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d8:	f000 fb10 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001fc 	.word	0x200001fc
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00061a80 	.word	0x00061a80

080016ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C2_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <MX_I2C2_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C2_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_I2C2_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C2_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_I2C2_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_I2C2_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_I2C2_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_I2C2_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_I2C2_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_I2C2_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_I2C2_Init+0x50>)
 800172a:	f002 f97f 	bl	8003a2c <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001734:	f000 fae2 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000250 	.word	0x20000250
 8001740:	40005800 	.word	0x40005800
 8001744:	00061a80 	.word	0x00061a80

08001748 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_I2C3_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <MX_I2C3_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_I2C3_Init+0x50>)
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_I2C3_Init+0x58>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_I2C3_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_I2C3_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_I2C3_Init+0x50>)
 8001766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MX_I2C3_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_I2C3_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MX_I2C3_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_I2C3_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_I2C3_Init+0x50>)
 8001786:	f002 f951 	bl	8003a2c <HAL_I2C_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001790:	f000 fab4 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002a4 	.word	0x200002a4
 800179c:	40005c00 	.word	0x40005c00
 80017a0:	00061a80 	.word	0x00061a80

080017a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI2_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MX_SPI2_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI2_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI2_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI2_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI2_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI2_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI2_Init+0x64>)
 80017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI2_Init+0x64>)
 80017d8:	2230      	movs	r2, #48	; 0x30
 80017da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI2_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI2_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI2_Init+0x64>)
 80017f6:	f003 fd31 	bl	800525c <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 fa7c 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002f8 	.word	0x200002f8
 800180c:	40003800 	.word	0x40003800

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2220      	movs	r2, #32
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f005 fdf1 	bl	8007430 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <MX_TIM1_Init+0x150>)
 8001850:	4a44      	ldr	r2, [pc, #272]	; (8001964 <MX_TIM1_Init+0x154>)
 8001852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <MX_TIM1_Init+0x150>)
 8001856:	220f      	movs	r2, #15
 8001858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <MX_TIM1_Init+0x150>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <MX_TIM1_Init+0x150>)
 8001862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001866:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <MX_TIM1_Init+0x150>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186e:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <MX_TIM1_Init+0x150>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <MX_TIM1_Init+0x150>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187a:	4839      	ldr	r0, [pc, #228]	; (8001960 <MX_TIM1_Init+0x150>)
 800187c:	f003 fd77 	bl	800536e <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001886:	f000 fa39 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001894:	4619      	mov	r1, r3
 8001896:	4832      	ldr	r0, [pc, #200]	; (8001960 <MX_TIM1_Init+0x150>)
 8001898:	f004 f8b8 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018a2:	f000 fa2b 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a6:	482e      	ldr	r0, [pc, #184]	; (8001960 <MX_TIM1_Init+0x150>)
 80018a8:	f003 fdb0 	bl	800540c <HAL_TIM_PWM_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018b2:	f000 fa23 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c2:	4619      	mov	r1, r3
 80018c4:	4826      	ldr	r0, [pc, #152]	; (8001960 <MX_TIM1_Init+0x150>)
 80018c6:	f004 fc35 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018d0:	f000 fa14 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d4:	2360      	movs	r3, #96	; 0x60
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	2204      	movs	r2, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <MX_TIM1_Init+0x150>)
 80018fa:	f003 ffc5 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001904:	f000 f9fa 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	2208      	movs	r2, #8
 800190e:	4619      	mov	r1, r3
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM1_Init+0x150>)
 8001912:	f003 ffb9 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800191c:	f000 f9ee 	bl	8001cfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001938:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <MX_TIM1_Init+0x150>)
 8001944:	f004 fc64 	bl	8006210 <HAL_TIMEx_ConfigBreakDeadTime>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800194e:	f000 f9d5 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <MX_TIM1_Init+0x150>)
 8001954:	f000 ff3e 	bl	80027d4 <HAL_TIM_MspPostInit>

}
 8001958:	bf00      	nop
 800195a:	3758      	adds	r7, #88	; 0x58
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000350 	.word	0x20000350
 8001964:	40010000 	.word	0x40010000

08001968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <MX_TIM2_Init+0xfc>)
 800199a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019a2:	220f      	movs	r2, #15
 80019a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c0:	4828      	ldr	r0, [pc, #160]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019c2:	f003 fcd4 	bl	800536e <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019cc:	f000 f996 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019da:	4619      	mov	r1, r3
 80019dc:	4821      	ldr	r0, [pc, #132]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019de:	f004 f815 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019e8:	f000 f988 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <MX_TIM2_Init+0xfc>)
 80019ee:	f003 fd0d 	bl	800540c <HAL_TIM_PWM_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019f8:	f000 f980 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4816      	ldr	r0, [pc, #88]	; (8001a64 <MX_TIM2_Init+0xfc>)
 8001a0c:	f004 fb92 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a16:	f000 f971 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a1a:	2360      	movs	r3, #96	; 0x60
 8001a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM2_Init+0xfc>)
 8001a32:	f003 ff29 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a3c:	f000 f95e 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2204      	movs	r2, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM2_Init+0xfc>)
 8001a48:	f003 ff1e 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a52:	f000 f953 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM2_Init+0xfc>)
 8001a58:	f000 febc 	bl	80027d4 <HAL_TIM_MspPostInit>

}
 8001a5c:	bf00      	nop
 8001a5e:	3738      	adds	r7, #56	; 0x38
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000398 	.word	0x20000398

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f005 fcda 	bl	8007430 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001a86:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <MX_TIM3_Init+0xa4>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001ad6:	f003 fda3 	bl	8005620 <HAL_TIM_Encoder_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ae0:	f000 f90c 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_TIM3_Init+0xa0>)
 8001af2:	f004 fb1f 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001afc:	f000 f8fe 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200003e0 	.word	0x200003e0
 8001b0c:	40000400 	.word	0x40000400

08001b10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fc86 	bl	8007430 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_TIM5_Init+0xa4>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b52:	2303      	movs	r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b56:	2302      	movs	r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b7e:	f003 fd4f 	bl	8005620 <HAL_TIM_Encoder_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f000 f8b8 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM5_Init+0xa0>)
 8001b9a:	f004 facb 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001ba4:	f000 f8aa 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000428 	.word	0x20000428
 8001bb4:	40000c00 	.word	0x40000c00

08001bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_USART2_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	f004 fb60 	bl	80062b4 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 f87f 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000470 	.word	0x20000470
 8001c08:	40004400 	.word	0x40004400

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c7c:	481d      	ldr	r0, [pc, #116]	; (8001cf4 <MX_GPIO_Init+0xe8>)
 8001c7e:	f001 fea1 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c88:	481b      	ldr	r0, [pc, #108]	; (8001cf8 <MX_GPIO_Init+0xec>)
 8001c8a:	f001 fe9b 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <MX_GPIO_Init+0xe8>)
 8001ca8:	f001 fd08 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <MX_GPIO_Init+0xe8>)
 8001cc6:	f001 fcf9 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_GPIO_Init+0xec>)
 8001ce4:	f001 fcea 	bl	80036bc <HAL_GPIO_Init>

}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <motorsInit>:
extern int32_t R_acc_error;
extern int32_t L_acc;
extern int32_t R_acc;
extern int32_t Dist_error_acc;

void motorsInit(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4818      	ldr	r0, [pc, #96]	; (8001d70 <motorsInit+0x68>)
 8001d10:	f003 fbd6 	bl	80054c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d14:	2108      	movs	r1, #8
 8001d16:	4816      	ldr	r0, [pc, #88]	; (8001d70 <motorsInit+0x68>)
 8001d18:	f003 fbd2 	bl	80054c0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <motorsInit+0x68>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <motorsInit+0x68>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c

	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4811      	ldr	r0, [pc, #68]	; (8001d74 <motorsInit+0x6c>)
 8001d30:	f003 fbc6 	bl	80054c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d34:	2104      	movs	r1, #4
 8001d36:	480f      	ldr	r0, [pc, #60]	; (8001d74 <motorsInit+0x6c>)
 8001d38:	f003 fbc2 	bl	80054c0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <motorsInit+0x6c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <motorsInit+0x6c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38

	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d4c:	213c      	movs	r1, #60	; 0x3c
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <motorsInit+0x70>)
 8001d50:	f003 fd0c 	bl	800576c <HAL_TIM_Encoder_Start>

	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001d54:	213c      	movs	r1, #60	; 0x3c
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <motorsInit+0x74>)
 8001d58:	f003 fd08 	bl	800576c <HAL_TIM_Encoder_Start>

	  htim3.Instance->CNT = 0;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <motorsInit+0x70>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <motorsInit+0x74>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000350 	.word	0x20000350
 8001d74:	20000398 	.word	0x20000398
 8001d78:	200003e0 	.word	0x200003e0
 8001d7c:	20000428 	.word	0x20000428

08001d80 <forward>:
void forward(int16_t power){ // -1000 < power < 1000
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
	if (power>1000) power = 1000;
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d92:	dd02      	ble.n	8001d9a <forward+0x1a>
 8001d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d98:	80fb      	strh	r3, [r7, #6]
	if (power<-1000) power = -1000;
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001da2:	da02      	bge.n	8001daa <forward+0x2a>
 8001da4:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8001da8:	80fb      	strh	r3, [r7, #6]

	if (power == 0){
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d110      	bne.n	8001dd4 <forward+0x54>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <forward+0xb8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <forward+0xb8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c
		//motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <forward+0xbc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <forward+0xbc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
//		motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
	}
}
 8001dd2:	e02a      	b.n	8001e2a <forward+0xaa>
	else if (power > 0){
 8001dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd12      	ble.n	8001e02 <forward+0x82>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, power);
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <forward+0xb8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <forward+0xb8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, power);
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <forward+0xbc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <forward+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e00:	e013      	b.n	8001e2a <forward+0xaa>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <forward+0xb8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
 8001e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0e:	425a      	negs	r2, r3
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <forward+0xb8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <forward+0xbc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	425a      	negs	r2, r3
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <forward+0xbc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000350 	.word	0x20000350
 8001e3c:	20000398 	.word	0x20000398

08001e40 <R_motor_feedback_control>:
void R_motor_feedback_control(){//speed in mm/s
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	Dist_error_acc += L_acc - R_acc;
 8001e44:	4b8a      	ldr	r3, [pc, #552]	; (8002070 <R_motor_feedback_control+0x230>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b8a      	ldr	r3, [pc, #552]	; (8002074 <R_motor_feedback_control+0x234>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	4b8a      	ldr	r3, [pc, #552]	; (8002078 <R_motor_feedback_control+0x238>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a88      	ldr	r2, [pc, #544]	; (8002078 <R_motor_feedback_control+0x238>)
 8001e56:	6013      	str	r3, [r2, #0]
	R_prev_enc_count = htim3.Instance->CNT;
 8001e58:	4b88      	ldr	r3, [pc, #544]	; (800207c <R_motor_feedback_control+0x23c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	4b87      	ldr	r3, [pc, #540]	; (8002080 <R_motor_feedback_control+0x240>)
 8001e62:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 8001e64:	4b86      	ldr	r3, [pc, #536]	; (8002080 <R_motor_feedback_control+0x240>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <R_motor_feedback_control+0x234>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a80      	ldr	r2, [pc, #512]	; (8002074 <R_motor_feedback_control+0x234>)
 8001e74:	6013      	str	r3, [r2, #0]
	R_error = (int)(R_speed_setpoint - (WHEEL_DIAMETER_MM*PI*R_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 8001e76:	4b83      	ldr	r3, [pc, #524]	; (8002084 <R_motor_feedback_control+0x244>)
 8001e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb59 	bl	8000534 <__aeabi_i2d>
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	4b7e      	ldr	r3, [pc, #504]	; (8002080 <R_motor_feedback_control+0x240>)
 8001e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb51 	bl	8000534 <__aeabi_i2d>
 8001e92:	a36f      	add	r3, pc, #444	; (adr r3, 8002050 <R_motor_feedback_control+0x210>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fbb6 	bl	8000608 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <R_motor_feedback_control+0x248>)
 8001eaa:	f7fe fbad 	bl	8000608 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b74      	ldr	r3, [pc, #464]	; (800208c <R_motor_feedback_control+0x24c>)
 8001ebc:	f7fe fcce 	bl	800085c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe f9e6 	bl	8000298 <__aeabi_dsub>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fdaa 	bl	8000a2c <__aeabi_d2iz>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a6d      	ldr	r2, [pc, #436]	; (8002090 <R_motor_feedback_control+0x250>)
 8001edc:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error;
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <R_motor_feedback_control+0x254>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <R_motor_feedback_control+0x250>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <R_motor_feedback_control+0x254>)
 8001eea:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 8001eec:	4b69      	ldr	r3, [pc, #420]	; (8002094 <R_motor_feedback_control+0x254>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef4:	dd03      	ble.n	8001efe <R_motor_feedback_control+0xbe>
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <R_motor_feedback_control+0x254>)
 8001ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efc:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 8001efe:	4b65      	ldr	r3, [pc, #404]	; (8002094 <R_motor_feedback_control+0x254>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f06:	da02      	bge.n	8001f0e <R_motor_feedback_control+0xce>
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <R_motor_feedback_control+0x254>)
 8001f0a:	4a63      	ldr	r2, [pc, #396]	; (8002098 <R_motor_feedback_control+0x258>)
 8001f0c:	601a      	str	r2, [r3, #0]

	if(Dist_error_acc > 1000) Dist_error_acc = 1000;
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <R_motor_feedback_control+0x238>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f16:	dd03      	ble.n	8001f20 <R_motor_feedback_control+0xe0>
 8001f18:	4b57      	ldr	r3, [pc, #348]	; (8002078 <R_motor_feedback_control+0x238>)
 8001f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f1e:	601a      	str	r2, [r3, #0]
	if(Dist_error_acc < -1000) Dist_error_acc = -1000;  //limits integral term
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <R_motor_feedback_control+0x238>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f28:	da02      	bge.n	8001f30 <R_motor_feedback_control+0xf0>
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <R_motor_feedback_control+0x238>)
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <R_motor_feedback_control+0x258>)
 8001f2e:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward						proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint + R_ff_offset + K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <R_motor_feedback_control+0x250>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fafd 	bl	8000534 <__aeabi_i2d>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <R_motor_feedback_control+0x244>)
 8001f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe faf5 	bl	8000534 <__aeabi_i2d>
 8001f4a:	a343      	add	r3, pc, #268	; (adr r3, 8002058 <R_motor_feedback_control+0x218>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fb5a 	bl	8000608 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f99e 	bl	800029c <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	a33d      	add	r3, pc, #244	; (adr r3, 8002060 <R_motor_feedback_control+0x220>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe f995 	bl	800029c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4614      	mov	r4, r2
 8001f78:	461d      	mov	r5, r3
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <R_motor_feedback_control+0x230>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <R_motor_feedback_control+0x234>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_i2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe f980 	bl	800029c <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <R_motor_feedback_control+0x238>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fac3 	bl	8000534 <__aeabi_i2d>
 8001fae:	a32e      	add	r3, pc, #184	; (adr r3, 8002068 <R_motor_feedback_control+0x228>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fb28 	bl	8000608 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe f96c 	bl	800029c <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fd2e 	bl	8000a2c <__aeabi_d2iz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a32      	ldr	r2, [pc, #200]	; (800209c <R_motor_feedback_control+0x25c>)
 8001fd4:	6013      	str	r3, [r2, #0]



	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <R_motor_feedback_control+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fde:	db03      	blt.n	8001fe8 <R_motor_feedback_control+0x1a8>
 8001fe0:	4b2e      	ldr	r3, [pc, #184]	; (800209c <R_motor_feedback_control+0x25c>)
 8001fe2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe6:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <R_motor_feedback_control+0x25c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001ff0:	dc02      	bgt.n	8001ff8 <R_motor_feedback_control+0x1b8>
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <R_motor_feedback_control+0x25c>)
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <R_motor_feedback_control+0x260>)
 8001ff6:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <R_motor_feedback_control+0x25c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d108      	bne.n	8002012 <R_motor_feedback_control+0x1d2>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <R_motor_feedback_control+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002008:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <R_motor_feedback_control+0x264>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002010:	e017      	b.n	8002042 <R_motor_feedback_control+0x202>
	}
	else if (R_ctrl_signal > 0){
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <R_motor_feedback_control+0x25c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd09      	ble.n	800202e <R_motor_feedback_control+0x1ee>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <R_motor_feedback_control+0x25c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <R_motor_feedback_control+0x264>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <R_motor_feedback_control+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
 800202c:	e009      	b.n	8002042 <R_motor_feedback_control+0x202>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <R_motor_feedback_control+0x264>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <R_motor_feedback_control+0x25c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	425a      	negs	r2, r3
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <R_motor_feedback_control+0x264>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c
	}
//	prev_control_signal = R_ctrl_signal;
	htim3.Instance->CNT = 0;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <R_motor_feedback_control+0x23c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
}
 800204a:	bf00      	nop
 800204c:	bdb0      	pop	{r4, r5, r7, pc}
 800204e:	bf00      	nop
 8002050:	bf9c62a1 	.word	0xbf9c62a1
 8002054:	4059eb09 	.word	0x4059eb09
 8002058:	b851eb85 	.word	0xb851eb85
 800205c:	3fdb851e 	.word	0x3fdb851e
 8002060:	00000000 	.word	0x00000000
 8002064:	40636000 	.word	0x40636000
 8002068:	9999999a 	.word	0x9999999a
 800206c:	3fb99999 	.word	0x3fb99999
 8002070:	200001a4 	.word	0x200001a4
 8002074:	200001a8 	.word	0x200001a8
 8002078:	200001ac 	.word	0x200001ac
 800207c:	200003e0 	.word	0x200003e0
 8002080:	20000188 	.word	0x20000188
 8002084:	20000184 	.word	0x20000184
 8002088:	408f4000 	.word	0x408f4000
 800208c:	40a2c000 	.word	0x40a2c000
 8002090:	20000198 	.word	0x20000198
 8002094:	200001a0 	.word	0x200001a0
 8002098:	fffffc18 	.word	0xfffffc18
 800209c:	20000190 	.word	0x20000190
 80020a0:	fffffc19 	.word	0xfffffc19
 80020a4:	20000350 	.word	0x20000350

080020a8 <L_motor_feedback_control>:
void L_motor_feedback_control(){//speed in mm/s
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	L_prev_enc_count = htim5.Instance->CNT;
 80020ac:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <L_motor_feedback_control+0x1f8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <L_motor_feedback_control+0x1fc>)
 80020b6:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 80020b8:	4b7a      	ldr	r3, [pc, #488]	; (80022a4 <L_motor_feedback_control+0x1fc>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <L_motor_feedback_control+0x200>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <L_motor_feedback_control+0x200>)
 80020c8:	6013      	str	r3, [r2, #0]
	L_error = (int)(L_speed_setpoint - (WHEEL_DIAMETER_MM*PI*L_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 80020ca:	4b78      	ldr	r3, [pc, #480]	; (80022ac <L_motor_feedback_control+0x204>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa2f 	bl	8000534 <__aeabi_i2d>
 80020d6:	4604      	mov	r4, r0
 80020d8:	460d      	mov	r5, r1
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <L_motor_feedback_control+0x1fc>)
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa27 	bl	8000534 <__aeabi_i2d>
 80020e6:	a366      	add	r3, pc, #408	; (adr r3, 8002280 <L_motor_feedback_control+0x1d8>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa8c 	bl	8000608 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <L_motor_feedback_control+0x208>)
 80020fe:	f7fe fa83 	bl	8000608 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b69      	ldr	r3, [pc, #420]	; (80022b4 <L_motor_feedback_control+0x20c>)
 8002110:	f7fe fba4 	bl	800085c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f8bc 	bl	8000298 <__aeabi_dsub>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fc80 	bl	8000a2c <__aeabi_d2iz>
 800212c:	4603      	mov	r3, r0
 800212e:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <L_motor_feedback_control+0x210>)
 8002130:	6013      	str	r3, [r2, #0]
	L_acc_error += L_error;
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <L_motor_feedback_control+0x214>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <L_motor_feedback_control+0x210>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <L_motor_feedback_control+0x214>)
 800213e:	6013      	str	r3, [r2, #0]
	//limit integral term:
	if(L_acc_error > 1000) L_acc_error = 1000;
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <L_motor_feedback_control+0x214>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002148:	dd03      	ble.n	8002152 <L_motor_feedback_control+0xaa>
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <L_motor_feedback_control+0x214>)
 800214c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002150:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <L_motor_feedback_control+0x214>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800215a:	da02      	bge.n	8002162 <L_motor_feedback_control+0xba>
 800215c:	4b57      	ldr	r3, [pc, #348]	; (80022bc <L_motor_feedback_control+0x214>)
 800215e:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <L_motor_feedback_control+0x218>)
 8002160:	601a      	str	r2, [r3, #0]
	//					Proportional  		Integral		  FeedForward					proportional distance error  integral distance error
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint+L_ff_offset + K_pdisterror*(R_acc-L_acc) -  K_idisterror*Dist_error_acc;
 8002162:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <L_motor_feedback_control+0x210>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9e4 	bl	8000534 <__aeabi_i2d>
 800216c:	4604      	mov	r4, r0
 800216e:	460d      	mov	r5, r1
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <L_motor_feedback_control+0x204>)
 8002172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9dc 	bl	8000534 <__aeabi_i2d>
 800217c:	a342      	add	r3, pc, #264	; (adr r3, 8002288 <L_motor_feedback_control+0x1e0>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa41 	bl	8000608 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f7fe f885 	bl	800029c <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	a33d      	add	r3, pc, #244	; (adr r3, 8002290 <L_motor_feedback_control+0x1e8>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f87c 	bl	800029c <__adddf3>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4614      	mov	r4, r2
 80021aa:	461d      	mov	r5, r3
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <L_motor_feedback_control+0x21c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <L_motor_feedback_control+0x200>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9b9 	bl	8000534 <__aeabi_i2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f867 	bl	800029c <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <L_motor_feedback_control+0x220>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9aa 	bl	8000534 <__aeabi_i2d>
 80021e0:	a32d      	add	r3, pc, #180	; (adr r3, 8002298 <L_motor_feedback_control+0x1f0>)
 80021e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e6:	f7fe fa0f 	bl	8000608 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe f851 	bl	8000298 <__aeabi_dsub>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fc15 	bl	8000a2c <__aeabi_d2iz>
 8002202:	4603      	mov	r3, r0
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <L_motor_feedback_control+0x224>)
 8002206:	6013      	str	r3, [r2, #0]

	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <L_motor_feedback_control+0x224>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002210:	dd03      	ble.n	800221a <L_motor_feedback_control+0x172>
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <L_motor_feedback_control+0x224>)
 8002214:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002218:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <L_motor_feedback_control+0x224>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002222:	da02      	bge.n	800222a <L_motor_feedback_control+0x182>
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <L_motor_feedback_control+0x224>)
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <L_motor_feedback_control+0x228>)
 8002228:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <L_motor_feedback_control+0x224>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <L_motor_feedback_control+0x19c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <L_motor_feedback_control+0x22c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <L_motor_feedback_control+0x22c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
 8002242:	e017      	b.n	8002274 <L_motor_feedback_control+0x1cc>
	}
	else if (L_ctrl_signal > 0){
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <L_motor_feedback_control+0x224>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	dd09      	ble.n	8002260 <L_motor_feedback_control+0x1b8>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <L_motor_feedback_control+0x224>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <L_motor_feedback_control+0x22c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <L_motor_feedback_control+0x22c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
 800225e:	e009      	b.n	8002274 <L_motor_feedback_control+0x1cc>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <L_motor_feedback_control+0x22c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <L_motor_feedback_control+0x224>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	425a      	negs	r2, r3
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <L_motor_feedback_control+0x22c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
	}
//	prev_control_signal = L_ctrl_signal;
	htim5.Instance->CNT = 0;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <L_motor_feedback_control+0x1f8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800227c:	bf00      	nop
 800227e:	bdb0      	pop	{r4, r5, r7, pc}
 8002280:	bf9c62a1 	.word	0xbf9c62a1
 8002284:	4059eb09 	.word	0x4059eb09
 8002288:	2d0e5604 	.word	0x2d0e5604
 800228c:	3fdf9db2 	.word	0x3fdf9db2
 8002290:	9999999a 	.word	0x9999999a
 8002294:	40636999 	.word	0x40636999
 8002298:	9999999a 	.word	0x9999999a
 800229c:	3fb99999 	.word	0x3fb99999
 80022a0:	20000428 	.word	0x20000428
 80022a4:	20000186 	.word	0x20000186
 80022a8:	200001a4 	.word	0x200001a4
 80022ac:	20000182 	.word	0x20000182
 80022b0:	408f4000 	.word	0x408f4000
 80022b4:	40a2c000 	.word	0x40a2c000
 80022b8:	20000194 	.word	0x20000194
 80022bc:	2000019c 	.word	0x2000019c
 80022c0:	fffffc18 	.word	0xfffffc18
 80022c4:	200001a8 	.word	0x200001a8
 80022c8:	200001ac 	.word	0x200001ac
 80022cc:	2000018c 	.word	0x2000018c
 80022d0:	fffffc19 	.word	0xfffffc19
 80022d4:	20000398 	.word	0x20000398

080022d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_MspInit+0x58>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_MspInit+0x58>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_MspInit+0x58>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x58>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_MspInit+0x58>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x58>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2051      	movs	r0, #81	; 0x51
 800231c:	f001 f905 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002320:	2051      	movs	r0, #81	; 0x51
 8002322:	f001 f91e 	bl	8003562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_ADC_MspInit+0x7c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d127      	bne.n	80023a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_ADC_MspInit+0x80>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 800238e:	2310      	movs	r3, #16
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_ADC_MspInit+0x84>)
 80023a2:	f001 f98b 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40012000 	.word	0x40012000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000

080023bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	; 0x38
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6b      	ldr	r2, [pc, #428]	; (8002588 <HAL_I2C_MspInit+0x1cc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13c      	bne.n	8002458 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fe:	2312      	movs	r3, #18
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002402:	2301      	movs	r3, #1
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800240a:	2304      	movs	r3, #4
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002412:	4619      	mov	r1, r3
 8002414:	485e      	ldr	r0, [pc, #376]	; (8002590 <HAL_I2C_MspInit+0x1d4>)
 8002416:	f001 f951 	bl	80036bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	2312      	movs	r3, #18
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800242a:	2304      	movs	r3, #4
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4856      	ldr	r0, [pc, #344]	; (8002590 <HAL_I2C_MspInit+0x1d4>)
 8002436:	f001 f941 	bl	80036bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002456:	e093      	b.n	8002580 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <HAL_I2C_MspInit+0x1d8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d13e      	bne.n	80024e0 <HAL_I2C_MspInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002484:	2312      	movs	r3, #18
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002490:	2304      	movs	r3, #4
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002498:	4619      	mov	r1, r3
 800249a:	483d      	ldr	r0, [pc, #244]	; (8002590 <HAL_I2C_MspInit+0x1d4>)
 800249c:	f001 f90e 	bl	80036bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a6:	2312      	movs	r3, #18
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80024b2:	2309      	movs	r3, #9
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4834      	ldr	r0, [pc, #208]	; (8002590 <HAL_I2C_MspInit+0x1d4>)
 80024be:	f001 f8fd 	bl	80036bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	e04f      	b.n	8002580 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <HAL_I2C_MspInit+0x1dc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d14a      	bne.n	8002580 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002528:	2312      	movs	r3, #18
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002534:	2304      	movs	r3, #4
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <HAL_I2C_MspInit+0x1e0>)
 8002540:	f001 f8bc 	bl	80036bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002544:	2310      	movs	r3, #16
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002548:	2312      	movs	r3, #18
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002554:	2309      	movs	r3, #9
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	480c      	ldr	r0, [pc, #48]	; (8002590 <HAL_I2C_MspInit+0x1d4>)
 8002560:	f001 f8ac 	bl	80036bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 800256e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_I2C_MspInit+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
}
 8002580:	bf00      	nop
 8002582:	3738      	adds	r7, #56	; 0x38
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40005400 	.word	0x40005400
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400
 8002594:	40005800 	.word	0x40005800
 8002598:	40005c00 	.word	0x40005c00
 800259c:	40020000 	.word	0x40020000

080025a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_SPI_MspInit+0x84>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d12c      	bne.n	800261c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_SPI_MspInit+0x88>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80025fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800260c:	2305      	movs	r3, #5
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_SPI_MspInit+0x8c>)
 8002618:	f001 f850 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40003800 	.word	0x40003800
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400

08002630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_TIM_Base_MspInit+0x64>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800265e:	e012      	b.n	8002686 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x124>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d14a      	bne.n	8002754 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a3f      	ldr	r2, [pc, #252]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a31      	ldr	r2, [pc, #196]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002722:	2302      	movs	r3, #2
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	4826      	ldr	r0, [pc, #152]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800272e:	f000 ffc5 	bl	80036bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 8002732:	2320      	movs	r3, #32
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002742:	2302      	movs	r3, #2
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	481f      	ldr	r0, [pc, #124]	; (80027cc <HAL_TIM_Encoder_MspInit+0x130>)
 800274e:	f000 ffb5 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002752:	e030      	b.n	80027b6 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_TIM_Encoder_MspInit+0x134>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12b      	bne.n	80027b6 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x128>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8002796:	2303      	movs	r3, #3
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027a6:	2302      	movs	r3, #2
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80027b2:	f000 ff83 	bl	80036bc <HAL_GPIO_Init>
}
 80027b6:	bf00      	nop
 80027b8:	3730      	adds	r7, #48	; 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40000c00 	.word	0x40000c00

080027d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a34      	ldr	r2, [pc, #208]	; (80028c4 <HAL_TIM_MspPostInit+0xf0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11f      	bne.n	8002836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 8002812:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002824:	2301      	movs	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	4827      	ldr	r0, [pc, #156]	; (80028cc <HAL_TIM_MspPostInit+0xf8>)
 8002830:	f000 ff44 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002834:	e041      	b.n	80028ba <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d13c      	bne.n	80028ba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_TIM_MspPostInit+0xf4>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8002878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800288a:	2301      	movs	r3, #1
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <HAL_TIM_MspPostInit+0xf8>)
 8002896:	f000 ff11 	bl	80036bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 800289a:	2308      	movs	r3, #8
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028aa:	2301      	movs	r3, #1
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4806      	ldr	r0, [pc, #24]	; (80028d0 <HAL_TIM_MspPostInit+0xfc>)
 80028b6:	f000 ff01 	bl	80036bc <HAL_GPIO_Init>
}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400

080028d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_UART_MspInit+0x94>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d133      	bne.n	800295e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_UART_MspInit+0x98>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_UART_MspInit+0x98>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_UART_MspInit+0x98>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_UART_MspInit+0x98>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_UART_MspInit+0x98>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_UART_MspInit+0x98>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800292e:	230c      	movs	r3, #12
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293e:	2307      	movs	r3, #7
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	4809      	ldr	r0, [pc, #36]	; (8002970 <HAL_UART_MspInit+0x9c>)
 800294a:	f000 feb7 	bl	80036bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2026      	movs	r0, #38	; 0x26
 8002954:	f000 fde9 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002958:	2026      	movs	r0, #38	; 0x26
 800295a:	f000 fe02 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40004400 	.word	0x40004400
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>

0800297a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler+0x4>

08002980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0x4>

08002986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <UsageFault_Handler+0x4>

08002992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c0:	f000 f96e 	bl	8002ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <USART2_IRQHandler+0x10>)
 80029ce:	f003 fd33 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000470 	.word	0x20000470

080029dc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f004 fcd0 	bl	80073c0 <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20020000 	.word	0x20020000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	200004b4 	.word	0x200004b4
 8002a54:	200004e8 	.word	0x200004e8

08002a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <SystemInit+0x20>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <SystemInit+0x20>)
 8002a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8002a82:	2005      	movs	r0, #5
 8002a84:	f000 f92c 	bl	8002ce0 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <uart_startup_transmit+0x40>)
 8002a8a:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <uart_startup_transmit+0x44>)
 8002a90:	f004 fcf6 	bl	8007480 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8002a94:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <uart_startup_transmit+0x44>)
 8002a96:	f7fd fba3 	bl	80001e0 <strlen>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <uart_startup_transmit+0x44>)
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <uart_startup_transmit+0x48>)
 8002aa4:	f003 fc53 	bl	800634e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <uart_startup_transmit+0x4c>)
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <uart_startup_transmit+0x48>)
 8002aae:	f003 fc93 	bl	80063d8 <HAL_UART_Receive_IT>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08007e54 	.word	0x08007e54
 8002ac0:	20000120 	.word	0x20000120
 8002ac4:	20000470 	.word	0x20000470
 8002ac8:	20000160 	.word	0x20000160

08002acc <uart_task>:

void uart_task()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <uart_task+0x3c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d014      	beq.n	8002b02 <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <uart_task+0x40>)
 8002ada:	f7fd fb81 	bl	80001e0 <strlen>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480a      	ldr	r0, [pc, #40]	; (8002b0c <uart_task+0x40>)
 8002ae4:	f000 f816 	bl	8002b14 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <uart_task+0x40>)
 8002aea:	f004 fc64 	bl	80073b6 <atoi>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <uart_task+0x44>)
 8002af4:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <uart_task+0x3c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <uart_task+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
	}
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000180 	.word	0x20000180
 8002b0c:	20000160 	.word	0x20000160
 8002b10:	20000184 	.word	0x20000184

08002b14 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4803      	ldr	r0, [pc, #12]	; (8002b34 <uart_transmit+0x20>)
 8002b28:	f003 fc11 	bl	800634e <HAL_UART_Transmit_IT>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000470 	.word	0x20000470

08002b38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_UART_RxCpltCallback+0x64>)
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	d10c      	bne.n	8002b68 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <HAL_UART_RxCpltCallback+0x64>)
 8002b56:	2100      	movs	r1, #0
 8002b58:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_UART_RxCpltCallback+0x68>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
		index = 0;
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e009      	b.n	8002b7c <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b1d      	cmp	r3, #29
 8002b6e:	d805      	bhi.n	8002b7c <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b7a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_UART_RxCpltCallback+0x60>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_UART_RxCpltCallback+0x64>)
 8002b84:	4413      	add	r3, r2
 8002b86:	2201      	movs	r2, #1
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8002b8c:	f003 fc24 	bl	80063d8 <HAL_UART_Receive_IT>

}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200004b8 	.word	0x200004b8
 8002b9c:	20000160 	.word	0x20000160
 8002ba0:	20000180 	.word	0x20000180
 8002ba4:	20000470 	.word	0x20000470

08002ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bd2:	f7ff ff41 	bl	8002a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f004 fbf9 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bda:	f7fe fc15 	bl	8001408 <main>
  bx  lr    
 8002bde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002bec:	08007fc0 	.word	0x08007fc0
  ldr r2, =_sbss
 8002bf0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002bf4:	200004e4 	.word	0x200004e4

08002bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <HAL_Init+0x40>)
 8002c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_Init+0x40>)
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_Init+0x40>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c24:	2003      	movs	r0, #3
 8002c26:	f000 fc75 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f000 f808 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c30:	f7ff fb52 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x54>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_InitTick+0x58>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fc8d 	bl	800357e <HAL_SYSTICK_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00e      	b.n	8002c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d80a      	bhi.n	8002c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c74:	2200      	movs	r2, #0
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f000 fc55 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_InitTick+0x5c>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x20>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	200004bc 	.word	0x200004bc

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	200004bc 	.word	0x200004bc

08002ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff ffee 	bl	8002cc8 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d005      	beq.n	8002d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_Delay+0x44>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d06:	bf00      	nop
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8f7      	bhi.n	8002d08 <HAL_Delay+0x28>
  {
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000008 	.word	0x20000008

08002d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e033      	b.n	8002da6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff faf4 	bl	8002334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d6e:	f023 0302 	bic.w	r3, r3, #2
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9fe 	bl	800317c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
 8002d96:	e001      	b.n	8002d9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_Start+0x1a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e097      	b.n	8002efa <HAL_ADC_Start+0x14a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d018      	beq.n	8002e12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002df0:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_ADC_Start+0x158>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_ADC_Start+0x15c>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0c9a      	lsrs	r2, r3, #18
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d15f      	bne.n	8002ee0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	d106      	bne.n	8002e6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f023 0206 	bic.w	r2, r3, #6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_ADC_Start+0x160>)
 8002e7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d129      	bne.n	8002ef8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	e020      	b.n	8002ef8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_ADC_Start+0x164>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_ADC_Start+0x148>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d114      	bne.n	8002ef8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	e00b      	b.n	8002ef8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	431bde83 	.word	0x431bde83
 8002f10:	40012300 	.word	0x40012300
 8002f14:	40012000 	.word	0x40012000

08002f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e113      	b.n	800315c <HAL_ADC_ConfigChannel+0x244>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b09      	cmp	r3, #9
 8002f42:	d925      	bls.n	8002f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68d9      	ldr	r1, [r3, #12]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	3b1e      	subs	r3, #30
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43da      	mvns	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	400a      	ands	r2, r1
 8002f68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68d9      	ldr	r1, [r3, #12]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4403      	add	r3, r0
 8002f82:	3b1e      	subs	r3, #30
 8002f84:	409a      	lsls	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	e022      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4403      	add	r3, r0
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d824      	bhi.n	8003028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	3b05      	subs	r3, #5
 8002ff0:	221f      	movs	r2, #31
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	4618      	mov	r0, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b05      	subs	r3, #5
 800301a:	fa00 f203 	lsl.w	r2, r0, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
 8003026:	e04c      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d824      	bhi.n	800307a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b23      	subs	r3, #35	; 0x23
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43da      	mvns	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	400a      	ands	r2, r1
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	3b23      	subs	r3, #35	; 0x23
 800306c:	fa00 f203 	lsl.w	r2, r0, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
 8003078:	e023      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b41      	subs	r3, #65	; 0x41
 800308c:	221f      	movs	r2, #31
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b41      	subs	r3, #65	; 0x41
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_ADC_ConfigChannel+0x250>)
 80030c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a28      	ldr	r2, [pc, #160]	; (800316c <HAL_ADC_ConfigChannel+0x254>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10f      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1d8>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b12      	cmp	r3, #18
 80030d6:	d10b      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_ADC_ConfigChannel+0x254>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d12b      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x23a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_ADC_ConfigChannel+0x258>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <HAL_ADC_ConfigChannel+0x1f4>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b11      	cmp	r3, #17
 800310a:	d122      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_ADC_ConfigChannel+0x258>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_ADC_ConfigChannel+0x25c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_ADC_ConfigChannel+0x260>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	0c9a      	lsrs	r2, r3, #18
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003144:	e002      	b.n	800314c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3b01      	subs	r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f9      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40012300 	.word	0x40012300
 800316c:	40012000 	.word	0x40012000
 8003170:	10000012 	.word	0x10000012
 8003174:	20000000 	.word	0x20000000
 8003178:	431bde83 	.word	0x431bde83

0800317c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003184:	4b79      	ldr	r3, [pc, #484]	; (800336c <ADC_Init+0x1f0>)
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	4a58      	ldr	r2, [pc, #352]	; (8003370 <ADC_Init+0x1f4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e00f      	b.n	800327a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0202 	bic.w	r2, r2, #2
 8003288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e1b      	ldrb	r3, [r3, #24]
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	3b01      	subs	r3, #1
 80032d4:	035a      	lsls	r2, r3, #13
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e007      	b.n	80032f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	3b01      	subs	r3, #1
 800330c:	051a      	lsls	r2, r3, #20
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003332:	025a      	lsls	r2, r3, #9
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	029a      	lsls	r2, r3, #10
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40012300 	.word	0x40012300
 8003370:	0f000001 	.word	0x0f000001

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff fb90 	bl	8002cc8 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d008      	beq.n	80035c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e052      	b.n	800366e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0216 	bic.w	r2, r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <HAL_DMA_Abort+0x62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0208 	bic.w	r2, r2, #8
 8003606:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003618:	e013      	b.n	8003642 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800361a:	f7ff fb55 	bl	8002cc8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b05      	cmp	r3, #5
 8003626:	d90c      	bls.n	8003642 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2203      	movs	r2, #3
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e015      	b.n	800366e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e4      	bne.n	800361a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e00c      	b.n	80036ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2205      	movs	r2, #5
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e159      	b.n	800398c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 8148 	bne.w	8003986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	2b02      	cmp	r3, #2
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a2 	beq.w	8003986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_GPIO_Init+0x2e8>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_GPIO_Init+0x2e8>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <HAL_GPIO_Init+0x2e8>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_GPIO_Init+0x2ec>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a49      	ldr	r2, [pc, #292]	; (80039ac <HAL_GPIO_Init+0x2f0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d019      	beq.n	80038be <HAL_GPIO_Init+0x202>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <HAL_GPIO_Init+0x2f4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x1fe>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <HAL_GPIO_Init+0x2f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x1fa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a46      	ldr	r2, [pc, #280]	; (80039b8 <HAL_GPIO_Init+0x2fc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x1f6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a45      	ldr	r2, [pc, #276]	; (80039bc <HAL_GPIO_Init+0x300>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x1f2>
 80038aa:	2304      	movs	r3, #4
 80038ac:	e008      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e006      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e004      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038be:	2300      	movs	r3, #0
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	4093      	lsls	r3, r2
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d0:	4935      	ldr	r1, [pc, #212]	; (80039a8 <HAL_GPIO_Init+0x2ec>)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_GPIO_Init+0x304>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003902:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <HAL_GPIO_Init+0x304>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003908:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_GPIO_Init+0x304>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800392c:	4a24      	ldr	r2, [pc, #144]	; (80039c0 <HAL_GPIO_Init+0x304>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_GPIO_Init+0x304>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <HAL_GPIO_Init+0x304>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_GPIO_Init+0x304>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_GPIO_Init+0x304>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3301      	adds	r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	f67f aea2 	bls.w	80036d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	40020400 	.word	0x40020400
 80039b4:	40020800 	.word	0x40020800
 80039b8:	40020c00 	.word	0x40020c00
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40013c00 	.word	0x40013c00

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	041a      	lsls	r2, r3, #16
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	400b      	ands	r3, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	619a      	str	r2, [r3, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e12b      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fcb2 	bl	80023bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a90:	f001 fbbc 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a81      	ldr	r2, [pc, #516]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d807      	bhi.n	8003ab0 <HAL_I2C_Init+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_I2C_Init+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e006      	b.n	8003abe <HAL_I2C_Init+0x92>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_I2C_Init+0x27c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bf94      	ite	ls
 8003ab8:	2301      	movls	r3, #1
 8003aba:	2300      	movhi	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0e7      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a78      	ldr	r2, [pc, #480]	; (8003cac <HAL_I2C_Init+0x280>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0c9b      	lsrs	r3, r3, #18
 8003ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a6a      	ldr	r2, [pc, #424]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d802      	bhi.n	8003b00 <HAL_I2C_Init+0xd4>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3301      	adds	r3, #1
 8003afe:	e009      	b.n	8003b14 <HAL_I2C_Init+0xe8>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <HAL_I2C_Init+0x284>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	3301      	adds	r3, #1
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	495c      	ldr	r1, [pc, #368]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d819      	bhi.n	8003b68 <HAL_I2C_Init+0x13c>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e59      	subs	r1, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b48:	400b      	ands	r3, r1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_I2C_Init+0x138>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e59      	subs	r1, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	e051      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b64:	2304      	movs	r3, #4
 8003b66:	e04f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HAL_I2C_Init+0x168>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e012      	b.n	8003bba <HAL_I2C_Init+0x18e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x196>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <HAL_I2C_Init+0x1bc>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e58      	subs	r0, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	440b      	add	r3, r1
 8003bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	e00f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6809      	ldr	r1, [r1, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6911      	ldr	r1, [r2, #16]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	000186a0 	.word	0x000186a0
 8003ca4:	001e847f 	.word	0x001e847f
 8003ca8:	003d08ff 	.word	0x003d08ff
 8003cac:	431bde83 	.word	0x431bde83
 8003cb0:	10624dd3 	.word	0x10624dd3

08003cb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cce:	f7fe fffb 	bl	8002cc8 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	f040 80d9 	bne.w	8003e94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2319      	movs	r3, #25
 8003ce8:	2201      	movs	r2, #1
 8003cea:	496d      	ldr	r1, [pc, #436]	; (8003ea0 <HAL_I2C_Mem_Write+0x1ec>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fc7f 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0cc      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Mem_Write+0x56>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0c5      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d007      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2221      	movs	r2, #33	; 0x21
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <HAL_I2C_Mem_Write+0x1f0>)
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d72:	88f8      	ldrh	r0, [r7, #6]
 8003d74:	893a      	ldrh	r2, [r7, #8]
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4603      	mov	r3, r0
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fab6 	bl	80042f4 <I2C_RequestMemoryWrite>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d052      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e081      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fd00 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06b      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_I2C_Mem_Write+0x180>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1aa      	bne.n	8003d92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fcec 	bl	800481e <I2C_WaitOnBTFFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e016      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	00100002 	.word	0x00100002
 8003ea4:	ffff0000 	.word	0xffff0000

08003ea8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	817b      	strh	r3, [r7, #10]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	813b      	strh	r3, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec2:	f7fe ff01 	bl	8002cc8 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	f040 8208 	bne.w	80042e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2319      	movs	r3, #25
 8003edc:	2201      	movs	r2, #1
 8003ede:	497b      	ldr	r1, [pc, #492]	; (80040cc <HAL_I2C_Mem_Read+0x224>)
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fb85 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	e1fb      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Mem_Read+0x56>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e1f4      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d007      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2222      	movs	r2, #34	; 0x22
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <HAL_I2C_Mem_Read+0x228>)
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f66:	88f8      	ldrh	r0, [r7, #6]
 8003f68:	893a      	ldrh	r2, [r7, #8]
 8003f6a:	8979      	ldrh	r1, [r7, #10]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa52 	bl	8004420 <I2C_RequestMemoryRead>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e1b0      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d113      	bne.n	8003fb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e184      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e164      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d11b      	bne.n	8004036 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	e144      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800404c:	e138      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b03      	cmp	r3, #3
 8004054:	f200 80f1 	bhi.w	800423a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b01      	cmp	r3, #1
 800405e:	d123      	bne.n	80040a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fc1b 	bl	80048a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e139      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a6:	e10b      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d14e      	bne.n	800414e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2200      	movs	r2, #0
 80040b8:	4906      	ldr	r1, [pc, #24]	; (80040d4 <HAL_I2C_Mem_Read+0x22c>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa98 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e10e      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
 80040ca:	bf00      	nop
 80040cc:	00100002 	.word	0x00100002
 80040d0:	ffff0000 	.word	0xffff0000
 80040d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800414c:	e0b8      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2200      	movs	r2, #0
 8004156:	4966      	ldr	r1, [pc, #408]	; (80042f0 <HAL_I2C_Mem_Read+0x448>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa49 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0bf      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2200      	movs	r2, #0
 80041b2:	494f      	ldr	r1, [pc, #316]	; (80042f0 <HAL_I2C_Mem_Read+0x448>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fa1b 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e091      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004238:	e042      	b.n	80042c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb2e 	bl	80048a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e04c      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d118      	bne.n	80042c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f aec2 	bne.w	800404e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010004 	.word	0x00010004

080042f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4603      	mov	r3, r0
 8004304:	817b      	strh	r3, [r7, #10]
 8004306:	460b      	mov	r3, r1
 8004308:	813b      	strh	r3, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	2200      	movs	r2, #0
 8004326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f960 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004344:	d103      	bne.n	800434e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e05f      	b.n	8004412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	492d      	ldr	r1, [pc, #180]	; (800441c <I2C_RequestMemoryWrite+0x128>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f998 	bl	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e04c      	b.n	8004412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fa02 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e02b      	b.n	8004412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e021      	b.n	8004410 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f9dc 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d107      	bne.n	8004402 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e005      	b.n	8004412 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	00010002 	.word	0x00010002

08004420 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2200      	movs	r2, #0
 8004462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8c2 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004480:	d103      	bne.n	800448a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0aa      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800449c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	4952      	ldr	r1, [pc, #328]	; (80045ec <I2C_RequestMemoryRead+0x1cc>)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f8fa 	bl	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e097      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f964 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e076      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	e021      	b.n	800454c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	b29b      	uxth	r3, r3
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f93e 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e050      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004542:	893b      	ldrh	r3, [r7, #8]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	6a39      	ldr	r1, [r7, #32]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f923 	bl	800479c <I2C_WaitOnTXEFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b04      	cmp	r3, #4
 8004562:	d107      	bne.n	8004574 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e035      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004586:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2200      	movs	r2, #0
 8004590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f82b 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00d      	beq.n	80045bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d103      	bne.n	80045b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e013      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045bc:	897b      	ldrh	r3, [r7, #10]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	4906      	ldr	r1, [pc, #24]	; (80045ec <I2C_RequestMemoryRead+0x1cc>)
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f863 	bl	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004600:	e025      	b.n	800464e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d021      	beq.n	800464e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe fb5d 	bl	8002cc8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d116      	bne.n	800464e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e023      	b.n	8004696 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d10d      	bne.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	43da      	mvns	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	e00c      	b.n	800468e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d0b6      	beq.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ac:	e051      	b.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d123      	bne.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e046      	b.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d021      	beq.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fe fadb 	bl	8002cc8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e020      	b.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10c      	bne.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e00b      	b.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	43da      	mvns	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d18d      	bne.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a8:	e02d      	b.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8ce 	bl	800494c <I2C_IsAcknowledgeFailed>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e02d      	b.n	8004816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d021      	beq.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fe fa81 	bl	8002cc8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d116      	bne.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e007      	b.n	8004816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d1ca      	bne.n	80047aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800482a:	e02d      	b.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f88d 	bl	800494c <I2C_IsAcknowledgeFailed>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e02d      	b.n	8004898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d021      	beq.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004844:	f7fe fa40 	bl	8002cc8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d116      	bne.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e007      	b.n	8004898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d1ca      	bne.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ac:	e042      	b.n	8004934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d119      	bne.n	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0210 	mvn.w	r2, #16
 80048c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e029      	b.n	8004944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f0:	f7fe f9ea 	bl	8002cc8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d302      	bcc.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d116      	bne.n	8004934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e007      	b.n	8004944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d1b5      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004962:	d11b      	bne.n	800499c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800496c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f043 0204 	orr.w	r2, r3, #4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e267      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d075      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d00c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d6:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d112      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4b82      	ldr	r3, [pc, #520]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x108>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d157      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e242      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x74>
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a75      	ldr	r2, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x98>
 8004a2a:	4b70      	ldr	r3, [pc, #448]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6f      	ldr	r2, [pc, #444]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6c      	ldr	r2, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0xb0>
 8004a44:	4b69      	ldr	r3, [pc, #420]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a68      	ldr	r2, [pc, #416]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b66      	ldr	r3, [pc, #408]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a65      	ldr	r2, [pc, #404]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fe f930 	bl	8002cc8 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fe f92c 	bl	8002cc8 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	; 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e207      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0xc0>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fe f91c 	bl	8002cc8 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fe f918 	bl	8002cc8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1f3      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	4b51      	ldr	r3, [pc, #324]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0xe8>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b44      	ldr	r3, [pc, #272]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d116      	bne.n	8004b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_RCC_OscConfig+0x152>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e1c7      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4937      	ldr	r1, [pc, #220]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b12:	e03a      	b.n	8004b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_OscConfig+0x244>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fe f8d1 	bl	8002cc8 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fe f8cd 	bl	8002cc8 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1a8      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4925      	ldr	r1, [pc, #148]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	e015      	b.n	8004b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x244>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe f8b0 	bl	8002cc8 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fe f8ac 	bl	8002cc8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e187      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d036      	beq.n	8004c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <HAL_RCC_OscConfig+0x248>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fe f890 	bl	8002cc8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bac:	f7fe f88c 	bl	8002cc8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e167      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_OscConfig+0x240>)
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x200>
 8004bca:	e01b      	b.n	8004c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCC_OscConfig+0x248>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd2:	f7fe f879 	bl	8002cc8 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e00e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bda:	f7fe f875 	bl	8002cc8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d907      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e150      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ea      	bne.n	8004bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8097 	beq.w	8004d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	4b7d      	ldr	r3, [pc, #500]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a7c      	ldr	r2, [pc, #496]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	4b7a      	ldr	r3, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b77      	ldr	r3, [pc, #476]	; (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b74      	ldr	r3, [pc, #464]	; (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a73      	ldr	r2, [pc, #460]	; (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fe f835 	bl	8002cc8 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fe f831 	bl	8002cc8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e10c      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2ea>
 8004c88:	4b64      	ldr	r3, [pc, #400]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a63      	ldr	r2, [pc, #396]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
 8004c94:	e01c      	b.n	8004cd0 <HAL_RCC_OscConfig+0x324>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x30c>
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	4a5e      	ldr	r2, [pc, #376]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8004caa:	4b5c      	ldr	r3, [pc, #368]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4a5b      	ldr	r2, [pc, #364]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x324>
 8004cb8:	4b58      	ldr	r3, [pc, #352]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a57      	ldr	r2, [pc, #348]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a54      	ldr	r2, [pc, #336]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fff6 	bl	8002cc8 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fd fff2 	bl	8002cc8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0cb      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ee      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x334>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d04:	f7fd ffe0 	bl	8002cc8 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fd ffdc 	bl	8002cc8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0b5      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	4b3e      	ldr	r3, [pc, #248]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ee      	bne.n	8004d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	4a38      	ldr	r2, [pc, #224]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a1 	beq.w	8004e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d4a:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d05c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d141      	bne.n	8004de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd ffb0 	bl	8002cc8 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fd ffac 	bl	8002cc8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e087      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	019b      	lsls	r3, r3, #6
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	491b      	ldr	r1, [pc, #108]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db4:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fd ff85 	bl	8002cc8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fd ff81 	bl	8002cc8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e05c      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x416>
 8004de0:	e054      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fd ff6e 	bl	8002cc8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fd ff6a 	bl	8002cc8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e045      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x444>
 8004e0e:	e03d      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e038      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_RCC_OscConfig+0x4ec>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d028      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d121      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d11a      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e58:	4013      	ands	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d111      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	3b01      	subs	r3, #1
 8004e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0cc      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d90c      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b65      	ldr	r3, [pc, #404]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0b8      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a58      	ldr	r2, [pc, #352]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f08:	4b53      	ldr	r3, [pc, #332]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b50      	ldr	r3, [pc, #320]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	494d      	ldr	r1, [pc, #308]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d044      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b47      	ldr	r3, [pc, #284]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d119      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e067      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b37      	ldr	r3, [pc, #220]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4934      	ldr	r1, [pc, #208]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fe9c 	bl	8002cc8 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd fe98 	bl	8002cc8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e04f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d20c      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b22      	ldr	r3, [pc, #136]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e032      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4916      	ldr	r1, [pc, #88]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500e:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	490e      	ldr	r1, [pc, #56]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005022:	f000 f821 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490a      	ldr	r1, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_ClockConfig+0x1c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fdfc 	bl	8002c40 <HAL_InitTick>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023c00 	.word	0x40023c00
 8005058:	40023800 	.word	0x40023800
 800505c:	08007e64 	.word	0x08007e64
 8005060:	20000000 	.word	0x20000000
 8005064:	20000004 	.word	0x20000004

08005068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b090      	sub	sp, #64	; 0x40
 800506e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
 8005074:	2300      	movs	r3, #0
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005078:	2300      	movs	r3, #0
 800507a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005080:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d00d      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x40>
 800508c:	2b08      	cmp	r3, #8
 800508e:	f200 80a1 	bhi.w	80051d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x34>
 8005096:	2b04      	cmp	r3, #4
 8005098:	d003      	beq.n	80050a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800509a:	e09b      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b53      	ldr	r3, [pc, #332]	; (80051ec <HAL_RCC_GetSysClockFreq+0x184>)
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050a0:	e09b      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a2:	4b53      	ldr	r3, [pc, #332]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050a6:	e098      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a8:	4b4f      	ldr	r3, [pc, #316]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b2:	4b4d      	ldr	r3, [pc, #308]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d028      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050be:	4b4a      	ldr	r3, [pc, #296]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	2200      	movs	r2, #0
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	627a      	str	r2, [r7, #36]	; 0x24
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050d0:	2100      	movs	r1, #0
 80050d2:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d4:	fb03 f201 	mul.w	r2, r3, r1
 80050d8:	2300      	movs	r3, #0
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	4413      	add	r3, r2
 80050e0:	4a43      	ldr	r2, [pc, #268]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050e2:	fba0 1202 	umull	r1, r2, r0, r2
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e8:	460a      	mov	r2, r1
 80050ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80050ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ee:	4413      	add	r3, r2
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	2200      	movs	r2, #0
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	61fa      	str	r2, [r7, #28]
 80050fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005102:	f7fb fcbb 	bl	8000a7c <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4613      	mov	r3, r2
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510e:	e053      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005110:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	2200      	movs	r2, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	617a      	str	r2, [r7, #20]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005122:	f04f 0b00 	mov.w	fp, #0
 8005126:	4652      	mov	r2, sl
 8005128:	465b      	mov	r3, fp
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	0159      	lsls	r1, r3, #5
 8005134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005138:	0150      	lsls	r0, r2, #5
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	ebb2 080a 	subs.w	r8, r2, sl
 8005142:	eb63 090b 	sbc.w	r9, r3, fp
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005152:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005156:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800515a:	ebb2 0408 	subs.w	r4, r2, r8
 800515e:	eb63 0509 	sbc.w	r5, r3, r9
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	00eb      	lsls	r3, r5, #3
 800516c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005170:	00e2      	lsls	r2, r4, #3
 8005172:	4614      	mov	r4, r2
 8005174:	461d      	mov	r5, r3
 8005176:	eb14 030a 	adds.w	r3, r4, sl
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	eb45 030b 	adc.w	r3, r5, fp
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800518e:	4629      	mov	r1, r5
 8005190:	028b      	lsls	r3, r1, #10
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005198:	4621      	mov	r1, r4
 800519a:	028a      	lsls	r2, r1, #10
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	2200      	movs	r2, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	60fa      	str	r2, [r7, #12]
 80051a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ac:	f7fb fc66 	bl	8000a7c <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	3301      	adds	r3, #1
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d2:	e002      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetSysClockFreq+0x184>)
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3740      	adds	r7, #64	; 0x40
 80051e0:	46bd      	mov	sp, r7
 80051e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	017d7840 	.word	0x017d7840

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <HAL_RCC_GetHCLKFreq+0x14>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff0 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800
 8005230:	08007e74 	.word	0x08007e74

08005234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005238:	f7ff ffdc 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	0b5b      	lsrs	r3, r3, #13
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40023800 	.word	0x40023800
 8005258:	08007e74 	.word	0x08007e74

0800525c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e07b      	b.n	8005366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d009      	beq.n	8005294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
 8005286:	e005      	b.n	8005294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd f976 	bl	80025a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	ea42 0103 	orr.w	r1, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0104 	and.w	r1, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0210 	and.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e041      	b.n	8005404 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fd f94b 	bl	8002630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fbf5 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e041      	b.n	80054a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f839 	bl	80054aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fba6 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_TIM_PWM_Start+0x24>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e022      	b.n	800552a <HAL_TIM_PWM_Start+0x6a>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d109      	bne.n	80054fe <HAL_TIM_PWM_Start+0x3e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e015      	b.n	800552a <HAL_TIM_PWM_Start+0x6a>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d109      	bne.n	8005518 <HAL_TIM_PWM_Start+0x58>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e008      	b.n	800552a <HAL_TIM_PWM_Start+0x6a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e068      	b.n	8005604 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0x82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	e013      	b.n	800556a <HAL_TIM_PWM_Start+0xaa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0x92>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	e00b      	b.n	800556a <HAL_TIM_PWM_Start+0xaa>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005560:	e003      	b.n	800556a <HAL_TIM_PWM_Start+0xaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fdb8 	bl	80060e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a23      	ldr	r2, [pc, #140]	; (800560c <HAL_TIM_PWM_Start+0x14c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d107      	bne.n	8005592 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_TIM_PWM_Start+0x14c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIM_PWM_Start+0x10e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d013      	beq.n	80055ce <HAL_TIM_PWM_Start+0x10e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a19      	ldr	r2, [pc, #100]	; (8005610 <HAL_TIM_PWM_Start+0x150>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIM_PWM_Start+0x10e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_TIM_PWM_Start+0x154>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIM_PWM_Start+0x10e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIM_PWM_Start+0x158>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_PWM_Start+0x10e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <HAL_TIM_PWM_Start+0x15c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d010      	beq.n	8005602 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	e007      	b.n	8005602 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e097      	b.n	8005764 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fd f827 	bl	800269c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f000 fa91 	bl	8005b9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	4313      	orrs	r3, r2
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056c0:	f023 030c 	bic.w	r3, r3, #12
 80056c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	4313      	orrs	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	011a      	lsls	r2, r3, #4
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	031b      	lsls	r3, r3, #12
 80056f0:	4313      	orrs	r3, r2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4313      	orrs	r3, r2
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005784:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800578c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005794:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d102      	bne.n	80057a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057a2:	7b7b      	ldrb	r3, [r7, #13]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e069      	b.n	8005880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	e031      	b.n	8005822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d110      	bne.n	80057e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ca:	7b3b      	ldrb	r3, [r7, #12]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e055      	b.n	8005880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e4:	e01d      	b.n	8005822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d108      	bne.n	80057fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d105      	bne.n	80057fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f8:	7b3b      	ldrb	r3, [r7, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e03e      	b.n	8005880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_TIM_Encoder_Start+0xc4>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d008      	beq.n	8005840 <HAL_TIM_Encoder_Start+0xd4>
 800582e:	e00f      	b.n	8005850 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fc55 	bl	80060e8 <TIM_CCxChannelCmd>
      break;
 800583e:	e016      	b.n	800586e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	2104      	movs	r1, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fc4d 	bl	80060e8 <TIM_CCxChannelCmd>
      break;
 800584e:	e00e      	b.n	800586e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fc45 	bl	80060e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	2104      	movs	r1, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fc3e 	bl	80060e8 <TIM_CCxChannelCmd>
      break;
 800586c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0ae      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	f200 809f 	bhi.w	80059f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	080059f5 	.word	0x080059f5
 80058c4:	080059f5 	.word	0x080059f5
 80058c8:	080059f5 	.word	0x080059f5
 80058cc:	08005931 	.word	0x08005931
 80058d0:	080059f5 	.word	0x080059f5
 80058d4:	080059f5 	.word	0x080059f5
 80058d8:	080059f5 	.word	0x080059f5
 80058dc:	08005973 	.word	0x08005973
 80058e0:	080059f5 	.word	0x080059f5
 80058e4:	080059f5 	.word	0x080059f5
 80058e8:	080059f5 	.word	0x080059f5
 80058ec:	080059b3 	.word	0x080059b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f9d0 	bl	8005c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	619a      	str	r2, [r3, #24]
      break;
 800592e:	e064      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa16 	bl	8005d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	619a      	str	r2, [r3, #24]
      break;
 8005970:	e043      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa61 	bl	8005e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0208 	orr.w	r2, r2, #8
 800598c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0204 	bic.w	r2, r2, #4
 800599c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
      break;
 80059b0:	e023      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 faab 	bl	8005f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	021a      	lsls	r2, r3, #8
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	61da      	str	r2, [r3, #28]
      break;
 80059f2:	e002      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
      break;
 80059f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_ConfigClockSource+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0b4      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x186>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a60:	d03e      	beq.n	8005ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a66:	f200 8087 	bhi.w	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	f000 8086 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x172>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d87f      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b70      	cmp	r3, #112	; 0x70
 8005a7a:	d01a      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d87b      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d050      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x11a>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d877      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b50      	cmp	r3, #80	; 0x50
 8005a8a:	d03c      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xfa>
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d873      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d058      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x13a>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d86f      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	d064      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d86b      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d060      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d867      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05c      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d05a      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	e062      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f000 faf1 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e04f      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f000 fada 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b02:	609a      	str	r2, [r3, #8]
      break;
 8005b04:	e03c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 fa4e 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2150      	movs	r1, #80	; 0x50
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 faa7 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005b24:	e02c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 fa6d 	bl	8006012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2160      	movs	r1, #96	; 0x60
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa97 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005b44:	e01c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 fa2e 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fa87 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005b64:	e00c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f000 fa7e 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005b76:	e003      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	e000      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a34      	ldr	r2, [pc, #208]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a31      	ldr	r2, [pc, #196]	; (8005c84 <TIM_Base_SetConfig+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <TIM_Base_SetConfig+0xec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <TIM_Base_SetConfig+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <TIM_Base_SetConfig+0xe8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <TIM_Base_SetConfig+0xec>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_Base_SetConfig+0xf0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <TIM_Base_SetConfig+0xf4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <TIM_Base_SetConfig+0xf8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <TIM_Base_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0302 	bic.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1c      	ldr	r2, [pc, #112]	; (8005d64 <TIM_OC1_SetConfig+0xc8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10c      	bne.n	8005d12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0308 	bic.w	r3, r3, #8
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <TIM_OC1_SetConfig+0xc8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d111      	bne.n	8005d3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000

08005d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <TIM_OC2_SetConfig+0xd4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10d      	bne.n	8005de4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC2_SetConfig+0xd4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000

08005e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <TIM_OC3_SetConfig+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10d      	bne.n	8005eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <TIM_OC3_SetConfig+0xd0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d113      	bne.n	8005eea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40010000 	.word	0x40010000

08005f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <TIM_OC4_SetConfig+0x9c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d109      	bne.n	8005f88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0210 	bic.w	r2, r3, #16
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	f043 0307 	orr.w	r3, r3, #7
 8006094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1a      	ldr	r2, [r3, #32]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e050      	b.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d013      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a16      	ldr	r2, [pc, #88]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10c      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40014000 	.word	0x40014000

08006210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006228:	2302      	movs	r3, #2
 800622a:	e03d      	b.n	80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e03f      	b.n	8006346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fc fafa 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	; 0x24
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fd23 	bl	8006d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800632c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	4613      	mov	r3, r2
 800635a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	d130      	bne.n	80063ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Transmit_IT+0x26>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e029      	b.n	80063cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UART_Transmit_IT+0x38>
 8006382:	2302      	movs	r3, #2
 8006384:	e022      	b.n	80063cc <HAL_UART_Transmit_IT+0x7e>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	88fa      	ldrh	r2, [r7, #6]
 800639e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2221      	movs	r2, #33	; 0x21
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
  }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d11d      	bne.n	800642e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_UART_Receive_IT+0x26>
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e016      	b.n	8006430 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UART_Receive_IT+0x38>
 800640c:	2302      	movs	r3, #2
 800640e:	e00f      	b.n	8006430 <HAL_UART_Receive_IT+0x58>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	461a      	mov	r2, r3
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fab5 	bl	8006994 <UART_Start_Receive_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	e000      	b.n	8006430 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0ba      	sub	sp, #232	; 0xe8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_UART_IRQHandler+0x66>
 800648a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb99 	bl	8006bce <UART_Receive_IT>
      return;
 800649c:	e256      	b.n	800694c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800649e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80de 	beq.w	8006664 <HAL_UART_IRQHandler+0x22c>
 80064a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80d1 	beq.w	8006664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_UART_IRQHandler+0xae>
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xd2>
 80064f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0202 	orr.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_UART_IRQHandler+0xf6>
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_UART_IRQHandler+0x126>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d105      	bne.n	8006552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0208 	orr.w	r2, r3, #8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 81ed 	beq.w	8006942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_UART_IRQHandler+0x14e>
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb24 	bl	8006bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <HAL_UART_IRQHandler+0x17a>
 80065aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04f      	beq.n	8006652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa2c 	bl	8006a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d141      	bne.n	800664a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800660a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	2b00      	cmp	r3, #0
 8006618:	d013      	beq.n	8006642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	4a7d      	ldr	r2, [pc, #500]	; (8006814 <HAL_UART_IRQHandler+0x3dc>)
 8006620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd f825 	bl	8003676 <HAL_DMA_Abort_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e00e      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f990 	bl	8006968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	e00a      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f98c 	bl	8006968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	e006      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f988 	bl	8006968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800665e:	e170      	b.n	8006942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	bf00      	nop
    return;
 8006662:	e16e      	b.n	8006942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 814a 	bne.w	8006902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8143 	beq.w	8006902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 813c 	beq.w	8006902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	f040 80b4 	bne.w	8006818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8140 	beq.w	8006946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ce:	429a      	cmp	r2, r3
 80066d0:	f080 8139 	bcs.w	8006946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e6:	f000 8088 	beq.w	80067fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800671a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800672e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1d9      	bne.n	80066ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3314      	adds	r3, #20
 800673c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800675a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800675e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800676c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e1      	bne.n	8006736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800679c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e3      	bne.n	8006772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e3      	bne.n	80067b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fc fece 	bl	8003596 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006802:	b29b      	uxth	r3, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8b6 	bl	800697c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006810:	e099      	b.n	8006946 <HAL_UART_IRQHandler+0x50e>
 8006812:	bf00      	nop
 8006814:	08006ad7 	.word	0x08006ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006820:	b29b      	uxth	r3, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 808b 	beq.w	800694a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8086 	beq.w	800694a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006862:	647a      	str	r2, [r7, #68]	; 0x44
 8006864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	623b      	str	r3, [r7, #32]
   return(result);
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800689a:	633a      	str	r2, [r7, #48]	; 0x30
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e3      	bne.n	8006876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	69b9      	ldr	r1, [r7, #24]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	617b      	str	r3, [r7, #20]
   return(result);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e3      	bne.n	80068bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f83e 	bl	800697c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006900:	e023      	b.n	800694a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <HAL_UART_IRQHandler+0x4ea>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8ef 	bl	8006afe <UART_Transmit_IT>
    return;
 8006920:	e014      	b.n	800694c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <HAL_UART_IRQHandler+0x514>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f92f 	bl	8006b9e <UART_EndTransmit_IT>
    return;
 8006940:	e004      	b.n	800694c <HAL_UART_IRQHandler+0x514>
    return;
 8006942:	bf00      	nop
 8006944:	e002      	b.n	800694c <HAL_UART_IRQHandler+0x514>
      return;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_UART_IRQHandler+0x514>
      return;
 800694a:	bf00      	nop
  }
}
 800694c:	37e8      	adds	r7, #232	; 0xe8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2222      	movs	r2, #34	; 0x22
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0220 	orr.w	r2, r2, #32
 8006a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b095      	sub	sp, #84	; 0x54
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a38:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d119      	bne.n	8006abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa8:	61ba      	str	r2, [r7, #24]
 8006aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006aca:	bf00      	nop
 8006acc:	3754      	adds	r7, #84	; 0x54
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff ff39 	bl	8006968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b21      	cmp	r3, #33	; 0x21
 8006b10:	d13e      	bne.n	8006b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1a:	d114      	bne.n	8006b46 <UART_Transmit_IT+0x48>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d110      	bne.n	8006b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	1c9a      	adds	r2, r3, #2
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]
 8006b44:	e008      	b.n	8006b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	1c59      	adds	r1, r3, #1
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6211      	str	r1, [r2, #32]
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	4619      	mov	r1, r3
 8006b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10f      	bne.n	8006b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff fec8 	bl	8006954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08c      	sub	sp, #48	; 0x30
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	f040 80ab 	bne.w	8006d3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d117      	bne.n	8006c1e <UART_Receive_IT+0x50>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d113      	bne.n	8006c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	1c9a      	adds	r2, r3, #2
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c1c:	e026      	b.n	8006c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d007      	beq.n	8006c42 <UART_Receive_IT+0x74>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <UART_Receive_IT+0x82>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e008      	b.n	8006c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d15a      	bne.n	8006d36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0220 	bic.w	r2, r2, #32
 8006c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d135      	bne.n	8006d2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	623a      	str	r2, [r7, #32]
 8006ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	69f9      	ldr	r1, [r7, #28]
 8006cec:	6a3a      	ldr	r2, [r7, #32]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d10a      	bne.n	8006d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe29 	bl	800697c <HAL_UARTEx_RxEventCallback>
 8006d2a:	e002      	b.n	8006d32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fb ff03 	bl	8002b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e002      	b.n	8006d3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e000      	b.n	8006d3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d3a:	2302      	movs	r3, #2
  }
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3730      	adds	r7, #48	; 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0c0      	sub	sp, #256	; 0x100
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	68d9      	ldr	r1, [r3, #12]
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	ea40 0301 	orr.w	r3, r0, r1
 8006d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d9c:	f021 010c 	bic.w	r1, r1, #12
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006daa:	430b      	orrs	r3, r1
 8006dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	6999      	ldr	r1, [r3, #24]
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	ea40 0301 	orr.w	r3, r0, r1
 8006dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b8f      	ldr	r3, [pc, #572]	; (8007010 <UART_SetConfig+0x2cc>)
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d005      	beq.n	8006de4 <UART_SetConfig+0xa0>
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b8d      	ldr	r3, [pc, #564]	; (8007014 <UART_SetConfig+0x2d0>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d104      	bne.n	8006dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006de4:	f7fe fa26 	bl	8005234 <HAL_RCC_GetPCLK2Freq>
 8006de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dec:	e003      	b.n	8006df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dee:	f7fe fa0d 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8006df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e00:	f040 810c 	bne.w	800701c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e16:	4622      	mov	r2, r4
 8006e18:	462b      	mov	r3, r5
 8006e1a:	1891      	adds	r1, r2, r2
 8006e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e1e:	415b      	adcs	r3, r3
 8006e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e26:	4621      	mov	r1, r4
 8006e28:	eb12 0801 	adds.w	r8, r2, r1
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	eb43 0901 	adc.w	r9, r3, r1
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e46:	4690      	mov	r8, r2
 8006e48:	4699      	mov	r9, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	eb18 0303 	adds.w	r3, r8, r3
 8006e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e54:	462b      	mov	r3, r5
 8006e56:	eb49 0303 	adc.w	r3, r9, r3
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e72:	460b      	mov	r3, r1
 8006e74:	18db      	adds	r3, r3, r3
 8006e76:	653b      	str	r3, [r7, #80]	; 0x50
 8006e78:	4613      	mov	r3, r2
 8006e7a:	eb42 0303 	adc.w	r3, r2, r3
 8006e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e88:	f7f9 fdf8 	bl	8000a7c <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4b61      	ldr	r3, [pc, #388]	; (8007018 <UART_SetConfig+0x2d4>)
 8006e92:	fba3 2302 	umull	r2, r3, r3, r2
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	011c      	lsls	r4, r3, #4
 8006e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006edc:	4692      	mov	sl, r2
 8006ede:	469b      	mov	fp, r3
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eea:	464b      	mov	r3, r9
 8006eec:	eb4b 0303 	adc.w	r3, fp, r3
 8006ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	18db      	adds	r3, r3, r3
 8006f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f0e:	4613      	mov	r3, r2
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
 8006f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f1e:	f7f9 fdad 	bl	8000a7c <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <UART_SetConfig+0x2d4>)
 8006f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2264      	movs	r2, #100	; 0x64
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	1acb      	subs	r3, r1, r3
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <UART_SetConfig+0x2d4>)
 8006f40:	fba3 2302 	umull	r2, r3, r3, r2
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f4c:	441c      	add	r4, r3
 8006f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f70:	4641      	mov	r1, r8
 8006f72:	1851      	adds	r1, r2, r1
 8006f74:	6339      	str	r1, [r7, #48]	; 0x30
 8006f76:	4649      	mov	r1, r9
 8006f78:	414b      	adcs	r3, r1
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f88:	4659      	mov	r1, fp
 8006f8a:	00cb      	lsls	r3, r1, #3
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f92:	4651      	mov	r1, sl
 8006f94:	00ca      	lsls	r2, r1, #3
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	eb42 0303 	adc.w	r3, r2, r3
 8006fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	18db      	adds	r3, r3, r3
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fca:	4613      	mov	r3, r2
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fda:	f7f9 fd4f 	bl	8000a7c <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	; (8007018 <UART_SetConfig+0x2d4>)
 8006fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	2164      	movs	r1, #100	; 0x64
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	3332      	adds	r3, #50	; 0x32
 8006ff6:	4a08      	ldr	r2, [pc, #32]	; (8007018 <UART_SetConfig+0x2d4>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f003 0207 	and.w	r2, r3, #7
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4422      	add	r2, r4
 800700a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800700c:	e105      	b.n	800721a <UART_SetConfig+0x4d6>
 800700e:	bf00      	nop
 8007010:	40011000 	.word	0x40011000
 8007014:	40011400 	.word	0x40011400
 8007018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800701c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007020:	2200      	movs	r2, #0
 8007022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800702a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800702e:	4642      	mov	r2, r8
 8007030:	464b      	mov	r3, r9
 8007032:	1891      	adds	r1, r2, r2
 8007034:	6239      	str	r1, [r7, #32]
 8007036:	415b      	adcs	r3, r3
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
 800703a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800703e:	4641      	mov	r1, r8
 8007040:	1854      	adds	r4, r2, r1
 8007042:	4649      	mov	r1, r9
 8007044:	eb43 0501 	adc.w	r5, r3, r1
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	00eb      	lsls	r3, r5, #3
 8007052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007056:	00e2      	lsls	r2, r4, #3
 8007058:	4614      	mov	r4, r2
 800705a:	461d      	mov	r5, r3
 800705c:	4643      	mov	r3, r8
 800705e:	18e3      	adds	r3, r4, r3
 8007060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007064:	464b      	mov	r3, r9
 8007066:	eb45 0303 	adc.w	r3, r5, r3
 800706a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800707a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800708a:	4629      	mov	r1, r5
 800708c:	008b      	lsls	r3, r1, #2
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007094:	4621      	mov	r1, r4
 8007096:	008a      	lsls	r2, r1, #2
 8007098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800709c:	f7f9 fcee 	bl	8000a7c <__aeabi_uldivmod>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4b60      	ldr	r3, [pc, #384]	; (8007228 <UART_SetConfig+0x4e4>)
 80070a6:	fba3 2302 	umull	r2, r3, r3, r2
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	011c      	lsls	r4, r3, #4
 80070ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	61b9      	str	r1, [r7, #24]
 80070c8:	415b      	adcs	r3, r3
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d0:	4641      	mov	r1, r8
 80070d2:	1851      	adds	r1, r2, r1
 80070d4:	6139      	str	r1, [r7, #16]
 80070d6:	4649      	mov	r1, r9
 80070d8:	414b      	adcs	r3, r1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070e8:	4659      	mov	r1, fp
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4651      	mov	r1, sl
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4642      	mov	r2, r8
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007104:	464b      	mov	r3, r9
 8007106:	460a      	mov	r2, r1
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	67bb      	str	r3, [r7, #120]	; 0x78
 800711a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007128:	4649      	mov	r1, r9
 800712a:	008b      	lsls	r3, r1, #2
 800712c:	4641      	mov	r1, r8
 800712e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007132:	4641      	mov	r1, r8
 8007134:	008a      	lsls	r2, r1, #2
 8007136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800713a:	f7f9 fc9f 	bl	8000a7c <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4b39      	ldr	r3, [pc, #228]	; (8007228 <UART_SetConfig+0x4e4>)
 8007144:	fba3 1302 	umull	r1, r3, r3, r2
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	2164      	movs	r1, #100	; 0x64
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	3332      	adds	r3, #50	; 0x32
 8007156:	4a34      	ldr	r2, [pc, #208]	; (8007228 <UART_SetConfig+0x4e4>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007162:	441c      	add	r4, r3
 8007164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007168:	2200      	movs	r2, #0
 800716a:	673b      	str	r3, [r7, #112]	; 0x70
 800716c:	677a      	str	r2, [r7, #116]	; 0x74
 800716e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	1891      	adds	r1, r2, r2
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	415b      	adcs	r3, r3
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007182:	4641      	mov	r1, r8
 8007184:	1851      	adds	r1, r2, r1
 8007186:	6039      	str	r1, [r7, #0]
 8007188:	4649      	mov	r1, r9
 800718a:	414b      	adcs	r3, r1
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800719a:	4659      	mov	r1, fp
 800719c:	00cb      	lsls	r3, r1, #3
 800719e:	4651      	mov	r1, sl
 80071a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a4:	4651      	mov	r1, sl
 80071a6:	00ca      	lsls	r2, r1, #3
 80071a8:	4610      	mov	r0, r2
 80071aa:	4619      	mov	r1, r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	4642      	mov	r2, r8
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b4:	464b      	mov	r3, r9
 80071b6:	460a      	mov	r2, r1
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	663b      	str	r3, [r7, #96]	; 0x60
 80071c8:	667a      	str	r2, [r7, #100]	; 0x64
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071d6:	4649      	mov	r1, r9
 80071d8:	008b      	lsls	r3, r1, #2
 80071da:	4641      	mov	r1, r8
 80071dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e0:	4641      	mov	r1, r8
 80071e2:	008a      	lsls	r2, r1, #2
 80071e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071e8:	f7f9 fc48 	bl	8000a7c <__aeabi_uldivmod>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <UART_SetConfig+0x4e4>)
 80071f2:	fba3 1302 	umull	r1, r3, r3, r2
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	2164      	movs	r1, #100	; 0x64
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	3332      	adds	r3, #50	; 0x32
 8007204:	4a08      	ldr	r2, [pc, #32]	; (8007228 <UART_SetConfig+0x4e4>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4422      	add	r2, r4
 8007218:	609a      	str	r2, [r3, #8]
}
 800721a:	bf00      	nop
 800721c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007220:	46bd      	mov	sp, r7
 8007222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007226:	bf00      	nop
 8007228:	51eb851f 	.word	0x51eb851f

0800722c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007230:	4904      	ldr	r1, [pc, #16]	; (8007244 <MX_FATFS_Init+0x18>)
 8007232:	4805      	ldr	r0, [pc, #20]	; (8007248 <MX_FATFS_Init+0x1c>)
 8007234:	f000 f8b0 	bl	8007398 <FATFS_LinkDriver>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	4b03      	ldr	r3, [pc, #12]	; (800724c <MX_FATFS_Init+0x20>)
 800723e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007240:	bf00      	nop
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200004c4 	.word	0x200004c4
 8007248:	2000000c 	.word	0x2000000c
 800724c:	200004c0 	.word	0x200004c0

08007250 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <USER_initialize+0x24>)
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <USER_initialize+0x24>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000009 	.word	0x20000009

08007278 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007282:	4b06      	ldr	r3, [pc, #24]	; (800729c <USER_status+0x24>)
 8007284:	2201      	movs	r2, #1
 8007286:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <USER_status+0x24>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000009 	.word	0x20000009

080072a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80072b0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80072ce:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	603a      	str	r2, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	460b      	mov	r3, r1
 80072ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
    return res;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007318:	7a5b      	ldrb	r3, [r3, #9]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d131      	bne.n	8007384 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007322:	7a5b      	ldrb	r3, [r3, #9]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 800732a:	2100      	movs	r1, #0
 800732c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800732e:	4b19      	ldr	r3, [pc, #100]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007330:	7a5b      	ldrb	r3, [r3, #9]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4a17      	ldr	r2, [pc, #92]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800733e:	4b15      	ldr	r3, [pc, #84]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007340:	7a5b      	ldrb	r3, [r3, #9]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007348:	4413      	add	r3, r2
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 8007350:	7a5b      	ldrb	r3, [r3, #9]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	b2d1      	uxtb	r1, r2
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <FATFS_LinkDriverEx+0x94>)
 800735a:	7251      	strb	r1, [r2, #9]
 800735c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800735e:	7dbb      	ldrb	r3, [r7, #22]
 8007360:	3330      	adds	r3, #48	; 0x30
 8007362:	b2da      	uxtb	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	3301      	adds	r3, #1
 800736c:	223a      	movs	r2, #58	; 0x3a
 800736e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3302      	adds	r3, #2
 8007374:	222f      	movs	r2, #47	; 0x2f
 8007376:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3303      	adds	r3, #3
 800737c:	2200      	movs	r2, #0
 800737e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	200004c8 	.word	0x200004c8

08007398 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80073a2:	2200      	movs	r2, #0
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ffaa 	bl	8007300 <FATFS_LinkDriverEx>
 80073ac:	4603      	mov	r3, r0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <atoi>:
 80073b6:	220a      	movs	r2, #10
 80073b8:	2100      	movs	r1, #0
 80073ba:	f000 b8eb 	b.w	8007594 <strtol>
	...

080073c0 <__errno>:
 80073c0:	4b01      	ldr	r3, [pc, #4]	; (80073c8 <__errno+0x8>)
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000020 	.word	0x20000020

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4d0d      	ldr	r5, [pc, #52]	; (8007404 <__libc_init_array+0x38>)
 80073d0:	4c0d      	ldr	r4, [pc, #52]	; (8007408 <__libc_init_array+0x3c>)
 80073d2:	1b64      	subs	r4, r4, r5
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	2600      	movs	r6, #0
 80073d8:	42a6      	cmp	r6, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	4d0b      	ldr	r5, [pc, #44]	; (800740c <__libc_init_array+0x40>)
 80073de:	4c0c      	ldr	r4, [pc, #48]	; (8007410 <__libc_init_array+0x44>)
 80073e0:	f000 fd22 	bl	8007e28 <_init>
 80073e4:	1b64      	subs	r4, r4, r5
 80073e6:	10a4      	asrs	r4, r4, #2
 80073e8:	2600      	movs	r6, #0
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f4:	4798      	blx	r3
 80073f6:	3601      	adds	r6, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fe:	4798      	blx	r3
 8007400:	3601      	adds	r6, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	08007fb8 	.word	0x08007fb8
 8007408:	08007fb8 	.word	0x08007fb8
 800740c:	08007fb8 	.word	0x08007fb8
 8007410:	08007fbc 	.word	0x08007fbc

08007414 <memcpy>:
 8007414:	440a      	add	r2, r1
 8007416:	4291      	cmp	r1, r2
 8007418:	f100 33ff 	add.w	r3, r0, #4294967295
 800741c:	d100      	bne.n	8007420 <memcpy+0xc>
 800741e:	4770      	bx	lr
 8007420:	b510      	push	{r4, lr}
 8007422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800742a:	4291      	cmp	r1, r2
 800742c:	d1f9      	bne.n	8007422 <memcpy+0xe>
 800742e:	bd10      	pop	{r4, pc}

08007430 <memset>:
 8007430:	4402      	add	r2, r0
 8007432:	4603      	mov	r3, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <siprintf>:
 8007440:	b40e      	push	{r1, r2, r3}
 8007442:	b500      	push	{lr}
 8007444:	b09c      	sub	sp, #112	; 0x70
 8007446:	ab1d      	add	r3, sp, #116	; 0x74
 8007448:	9002      	str	r0, [sp, #8]
 800744a:	9006      	str	r0, [sp, #24]
 800744c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007450:	4809      	ldr	r0, [pc, #36]	; (8007478 <siprintf+0x38>)
 8007452:	9107      	str	r1, [sp, #28]
 8007454:	9104      	str	r1, [sp, #16]
 8007456:	4909      	ldr	r1, [pc, #36]	; (800747c <siprintf+0x3c>)
 8007458:	f853 2b04 	ldr.w	r2, [r3], #4
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	6800      	ldr	r0, [r0, #0]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	a902      	add	r1, sp, #8
 8007464:	f000 f8fc 	bl	8007660 <_svfiprintf_r>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	b01c      	add	sp, #112	; 0x70
 8007470:	f85d eb04 	ldr.w	lr, [sp], #4
 8007474:	b003      	add	sp, #12
 8007476:	4770      	bx	lr
 8007478:	20000020 	.word	0x20000020
 800747c:	ffff0208 	.word	0xffff0208

08007480 <strcpy>:
 8007480:	4603      	mov	r3, r0
 8007482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007486:	f803 2b01 	strb.w	r2, [r3], #1
 800748a:	2a00      	cmp	r2, #0
 800748c:	d1f9      	bne.n	8007482 <strcpy+0x2>
 800748e:	4770      	bx	lr

08007490 <_strtol_l.constprop.0>:
 8007490:	2b01      	cmp	r3, #1
 8007492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007496:	d001      	beq.n	800749c <_strtol_l.constprop.0+0xc>
 8007498:	2b24      	cmp	r3, #36	; 0x24
 800749a:	d906      	bls.n	80074aa <_strtol_l.constprop.0+0x1a>
 800749c:	f7ff ff90 	bl	80073c0 <__errno>
 80074a0:	2316      	movs	r3, #22
 80074a2:	6003      	str	r3, [r0, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007590 <_strtol_l.constprop.0+0x100>
 80074ae:	460d      	mov	r5, r1
 80074b0:	462e      	mov	r6, r5
 80074b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80074ba:	f017 0708 	ands.w	r7, r7, #8
 80074be:	d1f7      	bne.n	80074b0 <_strtol_l.constprop.0+0x20>
 80074c0:	2c2d      	cmp	r4, #45	; 0x2d
 80074c2:	d132      	bne.n	800752a <_strtol_l.constprop.0+0x9a>
 80074c4:	782c      	ldrb	r4, [r5, #0]
 80074c6:	2701      	movs	r7, #1
 80074c8:	1cb5      	adds	r5, r6, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d05b      	beq.n	8007586 <_strtol_l.constprop.0+0xf6>
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d109      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 80074d2:	2c30      	cmp	r4, #48	; 0x30
 80074d4:	d107      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 80074d6:	782c      	ldrb	r4, [r5, #0]
 80074d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074dc:	2c58      	cmp	r4, #88	; 0x58
 80074de:	d14d      	bne.n	800757c <_strtol_l.constprop.0+0xec>
 80074e0:	786c      	ldrb	r4, [r5, #1]
 80074e2:	2310      	movs	r3, #16
 80074e4:	3502      	adds	r5, #2
 80074e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80074ee:	f04f 0c00 	mov.w	ip, #0
 80074f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80074f6:	4666      	mov	r6, ip
 80074f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80074fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007500:	f1be 0f09 	cmp.w	lr, #9
 8007504:	d816      	bhi.n	8007534 <_strtol_l.constprop.0+0xa4>
 8007506:	4674      	mov	r4, lr
 8007508:	42a3      	cmp	r3, r4
 800750a:	dd24      	ble.n	8007556 <_strtol_l.constprop.0+0xc6>
 800750c:	f1bc 0f00 	cmp.w	ip, #0
 8007510:	db1e      	blt.n	8007550 <_strtol_l.constprop.0+0xc0>
 8007512:	45b1      	cmp	r9, r6
 8007514:	d31c      	bcc.n	8007550 <_strtol_l.constprop.0+0xc0>
 8007516:	d101      	bne.n	800751c <_strtol_l.constprop.0+0x8c>
 8007518:	45a2      	cmp	sl, r4
 800751a:	db19      	blt.n	8007550 <_strtol_l.constprop.0+0xc0>
 800751c:	fb06 4603 	mla	r6, r6, r3, r4
 8007520:	f04f 0c01 	mov.w	ip, #1
 8007524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007528:	e7e8      	b.n	80074fc <_strtol_l.constprop.0+0x6c>
 800752a:	2c2b      	cmp	r4, #43	; 0x2b
 800752c:	bf04      	itt	eq
 800752e:	782c      	ldrbeq	r4, [r5, #0]
 8007530:	1cb5      	addeq	r5, r6, #2
 8007532:	e7ca      	b.n	80074ca <_strtol_l.constprop.0+0x3a>
 8007534:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007538:	f1be 0f19 	cmp.w	lr, #25
 800753c:	d801      	bhi.n	8007542 <_strtol_l.constprop.0+0xb2>
 800753e:	3c37      	subs	r4, #55	; 0x37
 8007540:	e7e2      	b.n	8007508 <_strtol_l.constprop.0+0x78>
 8007542:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007546:	f1be 0f19 	cmp.w	lr, #25
 800754a:	d804      	bhi.n	8007556 <_strtol_l.constprop.0+0xc6>
 800754c:	3c57      	subs	r4, #87	; 0x57
 800754e:	e7db      	b.n	8007508 <_strtol_l.constprop.0+0x78>
 8007550:	f04f 3cff 	mov.w	ip, #4294967295
 8007554:	e7e6      	b.n	8007524 <_strtol_l.constprop.0+0x94>
 8007556:	f1bc 0f00 	cmp.w	ip, #0
 800755a:	da05      	bge.n	8007568 <_strtol_l.constprop.0+0xd8>
 800755c:	2322      	movs	r3, #34	; 0x22
 800755e:	6003      	str	r3, [r0, #0]
 8007560:	4646      	mov	r6, r8
 8007562:	b942      	cbnz	r2, 8007576 <_strtol_l.constprop.0+0xe6>
 8007564:	4630      	mov	r0, r6
 8007566:	e79e      	b.n	80074a6 <_strtol_l.constprop.0+0x16>
 8007568:	b107      	cbz	r7, 800756c <_strtol_l.constprop.0+0xdc>
 800756a:	4276      	negs	r6, r6
 800756c:	2a00      	cmp	r2, #0
 800756e:	d0f9      	beq.n	8007564 <_strtol_l.constprop.0+0xd4>
 8007570:	f1bc 0f00 	cmp.w	ip, #0
 8007574:	d000      	beq.n	8007578 <_strtol_l.constprop.0+0xe8>
 8007576:	1e69      	subs	r1, r5, #1
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	e7f3      	b.n	8007564 <_strtol_l.constprop.0+0xd4>
 800757c:	2430      	movs	r4, #48	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1b1      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 8007582:	2308      	movs	r3, #8
 8007584:	e7af      	b.n	80074e6 <_strtol_l.constprop.0+0x56>
 8007586:	2c30      	cmp	r4, #48	; 0x30
 8007588:	d0a5      	beq.n	80074d6 <_strtol_l.constprop.0+0x46>
 800758a:	230a      	movs	r3, #10
 800758c:	e7ab      	b.n	80074e6 <_strtol_l.constprop.0+0x56>
 800758e:	bf00      	nop
 8007590:	08007e7d 	.word	0x08007e7d

08007594 <strtol>:
 8007594:	4613      	mov	r3, r2
 8007596:	460a      	mov	r2, r1
 8007598:	4601      	mov	r1, r0
 800759a:	4802      	ldr	r0, [pc, #8]	; (80075a4 <strtol+0x10>)
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f7ff bf77 	b.w	8007490 <_strtol_l.constprop.0>
 80075a2:	bf00      	nop
 80075a4:	20000020 	.word	0x20000020

080075a8 <__ssputs_r>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	688e      	ldr	r6, [r1, #8]
 80075ae:	429e      	cmp	r6, r3
 80075b0:	4682      	mov	sl, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	4690      	mov	r8, r2
 80075b6:	461f      	mov	r7, r3
 80075b8:	d838      	bhi.n	800762c <__ssputs_r+0x84>
 80075ba:	898a      	ldrh	r2, [r1, #12]
 80075bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075c0:	d032      	beq.n	8007628 <__ssputs_r+0x80>
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	6909      	ldr	r1, [r1, #16]
 80075c6:	eba5 0901 	sub.w	r9, r5, r1
 80075ca:	6965      	ldr	r5, [r4, #20]
 80075cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d4:	3301      	adds	r3, #1
 80075d6:	444b      	add	r3, r9
 80075d8:	106d      	asrs	r5, r5, #1
 80075da:	429d      	cmp	r5, r3
 80075dc:	bf38      	it	cc
 80075de:	461d      	movcc	r5, r3
 80075e0:	0553      	lsls	r3, r2, #21
 80075e2:	d531      	bpl.n	8007648 <__ssputs_r+0xa0>
 80075e4:	4629      	mov	r1, r5
 80075e6:	f000 fb55 	bl	8007c94 <_malloc_r>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b950      	cbnz	r0, 8007604 <__ssputs_r+0x5c>
 80075ee:	230c      	movs	r3, #12
 80075f0:	f8ca 3000 	str.w	r3, [sl]
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	6921      	ldr	r1, [r4, #16]
 8007606:	464a      	mov	r2, r9
 8007608:	f7ff ff04 	bl	8007414 <memcpy>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6126      	str	r6, [r4, #16]
 800761a:	6165      	str	r5, [r4, #20]
 800761c:	444e      	add	r6, r9
 800761e:	eba5 0509 	sub.w	r5, r5, r9
 8007622:	6026      	str	r6, [r4, #0]
 8007624:	60a5      	str	r5, [r4, #8]
 8007626:	463e      	mov	r6, r7
 8007628:	42be      	cmp	r6, r7
 800762a:	d900      	bls.n	800762e <__ssputs_r+0x86>
 800762c:	463e      	mov	r6, r7
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	4632      	mov	r2, r6
 8007632:	4641      	mov	r1, r8
 8007634:	f000 faa8 	bl	8007b88 <memmove>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	1b9b      	subs	r3, r3, r6
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	4433      	add	r3, r6
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e7db      	b.n	8007600 <__ssputs_r+0x58>
 8007648:	462a      	mov	r2, r5
 800764a:	f000 fb97 	bl	8007d7c <_realloc_r>
 800764e:	4606      	mov	r6, r0
 8007650:	2800      	cmp	r0, #0
 8007652:	d1e1      	bne.n	8007618 <__ssputs_r+0x70>
 8007654:	6921      	ldr	r1, [r4, #16]
 8007656:	4650      	mov	r0, sl
 8007658:	f000 fab0 	bl	8007bbc <_free_r>
 800765c:	e7c7      	b.n	80075ee <__ssputs_r+0x46>
	...

08007660 <_svfiprintf_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	4698      	mov	r8, r3
 8007666:	898b      	ldrh	r3, [r1, #12]
 8007668:	061b      	lsls	r3, r3, #24
 800766a:	b09d      	sub	sp, #116	; 0x74
 800766c:	4607      	mov	r7, r0
 800766e:	460d      	mov	r5, r1
 8007670:	4614      	mov	r4, r2
 8007672:	d50e      	bpl.n	8007692 <_svfiprintf_r+0x32>
 8007674:	690b      	ldr	r3, [r1, #16]
 8007676:	b963      	cbnz	r3, 8007692 <_svfiprintf_r+0x32>
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	f000 fb0b 	bl	8007c94 <_malloc_r>
 800767e:	6028      	str	r0, [r5, #0]
 8007680:	6128      	str	r0, [r5, #16]
 8007682:	b920      	cbnz	r0, 800768e <_svfiprintf_r+0x2e>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e0d1      	b.n	8007832 <_svfiprintf_r+0x1d2>
 800768e:	2340      	movs	r3, #64	; 0x40
 8007690:	616b      	str	r3, [r5, #20]
 8007692:	2300      	movs	r3, #0
 8007694:	9309      	str	r3, [sp, #36]	; 0x24
 8007696:	2320      	movs	r3, #32
 8007698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769c:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a0:	2330      	movs	r3, #48	; 0x30
 80076a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800784c <_svfiprintf_r+0x1ec>
 80076a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076aa:	f04f 0901 	mov.w	r9, #1
 80076ae:	4623      	mov	r3, r4
 80076b0:	469a      	mov	sl, r3
 80076b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b6:	b10a      	cbz	r2, 80076bc <_svfiprintf_r+0x5c>
 80076b8:	2a25      	cmp	r2, #37	; 0x25
 80076ba:	d1f9      	bne.n	80076b0 <_svfiprintf_r+0x50>
 80076bc:	ebba 0b04 	subs.w	fp, sl, r4
 80076c0:	d00b      	beq.n	80076da <_svfiprintf_r+0x7a>
 80076c2:	465b      	mov	r3, fp
 80076c4:	4622      	mov	r2, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ff6d 	bl	80075a8 <__ssputs_r>
 80076ce:	3001      	adds	r0, #1
 80076d0:	f000 80aa 	beq.w	8007828 <_svfiprintf_r+0x1c8>
 80076d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d6:	445a      	add	r2, fp
 80076d8:	9209      	str	r2, [sp, #36]	; 0x24
 80076da:	f89a 3000 	ldrb.w	r3, [sl]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 80a2 	beq.w	8007828 <_svfiprintf_r+0x1c8>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ee:	f10a 0a01 	add.w	sl, sl, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fa:	931a      	str	r3, [sp, #104]	; 0x68
 80076fc:	4654      	mov	r4, sl
 80076fe:	2205      	movs	r2, #5
 8007700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007704:	4851      	ldr	r0, [pc, #324]	; (800784c <_svfiprintf_r+0x1ec>)
 8007706:	f7f8 fd73 	bl	80001f0 <memchr>
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	b9d8      	cbnz	r0, 8007746 <_svfiprintf_r+0xe6>
 800770e:	06d0      	lsls	r0, r2, #27
 8007710:	bf44      	itt	mi
 8007712:	2320      	movmi	r3, #32
 8007714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007718:	0711      	lsls	r1, r2, #28
 800771a:	bf44      	itt	mi
 800771c:	232b      	movmi	r3, #43	; 0x2b
 800771e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007722:	f89a 3000 	ldrb.w	r3, [sl]
 8007726:	2b2a      	cmp	r3, #42	; 0x2a
 8007728:	d015      	beq.n	8007756 <_svfiprintf_r+0xf6>
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	4654      	mov	r4, sl
 800772e:	2000      	movs	r0, #0
 8007730:	f04f 0c0a 	mov.w	ip, #10
 8007734:	4621      	mov	r1, r4
 8007736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773a:	3b30      	subs	r3, #48	; 0x30
 800773c:	2b09      	cmp	r3, #9
 800773e:	d94e      	bls.n	80077de <_svfiprintf_r+0x17e>
 8007740:	b1b0      	cbz	r0, 8007770 <_svfiprintf_r+0x110>
 8007742:	9207      	str	r2, [sp, #28]
 8007744:	e014      	b.n	8007770 <_svfiprintf_r+0x110>
 8007746:	eba0 0308 	sub.w	r3, r0, r8
 800774a:	fa09 f303 	lsl.w	r3, r9, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	46a2      	mov	sl, r4
 8007754:	e7d2      	b.n	80076fc <_svfiprintf_r+0x9c>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfbb      	ittet	lt
 8007762:	425b      	neglt	r3, r3
 8007764:	f042 0202 	orrlt.w	r2, r2, #2
 8007768:	9307      	strge	r3, [sp, #28]
 800776a:	9307      	strlt	r3, [sp, #28]
 800776c:	bfb8      	it	lt
 800776e:	9204      	strlt	r2, [sp, #16]
 8007770:	7823      	ldrb	r3, [r4, #0]
 8007772:	2b2e      	cmp	r3, #46	; 0x2e
 8007774:	d10c      	bne.n	8007790 <_svfiprintf_r+0x130>
 8007776:	7863      	ldrb	r3, [r4, #1]
 8007778:	2b2a      	cmp	r3, #42	; 0x2a
 800777a:	d135      	bne.n	80077e8 <_svfiprintf_r+0x188>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	9203      	str	r2, [sp, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	bfb8      	it	lt
 8007788:	f04f 33ff 	movlt.w	r3, #4294967295
 800778c:	3402      	adds	r4, #2
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800785c <_svfiprintf_r+0x1fc>
 8007794:	7821      	ldrb	r1, [r4, #0]
 8007796:	2203      	movs	r2, #3
 8007798:	4650      	mov	r0, sl
 800779a:	f7f8 fd29 	bl	80001f0 <memchr>
 800779e:	b140      	cbz	r0, 80077b2 <_svfiprintf_r+0x152>
 80077a0:	2340      	movs	r3, #64	; 0x40
 80077a2:	eba0 000a 	sub.w	r0, r0, sl
 80077a6:	fa03 f000 	lsl.w	r0, r3, r0
 80077aa:	9b04      	ldr	r3, [sp, #16]
 80077ac:	4303      	orrs	r3, r0
 80077ae:	3401      	adds	r4, #1
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b6:	4826      	ldr	r0, [pc, #152]	; (8007850 <_svfiprintf_r+0x1f0>)
 80077b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077bc:	2206      	movs	r2, #6
 80077be:	f7f8 fd17 	bl	80001f0 <memchr>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d038      	beq.n	8007838 <_svfiprintf_r+0x1d8>
 80077c6:	4b23      	ldr	r3, [pc, #140]	; (8007854 <_svfiprintf_r+0x1f4>)
 80077c8:	bb1b      	cbnz	r3, 8007812 <_svfiprintf_r+0x1b2>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	3307      	adds	r3, #7
 80077ce:	f023 0307 	bic.w	r3, r3, #7
 80077d2:	3308      	adds	r3, #8
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	4433      	add	r3, r6
 80077da:	9309      	str	r3, [sp, #36]	; 0x24
 80077dc:	e767      	b.n	80076ae <_svfiprintf_r+0x4e>
 80077de:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e2:	460c      	mov	r4, r1
 80077e4:	2001      	movs	r0, #1
 80077e6:	e7a5      	b.n	8007734 <_svfiprintf_r+0xd4>
 80077e8:	2300      	movs	r3, #0
 80077ea:	3401      	adds	r4, #1
 80077ec:	9305      	str	r3, [sp, #20]
 80077ee:	4619      	mov	r1, r3
 80077f0:	f04f 0c0a 	mov.w	ip, #10
 80077f4:	4620      	mov	r0, r4
 80077f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fa:	3a30      	subs	r2, #48	; 0x30
 80077fc:	2a09      	cmp	r2, #9
 80077fe:	d903      	bls.n	8007808 <_svfiprintf_r+0x1a8>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0c5      	beq.n	8007790 <_svfiprintf_r+0x130>
 8007804:	9105      	str	r1, [sp, #20]
 8007806:	e7c3      	b.n	8007790 <_svfiprintf_r+0x130>
 8007808:	fb0c 2101 	mla	r1, ip, r1, r2
 800780c:	4604      	mov	r4, r0
 800780e:	2301      	movs	r3, #1
 8007810:	e7f0      	b.n	80077f4 <_svfiprintf_r+0x194>
 8007812:	ab03      	add	r3, sp, #12
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	462a      	mov	r2, r5
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <_svfiprintf_r+0x1f8>)
 800781a:	a904      	add	r1, sp, #16
 800781c:	4638      	mov	r0, r7
 800781e:	f3af 8000 	nop.w
 8007822:	1c42      	adds	r2, r0, #1
 8007824:	4606      	mov	r6, r0
 8007826:	d1d6      	bne.n	80077d6 <_svfiprintf_r+0x176>
 8007828:	89ab      	ldrh	r3, [r5, #12]
 800782a:	065b      	lsls	r3, r3, #25
 800782c:	f53f af2c 	bmi.w	8007688 <_svfiprintf_r+0x28>
 8007830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007832:	b01d      	add	sp, #116	; 0x74
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	ab03      	add	r3, sp, #12
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	462a      	mov	r2, r5
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <_svfiprintf_r+0x1f8>)
 8007840:	a904      	add	r1, sp, #16
 8007842:	4638      	mov	r0, r7
 8007844:	f000 f87a 	bl	800793c <_printf_i>
 8007848:	e7eb      	b.n	8007822 <_svfiprintf_r+0x1c2>
 800784a:	bf00      	nop
 800784c:	08007f7d 	.word	0x08007f7d
 8007850:	08007f87 	.word	0x08007f87
 8007854:	00000000 	.word	0x00000000
 8007858:	080075a9 	.word	0x080075a9
 800785c:	08007f83 	.word	0x08007f83

08007860 <_printf_common>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	4699      	mov	r9, r3
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007870:	4293      	cmp	r3, r2
 8007872:	bfb8      	it	lt
 8007874:	4613      	movlt	r3, r2
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787c:	4607      	mov	r7, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b10a      	cbz	r2, 8007886 <_printf_common+0x26>
 8007882:	3301      	adds	r3, #1
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0699      	lsls	r1, r3, #26
 800788a:	bf42      	ittt	mi
 800788c:	6833      	ldrmi	r3, [r6, #0]
 800788e:	3302      	addmi	r3, #2
 8007890:	6033      	strmi	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d106      	bne.n	80078a8 <_printf_common+0x48>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc26      	bgt.n	80078f6 <_printf_common+0x96>
 80078a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ac:	1e13      	subs	r3, r2, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	0692      	lsls	r2, r2, #26
 80078b6:	d42b      	bmi.n	8007910 <_printf_common+0xb0>
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d01e      	beq.n	8007904 <_printf_common+0xa4>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	68e5      	ldr	r5, [r4, #12]
 80078ca:	6832      	ldr	r2, [r6, #0]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	2600      	movs	r6, #0
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xc8>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xa8>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xac>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c6      	b.n	800789e <_printf_common+0x3e>
 8007910:	18e1      	adds	r1, r4, r3
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	2030      	movs	r0, #48	; 0x30
 8007916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791a:	4422      	add	r2, r4
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007924:	3302      	adds	r3, #2
 8007926:	e7c7      	b.n	80078b8 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa4>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x8e>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4691      	mov	r9, r2
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	469a      	mov	sl, r3
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d8 	beq.w	8007b0e <_printf_i+0x1d2>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a3 	beq.w	8007aaa <_printf_i+0x16e>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad7 	.word	0x08007ad7
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007adf 	.word	0x08007adf
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a3      	b.n	8007b30 <_printf_i+0x1f4>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	4854      	ldr	r0, [pc, #336]	; (8007b80 <_printf_i+0x244>)
 8007a30:	2f6f      	cmp	r7, #111	; 0x6f
 8007a32:	bf0c      	ite	eq
 8007a34:	2308      	moveq	r3, #8
 8007a36:	230a      	movne	r3, #10
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfa2      	ittt	ge
 8007a46:	6821      	ldrge	r1, [r4, #0]
 8007a48:	f021 0104 	bicge.w	r1, r1, #4
 8007a4c:	6021      	strge	r1, [r4, #0]
 8007a4e:	b90e      	cbnz	r6, 8007a54 <_printf_i+0x118>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d04d      	beq.n	8007af0 <_printf_i+0x1b4>
 8007a54:	4615      	mov	r5, r2
 8007a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a5e:	5dc7      	ldrb	r7, [r0, r7]
 8007a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a64:	4637      	mov	r7, r6
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	460e      	mov	r6, r1
 8007a6a:	d9f4      	bls.n	8007a56 <_printf_i+0x11a>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10b      	bne.n	8007a88 <_printf_i+0x14c>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07de      	lsls	r6, r3, #31
 8007a74:	d508      	bpl.n	8007a88 <_printf_i+0x14c>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	bfde      	ittt	le
 8007a7e:	2330      	movle	r3, #48	; 0x30
 8007a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a88:	1b52      	subs	r2, r2, r5
 8007a8a:	6122      	str	r2, [r4, #16]
 8007a8c:	f8cd a000 	str.w	sl, [sp]
 8007a90:	464b      	mov	r3, r9
 8007a92:	aa03      	add	r2, sp, #12
 8007a94:	4621      	mov	r1, r4
 8007a96:	4640      	mov	r0, r8
 8007a98:	f7ff fee2 	bl	8007860 <_printf_common>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d14c      	bne.n	8007b3a <_printf_i+0x1fe>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b004      	add	sp, #16
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	4835      	ldr	r0, [pc, #212]	; (8007b80 <_printf_i+0x244>)
 8007aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	061d      	lsls	r5, r3, #24
 8007abc:	d514      	bpl.n	8007ae8 <_printf_i+0x1ac>
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b91e      	cbnz	r6, 8007ad2 <_printf_i+0x196>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f023 0320 	bic.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	e7b0      	b.n	8007a38 <_printf_i+0xfc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2378      	movs	r3, #120	; 0x78
 8007ae0:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae6:	e7e3      	b.n	8007ab0 <_printf_i+0x174>
 8007ae8:	0659      	lsls	r1, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2b6      	uxthmi	r6, r6
 8007aee:	e7e6      	b.n	8007abe <_printf_i+0x182>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bb      	b.n	8007a6c <_printf_i+0x130>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1cc>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1d2>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c8>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7ba      	b.n	8007a8c <_printf_i+0x150>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb64 	bl	80001f0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1f2>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0x150>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ab      	beq.n	8007aa0 <_printf_i+0x164>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x23a>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a4      	b.n	8007aa4 <_printf_i+0x168>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09b      	beq.n	8007aa0 <_printf_i+0x164>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x21e>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x212>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x22e>
 8007b7e:	bf00      	nop
 8007b80:	08007f8e 	.word	0x08007f8e
 8007b84:	08007f9f 	.word	0x08007f9f

08007b88 <memmove>:
 8007b88:	4288      	cmp	r0, r1
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	eb01 0402 	add.w	r4, r1, r2
 8007b90:	d902      	bls.n	8007b98 <memmove+0x10>
 8007b92:	4284      	cmp	r4, r0
 8007b94:	4623      	mov	r3, r4
 8007b96:	d807      	bhi.n	8007ba8 <memmove+0x20>
 8007b98:	1e43      	subs	r3, r0, #1
 8007b9a:	42a1      	cmp	r1, r4
 8007b9c:	d008      	beq.n	8007bb0 <memmove+0x28>
 8007b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ba6:	e7f8      	b.n	8007b9a <memmove+0x12>
 8007ba8:	4402      	add	r2, r0
 8007baa:	4601      	mov	r1, r0
 8007bac:	428a      	cmp	r2, r1
 8007bae:	d100      	bne.n	8007bb2 <memmove+0x2a>
 8007bb0:	bd10      	pop	{r4, pc}
 8007bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bba:	e7f7      	b.n	8007bac <memmove+0x24>

08007bbc <_free_r>:
 8007bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d044      	beq.n	8007c4c <_free_r+0x90>
 8007bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f1a1 0404 	sub.w	r4, r1, #4
 8007bce:	bfb8      	it	lt
 8007bd0:	18e4      	addlt	r4, r4, r3
 8007bd2:	f000 f913 	bl	8007dfc <__malloc_lock>
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	; (8007c50 <_free_r+0x94>)
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	b933      	cbnz	r3, 8007bec <_free_r+0x30>
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	6014      	str	r4, [r2, #0]
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be8:	f000 b90e 	b.w	8007e08 <__malloc_unlock>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d908      	bls.n	8007c02 <_free_r+0x46>
 8007bf0:	6825      	ldr	r5, [r4, #0]
 8007bf2:	1961      	adds	r1, r4, r5
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	bf01      	itttt	eq
 8007bf8:	6819      	ldreq	r1, [r3, #0]
 8007bfa:	685b      	ldreq	r3, [r3, #4]
 8007bfc:	1949      	addeq	r1, r1, r5
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	e7ed      	b.n	8007bde <_free_r+0x22>
 8007c02:	461a      	mov	r2, r3
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b10b      	cbz	r3, 8007c0c <_free_r+0x50>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x46>
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	1855      	adds	r5, r2, r1
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x70>
 8007c14:	6824      	ldr	r4, [r4, #0]
 8007c16:	4421      	add	r1, r4
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	d1e0      	bne.n	8007be2 <_free_r+0x26>
 8007c20:	681c      	ldr	r4, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	6053      	str	r3, [r2, #4]
 8007c26:	4421      	add	r1, r4
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	e7da      	b.n	8007be2 <_free_r+0x26>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x78>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6003      	str	r3, [r0, #0]
 8007c32:	e7d6      	b.n	8007be2 <_free_r+0x26>
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1961      	adds	r1, r4, r5
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf04      	itt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	bf04      	itt	eq
 8007c44:	1949      	addeq	r1, r1, r5
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	6054      	str	r4, [r2, #4]
 8007c4a:	e7ca      	b.n	8007be2 <_free_r+0x26>
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bd30      	pop	{r4, r5, pc}
 8007c50:	200004d4 	.word	0x200004d4

08007c54 <sbrk_aligned>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0e      	ldr	r6, [pc, #56]	; (8007c90 <sbrk_aligned+0x3c>)
 8007c58:	460c      	mov	r4, r1
 8007c5a:	6831      	ldr	r1, [r6, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b911      	cbnz	r1, 8007c66 <sbrk_aligned+0x12>
 8007c60:	f000 f8bc 	bl	8007ddc <_sbrk_r>
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f8b7 	bl	8007ddc <_sbrk_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d00a      	beq.n	8007c88 <sbrk_aligned+0x34>
 8007c72:	1cc4      	adds	r4, r0, #3
 8007c74:	f024 0403 	bic.w	r4, r4, #3
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d007      	beq.n	8007c8c <sbrk_aligned+0x38>
 8007c7c:	1a21      	subs	r1, r4, r0
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f8ac 	bl	8007ddc <_sbrk_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d101      	bne.n	8007c8c <sbrk_aligned+0x38>
 8007c88:	f04f 34ff 	mov.w	r4, #4294967295
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	200004d8 	.word	0x200004d8

08007c94 <_malloc_r>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	1ccd      	adds	r5, r1, #3
 8007c9a:	f025 0503 	bic.w	r5, r5, #3
 8007c9e:	3508      	adds	r5, #8
 8007ca0:	2d0c      	cmp	r5, #12
 8007ca2:	bf38      	it	cc
 8007ca4:	250c      	movcc	r5, #12
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	4607      	mov	r7, r0
 8007caa:	db01      	blt.n	8007cb0 <_malloc_r+0x1c>
 8007cac:	42a9      	cmp	r1, r5
 8007cae:	d905      	bls.n	8007cbc <_malloc_r+0x28>
 8007cb0:	230c      	movs	r3, #12
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	4e2e      	ldr	r6, [pc, #184]	; (8007d78 <_malloc_r+0xe4>)
 8007cbe:	f000 f89d 	bl	8007dfc <__malloc_lock>
 8007cc2:	6833      	ldr	r3, [r6, #0]
 8007cc4:	461c      	mov	r4, r3
 8007cc6:	bb34      	cbnz	r4, 8007d16 <_malloc_r+0x82>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7ff ffc2 	bl	8007c54 <sbrk_aligned>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	d14d      	bne.n	8007d72 <_malloc_r+0xde>
 8007cd6:	6834      	ldr	r4, [r6, #0]
 8007cd8:	4626      	mov	r6, r4
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d140      	bne.n	8007d60 <_malloc_r+0xcc>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	eb04 0803 	add.w	r8, r4, r3
 8007ce8:	f000 f878 	bl	8007ddc <_sbrk_r>
 8007cec:	4580      	cmp	r8, r0
 8007cee:	d13a      	bne.n	8007d66 <_malloc_r+0xd2>
 8007cf0:	6821      	ldr	r1, [r4, #0]
 8007cf2:	3503      	adds	r5, #3
 8007cf4:	1a6d      	subs	r5, r5, r1
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	4629      	mov	r1, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ffa5 	bl	8007c54 <sbrk_aligned>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d02b      	beq.n	8007d66 <_malloc_r+0xd2>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	442b      	add	r3, r5
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	e00e      	b.n	8007d34 <_malloc_r+0xa0>
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	1b52      	subs	r2, r2, r5
 8007d1a:	d41e      	bmi.n	8007d5a <_malloc_r+0xc6>
 8007d1c:	2a0b      	cmp	r2, #11
 8007d1e:	d916      	bls.n	8007d4e <_malloc_r+0xba>
 8007d20:	1961      	adds	r1, r4, r5
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	bf18      	it	ne
 8007d28:	6059      	strne	r1, [r3, #4]
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	bf08      	it	eq
 8007d2e:	6031      	streq	r1, [r6, #0]
 8007d30:	5162      	str	r2, [r4, r5]
 8007d32:	604b      	str	r3, [r1, #4]
 8007d34:	4638      	mov	r0, r7
 8007d36:	f104 060b 	add.w	r6, r4, #11
 8007d3a:	f000 f865 	bl	8007e08 <__malloc_unlock>
 8007d3e:	f026 0607 	bic.w	r6, r6, #7
 8007d42:	1d23      	adds	r3, r4, #4
 8007d44:	1af2      	subs	r2, r6, r3
 8007d46:	d0b6      	beq.n	8007cb6 <_malloc_r+0x22>
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	50a3      	str	r3, [r4, r2]
 8007d4c:	e7b3      	b.n	8007cb6 <_malloc_r+0x22>
 8007d4e:	6862      	ldr	r2, [r4, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	bf0c      	ite	eq
 8007d54:	6032      	streq	r2, [r6, #0]
 8007d56:	605a      	strne	r2, [r3, #4]
 8007d58:	e7ec      	b.n	8007d34 <_malloc_r+0xa0>
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	6864      	ldr	r4, [r4, #4]
 8007d5e:	e7b2      	b.n	8007cc6 <_malloc_r+0x32>
 8007d60:	4634      	mov	r4, r6
 8007d62:	6876      	ldr	r6, [r6, #4]
 8007d64:	e7b9      	b.n	8007cda <_malloc_r+0x46>
 8007d66:	230c      	movs	r3, #12
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f000 f84c 	bl	8007e08 <__malloc_unlock>
 8007d70:	e7a1      	b.n	8007cb6 <_malloc_r+0x22>
 8007d72:	6025      	str	r5, [r4, #0]
 8007d74:	e7de      	b.n	8007d34 <_malloc_r+0xa0>
 8007d76:	bf00      	nop
 8007d78:	200004d4 	.word	0x200004d4

08007d7c <_realloc_r>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4680      	mov	r8, r0
 8007d82:	4614      	mov	r4, r2
 8007d84:	460e      	mov	r6, r1
 8007d86:	b921      	cbnz	r1, 8007d92 <_realloc_r+0x16>
 8007d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	f7ff bf81 	b.w	8007c94 <_malloc_r>
 8007d92:	b92a      	cbnz	r2, 8007da0 <_realloc_r+0x24>
 8007d94:	f7ff ff12 	bl	8007bbc <_free_r>
 8007d98:	4625      	mov	r5, r4
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	f000 f838 	bl	8007e14 <_malloc_usable_size_r>
 8007da4:	4284      	cmp	r4, r0
 8007da6:	4607      	mov	r7, r0
 8007da8:	d802      	bhi.n	8007db0 <_realloc_r+0x34>
 8007daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dae:	d812      	bhi.n	8007dd6 <_realloc_r+0x5a>
 8007db0:	4621      	mov	r1, r4
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7ff ff6e 	bl	8007c94 <_malloc_r>
 8007db8:	4605      	mov	r5, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0ed      	beq.n	8007d9a <_realloc_r+0x1e>
 8007dbe:	42bc      	cmp	r4, r7
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	bf28      	it	cs
 8007dc6:	463a      	movcs	r2, r7
 8007dc8:	f7ff fb24 	bl	8007414 <memcpy>
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7ff fef4 	bl	8007bbc <_free_r>
 8007dd4:	e7e1      	b.n	8007d9a <_realloc_r+0x1e>
 8007dd6:	4635      	mov	r5, r6
 8007dd8:	e7df      	b.n	8007d9a <_realloc_r+0x1e>
	...

08007ddc <_sbrk_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	; (8007df8 <_sbrk_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fa fe00 	bl	80029ec <_sbrk>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_sbrk_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_sbrk_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	200004dc 	.word	0x200004dc

08007dfc <__malloc_lock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__malloc_lock+0x8>)
 8007dfe:	f000 b811 	b.w	8007e24 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	200004e0 	.word	0x200004e0

08007e08 <__malloc_unlock>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__malloc_unlock+0x8>)
 8007e0a:	f000 b80c 	b.w	8007e26 <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	200004e0 	.word	0x200004e0

08007e14 <_malloc_usable_size_r>:
 8007e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e18:	1f18      	subs	r0, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bfbc      	itt	lt
 8007e1e:	580b      	ldrlt	r3, [r1, r0]
 8007e20:	18c0      	addlt	r0, r0, r3
 8007e22:	4770      	bx	lr

08007e24 <__retarget_lock_acquire_recursive>:
 8007e24:	4770      	bx	lr

08007e26 <__retarget_lock_release_recursive>:
 8007e26:	4770      	bx	lr

08007e28 <_init>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr

08007e34 <_fini>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr
