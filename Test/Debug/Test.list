
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f88  08009f88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f90  08009f90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000070  0800a008  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800a008  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e77  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae9  00000000  00000000  00035f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00038a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a074  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001971a  00000000  00000000  00054fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0634  00000000  00000000  0006e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ed1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  0010ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009dfc 	.word	0x08009dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009dfc 	.word	0x08009dfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R
extern TIM_HandleTypeDef htim11;

void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2c      	ldr	r4, [pc, #176]	; (8000e38 <TOF_init+0xb8>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f008 fb29 	bl	80093e8 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f857 	bl	8000e4c <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c27      	ldr	r4, [pc, #156]	; (8000e3c <TOF_init+0xbc>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f008 fb1d 	bl	80093e8 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f84b 	bl	8000e4c <writeMM>
	writeMM(hi2c3);
 8000db6:	4c22      	ldr	r4, [pc, #136]	; (8000e40 <TOF_init+0xc0>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f008 fb11 	bl	80093e8 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f83f 	bl	8000e4c <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <TOF_init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f002 fc43 	bl	8003660 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <TOF_init+0xc4>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <TOF_init+0xbc>)
 8000df0:	f003 fb7a 	bl	80044e8 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <TOF_init+0xc4>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <TOF_init+0xb8>)
 8000e0a:	f003 fb6d 	bl	80044e8 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <TOF_init+0xc4>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <TOF_init+0xc0>)
 8000e24:	f003 fb60 	bl	80044e8 <HAL_I2C_Mem_Write>

	HAL_TIM_Base_Start_IT(&htim11);
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <TOF_init+0xc8>)
 8000e2a:	f006 f9ef 	bl	800720c <HAL_TIM_Base_Start_IT>
}
 8000e2e:	bf00      	nop
 8000e30:	3704      	adds	r7, #4
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000210 	.word	0x20000210
 8000e3c:	20000264 	.word	0x20000264
 8000e40:	200002b8 	.word	0x200002b8
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	20000484 	.word	0x20000484

08000e4c <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af04      	add	r7, sp, #16
 8000e54:	f107 0c08 	add.w	ip, r7, #8
 8000e58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e5c:	4bcb      	ldr	r3, [pc, #812]	; (800118c <writeMM+0x340>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	4bc7      	ldr	r3, [pc, #796]	; (800118c <writeMM+0x340>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2310      	movs	r3, #16
 8000e72:	f240 2207 	movw	r2, #519	; 0x207
 8000e76:	2152      	movs	r1, #82	; 0x52
 8000e78:	f107 0008 	add.w	r0, r7, #8
 8000e7c:	f003 fb34 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f002 fbed 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e86:	4bc1      	ldr	r3, [pc, #772]	; (800118c <writeMM+0x340>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2301      	movs	r3, #1
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4bbd      	ldr	r3, [pc, #756]	; (800118c <writeMM+0x340>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000ea0:	2152      	movs	r1, #82	; 0x52
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f003 fb1f 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f002 fbd8 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000eb0:	4bb6      	ldr	r3, [pc, #728]	; (800118c <writeMM+0x340>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4bb2      	ldr	r3, [pc, #712]	; (800118c <writeMM+0x340>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	2296      	movs	r2, #150	; 0x96
 8000ec8:	2152      	movs	r1, #82	; 0x52
 8000eca:	f107 0008 	add.w	r0, r7, #8
 8000ece:	f003 fb0b 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f002 fbc4 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ed8:	4bac      	ldr	r3, [pc, #688]	; (800118c <writeMM+0x340>)
 8000eda:	22fd      	movs	r2, #253	; 0xfd
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	4ba8      	ldr	r3, [pc, #672]	; (800118c <writeMM+0x340>)
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	2297      	movs	r2, #151	; 0x97
 8000ef0:	2152      	movs	r1, #82	; 0x52
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	f003 faf7 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f002 fbb0 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000f00:	4ba2      	ldr	r3, [pc, #648]	; (800118c <writeMM+0x340>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b9e      	ldr	r3, [pc, #632]	; (800118c <writeMM+0x340>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2310      	movs	r3, #16
 8000f16:	22e3      	movs	r2, #227	; 0xe3
 8000f18:	2152      	movs	r1, #82	; 0x52
 8000f1a:	f107 0008 	add.w	r0, r7, #8
 8000f1e:	f003 fae3 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f002 fb9c 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f28:	4b98      	ldr	r3, [pc, #608]	; (800118c <writeMM+0x340>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <writeMM+0x340>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	22e4      	movs	r2, #228	; 0xe4
 8000f40:	2152      	movs	r1, #82	; 0x52
 8000f42:	f107 0008 	add.w	r0, r7, #8
 8000f46:	f003 facf 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f002 fb88 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <writeMM+0x340>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <writeMM+0x340>)
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2310      	movs	r3, #16
 8000f66:	22e5      	movs	r2, #229	; 0xe5
 8000f68:	2152      	movs	r1, #82	; 0x52
 8000f6a:	f107 0008 	add.w	r0, r7, #8
 8000f6e:	f003 fabb 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f002 fb74 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <writeMM+0x340>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <writeMM+0x340>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	22e6      	movs	r2, #230	; 0xe6
 8000f90:	2152      	movs	r1, #82	; 0x52
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	f003 faa7 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f002 fb60 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <writeMM+0x340>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <writeMM+0x340>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	22e7      	movs	r2, #231	; 0xe7
 8000fb8:	2152      	movs	r1, #82	; 0x52
 8000fba:	f107 0008 	add.w	r0, r7, #8
 8000fbe:	f003 fa93 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f002 fb4c 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fc8:	4b70      	ldr	r3, [pc, #448]	; (800118c <writeMM+0x340>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <writeMM+0x340>)
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	22f5      	movs	r2, #245	; 0xf5
 8000fe0:	2152      	movs	r1, #82	; 0x52
 8000fe2:	f107 0008 	add.w	r0, r7, #8
 8000fe6:	f003 fa7f 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f002 fb38 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <writeMM+0x340>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <writeMM+0x340>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2310      	movs	r3, #16
 8001006:	22d9      	movs	r2, #217	; 0xd9
 8001008:	2152      	movs	r1, #82	; 0x52
 800100a:	f107 0008 	add.w	r0, r7, #8
 800100e:	f003 fa6b 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f002 fb24 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0xce;
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <writeMM+0x340>)
 800101a:	22ce      	movs	r2, #206	; 0xce
 800101c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <writeMM+0x340>)
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2310      	movs	r3, #16
 800102e:	22db      	movs	r2, #219	; 0xdb
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	f003 fa57 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f002 fb10 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <writeMM+0x340>)
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <writeMM+0x340>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2310      	movs	r3, #16
 8001056:	22dc      	movs	r2, #220	; 0xdc
 8001058:	2152      	movs	r1, #82	; 0x52
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	f003 fa43 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f002 fafc 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <writeMM+0x340>)
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <writeMM+0x340>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	22dd      	movs	r2, #221	; 0xdd
 8001080:	2152      	movs	r1, #82	; 0x52
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	f003 fa2f 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f002 fae8 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <writeMM+0x340>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <writeMM+0x340>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2310      	movs	r3, #16
 80010a6:	229f      	movs	r2, #159	; 0x9f
 80010a8:	2152      	movs	r1, #82	; 0x52
 80010aa:	f107 0008 	add.w	r0, r7, #8
 80010ae:	f003 fa1b 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f002 fad4 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <writeMM+0x340>)
 80010ba:	223c      	movs	r2, #60	; 0x3c
 80010bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <writeMM+0x340>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2310      	movs	r3, #16
 80010ce:	22a3      	movs	r2, #163	; 0xa3
 80010d0:	2152      	movs	r1, #82	; 0x52
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	f003 fa07 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f002 fac0 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <writeMM+0x340>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <writeMM+0x340>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2310      	movs	r3, #16
 80010f6:	22b7      	movs	r2, #183	; 0xb7
 80010f8:	2152      	movs	r1, #82	; 0x52
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f003 f9f3 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f002 faac 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <writeMM+0x340>)
 800110a:	223c      	movs	r2, #60	; 0x3c
 800110c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <writeMM+0x340>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2310      	movs	r3, #16
 800111e:	22bb      	movs	r2, #187	; 0xbb
 8001120:	2152      	movs	r1, #82	; 0x52
 8001122:	f107 0008 	add.w	r0, r7, #8
 8001126:	f003 f9df 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f002 fa98 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <writeMM+0x340>)
 8001132:	2209      	movs	r2, #9
 8001134:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <writeMM+0x340>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2310      	movs	r3, #16
 8001146:	22b2      	movs	r2, #178	; 0xb2
 8001148:	2152      	movs	r1, #82	; 0x52
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	f003 f9cb 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f002 fa84 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <writeMM+0x340>)
 800115a:	2209      	movs	r2, #9
 800115c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <writeMM+0x340>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2310      	movs	r3, #16
 800116e:	22ca      	movs	r2, #202	; 0xca
 8001170:	2152      	movs	r1, #82	; 0x52
 8001172:	f107 0008 	add.w	r0, r7, #8
 8001176:	f003 f9b7 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f002 fa70 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <writeMM+0x340>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	e001      	b.n	8001190 <writeMM+0x344>
 800118c:	2000008c 	.word	0x2000008c
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <writeMM+0x574>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2310      	movs	r3, #16
 800119c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80011a0:	2152      	movs	r1, #82	; 0x52
 80011a2:	f107 0008 	add.w	r0, r7, #8
 80011a6:	f003 f99f 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f002 fa58 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <writeMM+0x574>)
 80011b2:	2217      	movs	r2, #23
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <writeMM+0x574>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2310      	movs	r3, #16
 80011c6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011ca:	2152      	movs	r1, #82	; 0x52
 80011cc:	f107 0008 	add.w	r0, r7, #8
 80011d0:	f003 f98a 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f002 fa43 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <writeMM+0x574>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <writeMM+0x574>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2310      	movs	r3, #16
 80011f0:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011f4:	2152      	movs	r1, #82	; 0x52
 80011f6:	f107 0008 	add.w	r0, r7, #8
 80011fa:	f003 f975 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f002 fa2e 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <writeMM+0x574>)
 8001206:	2205      	movs	r2, #5
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <writeMM+0x574>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2310      	movs	r3, #16
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	2152      	movs	r1, #82	; 0x52
 800121e:	f107 0008 	add.w	r0, r7, #8
 8001222:	f003 f961 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f002 fa1a 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x05;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <writeMM+0x574>)
 800122e:	2205      	movs	r2, #5
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <writeMM+0x574>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2310      	movs	r3, #16
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	2152      	movs	r1, #82	; 0x52
 8001248:	f107 0008 	add.w	r0, r7, #8
 800124c:	f003 f94c 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f002 fa05 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <writeMM+0x574>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <writeMM+0x574>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2310      	movs	r3, #16
 800126c:	f240 1299 	movw	r2, #409	; 0x199
 8001270:	2152      	movs	r1, #82	; 0x52
 8001272:	f107 0008 	add.w	r0, r7, #8
 8001276:	f003 f937 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f002 f9f0 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <writeMM+0x574>)
 8001282:	221b      	movs	r2, #27
 8001284:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <writeMM+0x574>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800129a:	2152      	movs	r1, #82	; 0x52
 800129c:	f107 0008 	add.w	r0, r7, #8
 80012a0:	f003 f922 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 f9db 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <writeMM+0x574>)
 80012ac:	223e      	movs	r2, #62	; 0x3e
 80012ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <writeMM+0x574>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2310      	movs	r3, #16
 80012c0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012c4:	2152      	movs	r1, #82	; 0x52
 80012c6:	f107 0008 	add.w	r0, r7, #8
 80012ca:	f003 f90d 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f002 f9c6 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <writeMM+0x574>)
 80012d6:	221f      	movs	r2, #31
 80012d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <writeMM+0x574>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012ee:	2152      	movs	r1, #82	; 0x52
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f003 f8f8 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f002 f9b1 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <writeMM+0x574>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <writeMM+0x574>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2310      	movs	r3, #16
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2152      	movs	r1, #82	; 0x52
 8001318:	f107 0008 	add.w	r0, r7, #8
 800131c:	f003 f8e4 	bl	80044e8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f002 f99d 	bl	8003660 <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <writeMM+0x574>)
 8001328:	2210      	movs	r2, #16
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <writeMM+0x574>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2310      	movs	r3, #16
 800133c:	2211      	movs	r2, #17
 800133e:	2152      	movs	r1, #82	; 0x52
 8001340:	f107 0008 	add.w	r0, r7, #8
 8001344:	f003 f8d0 	bl	80044e8 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f002 f989 	bl	8003660 <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <writeMM+0x574>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <writeMM+0x574>)
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2310      	movs	r3, #16
 8001364:	221b      	movs	r2, #27
 8001366:	2152      	movs	r1, #82	; 0x52
 8001368:	f107 0008 	add.w	r0, r7, #8
 800136c:	f003 f8bc 	bl	80044e8 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <writeMM+0x574>)
 8001372:	220a      	movs	r2, #10
 8001374:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <writeMM+0x574>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2310      	movs	r3, #16
 8001386:	221c      	movs	r2, #28
 8001388:	2152      	movs	r1, #82	; 0x52
 800138a:	f107 0008 	add.w	r0, r7, #8
 800138e:	f003 f8ab 	bl	80044e8 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <writeMM+0x574>)
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <writeMM+0x574>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2310      	movs	r3, #16
 80013a8:	2214      	movs	r2, #20
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	f107 0008 	add.w	r0, r7, #8
 80013b0:	f003 f89a 	bl	80044e8 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	2000008c 	.word	0x2000008c

080013c4 <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <TOF_start_measurement+0x50>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <TOF_start_measurement+0x50>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	2218      	movs	r2, #24
 80013dc:	2152      	movs	r1, #82	; 0x52
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <TOF_start_measurement+0x54>)
 80013e0:	f003 f97c 	bl	80046dc <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <TOF_start_measurement+0x50>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	2218      	movs	r2, #24
 80013f0:	2152      	movs	r1, #82	; 0x52
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <TOF_start_measurement+0x58>)
 80013f4:	f003 f972 	bl	80046dc <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <TOF_start_measurement+0x50>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2310      	movs	r3, #16
 8001402:	2218      	movs	r2, #24
 8001404:	2152      	movs	r1, #82	; 0x52
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <TOF_start_measurement+0x5c>)
 8001408:	f003 f968 	bl	80046dc <HAL_I2C_Mem_Write_IT>
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000008c 	.word	0x2000008c
 8001418:	20000264 	.word	0x20000264
 800141c:	20000210 	.word	0x20000210
 8001420:	200002b8 	.word	0x200002b8

08001424 <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <TOF_get_measurement+0x48>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2310      	movs	r3, #16
 8001434:	2262      	movs	r2, #98	; 0x62
 8001436:	2152      	movs	r1, #82	; 0x52
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <TOF_get_measurement+0x4c>)
 800143a:	f003 fa01 	bl	8004840 <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <TOF_get_measurement+0x50>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2310      	movs	r3, #16
 8001448:	2262      	movs	r2, #98	; 0x62
 800144a:	2152      	movs	r1, #82	; 0x52
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <TOF_get_measurement+0x54>)
 800144e:	f003 f9f7 	bl	8004840 <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <TOF_get_measurement+0x58>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2310      	movs	r3, #16
 800145c:	2262      	movs	r2, #98	; 0x62
 800145e:	2152      	movs	r1, #82	; 0x52
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <TOF_get_measurement+0x5c>)
 8001462:	f003 f9ed 	bl	8004840 <HAL_I2C_Mem_Read_IT>
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000124 	.word	0x20000124
 8001470:	20000264 	.word	0x20000264
 8001474:	20000125 	.word	0x20000125
 8001478:	20000210 	.word	0x20000210
 800147c:	20000126 	.word	0x20000126
 8001480:	200002b8 	.word	0x200002b8

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f002 f877 	bl	800357c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f84d 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f000 fbe9 	bl	8001c68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001496:	f000 f905 	bl	80016a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800149a:	f000 f931 	bl	8001700 <MX_I2C2_Init>
  MX_ADC1_Init();
 800149e:	f000 f8af 	bl	8001600 <MX_ADC1_Init>
  MX_I2C3_Init();
 80014a2:	f000 f95b 	bl	800175c <MX_I2C3_Init>
  MX_TIM3_Init();
 80014a6:	f000 fae9 	bl	8001a7c <MX_TIM3_Init>
  MX_TIM5_Init();
 80014aa:	f000 fb3b 	bl	8001b24 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014ae:	f000 f9b9 	bl	8001824 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014b2:	f000 fa63 	bl	800197c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 fbad 	bl	8001c14 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014ba:	f000 f97d 	bl	80017b8 <MX_SPI2_Init>
  MX_TIM11_Init();
 80014be:	f000 fb85 	bl	8001bcc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 80014c2:	f000 fe97 	bl	80021f4 <motorsInit>
	TOF_init();
 80014c6:	f7ff fc5b 	bl	8000d80 <TOF_init>
	maze_init();
 80014ca:	f000 fc4b 	bl	8001d64 <maze_init>
	uart_startup_transmit();
 80014ce:	f001 ff95 	bl	80033fc <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);

	HAL_Delay(3000);
 80014d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014d6:	f002 f8c3 	bl	8003660 <HAL_Delay>

	R_speed_setpoint = 0;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <main+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 0;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <main+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]

	explore();
 80014e6:	f000 fcd7 	bl	8001e98 <explore>

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80014ea:	f002 f8ad 	bl	8003648 <HAL_GetTick>
 80014ee:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 80014f0:	f002 f8aa 	bl	8003648 <HAL_GetTick>
 80014f4:	6038      	str	r0, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		uart_task();
 80014f6:	f001 ffa9 	bl	800344c <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 80014fa:	f002 f8a5 	bl	8003648 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b65      	cmp	r3, #101	; 0x65
 8001506:	d902      	bls.n	800150e <main+0x8a>
			prev_main_loop_time = HAL_GetTick();
 8001508:	f002 f89e 	bl	8003648 <HAL_GetTick>
 800150c:	6038      	str	r0, [r7, #0]

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 800150e:	f002 f89b 	bl	8003648 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b14      	cmp	r3, #20
 800151a:	d9ec      	bls.n	80014f6 <main+0x72>

			prev_ctr_loop_time = HAL_GetTick();
 800151c:	f002 f894 	bl	8003648 <HAL_GetTick>
 8001520:	6078      	str	r0, [r7, #4]
		uart_task();
 8001522:	e7e8      	b.n	80014f6 <main+0x72>
 8001524:	200000f8 	.word	0x200000f8
 8001528:	200000f6 	.word	0x200000f6

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f007 ff62 	bl	8009404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <SystemClock_Config+0xcc>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <SystemClock_Config+0xd0>)
 8001576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 f8fb 	bl	80067ac <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015bc:	f000 fbcc 	bl	8001d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80015cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80015d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2103      	movs	r1, #3
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 fb5c 	bl	8006c9c <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ea:	f000 fbb5 	bl	8001d58 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	; 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_ADC1_Init+0x98>)
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <MX_ADC1_Init+0x9c>)
 8001616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_ADC1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_ADC1_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_ADC1_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_ADC1_Init+0x98>)
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <MX_ADC1_Init+0xa0>)
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_ADC1_Init+0x98>)
 800164c:	2201      	movs	r2, #1
 800164e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_ADC1_Init+0x98>)
 800165a:	2201      	movs	r2, #1
 800165c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <MX_ADC1_Init+0x98>)
 8001660:	f002 f822 	bl	80036a8 <HAL_ADC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fb75 	bl	8001d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800166e:	2304      	movs	r3, #4
 8001670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_ADC1_Init+0x98>)
 8001680:	f002 f856 	bl	8003730 <HAL_ADC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800168a:	f000 fb65 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001c8 	.word	0x200001c8
 800169c:	40012000 	.word	0x40012000
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MX_I2C1_Init+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_I2C1_Init+0x58>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016e2:	f002 fdbd 	bl	8004260 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 fb34 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000210 	.word	0x20000210
 80016f8:	40005400 	.word	0x40005400
 80016fc:	00061a80 	.word	0x00061a80

08001700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_I2C2_Init+0x50>)
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <MX_I2C2_Init+0x54>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_I2C2_Init+0x50>)
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <MX_I2C2_Init+0x58>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_I2C2_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_I2C2_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_I2C2_Init+0x50>)
 800171e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001722:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <MX_I2C2_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_I2C2_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MX_I2C2_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_I2C2_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_I2C2_Init+0x50>)
 800173e:	f002 fd8f 	bl	8004260 <HAL_I2C_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 fb06 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000264 	.word	0x20000264
 8001754:	40005800 	.word	0x40005800
 8001758:	00061a80 	.word	0x00061a80

0800175c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_I2C3_Init+0x50>)
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <MX_I2C3_Init+0x54>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_I2C3_Init+0x50>)
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_I2C3_Init+0x58>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_I2C3_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_I2C3_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_I2C3_Init+0x50>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_I2C3_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_I2C3_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_I2C3_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_I2C3_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_I2C3_Init+0x50>)
 800179a:	f002 fd61 	bl	8004260 <HAL_I2C_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017a4:	f000 fad8 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002b8 	.word	0x200002b8
 80017b0:	40005c00 	.word	0x40005c00
 80017b4:	00061a80 	.word	0x00061a80

080017b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI2_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <MX_SPI2_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI2_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI2_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI2_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI2_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI2_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI2_Init+0x64>)
 80017ec:	2230      	movs	r2, #48	; 0x30
 80017ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_SPI2_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI2_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_SPI2_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI2_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_SPI2_Init+0x64>)
 800180a:	f005 fc27 	bl	800705c <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001814:	f000 faa0 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000030c 	.word	0x2000030c
 8001820:	40003800 	.word	0x40003800

08001824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b096      	sub	sp, #88	; 0x58
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2220      	movs	r2, #32
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fdd1 	bl	8009404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <MX_TIM1_Init+0x150>)
 8001864:	4a44      	ldr	r2, [pc, #272]	; (8001978 <MX_TIM1_Init+0x154>)
 8001866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001868:	4b42      	ldr	r3, [pc, #264]	; (8001974 <MX_TIM1_Init+0x150>)
 800186a:	2263      	movs	r2, #99	; 0x63
 800186c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <MX_TIM1_Init+0x150>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <MX_TIM1_Init+0x150>)
 8001876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <MX_TIM1_Init+0x150>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <MX_TIM1_Init+0x150>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <MX_TIM1_Init+0x150>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800188e:	4839      	ldr	r0, [pc, #228]	; (8001974 <MX_TIM1_Init+0x150>)
 8001890:	f005 fc6d 	bl	800716e <HAL_TIM_Base_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800189a:	f000 fa5d 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a8:	4619      	mov	r1, r3
 80018aa:	4832      	ldr	r0, [pc, #200]	; (8001974 <MX_TIM1_Init+0x150>)
 80018ac:	f006 f918 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018b6:	f000 fa4f 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ba:	482e      	ldr	r0, [pc, #184]	; (8001974 <MX_TIM1_Init+0x150>)
 80018bc:	f005 fd08 	bl	80072d0 <HAL_TIM_PWM_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018c6:	f000 fa47 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d6:	4619      	mov	r1, r3
 80018d8:	4826      	ldr	r0, [pc, #152]	; (8001974 <MX_TIM1_Init+0x150>)
 80018da:	f006 fcc7 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018e4:	f000 fa38 	bl	8001d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e8:	2360      	movs	r3, #96	; 0x60
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	2204      	movs	r2, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4819      	ldr	r0, [pc, #100]	; (8001974 <MX_TIM1_Init+0x150>)
 800190e:	f006 f825 	bl	800795c <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001918:	f000 fa1e 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	2208      	movs	r2, #8
 8001922:	4619      	mov	r1, r3
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_TIM1_Init+0x150>)
 8001926:	f006 f819 	bl	800795c <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001930:	f000 fa12 	bl	8001d58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM1_Init+0x150>)
 8001958:	f006 fcf6 	bl	8008348 <HAL_TIMEx_ConfigBreakDeadTime>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001962:	f000 f9f9 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM1_Init+0x150>)
 8001968:	f001 fb9a 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3758      	adds	r7, #88	; 0x58
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000364 	.word	0x20000364
 8001978:	40010000 	.word	0x40010000

0800197c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019b6:	2263      	movs	r2, #99	; 0x63
 80019b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d4:	4828      	ldr	r0, [pc, #160]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019d6:	f005 fbca 	bl	800716e <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019e0:	f000 f9ba 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4821      	ldr	r0, [pc, #132]	; (8001a78 <MX_TIM2_Init+0xfc>)
 80019f2:	f006 f875 	bl	8007ae0 <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019fc:	f000 f9ac 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a00:	481d      	ldr	r0, [pc, #116]	; (8001a78 <MX_TIM2_Init+0xfc>)
 8001a02:	f005 fc65 	bl	80072d0 <HAL_TIM_PWM_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a0c:	f000 f9a4 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4816      	ldr	r0, [pc, #88]	; (8001a78 <MX_TIM2_Init+0xfc>)
 8001a20:	f006 fc24 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a2a:	f000 f995 	bl	8001d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2e:	2360      	movs	r3, #96	; 0x60
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_TIM2_Init+0xfc>)
 8001a46:	f005 ff89 	bl	800795c <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a50:	f000 f982 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM2_Init+0xfc>)
 8001a5c:	f005 ff7e 	bl	800795c <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a66:	f000 f977 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM2_Init+0xfc>)
 8001a6c:	f001 fb18 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3738      	adds	r7, #56	; 0x38
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200003ac 	.word	0x200003ac

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 fcba 	bl	8009404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <MX_TIM3_Init+0xa4>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aea:	f005 fcfb 	bl	80074e4 <HAL_TIM_Encoder_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001af4:	f000 f930 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001b06:	f006 fbb1 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b10:	f000 f922 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200003f4 	.word	0x200003f4
 8001b20:	40000400 	.word	0x40000400

08001b24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fc66 	bl	8009404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <MX_TIM5_Init+0xa4>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b66:	2303      	movs	r3, #3
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001b92:	f005 fca7 	bl	80074e4 <HAL_TIM_Encoder_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b9c:	f000 f8dc 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM5_Init+0xa0>)
 8001bae:	f006 fb5d 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001bb8:	f000 f8ce 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000043c 	.word	0x2000043c
 8001bc8:	40000c00 	.word	0x40000c00

08001bcc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <MX_TIM11_Init+0x44>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 24;
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bd8:	2218      	movs	r2, #24
 8001bda:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001be4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001be8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_TIM11_Init+0x40>)
 8001bf8:	f005 fab9 	bl	800716e <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c02:	f000 f8a9 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000484 	.word	0x20000484
 8001c10:	40014800 	.word	0x40014800

08001c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART2_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c4c:	f006 fbe2 	bl	8008414 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c56:	f000 f87f 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200004cc 	.word	0x200004cc
 8001c64:	40004400 	.word	0x40004400

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <MX_GPIO_Init+0xe4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001cd8:	481d      	ldr	r0, [pc, #116]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cda:	f002 fa8d 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_GPIO_Init+0xec>)
 8001ce6:	f002 fa87 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	4813      	ldr	r0, [pc, #76]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001d04:	f002 f8f4 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001d22:	f002 f8e5 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_GPIO_Init+0xec>)
 8001d40:	f002 f8d6 	bl	8003ef0 <HAL_GPIO_Init>

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020400 	.word	0x40020400

08001d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler+0x8>
	...

08001d64 <maze_init>:
extern int32_t R_acc;
extern uint8_t heading;
extern uint8_t current_cell_x;
extern uint8_t current_cell_y;

void maze_init(){
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
	// set all walls to zero, populate with manhattan dist
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e034      	b.n	8001dda <maze_init+0x76>
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	e02b      	b.n	8001dce <maze_init+0x6a>
			maze[i][j].dist = abs(END_CELL_X-i) + abs(END_CELL_Y-j);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1c3 0305 	rsb	r3, r3, #5
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bfb8      	it	lt
 8001d80:	425b      	neglt	r3, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f1c3 030c 	rsb	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bfb8      	it	lt
 8001d8e:	425b      	neglt	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	b2d8      	uxtb	r0, r3
 8001d96:	493f      	ldr	r1, [pc, #252]	; (8001e94 <maze_init+0x130>)
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	440b      	add	r3, r1
 8001dac:	4602      	mov	r2, r0
 8001dae:	705a      	strb	r2, [r3, #1]
			maze[i][j].walls = 0;
 8001db0:	4938      	ldr	r1, [pc, #224]	; (8001e94 <maze_init+0x130>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	ddd0      	ble.n	8001d76 <maze_init+0x12>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	ddc7      	ble.n	8001d70 <maze_init+0xc>
		}
	}
	//fill top and bottom edge walls
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	e028      	b.n	8001e38 <maze_init+0xd4>
		maze[i][0].walls = maze[i][0].walls | 0b1;
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <maze_init+0x130>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	211a      	movs	r1, #26
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2d8      	uxtb	r0, r3
 8001dfa:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <maze_init+0x130>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	211a      	movs	r1, #26
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	4602      	mov	r2, r0
 8001e08:	701a      	strb	r2, [r3, #0]
		maze[i][MAZE_CELL_HEIGHT-1].walls = maze[i][MAZE_CELL_HEIGHT-1].walls | 0b001;
 8001e0a:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <maze_init+0x130>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	211a      	movs	r1, #26
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3318      	adds	r3, #24
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	b2d8      	uxtb	r0, r3
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <maze_init+0x130>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	211a      	movs	r1, #26
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	4602      	mov	r2, r0
 8001e30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3301      	adds	r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	ddd3      	ble.n	8001de6 <maze_init+0x82>
	}
	//fill left and right edge walls
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	e01a      	b.n	8001e7a <maze_init+0x116>
		maze[0][j].walls = maze[0][j].walls | 0b1000;
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <maze_init+0x130>)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	b2d9      	uxtb	r1, r3
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <maze_init+0x130>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		maze[MAZE_CELL_WIDTH-1][j].walls = maze[MAZE_CELL_WIDTH-1][j].walls| 0b10;
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <maze_init+0x130>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3341      	adds	r3, #65	; 0x41
 8001e60:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <maze_init+0x130>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3341      	adds	r3, #65	; 0x41
 8001e70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	dde1      	ble.n	8001e44 <maze_init+0xe0>
	}
	// explored starting square
	maze[0][0].walls =  0b11111101;
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <maze_init+0x130>)
 8001e82:	22fd      	movs	r2, #253	; 0xfd
 8001e84:	701a      	strb	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000128 	.word	0x20000128

08001e98 <explore>:

void explore(){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	move(600,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001ea2:	f000 fa41 	bl	8002328 <move>
	while(1){
		HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f001 fbda 	bl	8003660 <HAL_Delay>
		if (measurements[0]>100) turn(-90);
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <explore+0x50>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d904      	bls.n	8001ebe <explore+0x26>
 8001eb4:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8001eb8:	f000 faea 	bl	8002490 <turn>
 8001ebc:	e00a      	b.n	8001ed4 <explore+0x3c>
		else if (measurements[2]>100) turn(90);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <explore+0x50>)
 8001ec0:	789b      	ldrb	r3, [r3, #2]
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d903      	bls.n	8001ece <explore+0x36>
 8001ec6:	205a      	movs	r0, #90	; 0x5a
 8001ec8:	f000 fae2 	bl	8002490 <turn>
 8001ecc:	e002      	b.n	8001ed4 <explore+0x3c>
		else turn(180);
 8001ece:	20b4      	movs	r0, #180	; 0xb4
 8001ed0:	f000 fade 	bl	8002490 <turn>

		HAL_Delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f001 fbc3 	bl	8003660 <HAL_Delay>
		move(600,0);
 8001eda:	2100      	movs	r1, #0
 8001edc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001ee0:	f000 fa22 	bl	8002328 <move>
		HAL_Delay(10);
 8001ee4:	e7df      	b.n	8001ea6 <explore+0xe>
 8001ee6:	bf00      	nop
 8001ee8:	20000124 	.word	0x20000124

08001eec <update>:
	}
	HAL_Delay(10);
	turn(90);
}
void update(){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af02      	add	r7, sp, #8
	if ((L_acc%208) > 98 && (L_acc%208) < 110){
 8001ef2:	4ba4      	ldr	r3, [pc, #656]	; (8002184 <update+0x298>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4ba4      	ldr	r3, [pc, #656]	; (8002188 <update+0x29c>)
 8001ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8001efc:	1199      	asrs	r1, r3, #6
 8001efe:	17d3      	asrs	r3, r2, #31
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	21d0      	movs	r1, #208	; 0xd0
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b62      	cmp	r3, #98	; 0x62
		//check walls
	}
	if (L_acc >= 208){
 8001f0c:	4b9d      	ldr	r3, [pc, #628]	; (8002184 <update+0x298>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2bcf      	cmp	r3, #207	; 0xcf
 8001f12:	f340 8135 	ble.w	8002180 <update+0x294>
		switch (heading) {
 8001f16:	4b9d      	ldr	r3, [pc, #628]	; (800218c <update+0x2a0>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	f200 8140 	bhi.w	80021a0 <update+0x2b4>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <update+0x3c>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f7d 	.word	0x08001f7d
 8001f30:	08001fd7 	.word	0x08001fd7
 8001f34:	0800200b 	.word	0x0800200b
 8001f38:	08002065 	.word	0x08002065
 8001f3c:	08002099 	.word	0x08002099
 8001f40:	080020f3 	.word	0x080020f3
 8001f44:	08002127 	.word	0x08002127
			case 0:
				current_cell_x += L_acc/208; //(120*180)/33pi
 8001f48:	4b8e      	ldr	r3, [pc, #568]	; (8002184 <update+0x298>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8e      	ldr	r2, [pc, #568]	; (8002188 <update+0x29c>)
 8001f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f52:	1192      	asrs	r2, r2, #6
 8001f54:	17db      	asrs	r3, r3, #31
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <update+0x2a4>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b8b      	ldr	r3, [pc, #556]	; (8002190 <update+0x2a4>)
 8001f64:	701a      	strb	r2, [r3, #0]

				L_acc -= 208;
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <update+0x298>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3bd0      	subs	r3, #208	; 0xd0
 8001f6c:	4a85      	ldr	r2, [pc, #532]	; (8002184 <update+0x298>)
 8001f6e:	6013      	str	r3, [r2, #0]
				R_acc -= 208;
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <update+0x2a8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3bd0      	subs	r3, #208	; 0xd0
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <update+0x2a8>)
 8001f78:	6013      	str	r3, [r2, #0]
				break;
 8001f7a:	e112      	b.n	80021a2 <update+0x2b6>
			case 1:
				current_cell_x += L_acc/295; //sqrt(2) * 208
 8001f7c:	4b81      	ldr	r3, [pc, #516]	; (8002184 <update+0x298>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a85      	ldr	r2, [pc, #532]	; (8002198 <update+0x2ac>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	441a      	add	r2, r3
 8001f88:	1212      	asrs	r2, r2, #8
 8001f8a:	17db      	asrs	r3, r3, #31
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <update+0x2a4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <update+0x2a4>)
 8001f9a:	701a      	strb	r2, [r3, #0]
				current_cell_y += L_acc/295;
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <update+0x298>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a7d      	ldr	r2, [pc, #500]	; (8002198 <update+0x2ac>)
 8001fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa6:	441a      	add	r2, r3
 8001fa8:	1212      	asrs	r2, r2, #8
 8001faa:	17db      	asrs	r3, r3, #31
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <update+0x2b0>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b78      	ldr	r3, [pc, #480]	; (800219c <update+0x2b0>)
 8001fba:	701a      	strb	r2, [r3, #0]

				L_acc -= 295;
 8001fbc:	4b71      	ldr	r3, [pc, #452]	; (8002184 <update+0x298>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8001fc4:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <update+0x298>)
 8001fc6:	6013      	str	r3, [r2, #0]
				R_acc -= 295;
 8001fc8:	4b72      	ldr	r3, [pc, #456]	; (8002194 <update+0x2a8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8001fd0:	4a70      	ldr	r2, [pc, #448]	; (8002194 <update+0x2a8>)
 8001fd2:	6013      	str	r3, [r2, #0]
				break;
 8001fd4:	e0e5      	b.n	80021a2 <update+0x2b6>
			case 2:
				current_cell_y += L_acc/208;
 8001fd6:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <update+0x298>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6b      	ldr	r2, [pc, #428]	; (8002188 <update+0x29c>)
 8001fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe0:	1192      	asrs	r2, r2, #6
 8001fe2:	17db      	asrs	r3, r3, #31
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	; (800219c <update+0x2b0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <update+0x2b0>)
 8001ff2:	701a      	strb	r2, [r3, #0]

				L_acc -= 208;
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <update+0x298>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3bd0      	subs	r3, #208	; 0xd0
 8001ffa:	4a62      	ldr	r2, [pc, #392]	; (8002184 <update+0x298>)
 8001ffc:	6013      	str	r3, [r2, #0]
				R_acc -= 208;
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <update+0x2a8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3bd0      	subs	r3, #208	; 0xd0
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <update+0x2a8>)
 8002006:	6013      	str	r3, [r2, #0]
				break;
 8002008:	e0cb      	b.n	80021a2 <update+0x2b6>
			case 3:
				current_cell_x -= L_acc/295;
 800200a:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <update+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a62      	ldr	r2, [pc, #392]	; (8002198 <update+0x2ac>)
 8002010:	fb82 1203 	smull	r1, r2, r2, r3
 8002014:	441a      	add	r2, r3
 8002016:	1212      	asrs	r2, r2, #8
 8002018:	17db      	asrs	r3, r3, #31
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <update+0x2a4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <update+0x2a4>)
 8002028:	701a      	strb	r2, [r3, #0]
				current_cell_y += L_acc/295;
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <update+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5a      	ldr	r2, [pc, #360]	; (8002198 <update+0x2ac>)
 8002030:	fb82 1203 	smull	r1, r2, r2, r3
 8002034:	441a      	add	r2, r3
 8002036:	1212      	asrs	r2, r2, #8
 8002038:	17db      	asrs	r3, r3, #31
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <update+0x2b0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <update+0x2b0>)
 8002048:	701a      	strb	r2, [r3, #0]

				L_acc -= 295;
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <update+0x298>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <update+0x298>)
 8002054:	6013      	str	r3, [r2, #0]
				R_acc -= 295;
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <update+0x2a8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800205e:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <update+0x2a8>)
 8002060:	6013      	str	r3, [r2, #0]
				break;
 8002062:	e09e      	b.n	80021a2 <update+0x2b6>
			case 4:
				current_cell_x -= L_acc/208;
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <update+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a47      	ldr	r2, [pc, #284]	; (8002188 <update+0x29c>)
 800206a:	fb82 1203 	smull	r1, r2, r2, r3
 800206e:	1192      	asrs	r2, r2, #6
 8002070:	17db      	asrs	r3, r3, #31
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <update+0x2a4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <update+0x2a4>)
 8002080:	701a      	strb	r2, [r3, #0]

				L_acc -= 208;
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <update+0x298>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3bd0      	subs	r3, #208	; 0xd0
 8002088:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <update+0x298>)
 800208a:	6013      	str	r3, [r2, #0]
				R_acc -= 208;
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <update+0x2a8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3bd0      	subs	r3, #208	; 0xd0
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <update+0x2a8>)
 8002094:	6013      	str	r3, [r2, #0]
				break;
 8002096:	e084      	b.n	80021a2 <update+0x2b6>
			case 5:
				current_cell_x -= L_acc/295;
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <update+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <update+0x2ac>)
 800209e:	fb82 1203 	smull	r1, r2, r2, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	1212      	asrs	r2, r2, #8
 80020a6:	17db      	asrs	r3, r3, #31
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <update+0x2a4>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <update+0x2a4>)
 80020b6:	701a      	strb	r2, [r3, #0]
				current_cell_y -= L_acc/295;
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <update+0x298>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a36      	ldr	r2, [pc, #216]	; (8002198 <update+0x2ac>)
 80020be:	fb82 1203 	smull	r1, r2, r2, r3
 80020c2:	441a      	add	r2, r3
 80020c4:	1212      	asrs	r2, r2, #8
 80020c6:	17db      	asrs	r3, r3, #31
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <update+0x2b0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <update+0x2b0>)
 80020d6:	701a      	strb	r2, [r3, #0]

				L_acc -= 295;
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <update+0x298>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <update+0x298>)
 80020e2:	6013      	str	r3, [r2, #0]
				R_acc -= 295;
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <update+0x2a8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80020ec:	4a29      	ldr	r2, [pc, #164]	; (8002194 <update+0x2a8>)
 80020ee:	6013      	str	r3, [r2, #0]
				break;
 80020f0:	e057      	b.n	80021a2 <update+0x2b6>
			case 6:
				current_cell_y -= L_acc/208;
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <update+0x298>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <update+0x29c>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1192      	asrs	r2, r2, #6
 80020fe:	17db      	asrs	r3, r3, #31
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <update+0x2b0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4413      	add	r3, r2
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <update+0x2b0>)
 800210e:	701a      	strb	r2, [r3, #0]

				L_acc -= 208;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <update+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3bd0      	subs	r3, #208	; 0xd0
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <update+0x298>)
 8002118:	6013      	str	r3, [r2, #0]
				R_acc -= 208;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <update+0x2a8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3bd0      	subs	r3, #208	; 0xd0
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <update+0x2a8>)
 8002122:	6013      	str	r3, [r2, #0]
				break;
 8002124:	e03d      	b.n	80021a2 <update+0x2b6>
			case 7:
				current_cell_x += L_acc/295;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <update+0x298>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <update+0x2ac>)
 800212c:	fb82 1203 	smull	r1, r2, r2, r3
 8002130:	441a      	add	r2, r3
 8002132:	1212      	asrs	r2, r2, #8
 8002134:	17db      	asrs	r3, r3, #31
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <update+0x2a4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <update+0x2a4>)
 8002144:	701a      	strb	r2, [r3, #0]
				current_cell_y -= L_acc/295;
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <update+0x298>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <update+0x2ac>)
 800214c:	fb82 1203 	smull	r1, r2, r2, r3
 8002150:	441a      	add	r2, r3
 8002152:	1212      	asrs	r2, r2, #8
 8002154:	17db      	asrs	r3, r3, #31
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <update+0x2b0>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <update+0x2b0>)
 8002164:	701a      	strb	r2, [r3, #0]

				L_acc -= 295;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <update+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <update+0x298>)
 8002170:	6013      	str	r3, [r2, #0]
				R_acc -= 295;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <update+0x2a8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <update+0x2a8>)
 800217c:	6013      	str	r3, [r2, #0]
				break;
 800217e:	e010      	b.n	80021a2 <update+0x2b6>
			default:
				break;
		}
	}
 8002180:	bf00      	nop
 8002182:	e00e      	b.n	80021a2 <update+0x2b6>
 8002184:	20000118 	.word	0x20000118
 8002188:	4ec4ec4f 	.word	0x4ec4ec4f
 800218c:	200001c4 	.word	0x200001c4
 8002190:	200001c5 	.word	0x200001c5
 8002194:	2000011c 	.word	0x2000011c
 8002198:	de27eb2d 	.word	0xde27eb2d
 800219c:	200001c6 	.word	0x200001c6
				break;
 80021a0:	bf00      	nop
	sprintf(send_buffer, "x:%d Y:%d LC:%d H:%d\n",(int)current_cell_x,(int)current_cell_y ,(int)L_acc, (int)heading);
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <update+0x2f0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <update+0x2f4>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <update+0x2f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <update+0x2fc>)
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	9201      	str	r2, [sp, #4]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	490b      	ldr	r1, [pc, #44]	; (80021ec <update+0x300>)
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <update+0x304>)
 80021c2:	f007 f927 	bl	8009414 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 80021c6:	480a      	ldr	r0, [pc, #40]	; (80021f0 <update+0x304>)
 80021c8:	f7fe f80a 	bl	80001e0 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <update+0x304>)
 80021d2:	f001 f95f 	bl	8003494 <uart_transmit>
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200001c5 	.word	0x200001c5
 80021e0:	200001c6 	.word	0x200001c6
 80021e4:	20000118 	.word	0x20000118
 80021e8:	200001c4 	.word	0x200001c4
 80021ec:	08009e14 	.word	0x08009e14
 80021f0:	20000094 	.word	0x20000094

080021f4 <motorsInit>:

extern uint8_t heading;

extern uint8_t measurements[3]; //L:M:R
extern char send_buffer[64];
void motorsInit(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80021f8:	2104      	movs	r1, #4
 80021fa:	4818      	ldr	r0, [pc, #96]	; (800225c <motorsInit+0x68>)
 80021fc:	f005 f8c2 	bl	8007384 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002200:	2108      	movs	r1, #8
 8002202:	4816      	ldr	r0, [pc, #88]	; (800225c <motorsInit+0x68>)
 8002204:	f005 f8be 	bl	8007384 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <motorsInit+0x68>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <motorsInit+0x68>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002218:	2100      	movs	r1, #0
 800221a:	4811      	ldr	r0, [pc, #68]	; (8002260 <motorsInit+0x6c>)
 800221c:	f005 f8b2 	bl	8007384 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002220:	2104      	movs	r1, #4
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <motorsInit+0x6c>)
 8002224:	f005 f8ae 	bl	8007384 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <motorsInit+0x6c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <motorsInit+0x6c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002238:	213c      	movs	r1, #60	; 0x3c
 800223a:	480a      	ldr	r0, [pc, #40]	; (8002264 <motorsInit+0x70>)
 800223c:	f005 f9f8 	bl	8007630 <HAL_TIM_Encoder_Start>
	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002240:	213c      	movs	r1, #60	; 0x3c
 8002242:	4809      	ldr	r0, [pc, #36]	; (8002268 <motorsInit+0x74>)
 8002244:	f005 f9f4 	bl	8007630 <HAL_TIM_Encoder_Start>
	  htim3.Instance->CNT = 0;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <motorsInit+0x70>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <motorsInit+0x74>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000364 	.word	0x20000364
 8002260:	200003ac 	.word	0x200003ac
 8002264:	200003f4 	.word	0x200003f4
 8002268:	2000043c 	.word	0x2000043c

0800226c <reset_counts>:
void reset_counts(){
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	  htim3.Instance->CNT = 0;
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <reset_counts+0x80>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <reset_counts+0x84>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
//	  L_speed_setpoint = 0; //mm/s
//	  R_speed_setpoint = 0;//mm/s
	  L_prev_enc_count = 0;
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <reset_counts+0x88>)
 8002282:	2200      	movs	r2, #0
 8002284:	801a      	strh	r2, [r3, #0]
	  R_prev_enc_count = 0;
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <reset_counts+0x8c>)
 8002288:	2200      	movs	r2, #0
 800228a:	801a      	strh	r2, [r3, #0]
	  L_ctrl_signal = 0;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <reset_counts+0x90>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
	  R_ctrl_signal = 0;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <reset_counts+0x94>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
	  L_error = 0;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <reset_counts+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
	  R_error = 0;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <reset_counts+0x9c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	  L_acc_error = 0;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <reset_counts+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
	  R_acc_error = 0;
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <reset_counts+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
	  L_acc = 0;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <reset_counts+0xa8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
	  R_acc = 0;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <reset_counts+0xac>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
	  Dist_error_acc = 0;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <reset_counts+0xb0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
	  //Motor 1
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <reset_counts+0xb4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <reset_counts+0xb4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <reset_counts+0xb8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <reset_counts+0xb8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	200003f4 	.word	0x200003f4
 80022f0:	2000043c 	.word	0x2000043c
 80022f4:	200000fa 	.word	0x200000fa
 80022f8:	200000fc 	.word	0x200000fc
 80022fc:	20000100 	.word	0x20000100
 8002300:	20000104 	.word	0x20000104
 8002304:	20000108 	.word	0x20000108
 8002308:	2000010c 	.word	0x2000010c
 800230c:	20000110 	.word	0x20000110
 8002310:	20000114 	.word	0x20000114
 8002314:	20000118 	.word	0x20000118
 8002318:	2000011c 	.word	0x2000011c
 800231c:	20000120 	.word	0x20000120
 8002320:	20000364 	.word	0x20000364
 8002324:	200003ac 	.word	0x200003ac

08002328 <move>:
void move(int16_t velocity, int16_t omega){ // velocity in mm/s, omega in deg/s
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	4613      	mov	r3, r2
 8002336:	80bb      	strh	r3, [r7, #4]
	L_speed_setpoint = velocity + (WHEEL_SPACING_MM*omega*PI)/(2*180); //mm/s
 8002338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f8f9 	bl	8000534 <__aeabi_i2d>
 8002342:	4604      	mov	r4, r0
 8002344:	460d      	mov	r5, r1
 8002346:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	00da      	lsls	r2, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8ed 	bl	8000534 <__aeabi_i2d>
 800235a:	a347      	add	r3, pc, #284	; (adr r3, 8002478 <move+0x150>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f952 	bl	8000608 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <move+0x158>)
 8002372:	f7fe fa73 	bl	800085c <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fd ff8d 	bl	800029c <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fb4f 	bl	8000a2c <__aeabi_d2iz>
 800238e:	4603      	mov	r3, r0
 8002390:	b21a      	sxth	r2, r3
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <move+0x15c>)
 8002394:	801a      	strh	r2, [r3, #0]
	R_speed_setpoint = velocity - (WHEEL_SPACING_MM*omega*PI)/(2*180);//mm/s
 8002396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8ca 	bl	8000534 <__aeabi_i2d>
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
 80023a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	00da      	lsls	r2, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8be 	bl	8000534 <__aeabi_i2d>
 80023b8:	a32f      	add	r3, pc, #188	; (adr r3, 8002478 <move+0x150>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe f923 	bl	8000608 <__aeabi_dmul>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <move+0x158>)
 80023d0:	f7fe fa44 	bl	800085c <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff5c 	bl	8000298 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fb20 	bl	8000a2c <__aeabi_d2iz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <move+0x160>)
 80023f2:	801a      	strh	r2, [r3, #0]

	uint8_t kickL = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
	uint8_t kickR = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73bb      	strb	r3, [r7, #14]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80023fc:	f001 f924 	bl	8003648 <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]

	while(measurements[1]>160 && velocity != 0){
 8002402:	e028      	b.n	8002456 <move+0x12e>
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 8002404:	f001 f920 	bl	8003648 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b14      	cmp	r3, #20
 8002410:	d921      	bls.n	8002456 <move+0x12e>
			prev_ctr_loop_time = HAL_GetTick();
 8002412:	f001 f919 	bl	8003648 <HAL_GetTick>
 8002416:	60b8      	str	r0, [r7, #8]

			if (measurements[0]<50) {
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <move+0x164>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b31      	cmp	r3, #49	; 0x31
 800241e:	d804      	bhi.n	800242a <move+0x102>
				kickR = -1;
 8002420:	23ff      	movs	r3, #255	; 0xff
 8002422:	73bb      	strb	r3, [r7, #14]
				kickL = 1;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e007      	b.n	800243a <move+0x112>
			}
			else if (measurements[2]<50){
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <move+0x164>)
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	2b31      	cmp	r3, #49	; 0x31
 8002430:	d803      	bhi.n	800243a <move+0x112>
				kickR = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	73bb      	strb	r3, [r7, #14]
				kickL = -1;
 8002436:	23ff      	movs	r3, #255	; 0xff
 8002438:	73fb      	strb	r3, [r7, #15]
			}
			R_motor_feedback_control(kickR);
 800243a:	7bbb      	ldrb	r3, [r7, #14]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f973 	bl	8002728 <R_motor_feedback_control>
			L_motor_feedback_control(kickL);
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa6f 	bl	8002928 <L_motor_feedback_control>
			update();
 800244a:	f7ff fd4f 	bl	8001eec <update>
			kickL = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
			kickR = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	73bb      	strb	r3, [r7, #14]
	while(measurements[1]>160 && velocity != 0){
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <move+0x164>)
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2ba0      	cmp	r3, #160	; 0xa0
 800245c:	d903      	bls.n	8002466 <move+0x13e>
 800245e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ce      	bne.n	8002404 <move+0xdc>
		}
	}
	reset_counts();
 8002466:	f7ff ff01 	bl	800226c <reset_counts>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bdb0      	pop	{r4, r5, r7, pc}
 8002472:	bf00      	nop
 8002474:	f3af 8000 	nop.w
 8002478:	f01b866e 	.word	0xf01b866e
 800247c:	400921f9 	.word	0x400921f9
 8002480:	40768000 	.word	0x40768000
 8002484:	200000f6 	.word	0x200000f6
 8002488:	200000f8 	.word	0x200000f8
 800248c:	20000124 	.word	0x20000124

08002490 <turn>:
void turn(int16_t deg){
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
	reset_counts();
 800249a:	f7ff fee7 	bl	800226c <reset_counts>
	int16_t L_count_target = (WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360);
 800249e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a2:	f242 52f8 	movw	r2, #9720	; 0x25f8
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a8f      	ldr	r2, [pc, #572]	; (80026e8 <turn+0x258>)
 80024ac:	fb82 1203 	smull	r1, r2, r2, r3
 80024b0:	441a      	add	r2, r3
 80024b2:	1352      	asrs	r2, r2, #13
 80024b4:	17db      	asrs	r3, r3, #31
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	823b      	strh	r3, [r7, #16]
	int16_t R_count_target = -(WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360);
 80024ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024be:	4a8b      	ldr	r2, [pc, #556]	; (80026ec <turn+0x25c>)
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	4a88      	ldr	r2, [pc, #544]	; (80026e8 <turn+0x258>)
 80024c6:	fb82 1203 	smull	r1, r2, r2, r3
 80024ca:	441a      	add	r2, r3
 80024cc:	1352      	asrs	r2, r2, #13
 80024ce:	17db      	asrs	r3, r3, #31
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	81fb      	strh	r3, [r7, #14]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80024d4:	f001 f8b8 	bl	8003648 <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]
	uint8_t turn_cmplt = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	74fb      	strb	r3, [r7, #19]
	while(turn_cmplt == 0){
 80024de:	e0d8      	b.n	8002692 <turn+0x202>
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 80024e0:	f001 f8b2 	bl	8003648 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b14      	cmp	r3, #20
 80024ec:	f240 80d1 	bls.w	8002692 <turn+0x202>
			prev_ctr_loop_time = HAL_GetTick();
 80024f0:	f001 f8aa 	bl	8003648 <HAL_GetTick>
 80024f4:	6178      	str	r0, [r7, #20]
			R_prev_enc_count = htim3.Instance->CNT;
 80024f6:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <turn+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <turn+0x264>)
 8002500:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 8002502:	4b7d      	ldr	r3, [pc, #500]	; (80026f8 <turn+0x268>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b21a      	sxth	r2, r3
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <turn+0x26c>)
 800250c:	801a      	strh	r2, [r3, #0]
//			R_motor_feedback_control();
			R_error = R_count_target - R_prev_enc_count;
 800250e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002512:	4a78      	ldr	r2, [pc, #480]	; (80026f4 <turn+0x264>)
 8002514:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	4a79      	ldr	r2, [pc, #484]	; (8002700 <turn+0x270>)
 800251c:	6013      	str	r3, [r2, #0]
			R_ctrl_signal = R_Kpt*R_error;
 800251e:	4b78      	ldr	r3, [pc, #480]	; (8002700 <turn+0x270>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	4a76      	ldr	r2, [pc, #472]	; (8002704 <turn+0x274>)
 800252a:	6013      	str	r3, [r2, #0]
			if (R_error > 0) R_ctrl_signal += R_ff_offset;
 800252c:	4b74      	ldr	r3, [pc, #464]	; (8002700 <turn+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	dd04      	ble.n	800253e <turn+0xae>
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <turn+0x274>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3378      	adds	r3, #120	; 0x78
 800253a:	4a72      	ldr	r2, [pc, #456]	; (8002704 <turn+0x274>)
 800253c:	6013      	str	r3, [r2, #0]
			if (R_error < 0) R_ctrl_signal -= R_ff_offset;
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <turn+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da04      	bge.n	8002550 <turn+0xc0>
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <turn+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b78      	subs	r3, #120	; 0x78
 800254c:	4a6d      	ldr	r2, [pc, #436]	; (8002704 <turn+0x274>)
 800254e:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 8002550:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <turn+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002558:	db03      	blt.n	8002562 <turn+0xd2>
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <turn+0x274>)
 800255c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002560:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <turn+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800256a:	dc02      	bgt.n	8002572 <turn+0xe2>
 800256c:	4b65      	ldr	r3, [pc, #404]	; (8002704 <turn+0x274>)
 800256e:	4a66      	ldr	r2, [pc, #408]	; (8002708 <turn+0x278>)
 8002570:	601a      	str	r2, [r3, #0]

			if (R_ctrl_signal == 0){
 8002572:	4b64      	ldr	r3, [pc, #400]	; (8002704 <turn+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <turn+0xfc>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800257a:	4b64      	ldr	r3, [pc, #400]	; (800270c <turn+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002582:	4b62      	ldr	r3, [pc, #392]	; (800270c <turn+0x27c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	63da      	str	r2, [r3, #60]	; 0x3c
 800258a:	e017      	b.n	80025bc <turn+0x12c>
			}
			else if (R_ctrl_signal > 0){
 800258c:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <turn+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	dd09      	ble.n	80025a8 <turn+0x118>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <turn+0x274>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <turn+0x27c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <turn+0x27c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80025a6:	e009      	b.n	80025bc <turn+0x12c>
			}
			else{
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <turn+0x27c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80025b0:	4b54      	ldr	r3, [pc, #336]	; (8002704 <turn+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	425a      	negs	r2, r3
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <turn+0x27c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
			}


//			L_motor_feedback_control();
			L_error = L_count_target - L_prev_enc_count;
 80025bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <turn+0x26c>)
 80025c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <turn+0x280>)
 80025ca:	6013      	str	r3, [r2, #0]
			L_ctrl_signal = L_Kpt*L_error;
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <turn+0x280>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <turn+0x284>)
 80025d8:	6013      	str	r3, [r2, #0]
			if (L_error > 0) L_ctrl_signal += L_ff_offset;
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <turn+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dd04      	ble.n	80025ec <turn+0x15c>
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <turn+0x284>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3378      	adds	r3, #120	; 0x78
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <turn+0x284>)
 80025ea:	6013      	str	r3, [r2, #0]
			if (L_error < 0) L_ctrl_signal -= L_ff_offset;
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <turn+0x280>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da04      	bge.n	80025fe <turn+0x16e>
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <turn+0x284>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3b78      	subs	r3, #120	; 0x78
 80025fa:	4a46      	ldr	r2, [pc, #280]	; (8002714 <turn+0x284>)
 80025fc:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=1000) L_ctrl_signal = 999;
 80025fe:	4b45      	ldr	r3, [pc, #276]	; (8002714 <turn+0x284>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002606:	db03      	blt.n	8002610 <turn+0x180>
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <turn+0x284>)
 800260a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800260e:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-1000) L_ctrl_signal = -999;
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <turn+0x284>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002618:	dc02      	bgt.n	8002620 <turn+0x190>
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <turn+0x284>)
 800261c:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <turn+0x278>)
 800261e:	601a      	str	r2, [r3, #0]

			if (L_ctrl_signal == 0){
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <turn+0x284>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <turn+0x1aa>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <turn+0x288>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <turn+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
 8002638:	e017      	b.n	800266a <turn+0x1da>
			}
			else if (L_ctrl_signal > 0){
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <turn+0x284>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	dd09      	ble.n	8002656 <turn+0x1c6>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <turn+0x284>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <turn+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <turn+0x288>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
 8002654:	e009      	b.n	800266a <turn+0x1da>
			}
			else{
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <turn+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <turn+0x284>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	425a      	negs	r2, r3
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <turn+0x288>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (L_error < 3 && L_error > -3 && R_error < 3 && R_error > -3) turn_cmplt =1;
 800266a:	4b29      	ldr	r3, [pc, #164]	; (8002710 <turn+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	dc0f      	bgt.n	8002692 <turn+0x202>
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <turn+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f113 0f02 	cmn.w	r3, #2
 800267a:	db0a      	blt.n	8002692 <turn+0x202>
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <turn+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	dc06      	bgt.n	8002692 <turn+0x202>
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <turn+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f113 0f02 	cmn.w	r3, #2
 800268c:	db01      	blt.n	8002692 <turn+0x202>
 800268e:	2301      	movs	r3, #1
 8002690:	74fb      	strb	r3, [r7, #19]
	while(turn_cmplt == 0){
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f43f af23 	beq.w	80024e0 <turn+0x50>
		}
	}
	heading = (8 + heading + (8+(8*deg)/360)%8)%8;
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <turn+0x28c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	f103 0208 	add.w	r2, r3, #8
 80026a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a6:	491e      	ldr	r1, [pc, #120]	; (8002720 <turn+0x290>)
 80026a8:	fb81 0103 	smull	r0, r1, r1, r3
 80026ac:	4419      	add	r1, r3
 80026ae:	1149      	asrs	r1, r1, #5
 80026b0:	17db      	asrs	r3, r3, #31
 80026b2:	1acb      	subs	r3, r1, r3
 80026b4:	3308      	adds	r3, #8
 80026b6:	4259      	negs	r1, r3
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	f001 0107 	and.w	r1, r1, #7
 80026c0:	bf58      	it	pl
 80026c2:	424b      	negpl	r3, r1
 80026c4:	4413      	add	r3, r2
 80026c6:	425a      	negs	r2, r3
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	f002 0207 	and.w	r2, r2, #7
 80026d0:	bf58      	it	pl
 80026d2:	4253      	negpl	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <turn+0x28c>)
 80026d8:	701a      	strb	r2, [r3, #0]
	reset_counts();
 80026da:	f7ff fdc7 	bl	800226c <reset_counts>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	b087277b 	.word	0xb087277b
 80026ec:	ffffda08 	.word	0xffffda08
 80026f0:	200003f4 	.word	0x200003f4
 80026f4:	200000fc 	.word	0x200000fc
 80026f8:	2000043c 	.word	0x2000043c
 80026fc:	200000fa 	.word	0x200000fa
 8002700:	2000010c 	.word	0x2000010c
 8002704:	20000104 	.word	0x20000104
 8002708:	fffffc19 	.word	0xfffffc19
 800270c:	20000364 	.word	0x20000364
 8002710:	20000108 	.word	0x20000108
 8002714:	20000100 	.word	0x20000100
 8002718:	200003ac 	.word	0x200003ac
 800271c:	200001c4 	.word	0x200001c4
 8002720:	b60b60b7 	.word	0xb60b60b7
 8002724:	00000000 	.word	0x00000000

08002728 <R_motor_feedback_control>:
void R_motor_feedback_control(uint8_t kick){//speed in mm/s
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
	Dist_error_acc += L_acc - R_acc;
 8002732:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <R_motor_feedback_control+0x1c8>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <R_motor_feedback_control+0x1cc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <R_motor_feedback_control+0x1d0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4413      	add	r3, r2
 8002742:	4a6d      	ldr	r2, [pc, #436]	; (80028f8 <R_motor_feedback_control+0x1d0>)
 8002744:	6013      	str	r3, [r2, #0]
	R_prev_enc_count = htim3.Instance->CNT;
 8002746:	4b6d      	ldr	r3, [pc, #436]	; (80028fc <R_motor_feedback_control+0x1d4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b21a      	sxth	r2, r3
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <R_motor_feedback_control+0x1d8>)
 8002750:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 8002752:	4b6b      	ldr	r3, [pc, #428]	; (8002900 <R_motor_feedback_control+0x1d8>)
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	461a      	mov	r2, r3
 800275a:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <R_motor_feedback_control+0x1cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a64      	ldr	r2, [pc, #400]	; (80028f4 <R_motor_feedback_control+0x1cc>)
 8002762:	6013      	str	r3, [r2, #0]

	//error in encoder count for that ctrl period
	R_error = (int)((R_speed_setpoint*COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - R_prev_enc_count;
 8002764:	4b67      	ldr	r3, [pc, #412]	; (8002904 <R_motor_feedback_control+0x1dc>)
 8002766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fedd 	bl	8000534 <__aeabi_i2d>
 800277a:	a35b      	add	r3, pc, #364	; (adr r3, 80028e8 <R_motor_feedback_control+0x1c0>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f86c 	bl	800085c <__aeabi_ddiv>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f94e 	bl	8000a2c <__aeabi_d2iz>
 8002790:	4603      	mov	r3, r0
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <R_motor_feedback_control+0x1d8>)
 8002794:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <R_motor_feedback_control+0x1e0>)
 800279c:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error;
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b59      	ldr	r3, [pc, #356]	; (8002908 <R_motor_feedback_control+0x1e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027aa:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 80027ac:	4b57      	ldr	r3, [pc, #348]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b4:	dd03      	ble.n	80027be <R_motor_feedback_control+0x96>
 80027b6:	4b55      	ldr	r3, [pc, #340]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027bc:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 80027be:	4b53      	ldr	r3, [pc, #332]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80027c6:	da02      	bge.n	80027ce <R_motor_feedback_control+0xa6>
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027ca:	4a51      	ldr	r2, [pc, #324]	; (8002910 <R_motor_feedback_control+0x1e8>)
 80027cc:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward 				proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint + K_kick*kick;// + K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <R_motor_feedback_control+0x1e0>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009a      	lsls	r2, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	4b4b      	ldr	r3, [pc, #300]	; (800290c <R_motor_feedback_control+0x1e4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fea6 	bl	8000534 <__aeabi_i2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4b45      	ldr	r3, [pc, #276]	; (8002904 <R_motor_feedback_control+0x1dc>)
 80027ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fe9e 	bl	8000534 <__aeabi_i2d>
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <R_motor_feedback_control+0x1ec>)
 80027fe:	f7fd ff03 	bl	8000608 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd47 	bl	800029c <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4614      	mov	r4, r2
 8002814:	461d      	mov	r5, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe8a 	bl	8000534 <__aeabi_i2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd fd38 	bl	800029c <__adddf3>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f8fa 	bl	8000a2c <__aeabi_d2iz>
 8002838:	4603      	mov	r3, r0
 800283a:	4a37      	ldr	r2, [pc, #220]	; (8002918 <R_motor_feedback_control+0x1f0>)
 800283c:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint > 0) R_ctrl_signal += R_ff_offset;
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <R_motor_feedback_control+0x1dc>)
 8002840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002844:	2b00      	cmp	r3, #0
 8002846:	dd04      	ble.n	8002852 <R_motor_feedback_control+0x12a>
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <R_motor_feedback_control+0x1f0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3378      	adds	r3, #120	; 0x78
 800284e:	4a32      	ldr	r2, [pc, #200]	; (8002918 <R_motor_feedback_control+0x1f0>)
 8002850:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint < 0) R_ctrl_signal -= R_ff_offset;
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <R_motor_feedback_control+0x1dc>)
 8002854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	da04      	bge.n	8002866 <R_motor_feedback_control+0x13e>
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <R_motor_feedback_control+0x1f0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3b78      	subs	r3, #120	; 0x78
 8002862:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <R_motor_feedback_control+0x1f0>)
 8002864:	6013      	str	r3, [r2, #0]

	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <R_motor_feedback_control+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286e:	db03      	blt.n	8002878 <R_motor_feedback_control+0x150>
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <R_motor_feedback_control+0x1f0>)
 8002872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002876:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <R_motor_feedback_control+0x1f0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002880:	dc02      	bgt.n	8002888 <R_motor_feedback_control+0x160>
 8002882:	4b25      	ldr	r3, [pc, #148]	; (8002918 <R_motor_feedback_control+0x1f0>)
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <R_motor_feedback_control+0x1f4>)
 8002886:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <R_motor_feedback_control+0x1f0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <R_motor_feedback_control+0x17a>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002890:	4b23      	ldr	r3, [pc, #140]	; (8002920 <R_motor_feedback_control+0x1f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <R_motor_feedback_control+0x1f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2200      	movs	r2, #0
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a0:	e017      	b.n	80028d2 <R_motor_feedback_control+0x1aa>
	}
	else if (R_ctrl_signal > 0){
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <R_motor_feedback_control+0x1f0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	dd09      	ble.n	80028be <R_motor_feedback_control+0x196>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <R_motor_feedback_control+0x1f0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <R_motor_feedback_control+0x1f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <R_motor_feedback_control+0x1f8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80028bc:	e009      	b.n	80028d2 <R_motor_feedback_control+0x1aa>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <R_motor_feedback_control+0x1f8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <R_motor_feedback_control+0x1f0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	425a      	negs	r2, r3
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <R_motor_feedback_control+0x1f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	htim3.Instance->CNT = 0;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <R_motor_feedback_control+0x1d4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	f3af 8000 	nop.w
 80028e8:	851eb851 	.word	0x851eb851
 80028ec:	40f94f87 	.word	0x40f94f87
 80028f0:	20000118 	.word	0x20000118
 80028f4:	2000011c 	.word	0x2000011c
 80028f8:	20000120 	.word	0x20000120
 80028fc:	200003f4 	.word	0x200003f4
 8002900:	200000fc 	.word	0x200000fc
 8002904:	200000f8 	.word	0x200000f8
 8002908:	2000010c 	.word	0x2000010c
 800290c:	20000114 	.word	0x20000114
 8002910:	fffffc18 	.word	0xfffffc18
 8002914:	3fe00000 	.word	0x3fe00000
 8002918:	20000104 	.word	0x20000104
 800291c:	fffffc19 	.word	0xfffffc19
 8002920:	20000364 	.word	0x20000364
 8002924:	00000000 	.word	0x00000000

08002928 <L_motor_feedback_control>:

void L_motor_feedback_control(uint8_t kick){//speed in mm/s
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
	L_prev_enc_count = htim5.Instance->CNT;
 8002932:	4b6b      	ldr	r3, [pc, #428]	; (8002ae0 <L_motor_feedback_control+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b21a      	sxth	r2, r3
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <L_motor_feedback_control+0x1bc>)
 800293c:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 800293e:	4b69      	ldr	r3, [pc, #420]	; (8002ae4 <L_motor_feedback_control+0x1bc>)
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	461a      	mov	r2, r3
 8002946:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <L_motor_feedback_control+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <L_motor_feedback_control+0x1c0>)
 800294e:	6013      	str	r3, [r2, #0]
	//error in encoder count for that ctrl period
	L_error = (int)((L_speed_setpoint*COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - L_prev_enc_count;
 8002950:	4b66      	ldr	r3, [pc, #408]	; (8002aec <L_motor_feedback_control+0x1c4>)
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fde7 	bl	8000534 <__aeabi_i2d>
 8002966:	a35a      	add	r3, pc, #360	; (adr r3, 8002ad0 <L_motor_feedback_control+0x1a8>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd ff76 	bl	800085c <__aeabi_ddiv>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f858 	bl	8000a2c <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <L_motor_feedback_control+0x1bc>)
 8002980:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <L_motor_feedback_control+0x1c8>)
 8002988:	6013      	str	r3, [r2, #0]

	L_acc_error += L_error;
 800298a:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <L_motor_feedback_control+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 8002996:	6013      	str	r3, [r2, #0]
	if(L_acc_error > 1000) L_acc_error = 1000;
 8002998:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a0:	dd03      	ble.n	80029aa <L_motor_feedback_control+0x82>
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 80029a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a8:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;  //limits integral term
 80029aa:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80029b2:	da02      	bge.n	80029ba <L_motor_feedback_control+0x92>
 80029b4:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 80029b6:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <L_motor_feedback_control+0x1d0>)
 80029b8:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint + K_kick*kick;//K_pdisterror*(R_acc-L_acc) - K_idisterror*Dist_error_acc;
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <L_motor_feedback_control+0x1c8>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009a      	lsls	r2, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <L_motor_feedback_control+0x1cc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fdb0 	bl	8000534 <__aeabi_i2d>
 80029d4:	4604      	mov	r4, r0
 80029d6:	460d      	mov	r5, r1
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <L_motor_feedback_control+0x1c4>)
 80029da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fda8 	bl	8000534 <__aeabi_i2d>
 80029e4:	a33c      	add	r3, pc, #240	; (adr r3, 8002ad8 <L_motor_feedback_control+0x1b0>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fe0d 	bl	8000608 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fc51 	bl	800029c <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	461d      	mov	r5, r3
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd94 	bl	8000534 <__aeabi_i2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4620      	mov	r0, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7fd fc42 	bl	800029c <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f804 	bl	8000a2c <__aeabi_d2iz>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4a35      	ldr	r2, [pc, #212]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a28:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint > 0) L_ctrl_signal += L_ff_offset;
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <L_motor_feedback_control+0x1c4>)
 8002a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	dd04      	ble.n	8002a3e <L_motor_feedback_control+0x116>
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3378      	adds	r3, #120	; 0x78
 8002a3a:	4a30      	ldr	r2, [pc, #192]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a3c:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint < 0) L_ctrl_signal -= L_ff_offset;
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <L_motor_feedback_control+0x1c4>)
 8002a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da04      	bge.n	8002a52 <L_motor_feedback_control+0x12a>
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3b78      	subs	r3, #120	; 0x78
 8002a4e:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a50:	6013      	str	r3, [r2, #0]


	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5a:	dd03      	ble.n	8002a64 <L_motor_feedback_control+0x13c>
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a62:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002a6c:	da02      	bge.n	8002a74 <L_motor_feedback_control+0x14c>
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <L_motor_feedback_control+0x1d8>)
 8002a72:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <L_motor_feedback_control+0x166>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8c:	e017      	b.n	8002abe <L_motor_feedback_control+0x196>
	}
	else if (L_ctrl_signal > 0){
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	dd09      	ble.n	8002aaa <L_motor_feedback_control+0x182>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa8:	e009      	b.n	8002abe <L_motor_feedback_control+0x196>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <L_motor_feedback_control+0x1d4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	425a      	negs	r2, r3
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <L_motor_feedback_control+0x1dc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	htim5.Instance->CNT = 0;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <L_motor_feedback_control+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	851eb851 	.word	0x851eb851
 8002ad4:	40f94f87 	.word	0x40f94f87
 8002ad8:	66666666 	.word	0x66666666
 8002adc:	3fde6666 	.word	0x3fde6666
 8002ae0:	2000043c 	.word	0x2000043c
 8002ae4:	200000fa 	.word	0x200000fa
 8002ae8:	20000118 	.word	0x20000118
 8002aec:	200000f6 	.word	0x200000f6
 8002af0:	20000108 	.word	0x20000108
 8002af4:	20000110 	.word	0x20000110
 8002af8:	fffffc18 	.word	0xfffffc18
 8002afc:	20000100 	.word	0x20000100
 8002b00:	fffffc19 	.word	0xfffffc19
 8002b04:	200003ac 	.word	0x200003ac

08002b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_MspInit+0x4c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_ADC_MspInit+0x7c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d127      	bne.n	8002bca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_ADC_MspInit+0x80>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_ADC_MspInit+0x84>)
 8002bc6:	f001 f993 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40012000 	.word	0x40012000
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a83      	ldr	r2, [pc, #524]	; (8002e0c <HAL_I2C_MspInit+0x22c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d14c      	bne.n	8002c9c <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a81      	ldr	r2, [pc, #516]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c1e:	2340      	movs	r3, #64	; 0x40
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c22:	2312      	movs	r3, #18
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c36:	4619      	mov	r1, r3
 8002c38:	4876      	ldr	r0, [pc, #472]	; (8002e14 <HAL_I2C_MspInit+0x234>)
 8002c3a:	f001 f959 	bl	8003ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	486e      	ldr	r0, [pc, #440]	; (8002e14 <HAL_I2C_MspInit+0x234>)
 8002c5a:	f001 f949 	bl	8003ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	201f      	movs	r0, #31
 8002c80:	f001 f85f 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c84:	201f      	movs	r0, #31
 8002c86:	f001 f878 	bl	8003d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2020      	movs	r0, #32
 8002c90:	f001 f857 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c94:	2020      	movs	r0, #32
 8002c96:	f001 f870 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c9a:	e0b3      	b.n	8002e04 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_I2C_MspInit+0x238>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d14e      	bne.n	8002d44 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	4619      	mov	r1, r3
 8002cde:	484d      	ldr	r0, [pc, #308]	; (8002e14 <HAL_I2C_MspInit+0x234>)
 8002ce0:	f001 f906 	bl	8003ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cea:	2312      	movs	r3, #18
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002cf6:	2309      	movs	r3, #9
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4844      	ldr	r0, [pc, #272]	; (8002e14 <HAL_I2C_MspInit+0x234>)
 8002d02:	f001 f8f5 	bl	8003ef0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2021      	movs	r0, #33	; 0x21
 8002d28:	f001 f80b 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d2c:	2021      	movs	r0, #33	; 0x21
 8002d2e:	f001 f824 	bl	8003d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	2022      	movs	r0, #34	; 0x22
 8002d38:	f001 f803 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002d3c:	2022      	movs	r0, #34	; 0x22
 8002d3e:	f001 f81c 	bl	8003d7a <HAL_NVIC_EnableIRQ>
}
 8002d42:	e05f      	b.n	8002e04 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_I2C_MspInit+0x23c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d15a      	bne.n	8002e04 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8c:	2312      	movs	r3, #18
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	481f      	ldr	r0, [pc, #124]	; (8002e20 <HAL_I2C_MspInit+0x240>)
 8002da4:	f001 f8a4 	bl	8003ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002da8:	2310      	movs	r3, #16
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dac:	2312      	movs	r3, #18
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002db8:	2309      	movs	r3, #9
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4814      	ldr	r0, [pc, #80]	; (8002e14 <HAL_I2C_MspInit+0x234>)
 8002dc4:	f001 f894 	bl	8003ef0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_I2C_MspInit+0x230>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2048      	movs	r0, #72	; 0x48
 8002dea:	f000 ffaa 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002dee:	2048      	movs	r0, #72	; 0x48
 8002df0:	f000 ffc3 	bl	8003d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2049      	movs	r0, #73	; 0x49
 8002dfa:	f000 ffa2 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002dfe:	2049      	movs	r0, #73	; 0x49
 8002e00:	f000 ffbb 	bl	8003d7a <HAL_NVIC_EnableIRQ>
}
 8002e04:	bf00      	nop
 8002e06:	3738      	adds	r7, #56	; 0x38
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40005400 	.word	0x40005400
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40005800 	.word	0x40005800
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	40020000 	.word	0x40020000

08002e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_SPI_MspInit+0x84>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12c      	bne.n	8002ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_SPI_MspInit+0x88>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e90:	2305      	movs	r3, #5
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <HAL_SPI_MspInit+0x8c>)
 8002e9c:	f001 f828 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40003800 	.word	0x40003800
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d116      	bne.n	8002ef4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	201a      	movs	r0, #26
 8002ee8:	f000 ff2b 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002eec:	201a      	movs	r0, #26
 8002eee:	f000 ff44 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ef2:	e02e      	b.n	8002f52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
}
 8002f1a:	e01a      	b.n	8002f52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <HAL_TIM_Base_MspInit+0xb0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d115      	bne.n	8002f52 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	201a      	movs	r0, #26
 8002f48:	f000 fefb 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f4c:	201a      	movs	r0, #26
 8002f4e:	f000 ff14 	bl	8003d7a <HAL_NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40014800 	.word	0x40014800

08002f68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_TIM_Encoder_MspInit+0x124>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d14a      	bne.n	8003020 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	4b40      	ldr	r3, [pc, #256]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a38      	ldr	r2, [pc, #224]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a31      	ldr	r2, [pc, #196]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 8002fde:	2340      	movs	r3, #64	; 0x40
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4826      	ldr	r0, [pc, #152]	; (8003094 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002ffa:	f000 ff79 	bl	8003ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 8002ffe:	2320      	movs	r3, #32
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800300e:	2302      	movs	r3, #2
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	481f      	ldr	r0, [pc, #124]	; (8003098 <HAL_TIM_Encoder_MspInit+0x130>)
 800301a:	f000 ff69 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800301e:	e030      	b.n	8003082 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_TIM_Encoder_MspInit+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d12b      	bne.n	8003082 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_TIM_Encoder_MspInit+0x128>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8003062:	2303      	movs	r3, #3
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003072:	2302      	movs	r3, #2
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <HAL_TIM_Encoder_MspInit+0x12c>)
 800307e:	f000 ff37 	bl	8003ef0 <HAL_GPIO_Init>
}
 8003082:	bf00      	nop
 8003084:	3730      	adds	r7, #48	; 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40000400 	.word	0x40000400
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40000c00 	.word	0x40000c00

080030a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a34      	ldr	r2, [pc, #208]	; (8003190 <HAL_TIM_MspPostInit+0xf0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11f      	bne.n	8003102 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a32      	ldr	r2, [pc, #200]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 80030de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	4619      	mov	r1, r3
 80030fa:	4827      	ldr	r0, [pc, #156]	; (8003198 <HAL_TIM_MspPostInit+0xf8>)
 80030fc:	f000 fef8 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003100:	e041      	b.n	8003186 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d13c      	bne.n	8003186 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_TIM_MspPostInit+0xf4>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8003144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003156:	2301      	movs	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <HAL_TIM_MspPostInit+0xf8>)
 8003162:	f000 fec5 	bl	8003ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 8003166:	2308      	movs	r3, #8
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <HAL_TIM_MspPostInit+0xfc>)
 8003182:	f000 feb5 	bl	8003ef0 <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400

080031a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_UART_MspInit+0x94>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d133      	bne.n	800322a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6313      	str	r3, [r2, #48]	; 0x30
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_UART_MspInit+0x98>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031fa:	230c      	movs	r3, #12
 80031fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800320a:	2307      	movs	r3, #7
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	4809      	ldr	r0, [pc, #36]	; (800323c <HAL_UART_MspInit+0x9c>)
 8003216:	f000 fe6b 	bl	8003ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	2026      	movs	r0, #38	; 0x26
 8003220:	f000 fd8f 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003224:	2026      	movs	r0, #38	; 0x26
 8003226:	f000 fda8 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800322a:	bf00      	nop
 800322c:	3728      	adds	r7, #40	; 0x28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40004400 	.word	0x40004400
 8003238:	40023800 	.word	0x40023800
 800323c:	40020000 	.word	0x40020000

08003240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <NMI_Handler+0x4>

08003246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <HardFault_Handler+0x4>

0800324c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <MemManage_Handler+0x4>

08003252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003256:	e7fe      	b.n	8003256 <BusFault_Handler+0x4>

08003258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <UsageFault_Handler+0x4>

0800325e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800328c:	f000 f9c8 	bl	8003620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}

08003294 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	static uint8_t flag = 0;
	if (flag ==0){
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>
		TOF_get_measurement();
 80032a0:	f7fe f8c0 	bl	8001424 <TOF_get_measurement>
		flag = 1;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e009      	b.n	80032c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>
	}
	else{
		TOF_start_measurement();
 80032ac:	f7fe f88a 	bl	80013c4 <TOF_start_measurement>
		flag = 0;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80032b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ba:	4806      	ldr	r0, [pc, #24]	; (80032d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x40>)
 80032bc:	f000 ffb5 	bl	800422a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 80032c2:	f004 fa43 	bl	800774c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <TIM1_TRG_COM_TIM11_IRQHandler+0x48>)
 80032c8:	f004 fa40 	bl	800774c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000510 	.word	0x20000510
 80032d4:	40020800 	.word	0x40020800
 80032d8:	20000364 	.word	0x20000364
 80032dc:	20000484 	.word	0x20000484

080032e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <I2C1_EV_IRQHandler+0x10>)
 80032e6:	f001 fb69 	bl	80049bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000210 	.word	0x20000210

080032f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <I2C1_ER_IRQHandler+0x10>)
 80032fa:	f001 fcd0 	bl	8004c9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000210 	.word	0x20000210

08003308 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <I2C2_EV_IRQHandler+0x10>)
 800330e:	f001 fb55 	bl	80049bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000264 	.word	0x20000264

0800331c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <I2C2_ER_IRQHandler+0x10>)
 8003322:	f001 fcbc 	bl	8004c9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000264 	.word	0x20000264

08003330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <USART2_IRQHandler+0x10>)
 8003336:	f005 f92f 	bl	8008598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200004cc 	.word	0x200004cc

08003344 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003348:	4802      	ldr	r0, [pc, #8]	; (8003354 <I2C3_EV_IRQHandler+0x10>)
 800334a:	f001 fb37 	bl	80049bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200002b8 	.word	0x200002b8

08003358 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800335c:	4802      	ldr	r0, [pc, #8]	; (8003368 <I2C3_ER_IRQHandler+0x10>)
 800335e:	f001 fc9e 	bl	8004c9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200002b8 	.word	0x200002b8

0800336c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <_sbrk+0x5c>)
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <_sbrk+0x60>)
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <_sbrk+0x64>)
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <_sbrk+0x68>)
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <_sbrk+0x64>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d207      	bcs.n	80033ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800339c:	f005 fffa 	bl	8009394 <__errno>
 80033a0:	4603      	mov	r3, r0
 80033a2:	220c      	movs	r2, #12
 80033a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	e009      	b.n	80033c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <_sbrk+0x64>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <_sbrk+0x64>)
 80033bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20020000 	.word	0x20020000
 80033cc:	00000400 	.word	0x00000400
 80033d0:	20000514 	.word	0x20000514
 80033d4:	20000530 	.word	0x20000530

080033d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SystemInit+0x20>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <SystemInit+0x20>)
 80033e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8003402:	2005      	movs	r0, #5
 8003404:	f000 f92c 	bl	8003660 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <uart_startup_transmit+0x40>)
 800340a:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	480c      	ldr	r0, [pc, #48]	; (8003440 <uart_startup_transmit+0x44>)
 8003410:	f006 f820 	bl	8009454 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8003414:	480a      	ldr	r0, [pc, #40]	; (8003440 <uart_startup_transmit+0x44>)
 8003416:	f7fc fee3 	bl	80001e0 <strlen>
 800341a:	4603      	mov	r3, r0
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <uart_startup_transmit+0x44>)
 8003422:	4808      	ldr	r0, [pc, #32]	; (8003444 <uart_startup_transmit+0x48>)
 8003424:	f005 f843 	bl	80084ae <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 8003428:	2201      	movs	r2, #1
 800342a:	4907      	ldr	r1, [pc, #28]	; (8003448 <uart_startup_transmit+0x4c>)
 800342c:	4805      	ldr	r0, [pc, #20]	; (8003444 <uart_startup_transmit+0x48>)
 800342e:	f005 f883 	bl	8008538 <HAL_UART_Receive_IT>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	08009e2c 	.word	0x08009e2c
 8003440:	20000094 	.word	0x20000094
 8003444:	200004cc 	.word	0x200004cc
 8003448:	200000d4 	.word	0x200000d4

0800344c <uart_task>:

void uart_task()
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <uart_task+0x3c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d014      	beq.n	8003482 <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <uart_task+0x40>)
 800345a:	f7fc fec1 	bl	80001e0 <strlen>
 800345e:	4603      	mov	r3, r0
 8003460:	4619      	mov	r1, r3
 8003462:	480a      	ldr	r0, [pc, #40]	; (800348c <uart_task+0x40>)
 8003464:	f000 f816 	bl	8003494 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8003468:	4808      	ldr	r0, [pc, #32]	; (800348c <uart_task+0x40>)
 800346a:	f005 ff8f 	bl	800938c <atoi>
 800346e:	4603      	mov	r3, r0
 8003470:	b21a      	sxth	r2, r3
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <uart_task+0x44>)
 8003474:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <uart_task+0x3c>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <uart_task+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
	}
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200000f4 	.word	0x200000f4
 800348c:	200000d4 	.word	0x200000d4
 8003490:	200000f8 	.word	0x200000f8

08003494 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4803      	ldr	r0, [pc, #12]	; (80034b4 <uart_transmit+0x20>)
 80034a8:	f005 f801 	bl	80084ae <HAL_UART_Transmit_IT>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200004cc 	.word	0x200004cc

080034b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_UART_RxCpltCallback+0x64>)
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	2b0a      	cmp	r3, #10
 80034cc:	d10c      	bne.n	80034e8 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_UART_RxCpltCallback+0x64>)
 80034d6:	2100      	movs	r1, #0
 80034d8:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_UART_RxCpltCallback+0x68>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
		index = 0;
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e009      	b.n	80034fc <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b1d      	cmp	r3, #29
 80034ee:	d805      	bhi.n	80034fc <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034fa:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_UART_RxCpltCallback+0x60>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_UART_RxCpltCallback+0x64>)
 8003504:	4413      	add	r3, r2
 8003506:	2201      	movs	r2, #1
 8003508:	4619      	mov	r1, r3
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <HAL_UART_RxCpltCallback+0x6c>)
 800350c:	f005 f814 	bl	8008538 <HAL_UART_Receive_IT>

}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000518 	.word	0x20000518
 800351c:	200000d4 	.word	0x200000d4
 8003520:	200000f4 	.word	0x200000f4
 8003524:	200004cc 	.word	0x200004cc

08003528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800352e:	490e      	ldr	r1, [pc, #56]	; (8003568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003530:	4a0e      	ldr	r2, [pc, #56]	; (800356c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003534:	e002      	b.n	800353c <LoopCopyDataInit>

08003536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800353a:	3304      	adds	r3, #4

0800353c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800353c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800353e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003540:	d3f9      	bcc.n	8003536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003544:	4c0b      	ldr	r4, [pc, #44]	; (8003574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003548:	e001      	b.n	800354e <LoopFillZerobss>

0800354a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800354a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800354c:	3204      	adds	r2, #4

0800354e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800354e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003550:	d3fb      	bcc.n	800354a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003552:	f7ff ff41 	bl	80033d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003556:	f005 ff23 	bl	80093a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800355a:	f7fd ff93 	bl	8001484 <main>
  bx  lr    
 800355e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003568:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800356c:	08009f98 	.word	0x08009f98
  ldr r2, =_sbss
 8003570:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003574:	20000530 	.word	0x20000530

08003578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC_IRQHandler>
	...

0800357c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_Init+0x40>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_Init+0x40>)
 8003586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_Init+0x40>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_Init+0x40>)
 8003592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_Init+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_Init+0x40>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a4:	2003      	movs	r0, #3
 80035a6:	f000 fbc1 	bl	8003d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035aa:	200f      	movs	r0, #15
 80035ac:	f000 f808 	bl	80035c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035b0:	f7ff faaa 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00

080035c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_InitTick+0x54>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_InitTick+0x58>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbd9 	bl	8003d96 <HAL_SYSTICK_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00e      	b.n	800360c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d80a      	bhi.n	800360a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035f4:	2200      	movs	r2, #0
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f000 fba1 	bl	8003d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <HAL_InitTick+0x5c>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000000 	.word	0x20000000
 8003618:	20000008 	.word	0x20000008
 800361c:	20000004 	.word	0x20000004

08003620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_IncTick+0x20>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_IncTick+0x24>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4413      	add	r3, r2
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_IncTick+0x24>)
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000008 	.word	0x20000008
 8003644:	2000051c 	.word	0x2000051c

08003648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return uwTick;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_GetTick+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	2000051c 	.word	0x2000051c

08003660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7ff ffee 	bl	8003648 <HAL_GetTick>
 800366c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d005      	beq.n	8003686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_Delay+0x44>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003686:	bf00      	nop
 8003688:	f7ff ffde 	bl	8003648 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	429a      	cmp	r2, r3
 8003696:	d8f7      	bhi.n	8003688 <HAL_Delay+0x28>
  {
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000008 	.word	0x20000008

080036a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e033      	b.n	8003726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fa46 	bl	8002b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036ee:	f023 0302 	bic.w	r3, r3, #2
 80036f2:	f043 0202 	orr.w	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f94a 	bl	8003994 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
 8003716:	e001      	b.n	800371c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e113      	b.n	8003974 <HAL_ADC_ConfigChannel+0x244>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d925      	bls.n	80037a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68d9      	ldr	r1, [r3, #12]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	3b1e      	subs	r3, #30
 8003772:	2207      	movs	r2, #7
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43da      	mvns	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	400a      	ands	r2, r1
 8003780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	4618      	mov	r0, r3
 8003794:	4603      	mov	r3, r0
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4403      	add	r3, r0
 800379a:	3b1e      	subs	r3, #30
 800379c:	409a      	lsls	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	e022      	b.n	80037ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	2207      	movs	r2, #7
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	400a      	ands	r2, r1
 80037ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6919      	ldr	r1, [r3, #16]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4403      	add	r3, r0
 80037e4:	409a      	lsls	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d824      	bhi.n	8003840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	3b05      	subs	r3, #5
 8003808:	221f      	movs	r2, #31
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	400a      	ands	r2, r1
 8003816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	4618      	mov	r0, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	3b05      	subs	r3, #5
 8003832:	fa00 f203 	lsl.w	r2, r0, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	635a      	str	r2, [r3, #52]	; 0x34
 800383e:	e04c      	b.n	80038da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b0c      	cmp	r3, #12
 8003846:	d824      	bhi.n	8003892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	3b23      	subs	r3, #35	; 0x23
 800385a:	221f      	movs	r2, #31
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43da      	mvns	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	400a      	ands	r2, r1
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	4618      	mov	r0, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	3b23      	subs	r3, #35	; 0x23
 8003884:	fa00 f203 	lsl.w	r2, r0, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
 8003890:	e023      	b.n	80038da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	3b41      	subs	r3, #65	; 0x41
 80038a4:	221f      	movs	r2, #31
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	400a      	ands	r2, r1
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	3b41      	subs	r3, #65	; 0x41
 80038ce:	fa00 f203 	lsl.w	r2, r0, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <HAL_ADC_ConfigChannel+0x250>)
 80038dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_ADC_ConfigChannel+0x254>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10f      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x1d8>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b12      	cmp	r3, #18
 80038ee:	d10b      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_ADC_ConfigChannel+0x254>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d12b      	bne.n	800396a <HAL_ADC_ConfigChannel+0x23a>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_ADC_ConfigChannel+0x258>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <HAL_ADC_ConfigChannel+0x1f4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b11      	cmp	r3, #17
 8003922:	d122      	bne.n	800396a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_ADC_ConfigChannel+0x258>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d111      	bne.n	800396a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_ADC_ConfigChannel+0x25c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_ADC_ConfigChannel+0x260>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	0c9a      	lsrs	r2, r3, #18
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800395c:	e002      	b.n	8003964 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3b01      	subs	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40012300 	.word	0x40012300
 8003984:	40012000 	.word	0x40012000
 8003988:	10000012 	.word	0x10000012
 800398c:	20000000 	.word	0x20000000
 8003990:	431bde83 	.word	0x431bde83

08003994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399c:	4b79      	ldr	r3, [pc, #484]	; (8003b84 <ADC_Init+0x1f0>)
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <ADC_Init+0x1f4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	e00f      	b.n	8003a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0202 	bic.w	r2, r2, #2
 8003aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7e1b      	ldrb	r3, [r3, #24]
 8003aac:	005a      	lsls	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	3b01      	subs	r3, #1
 8003aec:	035a      	lsls	r2, r3, #13
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e007      	b.n	8003b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	051a      	lsls	r2, r3, #20
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b4a:	025a      	lsls	r2, r3, #9
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	029a      	lsls	r2, r3, #10
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40012300 	.word	0x40012300
 8003b88:	0f000001 	.word	0x0f000001

08003b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	60d3      	str	r3, [r2, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <__NVIC_GetPriorityGrouping+0x18>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 0307 	and.w	r3, r3, #7
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db0b      	blt.n	8003c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	f003 021f 	and.w	r2, r3, #31
 8003c08:	4907      	ldr	r1, [pc, #28]	; (8003c28 <__NVIC_EnableIRQ+0x38>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2001      	movs	r0, #1
 8003c12:	fa00 f202 	lsl.w	r2, r0, r2
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	db0a      	blt.n	8003c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	490c      	ldr	r1, [pc, #48]	; (8003c78 <__NVIC_SetPriority+0x4c>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	0112      	lsls	r2, r2, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c54:	e00a      	b.n	8003c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4908      	ldr	r1, [pc, #32]	; (8003c7c <__NVIC_SetPriority+0x50>)
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3b04      	subs	r3, #4
 8003c64:	0112      	lsls	r2, r2, #4
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	761a      	strb	r2, [r3, #24]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000e100 	.word	0xe000e100
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f1c3 0307 	rsb	r3, r3, #7
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	bf28      	it	cs
 8003c9e:	2304      	movcs	r3, #4
 8003ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <NVIC_EncodePriority+0x30>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3b03      	subs	r3, #3
 8003cae:	e000      	b.n	8003cb2 <NVIC_EncodePriority+0x32>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	4313      	orrs	r3, r2
         );
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	; 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf8:	d301      	bcc.n	8003cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00f      	b.n	8003d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <SysTick_Config+0x40>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d06:	210f      	movs	r1, #15
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f7ff ff8e 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <SysTick_Config+0x40>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <SysTick_Config+0x40>)
 8003d18:	2207      	movs	r2, #7
 8003d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000e010 	.word	0xe000e010

08003d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff29 	bl	8003b8c <__NVIC_SetPriorityGrouping>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d54:	f7ff ff3e 	bl	8003bd4 <__NVIC_GetPriorityGrouping>
 8003d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f7ff ff8e 	bl	8003c80 <NVIC_EncodePriority>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff5d 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ff31 	bl	8003bf0 <__NVIC_EnableIRQ>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ffa2 	bl	8003ce8 <SysTick_Config>
 8003da4:	4603      	mov	r3, r0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7ff fc44 	bl	8003648 <HAL_GetTick>
 8003dc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d008      	beq.n	8003de0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e052      	b.n	8003e86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0216 	bic.w	r2, r2, #22
 8003dee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <HAL_DMA_Abort+0x62>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0208 	bic.w	r2, r2, #8
 8003e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e30:	e013      	b.n	8003e5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e32:	f7ff fc09 	bl	8003648 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d90c      	bls.n	8003e5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e015      	b.n	8003e86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e4      	bne.n	8003e32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d004      	beq.n	8003eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e00c      	b.n	8003ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2205      	movs	r2, #5
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee0:	b2db      	uxtb	r3, r3
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e159      	b.n	80041c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f040 8148 	bne.w	80041ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d005      	beq.n	8003f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d130      	bne.n	8003fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 0201 	and.w	r2, r3, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d017      	beq.n	8003fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d123      	bne.n	8004034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0203 	and.w	r2, r3, #3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a2 	beq.w	80041ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	4a56      	ldr	r2, [pc, #344]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004084:	6453      	str	r3, [r2, #68]	; 0x44
 8004086:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_GPIO_Init+0x2ec>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a49      	ldr	r2, [pc, #292]	; (80041e0 <HAL_GPIO_Init+0x2f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x202>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a48      	ldr	r2, [pc, #288]	; (80041e4 <HAL_GPIO_Init+0x2f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x1fe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <HAL_GPIO_Init+0x2f8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x1fa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a46      	ldr	r2, [pc, #280]	; (80041ec <HAL_GPIO_Init+0x2fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x1f6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a45      	ldr	r2, [pc, #276]	; (80041f0 <HAL_GPIO_Init+0x300>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x1f2>
 80040de:	2304      	movs	r3, #4
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e2:	2307      	movs	r3, #7
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	; (80041dc <HAL_GPIO_Init+0x2ec>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_GPIO_Init+0x304>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <HAL_GPIO_Init+0x304>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b4:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <HAL_GPIO_Init+0x304>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f aea2 	bls.w	8003f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	; 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004214:	e003      	b.n	800421e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	041a      	lsls	r2, r3, #16
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43d9      	mvns	r1, r3
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	400b      	ands	r3, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	619a      	str	r2, [r3, #24]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e12b      	b.n	80044ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fcaa 	bl	8002be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c4:	f002 fea2 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a81      	ldr	r2, [pc, #516]	; (80044d4 <HAL_I2C_Init+0x274>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d807      	bhi.n	80042e4 <HAL_I2C_Init+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_I2C_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e006      	b.n	80042f2 <HAL_I2C_Init+0x92>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_I2C_Init+0x27c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0e7      	b.n	80044ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_I2C_Init+0x280>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9b      	lsrs	r3, r3, #18
 8004304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_I2C_Init+0x274>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xd4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xe8>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_I2C_Init+0x284>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	495c      	ldr	r1, [pc, #368]	; (80044d4 <HAL_I2C_Init+0x274>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d819      	bhi.n	800439c <HAL_I2C_Init+0x13c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800437c:	400b      	ands	r3, r1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_I2C_Init+0x138>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e59      	subs	r1, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	e051      	b.n	800443c <HAL_I2C_Init+0x1dc>
 8004398:	2304      	movs	r3, #4
 800439a:	e04f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_I2C_Init+0x168>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Init+0x18e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x196>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_I2C_Init+0x1dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_I2C_Init+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	e00f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800446a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6911      	ldr	r1, [r2, #16]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000186a0 	.word	0x000186a0
 80044d8:	001e847f 	.word	0x001e847f
 80044dc:	003d08ff 	.word	0x003d08ff
 80044e0:	431bde83 	.word	0x431bde83
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004502:	f7ff f8a1 	bl	8003648 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	f040 80d9 	bne.w	80046c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	496d      	ldr	r1, [pc, #436]	; (80046d4 <HAL_I2C_Mem_Write+0x1ec>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f001 ff6f 	bl	8006404 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
 800452e:	e0cc      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Mem_Write+0x56>
 800453a:	2302      	movs	r3, #2
 800453c:	e0c5      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2221      	movs	r2, #33	; 0x21
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a4d      	ldr	r2, [pc, #308]	; (80046d8 <HAL_I2C_Mem_Write+0x1f0>)
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	88f8      	ldrh	r0, [r7, #6]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f001 fde6 	bl	8006188 <I2C_RequestMemoryWrite>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d052      	beq.n	8004668 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e081      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f001 fff0 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06b      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11b      	bne.n	8004668 <HAL_I2C_Mem_Write+0x180>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1aa      	bne.n	80045c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f001 ffdc 	bl	8006632 <I2C_WaitOnBTFFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b04      	cmp	r3, #4
 8004686:	d107      	bne.n	8004698 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e016      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	00100002 	.word	0x00100002
 80046d8:	ffff0000 	.word	0xffff0000

080046dc <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	460b      	mov	r3, r1
 80046f0:	813b      	strh	r3, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 808e 	bne.w	8004824 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_I2C_Mem_Write_IT+0x158>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_I2C_Mem_Write_IT+0x15c>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	0a1a      	lsrs	r2, r3, #8
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3b01      	subs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d116      	bne.n	800475c <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e064      	b.n	8004826 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d0db      	beq.n	8004722 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2C_Mem_Write_IT+0x9c>
 8004774:	2302      	movs	r3, #2
 8004776:	e056      	b.n	8004826 <HAL_I2C_Mem_Write_IT+0x14a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d007      	beq.n	800479e <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2221      	movs	r2, #33	; 0x21
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2240      	movs	r2, #64	; 0x40
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a3a      	ldr	r2, [r7, #32]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_I2C_Mem_Write_IT+0x160>)
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80047e0:	897a      	ldrh	r2, [r7, #10]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80047e6:	893a      	ldrh	r2, [r7, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004806:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800481e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000
 8004838:	14f8b589 	.word	0x14f8b589
 800483c:	ffff0000 	.word	0xffff0000

08004840 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	f040 809a 	bne.w	80049a0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_I2C_Mem_Read_IT+0x170>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	4a50      	ldr	r2, [pc, #320]	; (80049b4 <HAL_I2C_Mem_Read_IT+0x174>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	0a1a      	lsrs	r2, r3, #8
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3b01      	subs	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e070      	b.n	80049a2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d0db      	beq.n	8004886 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2C_Mem_Read_IT+0x9c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e062      	b.n	80049a2 <HAL_I2C_Mem_Read_IT+0x162>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d007      	beq.n	8004902 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004910:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2222      	movs	r2, #34	; 0x22
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2240      	movs	r2, #64	; 0x40
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <HAL_I2C_Mem_Read_IT+0x178>)
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004944:	897a      	ldrh	r2, [r7, #10]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800494a:	893a      	ldrh	r2, [r7, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800496a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800499a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000
 80049b4:	14f8b589 	.word	0x14f8b589
 80049b8:	ffff0000 	.word	0xffff0000

080049bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d003      	beq.n	80049f4 <HAL_I2C_EV_IRQHandler+0x38>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	f040 80c1 	bne.w	8004b76 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_I2C_EV_IRQHandler+0x6e>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a14:	d003      	beq.n	8004a1e <HAL_I2C_EV_IRQHandler+0x62>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2C_EV_IRQHandler+0x66>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_I2C_EV_IRQHandler+0x68>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f000 8132 	beq.w	8004c8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <HAL_I2C_EV_IRQHandler+0x92>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	0a5b      	lsrs	r3, r3, #9
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 fe98 	bl	8006776 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd83 	bl	8005552 <I2C_Master_SB>
 8004a4c:	e092      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	08db      	lsrs	r3, r3, #3
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0xb2>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fdf9 	bl	800565e <I2C_Master_ADD10>
 8004a6c:	e082      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_I2C_EV_IRQHandler+0xd2>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	0a5b      	lsrs	r3, r3, #9
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fe13 	bl	80056b2 <I2C_Master_ADDR>
 8004a8c:	e072      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d03b      	beq.n	8004b12 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa8:	f000 80f3 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00f      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f9f3 	bl	8004ebc <I2C_MasterTransmit_TXE>
 8004ad6:	e04d      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80d6 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80cf 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	2b21      	cmp	r3, #33	; 0x21
 8004af8:	d103      	bne.n	8004b02 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa7a 	bl	8004ff4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b00:	e0c7      	b.n	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	f040 80c4 	bne.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fae8 	bl	80050e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b10:	e0bf      	b.n	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b20:	f000 80b7 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00f      	beq.n	8004b50 <HAL_I2C_EV_IRQHandler+0x194>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0a9b      	lsrs	r3, r3, #10
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_I2C_EV_IRQHandler+0x194>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fb5d 	bl	8005208 <I2C_MasterReceive_RXNE>
 8004b4e:	e011      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 809a 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	0a5b      	lsrs	r3, r3, #9
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8093 	beq.w	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fc06 	bl	800537e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b72:	e08e      	b.n	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b74:	e08d      	b.n	8004c92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	e007      	b.n	8004b98 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d012      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x20e>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	0a5b      	lsrs	r3, r3, #9
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00c      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 ffc4 	bl	8005b50 <I2C_Slave_ADDR>
 8004bc8:	e066      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x22e>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fffe 	bl	8005be4 <I2C_Slave_STOPF>
 8004be8:	e056      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	2b21      	cmp	r3, #33	; 0x21
 8004bee:	d002      	beq.n	8004bf6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	2b29      	cmp	r3, #41	; 0x29
 8004bf4:	d125      	bne.n	8004c42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <HAL_I2C_EV_IRQHandler+0x266>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	0a9b      	lsrs	r3, r3, #10
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_I2C_EV_IRQHandler+0x266>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 feda 	bl	80059d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c20:	e039      	b.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d033      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2da>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02d      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 ff07 	bl	8005a4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c40:	e029      	b.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00f      	beq.n	8004c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	0a9b      	lsrs	r3, r3, #10
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 ff12 	bl	8005a90 <I2C_SlaveReceive_RXNE>
 8004c6c:	e014      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 ff40 	bl	8005b0c <I2C_SlaveReceive_BTF>
 8004c8c:	e004      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <HAL_I2C_ER_IRQHandler+0x4e>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	0a5b      	lsrs	r3, r3, #9
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_I2C_ER_IRQHandler+0x78>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	0a9b      	lsrs	r3, r3, #10
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03f      	beq.n	8004da2 <HAL_I2C_ER_IRQHandler+0x104>
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d039      	beq.n	8004da2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d2e:	7efb      	ldrb	r3, [r7, #27]
 8004d30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d48:	7ebb      	ldrb	r3, [r7, #26]
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d112      	bne.n	8004d74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b21      	cmp	r3, #33	; 0x21
 8004d58:	d008      	beq.n	8004d6c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	2b29      	cmp	r3, #41	; 0x29
 8004d5e:	d005      	beq.n	8004d6c <HAL_I2C_ER_IRQHandler+0xce>
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	2b28      	cmp	r3, #40	; 0x28
 8004d64:	d106      	bne.n	8004d74 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b21      	cmp	r3, #33	; 0x21
 8004d6a:	d103      	bne.n	8004d74 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f869 	bl	8005e44 <I2C_Slave_AF>
 8004d72:	e016      	b.n	8004da2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d86:	7efb      	ldrb	r3, [r7, #27]
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d002      	beq.n	8004d92 <HAL_I2C_ER_IRQHandler+0xf4>
 8004d8c:	7efb      	ldrb	r3, [r7, #27]
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d107      	bne.n	8004da2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	0adb      	lsrs	r3, r3, #11
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00e      	beq.n	8004dcc <HAL_I2C_ER_IRQHandler+0x12e>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004dca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 f8a0 	bl	8005f24 <I2C_ITError>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d150      	bne.n	8004f84 <I2C_MasterTransmit_TXE+0xc8>
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b21      	cmp	r3, #33	; 0x21
 8004ee6:	d14d      	bne.n	8004f84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d01d      	beq.n	8004f2a <I2C_MasterTransmit_TXE+0x6e>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d01a      	beq.n	8004f2a <I2C_MasterTransmit_TXE+0x6e>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efa:	d016      	beq.n	8004f2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2211      	movs	r2, #17
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ff62 	bl	8004dec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f28:	e060      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d107      	bne.n	8004f74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff7d 	bl	8004e6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f72:	e03b      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ff35 	bl	8004dec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f82:	e033      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b21      	cmp	r3, #33	; 0x21
 8004f88:	d005      	beq.n	8004f96 <I2C_MasterTransmit_TXE+0xda>
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d12d      	bne.n	8004fec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b22      	cmp	r3, #34	; 0x22
 8004f94:	d12a      	bne.n	8004fec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004fb0:	e01c      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d103      	bne.n	8004fc6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f88e 	bl	80050e0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004fc4:	e012      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fea:	e7ff      	b.n	8004fec <I2C_MasterTransmit_TXE+0x130>
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b21      	cmp	r3, #33	; 0x21
 800500c:	d164      	bne.n	80050d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800503c:	e04c      	b.n	80050d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d01d      	beq.n	8005080 <I2C_MasterTransmit_BTF+0x8c>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b20      	cmp	r3, #32
 8005048:	d01a      	beq.n	8005080 <I2C_MasterTransmit_BTF+0x8c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005050:	d016      	beq.n	8005080 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005060:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2211      	movs	r2, #17
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff feb7 	bl	8004dec <HAL_I2C_MasterTxCpltCallback>
}
 800507e:	e02b      	b.n	80050d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d107      	bne.n	80050ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fed2 	bl	8004e6c <HAL_I2C_MemTxCpltCallback>
}
 80050c8:	e006      	b.n	80050d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe8a 	bl	8004dec <HAL_I2C_MasterTxCpltCallback>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11d      	bne.n	8005134 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10b      	bne.n	8005118 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005104:	b2da      	uxtb	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005116:	e073      	b.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511c:	b29b      	uxth	r3, r3
 800511e:	121b      	asrs	r3, r3, #8
 8005120:	b2da      	uxtb	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005132:	e065      	b.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10b      	bne.n	8005154 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	b2da      	uxtb	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005152:	e055      	b.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	2b02      	cmp	r3, #2
 800515a:	d151      	bne.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b22      	cmp	r3, #34	; 0x22
 8005160:	d10d      	bne.n	800517e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005170:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800517c:	e040      	b.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b21      	cmp	r3, #33	; 0x21
 800518c:	d112      	bne.n	80051b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051b2:	e025      	b.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d120      	bne.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2b21      	cmp	r3, #33	; 0x21
 80051c2:	d11d      	bne.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fe36 	bl	8004e6c <HAL_I2C_MemTxCpltCallback>
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b22      	cmp	r3, #34	; 0x22
 800521a:	f040 80ac 	bne.w	8005376 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d921      	bls.n	8005270 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b03      	cmp	r3, #3
 800525a:	f040 808c 	bne.w	8005376 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800526e:	e082      	b.n	8005376 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	2b02      	cmp	r3, #2
 8005276:	d075      	beq.n	8005364 <I2C_MasterReceive_RXNE+0x15c>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d002      	beq.n	8005284 <I2C_MasterReceive_RXNE+0x7c>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d16f      	bne.n	8005364 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 fa15 	bl	80066b4 <I2C_WaitOnSTOPRequestThroughIT>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d142      	bne.n	8005316 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d10a      	bne.n	8005300 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fdc1 	bl	8004e80 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052fe:	e03a      	b.n	8005376 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2212      	movs	r2, #18
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fd76 	bl	8004e00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005314:	e02f      	b.n	8005376 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005324:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fd99 	bl	8004e94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005362:	e008      	b.n	8005376 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005372:	605a      	str	r2, [r3, #4]
}
 8005374:	e7ff      	b.n	8005376 <I2C_MasterReceive_RXNE+0x16e>
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b04      	cmp	r3, #4
 8005394:	d11b      	bne.n	80053ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80053cc:	e0bd      	b.n	800554a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d129      	bne.n	800542c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d00a      	beq.n	8005404 <I2C_MasterReceive_BTF+0x86>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d007      	beq.n	8005404 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005402:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800542a:	e08e      	b.n	800554a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d176      	bne.n	8005524 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <I2C_MasterReceive_BTF+0xc4>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b10      	cmp	r3, #16
 8005440:	d108      	bne.n	8005454 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e019      	b.n	8005488 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d002      	beq.n	8005460 <I2C_MasterReceive_BTF+0xe2>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d108      	bne.n	8005472 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e00a      	b.n	8005488 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b10      	cmp	r3, #16
 8005476:	d007      	beq.n	8005488 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d10a      	bne.n	800550e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fcba 	bl	8004e80 <HAL_I2C_MemRxCpltCallback>
}
 800550c:	e01d      	b.n	800554a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2212      	movs	r2, #18
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fc6f 	bl	8004e00 <HAL_I2C_MasterRxCpltCallback>
}
 8005522:	e012      	b.n	800554a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d117      	bne.n	8005596 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800557e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005580:	e067      	b.n	8005652 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]
}
 8005594:	e05d      	b.n	8005652 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800559e:	d133      	bne.n	8005608 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b21      	cmp	r3, #33	; 0x21
 80055aa:	d109      	bne.n	80055c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055bc:	611a      	str	r2, [r3, #16]
 80055be:	e008      	b.n	80055d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <I2C_Master_SB+0x92>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d108      	bne.n	80055f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d032      	beq.n	8005652 <I2C_Master_SB+0x100>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02d      	beq.n	8005652 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005604:	605a      	str	r2, [r3, #4]
}
 8005606:	e024      	b.n	8005652 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10e      	bne.n	800562e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	b29b      	uxth	r3, r3
 8005616:	11db      	asrs	r3, r3, #7
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f063 030f 	orn	r3, r3, #15
 8005624:	b2da      	uxtb	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
}
 800562c:	e011      	b.n	8005652 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10d      	bne.n	8005652 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	b29b      	uxth	r3, r3
 800563c:	11db      	asrs	r3, r3, #7
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f003 0306 	and.w	r3, r3, #6
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f063 030e 	orn	r3, r3, #14
 800564a:	b2da      	uxtb	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	611a      	str	r2, [r3, #16]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	b2da      	uxtb	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <I2C_Master_ADD10+0x26>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d108      	bne.n	8005696 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <I2C_Master_ADD10+0x48>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a4:	605a      	str	r2, [r3, #4]
  }
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b091      	sub	sp, #68	; 0x44
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b22      	cmp	r3, #34	; 0x22
 80056da:	f040 8169 	bne.w	80059b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <I2C_Master_ADDR+0x54>
 80056e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d10b      	bne.n	8005706 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	633b      	str	r3, [r7, #48]	; 0x30
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	633b      	str	r3, [r7, #48]	; 0x30
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	e160      	b.n	80059c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11d      	bne.n	800574a <I2C_Master_ADDR+0x98>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005716:	d118      	bne.n	800574a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
 8005748:	e13e      	b.n	80059c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d113      	bne.n	800577c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e115      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	f040 808a 	bne.w	800589c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800578e:	d137      	bne.n	8005800 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d113      	bne.n	80057d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c0:	2300      	movs	r3, #0
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	e0e7      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e0d3      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b08      	cmp	r3, #8
 8005804:	d02e      	beq.n	8005864 <I2C_Master_ADDR+0x1b2>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	2b20      	cmp	r3, #32
 800580a:	d02b      	beq.n	8005864 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	2b12      	cmp	r3, #18
 8005810:	d102      	bne.n	8005818 <I2C_Master_ADDR+0x166>
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	2b01      	cmp	r3, #1
 8005816:	d125      	bne.n	8005864 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	2b04      	cmp	r3, #4
 800581c:	d00e      	beq.n	800583c <I2C_Master_ADDR+0x18a>
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b02      	cmp	r3, #2
 8005822:	d00b      	beq.n	800583c <I2C_Master_ADDR+0x18a>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b10      	cmp	r3, #16
 8005828:	d008      	beq.n	800583c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e007      	b.n	800584c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800584a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	e0a1      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e085      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d14d      	bne.n	8005942 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d016      	beq.n	80058da <I2C_Master_ADDR+0x228>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d013      	beq.n	80058da <I2C_Master_ADDR+0x228>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d010      	beq.n	80058da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e007      	b.n	80058ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f8:	d117      	bne.n	800592a <I2C_Master_ADDR+0x278>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005900:	d00b      	beq.n	800591a <I2C_Master_ADDR+0x268>
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	2b01      	cmp	r3, #1
 8005906:	d008      	beq.n	800591a <I2C_Master_ADDR+0x268>
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	2b08      	cmp	r3, #8
 800590c:	d005      	beq.n	800591a <I2C_Master_ADDR+0x268>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	2b10      	cmp	r3, #16
 8005912:	d002      	beq.n	800591a <I2C_Master_ADDR+0x268>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b20      	cmp	r3, #32
 8005918:	d107      	bne.n	800592a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005928:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	e032      	b.n	80059a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005960:	d117      	bne.n	8005992 <I2C_Master_ADDR+0x2e0>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005968:	d00b      	beq.n	8005982 <I2C_Master_ADDR+0x2d0>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	2b01      	cmp	r3, #1
 800596e:	d008      	beq.n	8005982 <I2C_Master_ADDR+0x2d0>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b08      	cmp	r3, #8
 8005974:	d005      	beq.n	8005982 <I2C_Master_ADDR+0x2d0>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b10      	cmp	r3, #16
 800597a:	d002      	beq.n	8005982 <I2C_Master_ADDR+0x2d0>
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b20      	cmp	r3, #32
 8005980:	d107      	bne.n	8005992 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005990:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059ae:	e00b      	b.n	80059c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
}
 80059c6:	e7ff      	b.n	80059c8 <I2C_Master_ADDR+0x316>
 80059c8:	bf00      	nop
 80059ca:	3744      	adds	r7, #68	; 0x44
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d02b      	beq.n	8005a46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d114      	bne.n	8005a46 <I2C_SlaveTransmit_TXE+0x72>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b29      	cmp	r3, #41	; 0x29
 8005a20:	d111      	bne.n	8005a46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2228      	movs	r2, #40	; 0x28
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff f9e7 	bl	8004e14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d011      	beq.n	8005a84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02c      	beq.n	8005b04 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d114      	bne.n	8005b04 <I2C_SlaveReceive_RXNE+0x74>
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ade:	d111      	bne.n	8005b04 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2222      	movs	r2, #34	; 0x22
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2228      	movs	r2, #40	; 0x28
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff f992 	bl	8004e28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b6a:	2b28      	cmp	r3, #40	; 0x28
 8005b6c:	d127      	bne.n	8005bbe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	81bb      	strh	r3, [r7, #12]
 8005ba0:	e002      	b.n	8005ba8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bb0:	89ba      	ldrh	r2, [r7, #12]
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff f940 	bl	8004e3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bbc:	e00e      	b.n	8005bdc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c04:	2300      	movs	r3, #0
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d172      	bne.n	8005d28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b22      	cmp	r3, #34	; 0x22
 8005c46:	d002      	beq.n	8005c4e <I2C_Slave_STOPF+0x6a>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4c:	d135      	bne.n	8005cba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f043 0204 	orr.w	r2, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe f923 	bl	8003ed2 <HAL_DMA_GetState>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d049      	beq.n	8005d26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	4a69      	ldr	r2, [pc, #420]	; (8005e3c <I2C_Slave_STOPF+0x258>)
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe f8f5 	bl	8003e8e <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d03d      	beq.n	8005d26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb8:	e035      	b.n	8005d26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe f8ed 	bl	8003ed2 <HAL_DMA_GetState>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d014      	beq.n	8005d28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <I2C_Slave_STOPF+0x258>)
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe f8bf 	bl	8003e8e <HAL_DMA_Abort_IT>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	e000      	b.n	8005d28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03e      	beq.n	8005db0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d112      	bne.n	8005d66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d112      	bne.n	8005d9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f8b3 	bl	8005f24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005dbe:	e039      	b.n	8005e34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc4:	d109      	bne.n	8005dda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2228      	movs	r2, #40	; 0x28
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff f827 	bl	8004e28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b28      	cmp	r3, #40	; 0x28
 8005de4:	d111      	bne.n	8005e0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a15      	ldr	r2, [pc, #84]	; (8005e40 <I2C_Slave_STOPF+0x25c>)
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff f828 	bl	8004e58 <HAL_I2C_ListenCpltCallback>
}
 8005e08:	e014      	b.n	8005e34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	2b22      	cmp	r3, #34	; 0x22
 8005e10:	d002      	beq.n	8005e18 <I2C_Slave_STOPF+0x234>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b22      	cmp	r3, #34	; 0x22
 8005e16:	d10d      	bne.n	8005e34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fe fffa 	bl	8004e28 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	080062b5 	.word	0x080062b5
 8005e40:	ffff0000 	.word	0xffff0000

08005e44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d002      	beq.n	8005e66 <I2C_Slave_AF+0x22>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d129      	bne.n	8005eba <I2C_Slave_AF+0x76>
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b28      	cmp	r3, #40	; 0x28
 8005e6a:	d126      	bne.n	8005eba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <I2C_Slave_AF+0xdc>)
 8005e70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fe ffd0 	bl	8004e58 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005eb8:	e02e      	b.n	8005f18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b21      	cmp	r3, #33	; 0x21
 8005ebe:	d126      	bne.n	8005f0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <I2C_Slave_AF+0xdc>)
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2221      	movs	r2, #33	; 0x21
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ef4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fe ff84 	bl	8004e14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f0c:	e004      	b.n	8005f18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f16:	615a      	str	r2, [r3, #20]
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	ffff0000 	.word	0xffff0000

08005f24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d002      	beq.n	8005f48 <I2C_ITError+0x24>
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d10a      	bne.n	8005f5e <I2C_ITError+0x3a>
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b22      	cmp	r3, #34	; 0x22
 8005f4c:	d107      	bne.n	8005f5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f64:	2b28      	cmp	r3, #40	; 0x28
 8005f66:	d107      	bne.n	8005f78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2228      	movs	r2, #40	; 0x28
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f76:	e015      	b.n	8005fa4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d00a      	beq.n	8005f9e <I2C_ITError+0x7a>
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b60      	cmp	r3, #96	; 0x60
 8005f8c:	d007      	beq.n	8005f9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb2:	d162      	bne.n	800607a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d020      	beq.n	8006014 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	4a6a      	ldr	r2, [pc, #424]	; (8006180 <I2C_ITError+0x25c>)
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd ff55 	bl	8003e8e <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8089 	beq.w	80060fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800600e:	4610      	mov	r0, r2
 8006010:	4798      	blx	r3
 8006012:	e074      	b.n	80060fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	4a59      	ldr	r2, [pc, #356]	; (8006180 <I2C_ITError+0x25c>)
 800601a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	4618      	mov	r0, r3
 8006022:	f7fd ff34 	bl	8003e8e <HAL_DMA_Abort_IT>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d068      	beq.n	80060fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d10b      	bne.n	8006052 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	e041      	b.n	80060fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b60      	cmp	r3, #96	; 0x60
 8006084:	d125      	bne.n	80060d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d10b      	bne.n	80060ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fe feec 	bl	8004ea8 <HAL_I2C_AbortCpltCallback>
 80060d0:	e015      	b.n	80060fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d10b      	bne.n	80060f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fe fecb 	bl	8004e94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10e      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800611e:	2b00      	cmp	r3, #0
 8006120:	d104      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b04      	cmp	r3, #4
 800614e:	d113      	bne.n	8006178 <I2C_ITError+0x254>
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b28      	cmp	r3, #40	; 0x28
 8006154:	d110      	bne.n	8006178 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <I2C_ITError+0x260>)
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fe fe70 	bl	8004e58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	080062b5 	.word	0x080062b5
 8006184:	ffff0000 	.word	0xffff0000

08006188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4603      	mov	r3, r0
 8006198:	817b      	strh	r3, [r7, #10]
 800619a:	460b      	mov	r3, r1
 800619c:	813b      	strh	r3, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f920 	bl	8006404 <I2C_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d8:	d103      	bne.n	80061e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e05f      	b.n	80062a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061e6:	897b      	ldrh	r3, [r7, #10]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	492d      	ldr	r1, [pc, #180]	; (80062b0 <I2C_RequestMemoryWrite+0x128>)
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f958 	bl	80064b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e04c      	b.n	80062a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	6a39      	ldr	r1, [r7, #32]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f9c2 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	2b04      	cmp	r3, #4
 8006238:	d107      	bne.n	800624a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e02b      	b.n	80062a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d105      	bne.n	8006260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006254:	893b      	ldrh	r3, [r7, #8]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	611a      	str	r2, [r3, #16]
 800625e:	e021      	b.n	80062a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800626e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006270:	6a39      	ldr	r1, [r7, #32]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f99c 	bl	80065b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	2b04      	cmp	r3, #4
 8006284:	d107      	bne.n	8006296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e005      	b.n	80062a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800629a:	893b      	ldrh	r3, [r7, #8]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	00010002 	.word	0x00010002

080062b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ce:	4b4b      	ldr	r3, [pc, #300]	; (80063fc <I2C_DMAAbort+0x148>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	4a4a      	ldr	r2, [pc, #296]	; (8006400 <I2C_DMAAbort+0x14c>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	0a1a      	lsrs	r2, r3, #8
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	00da      	lsls	r2, r3, #3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80062fa:	e00a      	b.n	8006312 <I2C_DMAAbort+0x5e>
    }
    count--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3b01      	subs	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006310:	d0ea      	beq.n	80062e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	2200      	movs	r2, #0
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	2200      	movs	r2, #0
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006340:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2200      	movs	r2, #0
 8006346:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	2200      	movs	r2, #0
 8006356:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	2200      	movs	r2, #0
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b60      	cmp	r3, #96	; 0x60
 8006382:	d10e      	bne.n	80063a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800639a:	6978      	ldr	r0, [r7, #20]
 800639c:	f7fe fd84 	bl	8004ea8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063a0:	e027      	b.n	80063f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063a8:	2b28      	cmp	r3, #40	; 0x28
 80063aa:	d117      	bne.n	80063dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2228      	movs	r2, #40	; 0x28
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063da:	e007      	b.n	80063ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063ec:	6978      	ldr	r0, [r7, #20]
 80063ee:	f7fe fd51 	bl	8004e94 <HAL_I2C_ErrorCallback>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000000 	.word	0x20000000
 8006400:	14f8b589 	.word	0x14f8b589

08006404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006414:	e025      	b.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d021      	beq.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fd f913 	bl	8003648 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e023      	b.n	80064aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d10d      	bne.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x84>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	43da      	mvns	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	e00c      	b.n	80064a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	43da      	mvns	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4013      	ands	r3, r2
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf0c      	ite	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	2300      	movne	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d0b6      	beq.n	8006416 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c0:	e051      	b.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d123      	bne.n	800651a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e046      	b.n	80065a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d021      	beq.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006522:	f7fd f891 	bl	8003648 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d302      	bcc.n	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d116      	bne.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f043 0220 	orr.w	r2, r3, #32
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e020      	b.n	80065a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d10c      	bne.n	800658a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	43da      	mvns	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4013      	ands	r3, r2
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	e00b      	b.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	43da      	mvns	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4013      	ands	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d18d      	bne.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065bc:	e02d      	b.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f8aa 	bl	8006718 <I2C_IsAcknowledgeFailed>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e02d      	b.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d021      	beq.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fd f837 	bl	8003648 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e007      	b.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006624:	2b80      	cmp	r3, #128	; 0x80
 8006626:	d1ca      	bne.n	80065be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800663e:	e02d      	b.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f869 	bl	8006718 <I2C_IsAcknowledgeFailed>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e02d      	b.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d021      	beq.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006658:	f7fc fff6 	bl	8003648 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d116      	bne.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e007      	b.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d1ca      	bne.n	8006640 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066c0:	4b13      	ldr	r3, [pc, #76]	; (8006710 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	0a1a      	lsrs	r2, r3, #8
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b01      	subs	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e008      	b.n	8006704 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006700:	d0e9      	beq.n	80066d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000000 	.word	0x20000000
 8006714:	14f8b589 	.word	0x14f8b589

08006718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672e:	d11b      	bne.n	8006768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	f043 0204 	orr.w	r2, r3, #4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006786:	d103      	bne.n	8006790 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800678e:	e007      	b.n	80067a0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006798:	d102      	bne.n	80067a0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2208      	movs	r2, #8
 800679e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e267      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d075      	beq.n	80068b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ca:	4b88      	ldr	r3, [pc, #544]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00c      	beq.n	80067f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d6:	4b85      	ldr	r3, [pc, #532]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d112      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067e2:	4b82      	ldr	r3, [pc, #520]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ee:	d10b      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f0:	4b7e      	ldr	r3, [pc, #504]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d05b      	beq.n	80068b4 <HAL_RCC_OscConfig+0x108>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d157      	bne.n	80068b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e242      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d106      	bne.n	8006820 <HAL_RCC_OscConfig+0x74>
 8006812:	4b76      	ldr	r3, [pc, #472]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a75      	ldr	r2, [pc, #468]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e01d      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0x98>
 800682a:	4b70      	ldr	r3, [pc, #448]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6f      	ldr	r2, [pc, #444]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b6d      	ldr	r3, [pc, #436]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a6c      	ldr	r2, [pc, #432]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00b      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006844:	4b69      	ldr	r3, [pc, #420]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a68      	ldr	r2, [pc, #416]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800684a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b66      	ldr	r3, [pc, #408]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a65      	ldr	r2, [pc, #404]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fc fef0 	bl	8003648 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800686c:	f7fc feec 	bl	8003648 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e207      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687e:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0xc0>
 800688a:	e014      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fc fedc 	bl	8003648 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006894:	f7fc fed8 	bl	8003648 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1f3      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a6:	4b51      	ldr	r3, [pc, #324]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0xe8>
 80068b2:	e000      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d063      	beq.n	800698a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c2:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ce:	4b47      	ldr	r3, [pc, #284]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d11c      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068da:	4b44      	ldr	r3, [pc, #272]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e1c7      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4937      	ldr	r1, [pc, #220]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	e03a      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d020      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691c:	4b34      	ldr	r3, [pc, #208]	; (80069f0 <HAL_RCC_OscConfig+0x244>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fc fe91 	bl	8003648 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800692a:	f7fc fe8d 	bl	8003648 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e1a8      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	4b2b      	ldr	r3, [pc, #172]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006948:	4b28      	ldr	r3, [pc, #160]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4925      	ldr	r1, [pc, #148]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	e015      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695e:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <HAL_RCC_OscConfig+0x244>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fc fe70 	bl	8003648 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696c:	f7fc fe6c 	bl	8003648 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e187      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d036      	beq.n	8006a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_RCC_OscConfig+0x248>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fc fe50 	bl	8003648 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fc fe4c 	bl	8003648 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e167      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCC_OscConfig+0x240>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x200>
 80069ca:	e01b      	b.n	8006a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <HAL_RCC_OscConfig+0x248>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d2:	f7fc fe39 	bl	8003648 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d8:	e00e      	b.n	80069f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069da:	f7fc fe35 	bl	8003648 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d907      	bls.n	80069f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e150      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
 80069ec:	40023800 	.word	0x40023800
 80069f0:	42470000 	.word	0x42470000
 80069f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f8:	4b88      	ldr	r3, [pc, #544]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 80069fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ea      	bne.n	80069da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8097 	beq.w	8006b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a16:	4b81      	ldr	r3, [pc, #516]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10f      	bne.n	8006a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	4b7d      	ldr	r3, [pc, #500]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	4a7c      	ldr	r2, [pc, #496]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a30:	6413      	str	r3, [r2, #64]	; 0x40
 8006a32:	4b7a      	ldr	r3, [pc, #488]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	60bb      	str	r3, [r7, #8]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a42:	4b77      	ldr	r3, [pc, #476]	; (8006c20 <HAL_RCC_OscConfig+0x474>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d118      	bne.n	8006a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a4e:	4b74      	ldr	r3, [pc, #464]	; (8006c20 <HAL_RCC_OscConfig+0x474>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a73      	ldr	r2, [pc, #460]	; (8006c20 <HAL_RCC_OscConfig+0x474>)
 8006a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a5a:	f7fc fdf5 	bl	8003648 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a62:	f7fc fdf1 	bl	8003648 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e10c      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a74:	4b6a      	ldr	r3, [pc, #424]	; (8006c20 <HAL_RCC_OscConfig+0x474>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d106      	bne.n	8006a96 <HAL_RCC_OscConfig+0x2ea>
 8006a88:	4b64      	ldr	r3, [pc, #400]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	4a63      	ldr	r2, [pc, #396]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70
 8006a94:	e01c      	b.n	8006ad0 <HAL_RCC_OscConfig+0x324>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x30c>
 8006a9e:	4b5f      	ldr	r3, [pc, #380]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a5e      	ldr	r2, [pc, #376]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	4b5c      	ldr	r3, [pc, #368]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a5b      	ldr	r2, [pc, #364]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0x324>
 8006ab8:	4b58      	ldr	r3, [pc, #352]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	4a57      	ldr	r2, [pc, #348]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac4:	4b55      	ldr	r3, [pc, #340]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	4a54      	ldr	r2, [pc, #336]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006aca:	f023 0304 	bic.w	r3, r3, #4
 8006ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fc fdb6 	bl	8003648 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fc fdb2 	bl	8003648 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e0cb      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af6:	4b49      	ldr	r3, [pc, #292]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ee      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x334>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b04:	f7fc fda0 	bl	8003648 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fc fd9c 	bl	8003648 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0b5      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b22:	4b3e      	ldr	r3, [pc, #248]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ee      	bne.n	8006b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d105      	bne.n	8006b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b34:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	4a38      	ldr	r2, [pc, #224]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80a1 	beq.w	8006c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b4a:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 030c 	and.w	r3, r3, #12
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d05c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d141      	bne.n	8006be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5e:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <HAL_RCC_OscConfig+0x478>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fc fd70 	bl	8003648 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fc fd6c 	bl	8003648 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e087      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	4b27      	ldr	r3, [pc, #156]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	061b      	lsls	r3, r3, #24
 8006bae:	491b      	ldr	r1, [pc, #108]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <HAL_RCC_OscConfig+0x478>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bba:	f7fc fd45 	bl	8003648 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc2:	f7fc fd41 	bl	8003648 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e05c      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd4:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0f0      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x416>
 8006be0:	e054      	b.n	8006c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be2:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <HAL_RCC_OscConfig+0x478>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be8:	f7fc fd2e 	bl	8003648 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf0:	f7fc fd2a 	bl	8003648 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e045      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_RCC_OscConfig+0x470>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x444>
 8006c0e:	e03d      	b.n	8006c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e038      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	40007000 	.word	0x40007000
 8006c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c28:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <HAL_RCC_OscConfig+0x4ec>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d028      	beq.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d121      	bne.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d11a      	bne.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c58:	4013      	ands	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d111      	bne.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	3b01      	subs	r3, #1
 8006c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d107      	bne.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800

08006c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0cc      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb0:	4b68      	ldr	r3, [pc, #416]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d90c      	bls.n	8006cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cbe:	4b65      	ldr	r3, [pc, #404]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc6:	4b63      	ldr	r3, [pc, #396]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0b8      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d020      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cf0:	4b59      	ldr	r3, [pc, #356]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d08:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	4a52      	ldr	r2, [pc, #328]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d14:	4b50      	ldr	r3, [pc, #320]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	494d      	ldr	r1, [pc, #308]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d044      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d107      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3a:	4b47      	ldr	r3, [pc, #284]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d119      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e07f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d003      	beq.n	8006d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d107      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d5a:	4b3f      	ldr	r3, [pc, #252]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e06f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6a:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e067      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 0203 	bic.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4934      	ldr	r1, [pc, #208]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d8c:	f7fc fc5c 	bl	8003648 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d94:	f7fc fc58 	bl	8003648 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e04f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 020c 	and.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d1eb      	bne.n	8006d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d20c      	bcs.n	8006de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dca:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d001      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e032      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df0:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4916      	ldr	r1, [pc, #88]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	490e      	ldr	r1, [pc, #56]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e22:	f000 f821 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	091b      	lsrs	r3, r3, #4
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	490a      	ldr	r1, [pc, #40]	; (8006e5c <HAL_RCC_ClockConfig+0x1c0>)
 8006e34:	5ccb      	ldrb	r3, [r1, r3]
 8006e36:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <HAL_RCC_ClockConfig+0x1c8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fc fbbc 	bl	80035c0 <HAL_InitTick>

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40023c00 	.word	0x40023c00
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	08009e3c 	.word	0x08009e3c
 8006e60:	20000000 	.word	0x20000000
 8006e64:	20000004 	.word	0x20000004

08006e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e6c:	b090      	sub	sp, #64	; 0x40
 8006e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	2300      	movs	r3, #0
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e80:	4b59      	ldr	r3, [pc, #356]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d00d      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	f200 80a1 	bhi.w	8006fd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x34>
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e9a:	e09b      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e9c:	4b53      	ldr	r3, [pc, #332]	; (8006fec <HAL_RCC_GetSysClockFreq+0x184>)
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ea0:	e09b      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ea2:	4b53      	ldr	r3, [pc, #332]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ea6:	e098      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ea8:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eb2:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d028      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	099b      	lsrs	r3, r3, #6
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4b47      	ldr	r3, [pc, #284]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ed4:	fb03 f201 	mul.w	r2, r3, r1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	fb00 f303 	mul.w	r3, r0, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	4a43      	ldr	r2, [pc, #268]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ee2:	fba0 1202 	umull	r1, r2, r0, r2
 8006ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee8:	460a      	mov	r2, r1
 8006eea:	62ba      	str	r2, [r7, #40]	; 0x28
 8006eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eee:	4413      	add	r3, r2
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	61fa      	str	r2, [r7, #28]
 8006efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f02:	f7f9 fdbb 	bl	8000a7c <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0e:	e053      	b.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f10:	4b35      	ldr	r3, [pc, #212]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	099b      	lsrs	r3, r3, #6
 8006f16:	2200      	movs	r2, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	617a      	str	r2, [r7, #20]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f22:	f04f 0b00 	mov.w	fp, #0
 8006f26:	4652      	mov	r2, sl
 8006f28:	465b      	mov	r3, fp
 8006f2a:	f04f 0000 	mov.w	r0, #0
 8006f2e:	f04f 0100 	mov.w	r1, #0
 8006f32:	0159      	lsls	r1, r3, #5
 8006f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f38:	0150      	lsls	r0, r2, #5
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	ebb2 080a 	subs.w	r8, r2, sl
 8006f42:	eb63 090b 	sbc.w	r9, r3, fp
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	f04f 0300 	mov.w	r3, #0
 8006f4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f5a:	ebb2 0408 	subs.w	r4, r2, r8
 8006f5e:	eb63 0509 	sbc.w	r5, r3, r9
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	00eb      	lsls	r3, r5, #3
 8006f6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f70:	00e2      	lsls	r2, r4, #3
 8006f72:	4614      	mov	r4, r2
 8006f74:	461d      	mov	r5, r3
 8006f76:	eb14 030a 	adds.w	r3, r4, sl
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	eb45 030b 	adc.w	r3, r5, fp
 8006f80:	607b      	str	r3, [r7, #4]
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f8e:	4629      	mov	r1, r5
 8006f90:	028b      	lsls	r3, r1, #10
 8006f92:	4621      	mov	r1, r4
 8006f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f98:	4621      	mov	r1, r4
 8006f9a:	028a      	lsls	r2, r1, #10
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	60fa      	str	r2, [r7, #12]
 8006fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fac:	f7f9 fd66 	bl	8000a7c <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fd2:	e002      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_RCC_GetSysClockFreq+0x184>)
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3740      	adds	r7, #64	; 0x40
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	00f42400 	.word	0x00f42400
 8006ff0:	017d7840 	.word	0x017d7840

08006ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000000 	.word	0x20000000

0800700c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007010:	f7ff fff0 	bl	8006ff4 <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	0a9b      	lsrs	r3, r3, #10
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4903      	ldr	r1, [pc, #12]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40023800 	.word	0x40023800
 8007030:	08009e4c 	.word	0x08009e4c

08007034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007038:	f7ff ffdc 	bl	8006ff4 <HAL_RCC_GetHCLKFreq>
 800703c:	4602      	mov	r2, r0
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	0b5b      	lsrs	r3, r3, #13
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	4903      	ldr	r1, [pc, #12]	; (8007058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800704a:	5ccb      	ldrb	r3, [r1, r3]
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40023800 	.word	0x40023800
 8007058:	08009e4c 	.word	0x08009e4c

0800705c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07b      	b.n	8007166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d009      	beq.n	8007094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	61da      	str	r2, [r3, #28]
 8007086:	e005      	b.n	8007094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fb feb8 	bl	8002e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007118:	ea42 0103 	orr.w	r1, r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	f003 0104 	and.w	r1, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	f003 0210 	and.w	r2, r3, #16
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e041      	b.n	8007204 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fb fe8d 	bl	8002eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f000 fd91 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	d001      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e044      	b.n	80072ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <HAL_TIM_Base_Start_IT+0xb0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724e:	d013      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d111      	bne.n	800729c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b06      	cmp	r3, #6
 8007288:	d010      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729a:	e007      	b.n	80072ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40014000 	.word	0x40014000

080072d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e041      	b.n	8007366 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f839 	bl	800736e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f000 fce0 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_PWM_Start+0x24>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	bf14      	ite	ne
 80073a0:	2301      	movne	r3, #1
 80073a2:	2300      	moveq	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e022      	b.n	80073ee <HAL_TIM_PWM_Start+0x6a>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d109      	bne.n	80073c2 <HAL_TIM_PWM_Start+0x3e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	bf14      	ite	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	2300      	moveq	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e015      	b.n	80073ee <HAL_TIM_PWM_Start+0x6a>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d109      	bne.n	80073dc <HAL_TIM_PWM_Start+0x58>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e008      	b.n	80073ee <HAL_TIM_PWM_Start+0x6a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	bf14      	ite	ne
 80073e8:	2301      	movne	r3, #1
 80073ea:	2300      	moveq	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e068      	b.n	80074c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Start+0x82>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007404:	e013      	b.n	800742e <HAL_TIM_PWM_Start+0xaa>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b04      	cmp	r3, #4
 800740a:	d104      	bne.n	8007416 <HAL_TIM_PWM_Start+0x92>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007414:	e00b      	b.n	800742e <HAL_TIM_PWM_Start+0xaa>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d104      	bne.n	8007426 <HAL_TIM_PWM_Start+0xa2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007424:	e003      	b.n	800742e <HAL_TIM_PWM_Start+0xaa>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2201      	movs	r2, #1
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fef2 	bl	8008220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <HAL_TIM_PWM_Start+0x14c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d107      	bne.n	8007456 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <HAL_TIM_PWM_Start+0x14c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <HAL_TIM_PWM_Start+0x10e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007468:	d013      	beq.n	8007492 <HAL_TIM_PWM_Start+0x10e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <HAL_TIM_PWM_Start+0x150>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_TIM_PWM_Start+0x10e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <HAL_TIM_PWM_Start+0x154>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_TIM_PWM_Start+0x10e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_TIM_PWM_Start+0x158>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_TIM_PWM_Start+0x10e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <HAL_TIM_PWM_Start+0x15c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d111      	bne.n	80074b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d010      	beq.n	80074c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	e007      	b.n	80074c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0201 	orr.w	r2, r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800
 80074dc:	40000c00 	.word	0x40000c00
 80074e0:	40014000 	.word	0x40014000

080074e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e097      	b.n	8007628 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fb fd2b 	bl	8002f68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 fbcb 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	4313      	orrs	r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007584:	f023 030c 	bic.w	r3, r3, #12
 8007588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	4313      	orrs	r3, r2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	031b      	lsls	r3, r3, #12
 80075b4:	4313      	orrs	r3, r2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4313      	orrs	r3, r2
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007640:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007648:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007650:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007658:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d110      	bne.n	8007682 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d102      	bne.n	800766c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007666:	7b7b      	ldrb	r3, [r7, #13]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e069      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007680:	e031      	b.n	80076e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d110      	bne.n	80076aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d102      	bne.n	8007694 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800768e:	7b3b      	ldrb	r3, [r7, #12]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e055      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a8:	e01d      	b.n	80076e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d105      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076bc:	7b3b      	ldrb	r3, [r7, #12]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d001      	beq.n	80076c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e03e      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_TIM_Encoder_Start+0xc4>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d008      	beq.n	8007704 <HAL_TIM_Encoder_Start+0xd4>
 80076f2:	e00f      	b.n	8007714 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2201      	movs	r2, #1
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fd8f 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 8007702:	e016      	b.n	8007732 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	2104      	movs	r1, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fd87 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 8007712:	e00e      	b.n	8007732 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fd7f 	bl	8008220 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	2104      	movs	r1, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fd78 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 8007730:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b02      	cmp	r3, #2
 8007760:	d122      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d11b      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0202 	mvn.w	r2, #2
 8007778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa81 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007794:	e005      	b.n	80077a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa73 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa84 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0204 	mvn.w	r2, #4
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa57 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa49 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa5a 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b08      	cmp	r3, #8
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b08      	cmp	r3, #8
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0208 	mvn.w	r2, #8
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa2d 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa1f 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa30 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b10      	cmp	r3, #16
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0210 	mvn.w	r2, #16
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2208      	movs	r2, #8
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa03 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9f5 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa06 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0201 	mvn.w	r2, #1
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9cf 	bl	8007c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d10e      	bne.n	80078fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d107      	bne.n	80078fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fd82 	bl	8008400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d10e      	bne.n	8007928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d107      	bne.n	8007928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9cb 	bl	8007cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b20      	cmp	r3, #32
 8007934:	d10e      	bne.n	8007954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b20      	cmp	r3, #32
 8007942:	d107      	bne.n	8007954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0220 	mvn.w	r2, #32
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fd4c 	bl	80083ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007976:	2302      	movs	r3, #2
 8007978:	e0ae      	b.n	8007ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	f200 809f 	bhi.w	8007ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079c5 	.word	0x080079c5
 8007994:	08007ac9 	.word	0x08007ac9
 8007998:	08007ac9 	.word	0x08007ac9
 800799c:	08007ac9 	.word	0x08007ac9
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007ac9 	.word	0x08007ac9
 80079a8:	08007ac9 	.word	0x08007ac9
 80079ac:	08007ac9 	.word	0x08007ac9
 80079b0:	08007a47 	.word	0x08007a47
 80079b4:	08007ac9 	.word	0x08007ac9
 80079b8:	08007ac9 	.word	0x08007ac9
 80079bc:	08007ac9 	.word	0x08007ac9
 80079c0:	08007a87 	.word	0x08007a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fa02 	bl	8007dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0208 	orr.w	r2, r2, #8
 80079de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0204 	bic.w	r2, r2, #4
 80079ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6999      	ldr	r1, [r3, #24]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	619a      	str	r2, [r3, #24]
      break;
 8007a02:	e064      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fa48 	bl	8007ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6999      	ldr	r1, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	021a      	lsls	r2, r3, #8
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	619a      	str	r2, [r3, #24]
      break;
 8007a44:	e043      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fa93 	bl	8007f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0208 	orr.w	r2, r2, #8
 8007a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0204 	bic.w	r2, r2, #4
 8007a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	61da      	str	r2, [r3, #28]
      break;
 8007a84:	e023      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fadd 	bl	800804c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69d9      	ldr	r1, [r3, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	021a      	lsls	r2, r3, #8
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	61da      	str	r2, [r3, #28]
      break;
 8007ac6:	e002      	b.n	8007ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
      break;
 8007acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIM_ConfigClockSource+0x1c>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e0b4      	b.n	8007c66 <HAL_TIM_ConfigClockSource+0x186>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b34:	d03e      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3a:	f200 8087 	bhi.w	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	f000 8086 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x172>
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4a:	d87f      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b4c:	2b70      	cmp	r3, #112	; 0x70
 8007b4e:	d01a      	beq.n	8007b86 <HAL_TIM_ConfigClockSource+0xa6>
 8007b50:	2b70      	cmp	r3, #112	; 0x70
 8007b52:	d87b      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b54:	2b60      	cmp	r3, #96	; 0x60
 8007b56:	d050      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x11a>
 8007b58:	2b60      	cmp	r3, #96	; 0x60
 8007b5a:	d877      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b5c:	2b50      	cmp	r3, #80	; 0x50
 8007b5e:	d03c      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0xfa>
 8007b60:	2b50      	cmp	r3, #80	; 0x50
 8007b62:	d873      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d058      	beq.n	8007c1a <HAL_TIM_ConfigClockSource+0x13a>
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	d86f      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d064      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x15a>
 8007b70:	2b30      	cmp	r3, #48	; 0x30
 8007b72:	d86b      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d060      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x15a>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d867      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d05c      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x15a>
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d05a      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x15a>
 8007b84:	e062      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6899      	ldr	r1, [r3, #8]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f000 fb23 	bl	80081e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	609a      	str	r2, [r3, #8]
      break;
 8007bb2:	e04f      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	6899      	ldr	r1, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f000 fb0c 	bl	80081e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bd6:	609a      	str	r2, [r3, #8]
      break;
 8007bd8:	e03c      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f000 fa80 	bl	80080ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2150      	movs	r1, #80	; 0x50
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fad9 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007bf8:	e02c      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	6859      	ldr	r1, [r3, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f000 fa9f 	bl	800814a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2160      	movs	r1, #96	; 0x60
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fac9 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c18:	e01c      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6859      	ldr	r1, [r3, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f000 fa60 	bl	80080ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2140      	movs	r1, #64	; 0x40
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fab9 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c38:	e00c      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f000 fab0 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c4a:	e003      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c50:	e000      	b.n	8007c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00f      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf2:	d00b      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a31      	ldr	r2, [pc, #196]	; (8007dbc <TIM_Base_SetConfig+0xe8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a30      	ldr	r2, [pc, #192]	; (8007dc0 <TIM_Base_SetConfig+0xec>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a2f      	ldr	r2, [pc, #188]	; (8007dc4 <TIM_Base_SetConfig+0xf0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d108      	bne.n	8007d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a25      	ldr	r2, [pc, #148]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01b      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2c:	d017      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a22      	ldr	r2, [pc, #136]	; (8007dbc <TIM_Base_SetConfig+0xe8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a21      	ldr	r2, [pc, #132]	; (8007dc0 <TIM_Base_SetConfig+0xec>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <TIM_Base_SetConfig+0xf0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <TIM_Base_SetConfig+0xf4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <TIM_Base_SetConfig+0xf8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <TIM_Base_SetConfig+0xfc>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d108      	bne.n	8007d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d103      	bne.n	8007da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	615a      	str	r2, [r3, #20]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f023 0302 	bic.w	r3, r3, #2
 8007e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <TIM_OC1_SetConfig+0xc8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10c      	bne.n	8007e4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 0308 	bic.w	r3, r3, #8
 8007e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f023 0304 	bic.w	r3, r3, #4
 8007e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <TIM_OC1_SetConfig+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d111      	bne.n	8007e76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40010000 	.word	0x40010000

08007ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0210 	bic.w	r2, r3, #16
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f023 0320 	bic.w	r3, r3, #32
 8007eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <TIM_OC2_SetConfig+0xd4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10d      	bne.n	8007f1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <TIM_OC2_SetConfig+0xd4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d113      	bne.n	8007f4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40010000 	.word	0x40010000

08007f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <TIM_OC3_SetConfig+0xd0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10d      	bne.n	8007ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a14      	ldr	r2, [pc, #80]	; (8008048 <TIM_OC3_SetConfig+0xd0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d113      	bne.n	8008022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40010000 	.word	0x40010000

0800804c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	031b      	lsls	r3, r3, #12
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a10      	ldr	r2, [pc, #64]	; (80080e8 <TIM_OC4_SetConfig+0x9c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d109      	bne.n	80080c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	019b      	lsls	r3, r3, #6
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000

080080ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0201 	bic.w	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 030a 	bic.w	r3, r3, #10
 8008128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814a:	b480      	push	{r7}
 800814c:	b087      	sub	sp, #28
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f023 0210 	bic.w	r2, r3, #16
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	031b      	lsls	r3, r3, #12
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 0307 	orr.w	r3, r3, #7
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	431a      	orrs	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	2201      	movs	r2, #1
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1a      	ldr	r2, [r3, #32]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	43db      	mvns	r3, r3
 8008242:	401a      	ands	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	431a      	orrs	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008280:	2302      	movs	r3, #2
 8008282:	e050      	b.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d018      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d0:	d013      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00e      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a13      	ldr	r2, [pc, #76]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d10c      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	4313      	orrs	r3, r2
 800830a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40014000 	.word	0x40014000

08008348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008360:	2302      	movs	r3, #2
 8008362:	e03d      	b.n	80083e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e03f      	b.n	80084a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fa feb0 	bl	80031a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	; 0x24
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fd23 	bl	8008ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800846c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695a      	ldr	r2, [r3, #20]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800847c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800848c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	4613      	mov	r3, r2
 80084ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d130      	bne.n	800852a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_UART_Transmit_IT+0x26>
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e029      	b.n	800852c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_UART_Transmit_IT+0x38>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e022      	b.n	800852c <HAL_UART_Transmit_IT+0x7e>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	88fa      	ldrh	r2, [r7, #6]
 80084f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2221      	movs	r2, #33	; 0x21
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008524:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b20      	cmp	r3, #32
 8008550:	d11d      	bne.n	800858e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <HAL_UART_Receive_IT+0x26>
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e016      	b.n	8008590 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_UART_Receive_IT+0x38>
 800856c:	2302      	movs	r3, #2
 800856e:	e00f      	b.n	8008590 <HAL_UART_Receive_IT+0x58>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fab5 	bl	8008af4 <UART_Start_Receive_IT>
 800858a:	4603      	mov	r3, r0
 800858c:	e000      	b.n	8008590 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800858e:	2302      	movs	r3, #2
  }
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0ba      	sub	sp, #232	; 0xe8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb99 	bl	8008d2e <UART_Receive_IT>
      return;
 80085fc:	e256      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80de 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
 8008608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008618:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80d1 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
 800862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f043 0201 	orr.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
 8008652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f043 0202 	orr.w	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
 8008676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f043 0204 	orr.w	r2, r3, #4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f043 0208 	orr.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 81ed 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb24 	bl	8008d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <HAL_UART_IRQHandler+0x17a>
 800870a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04f      	beq.n	80087b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa2c 	bl	8008b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d141      	bne.n	80087aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800873c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800875e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800876a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1d9      	bne.n	8008726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d013      	beq.n	80087a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	4a7d      	ldr	r2, [pc, #500]	; (8008974 <HAL_UART_IRQHandler+0x3dc>)
 8008780:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4618      	mov	r0, r3
 8008788:	f7fb fb81 	bl	8003e8e <HAL_DMA_Abort_IT>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d016      	beq.n	80087c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	e00e      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f990 	bl	8008ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00a      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f98c 	bl	8008ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e006      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f988 	bl	8008ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087be:	e170      	b.n	8008aa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	bf00      	nop
    return;
 80087c2:	e16e      	b.n	8008aa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 814a 	bne.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8143 	beq.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 813c 	beq.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
 80087fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880a:	2b40      	cmp	r3, #64	; 0x40
 800880c:	f040 80b4 	bne.w	8008978 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800881c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8140 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800882a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800882e:	429a      	cmp	r2, r3
 8008830:	f080 8139 	bcs.w	8008aa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800883a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008846:	f000 8088 	beq.w	800895a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800888e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1d9      	bne.n	800884a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3314      	adds	r3, #20
 800889c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e1      	bne.n	8008896 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e3      	bne.n	80088d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892a:	f023 0310 	bic.w	r3, r3, #16
 800892e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800893c:	65ba      	str	r2, [r7, #88]	; 0x58
 800893e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800894a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e3      	bne.n	8008918 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	4618      	mov	r0, r3
 8008956:	f7fb fa2a 	bl	8003dae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008962:	b29b      	uxth	r3, r3
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f8b6 	bl	8008adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008970:	e099      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50e>
 8008972:	bf00      	nop
 8008974:	08008c37 	.word	0x08008c37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008980:	b29b      	uxth	r3, r3
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 808b 	beq.w	8008aaa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8086 	beq.w	8008aaa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	330c      	adds	r3, #12
 80089be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089c2:	647a      	str	r2, [r7, #68]	; 0x44
 80089c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e3      	bne.n	800899e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3314      	adds	r3, #20
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	623b      	str	r3, [r7, #32]
   return(result);
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3314      	adds	r3, #20
 80089f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089fa:	633a      	str	r2, [r7, #48]	; 0x30
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e3      	bne.n	80089d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	330c      	adds	r3, #12
 8008a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a40:	61fa      	str	r2, [r7, #28]
 8008a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e3      	bne.n	8008a1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f83e 	bl	8008adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a60:	e023      	b.n	8008aaa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_UART_IRQHandler+0x4ea>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f8ef 	bl	8008c5e <UART_Transmit_IT>
    return;
 8008a80:	e014      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <HAL_UART_IRQHandler+0x514>
 8008a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f92f 	bl	8008cfe <UART_EndTransmit_IT>
    return;
 8008aa0:	e004      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
    return;
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
      return;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
      return;
 8008aaa:	bf00      	nop
  }
}
 8008aac:	37e8      	adds	r7, #232	; 0xe8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop

08008ab4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2222      	movs	r2, #34	; 0x22
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d007      	beq.n	8008b42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695a      	ldr	r2, [r3, #20]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0220 	orr.w	r2, r2, #32
 8008b60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b095      	sub	sp, #84	; 0x54
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b98:	643a      	str	r2, [r7, #64]	; 0x40
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e5      	bne.n	8008b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f023 0301 	bic.w	r3, r3, #1
 8008bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d119      	bne.n	8008c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c08:	61ba      	str	r2, [r7, #24]
 8008c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	613b      	str	r3, [r7, #16]
   return(result);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e5      	bne.n	8008be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c2a:	bf00      	nop
 8008c2c:	3754      	adds	r7, #84	; 0x54
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff ff39 	bl	8008ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b21      	cmp	r3, #33	; 0x21
 8008c70:	d13e      	bne.n	8008cf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	d114      	bne.n	8008ca6 <UART_Transmit_IT+0x48>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d110      	bne.n	8008ca6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	1c9a      	adds	r2, r3, #2
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	621a      	str	r2, [r3, #32]
 8008ca4:	e008      	b.n	8008cb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	1c59      	adds	r1, r3, #1
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6211      	str	r1, [r2, #32]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10f      	bne.n	8008cec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7ff fec8 	bl	8008ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b08c      	sub	sp, #48	; 0x30
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b22      	cmp	r3, #34	; 0x22
 8008d40:	f040 80ab 	bne.w	8008e9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4c:	d117      	bne.n	8008d7e <UART_Receive_IT+0x50>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d113      	bne.n	8008d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	1c9a      	adds	r2, r3, #2
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008d7c:	e026      	b.n	8008dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d90:	d007      	beq.n	8008da2 <UART_Receive_IT+0x74>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <UART_Receive_IT+0x82>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	e008      	b.n	8008dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d15a      	bne.n	8008e96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0220 	bic.w	r2, r2, #32
 8008dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d135      	bne.n	8008e8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	330c      	adds	r3, #12
 8008e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	613b      	str	r3, [r7, #16]
   return(result);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f023 0310 	bic.w	r3, r3, #16
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e46:	623a      	str	r2, [r7, #32]
 8008e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	69f9      	ldr	r1, [r7, #28]
 8008e4c:	6a3a      	ldr	r2, [r7, #32]
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e5      	bne.n	8008e26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0310 	and.w	r3, r3, #16
 8008e64:	2b10      	cmp	r3, #16
 8008e66:	d10a      	bne.n	8008e7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff fe29 	bl	8008adc <HAL_UARTEx_RxEventCallback>
 8008e8a:	e002      	b.n	8008e92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fa fb13 	bl	80034b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e002      	b.n	8008e9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e000      	b.n	8008e9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e9a:	2302      	movs	r3, #2
  }
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3730      	adds	r7, #48	; 0x30
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea8:	b0c0      	sub	sp, #256	; 0x100
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec0:	68d9      	ldr	r1, [r3, #12]
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	ea40 0301 	orr.w	r3, r0, r1
 8008ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008efc:	f021 010c 	bic.w	r1, r1, #12
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1e:	6999      	ldr	r1, [r3, #24]
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	ea40 0301 	orr.w	r3, r0, r1
 8008f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b8f      	ldr	r3, [pc, #572]	; (8009170 <UART_SetConfig+0x2cc>)
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d005      	beq.n	8008f44 <UART_SetConfig+0xa0>
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b8d      	ldr	r3, [pc, #564]	; (8009174 <UART_SetConfig+0x2d0>)
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d104      	bne.n	8008f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f44:	f7fe f876 	bl	8007034 <HAL_RCC_GetPCLK2Freq>
 8008f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f4c:	e003      	b.n	8008f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f4e:	f7fe f85d 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 8008f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f60:	f040 810c 	bne.w	800917c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f76:	4622      	mov	r2, r4
 8008f78:	462b      	mov	r3, r5
 8008f7a:	1891      	adds	r1, r2, r2
 8008f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f7e:	415b      	adcs	r3, r3
 8008f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f86:	4621      	mov	r1, r4
 8008f88:	eb12 0801 	adds.w	r8, r2, r1
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	eb43 0901 	adc.w	r9, r3, r1
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fa6:	4690      	mov	r8, r2
 8008fa8:	4699      	mov	r9, r3
 8008faa:	4623      	mov	r3, r4
 8008fac:	eb18 0303 	adds.w	r3, r8, r3
 8008fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	eb49 0303 	adc.w	r3, r9, r3
 8008fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	18db      	adds	r3, r3, r3
 8008fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8008fd8:	4613      	mov	r3, r2
 8008fda:	eb42 0303 	adc.w	r3, r2, r3
 8008fde:	657b      	str	r3, [r7, #84]	; 0x54
 8008fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fe8:	f7f7 fd48 	bl	8000a7c <__aeabi_uldivmod>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4b61      	ldr	r3, [pc, #388]	; (8009178 <UART_SetConfig+0x2d4>)
 8008ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	011c      	lsls	r4, r3, #4
 8008ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	1891      	adds	r1, r2, r2
 8009012:	64b9      	str	r1, [r7, #72]	; 0x48
 8009014:	415b      	adcs	r3, r3
 8009016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800901c:	4641      	mov	r1, r8
 800901e:	eb12 0a01 	adds.w	sl, r2, r1
 8009022:	4649      	mov	r1, r9
 8009024:	eb43 0b01 	adc.w	fp, r3, r1
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800903c:	4692      	mov	sl, r2
 800903e:	469b      	mov	fp, r3
 8009040:	4643      	mov	r3, r8
 8009042:	eb1a 0303 	adds.w	r3, sl, r3
 8009046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800904a:	464b      	mov	r3, r9
 800904c:	eb4b 0303 	adc.w	r3, fp, r3
 8009050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009068:	460b      	mov	r3, r1
 800906a:	18db      	adds	r3, r3, r3
 800906c:	643b      	str	r3, [r7, #64]	; 0x40
 800906e:	4613      	mov	r3, r2
 8009070:	eb42 0303 	adc.w	r3, r2, r3
 8009074:	647b      	str	r3, [r7, #68]	; 0x44
 8009076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800907a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800907e:	f7f7 fcfd 	bl	8000a7c <__aeabi_uldivmod>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4611      	mov	r1, r2
 8009088:	4b3b      	ldr	r3, [pc, #236]	; (8009178 <UART_SetConfig+0x2d4>)
 800908a:	fba3 2301 	umull	r2, r3, r3, r1
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	2264      	movs	r2, #100	; 0x64
 8009092:	fb02 f303 	mul.w	r3, r2, r3
 8009096:	1acb      	subs	r3, r1, r3
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800909e:	4b36      	ldr	r3, [pc, #216]	; (8009178 <UART_SetConfig+0x2d4>)
 80090a0:	fba3 2302 	umull	r2, r3, r3, r2
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090ac:	441c      	add	r4, r3
 80090ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090c0:	4642      	mov	r2, r8
 80090c2:	464b      	mov	r3, r9
 80090c4:	1891      	adds	r1, r2, r2
 80090c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80090c8:	415b      	adcs	r3, r3
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090d0:	4641      	mov	r1, r8
 80090d2:	1851      	adds	r1, r2, r1
 80090d4:	6339      	str	r1, [r7, #48]	; 0x30
 80090d6:	4649      	mov	r1, r9
 80090d8:	414b      	adcs	r3, r1
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090e8:	4659      	mov	r1, fp
 80090ea:	00cb      	lsls	r3, r1, #3
 80090ec:	4651      	mov	r1, sl
 80090ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090f2:	4651      	mov	r1, sl
 80090f4:	00ca      	lsls	r2, r1, #3
 80090f6:	4610      	mov	r0, r2
 80090f8:	4619      	mov	r1, r3
 80090fa:	4603      	mov	r3, r0
 80090fc:	4642      	mov	r2, r8
 80090fe:	189b      	adds	r3, r3, r2
 8009100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009104:	464b      	mov	r3, r9
 8009106:	460a      	mov	r2, r1
 8009108:	eb42 0303 	adc.w	r3, r2, r3
 800910c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800911c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009124:	460b      	mov	r3, r1
 8009126:	18db      	adds	r3, r3, r3
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
 800912a:	4613      	mov	r3, r2
 800912c:	eb42 0303 	adc.w	r3, r2, r3
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800913a:	f7f7 fc9f 	bl	8000a7c <__aeabi_uldivmod>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <UART_SetConfig+0x2d4>)
 8009144:	fba3 1302 	umull	r1, r3, r3, r2
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	2164      	movs	r1, #100	; 0x64
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	3332      	adds	r3, #50	; 0x32
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <UART_SetConfig+0x2d4>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	f003 0207 	and.w	r2, r3, #7
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4422      	add	r2, r4
 800916a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800916c:	e105      	b.n	800937a <UART_SetConfig+0x4d6>
 800916e:	bf00      	nop
 8009170:	40011000 	.word	0x40011000
 8009174:	40011400 	.word	0x40011400
 8009178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800917c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009180:	2200      	movs	r2, #0
 8009182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800918a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800918e:	4642      	mov	r2, r8
 8009190:	464b      	mov	r3, r9
 8009192:	1891      	adds	r1, r2, r2
 8009194:	6239      	str	r1, [r7, #32]
 8009196:	415b      	adcs	r3, r3
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
 800919a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800919e:	4641      	mov	r1, r8
 80091a0:	1854      	adds	r4, r2, r1
 80091a2:	4649      	mov	r1, r9
 80091a4:	eb43 0501 	adc.w	r5, r3, r1
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	00eb      	lsls	r3, r5, #3
 80091b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091b6:	00e2      	lsls	r2, r4, #3
 80091b8:	4614      	mov	r4, r2
 80091ba:	461d      	mov	r5, r3
 80091bc:	4643      	mov	r3, r8
 80091be:	18e3      	adds	r3, r4, r3
 80091c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091c4:	464b      	mov	r3, r9
 80091c6:	eb45 0303 	adc.w	r3, r5, r3
 80091ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091ea:	4629      	mov	r1, r5
 80091ec:	008b      	lsls	r3, r1, #2
 80091ee:	4621      	mov	r1, r4
 80091f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091f4:	4621      	mov	r1, r4
 80091f6:	008a      	lsls	r2, r1, #2
 80091f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091fc:	f7f7 fc3e 	bl	8000a7c <__aeabi_uldivmod>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4b60      	ldr	r3, [pc, #384]	; (8009388 <UART_SetConfig+0x4e4>)
 8009206:	fba3 2302 	umull	r2, r3, r3, r2
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	011c      	lsls	r4, r3, #4
 800920e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009212:	2200      	movs	r2, #0
 8009214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800921c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	1891      	adds	r1, r2, r2
 8009226:	61b9      	str	r1, [r7, #24]
 8009228:	415b      	adcs	r3, r3
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009230:	4641      	mov	r1, r8
 8009232:	1851      	adds	r1, r2, r1
 8009234:	6139      	str	r1, [r7, #16]
 8009236:	4649      	mov	r1, r9
 8009238:	414b      	adcs	r3, r1
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009248:	4659      	mov	r1, fp
 800924a:	00cb      	lsls	r3, r1, #3
 800924c:	4651      	mov	r1, sl
 800924e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009252:	4651      	mov	r1, sl
 8009254:	00ca      	lsls	r2, r1, #3
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	4603      	mov	r3, r0
 800925c:	4642      	mov	r2, r8
 800925e:	189b      	adds	r3, r3, r2
 8009260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009264:	464b      	mov	r3, r9
 8009266:	460a      	mov	r2, r1
 8009268:	eb42 0303 	adc.w	r3, r2, r3
 800926c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	67bb      	str	r3, [r7, #120]	; 0x78
 800927a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009288:	4649      	mov	r1, r9
 800928a:	008b      	lsls	r3, r1, #2
 800928c:	4641      	mov	r1, r8
 800928e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009292:	4641      	mov	r1, r8
 8009294:	008a      	lsls	r2, r1, #2
 8009296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800929a:	f7f7 fbef 	bl	8000a7c <__aeabi_uldivmod>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4b39      	ldr	r3, [pc, #228]	; (8009388 <UART_SetConfig+0x4e4>)
 80092a4:	fba3 1302 	umull	r1, r3, r3, r2
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	2164      	movs	r1, #100	; 0x64
 80092ac:	fb01 f303 	mul.w	r3, r1, r3
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	3332      	adds	r3, #50	; 0x32
 80092b6:	4a34      	ldr	r2, [pc, #208]	; (8009388 <UART_SetConfig+0x4e4>)
 80092b8:	fba2 2303 	umull	r2, r3, r2, r3
 80092bc:	095b      	lsrs	r3, r3, #5
 80092be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092c2:	441c      	add	r4, r3
 80092c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092c8:	2200      	movs	r2, #0
 80092ca:	673b      	str	r3, [r7, #112]	; 0x70
 80092cc:	677a      	str	r2, [r7, #116]	; 0x74
 80092ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80092d2:	4642      	mov	r2, r8
 80092d4:	464b      	mov	r3, r9
 80092d6:	1891      	adds	r1, r2, r2
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	415b      	adcs	r3, r3
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092e2:	4641      	mov	r1, r8
 80092e4:	1851      	adds	r1, r2, r1
 80092e6:	6039      	str	r1, [r7, #0]
 80092e8:	4649      	mov	r1, r9
 80092ea:	414b      	adcs	r3, r1
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092fa:	4659      	mov	r1, fp
 80092fc:	00cb      	lsls	r3, r1, #3
 80092fe:	4651      	mov	r1, sl
 8009300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009304:	4651      	mov	r1, sl
 8009306:	00ca      	lsls	r2, r1, #3
 8009308:	4610      	mov	r0, r2
 800930a:	4619      	mov	r1, r3
 800930c:	4603      	mov	r3, r0
 800930e:	4642      	mov	r2, r8
 8009310:	189b      	adds	r3, r3, r2
 8009312:	66bb      	str	r3, [r7, #104]	; 0x68
 8009314:	464b      	mov	r3, r9
 8009316:	460a      	mov	r2, r1
 8009318:	eb42 0303 	adc.w	r3, r2, r3
 800931c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	663b      	str	r3, [r7, #96]	; 0x60
 8009328:	667a      	str	r2, [r7, #100]	; 0x64
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009336:	4649      	mov	r1, r9
 8009338:	008b      	lsls	r3, r1, #2
 800933a:	4641      	mov	r1, r8
 800933c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009340:	4641      	mov	r1, r8
 8009342:	008a      	lsls	r2, r1, #2
 8009344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009348:	f7f7 fb98 	bl	8000a7c <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <UART_SetConfig+0x4e4>)
 8009352:	fba3 1302 	umull	r1, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	2164      	movs	r1, #100	; 0x64
 800935a:	fb01 f303 	mul.w	r3, r1, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	3332      	adds	r3, #50	; 0x32
 8009364:	4a08      	ldr	r2, [pc, #32]	; (8009388 <UART_SetConfig+0x4e4>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	f003 020f 	and.w	r2, r3, #15
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4422      	add	r2, r4
 8009378:	609a      	str	r2, [r3, #8]
}
 800937a:	bf00      	nop
 800937c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009380:	46bd      	mov	sp, r7
 8009382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009386:	bf00      	nop
 8009388:	51eb851f 	.word	0x51eb851f

0800938c <atoi>:
 800938c:	220a      	movs	r2, #10
 800938e:	2100      	movs	r1, #0
 8009390:	f000 b8ea 	b.w	8009568 <strtol>

08009394 <__errno>:
 8009394:	4b01      	ldr	r3, [pc, #4]	; (800939c <__errno+0x8>)
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	2000000c 	.word	0x2000000c

080093a0 <__libc_init_array>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	4d0d      	ldr	r5, [pc, #52]	; (80093d8 <__libc_init_array+0x38>)
 80093a4:	4c0d      	ldr	r4, [pc, #52]	; (80093dc <__libc_init_array+0x3c>)
 80093a6:	1b64      	subs	r4, r4, r5
 80093a8:	10a4      	asrs	r4, r4, #2
 80093aa:	2600      	movs	r6, #0
 80093ac:	42a6      	cmp	r6, r4
 80093ae:	d109      	bne.n	80093c4 <__libc_init_array+0x24>
 80093b0:	4d0b      	ldr	r5, [pc, #44]	; (80093e0 <__libc_init_array+0x40>)
 80093b2:	4c0c      	ldr	r4, [pc, #48]	; (80093e4 <__libc_init_array+0x44>)
 80093b4:	f000 fd22 	bl	8009dfc <_init>
 80093b8:	1b64      	subs	r4, r4, r5
 80093ba:	10a4      	asrs	r4, r4, #2
 80093bc:	2600      	movs	r6, #0
 80093be:	42a6      	cmp	r6, r4
 80093c0:	d105      	bne.n	80093ce <__libc_init_array+0x2e>
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c8:	4798      	blx	r3
 80093ca:	3601      	adds	r6, #1
 80093cc:	e7ee      	b.n	80093ac <__libc_init_array+0xc>
 80093ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d2:	4798      	blx	r3
 80093d4:	3601      	adds	r6, #1
 80093d6:	e7f2      	b.n	80093be <__libc_init_array+0x1e>
 80093d8:	08009f90 	.word	0x08009f90
 80093dc:	08009f90 	.word	0x08009f90
 80093e0:	08009f90 	.word	0x08009f90
 80093e4:	08009f94 	.word	0x08009f94

080093e8 <memcpy>:
 80093e8:	440a      	add	r2, r1
 80093ea:	4291      	cmp	r1, r2
 80093ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f0:	d100      	bne.n	80093f4 <memcpy+0xc>
 80093f2:	4770      	bx	lr
 80093f4:	b510      	push	{r4, lr}
 80093f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093fe:	4291      	cmp	r1, r2
 8009400:	d1f9      	bne.n	80093f6 <memcpy+0xe>
 8009402:	bd10      	pop	{r4, pc}

08009404 <memset>:
 8009404:	4402      	add	r2, r0
 8009406:	4603      	mov	r3, r0
 8009408:	4293      	cmp	r3, r2
 800940a:	d100      	bne.n	800940e <memset+0xa>
 800940c:	4770      	bx	lr
 800940e:	f803 1b01 	strb.w	r1, [r3], #1
 8009412:	e7f9      	b.n	8009408 <memset+0x4>

08009414 <siprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b500      	push	{lr}
 8009418:	b09c      	sub	sp, #112	; 0x70
 800941a:	ab1d      	add	r3, sp, #116	; 0x74
 800941c:	9002      	str	r0, [sp, #8]
 800941e:	9006      	str	r0, [sp, #24]
 8009420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009424:	4809      	ldr	r0, [pc, #36]	; (800944c <siprintf+0x38>)
 8009426:	9107      	str	r1, [sp, #28]
 8009428:	9104      	str	r1, [sp, #16]
 800942a:	4909      	ldr	r1, [pc, #36]	; (8009450 <siprintf+0x3c>)
 800942c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009430:	9105      	str	r1, [sp, #20]
 8009432:	6800      	ldr	r0, [r0, #0]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	a902      	add	r1, sp, #8
 8009438:	f000 f8fc 	bl	8009634 <_svfiprintf_r>
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	b01c      	add	sp, #112	; 0x70
 8009444:	f85d eb04 	ldr.w	lr, [sp], #4
 8009448:	b003      	add	sp, #12
 800944a:	4770      	bx	lr
 800944c:	2000000c 	.word	0x2000000c
 8009450:	ffff0208 	.word	0xffff0208

08009454 <strcpy>:
 8009454:	4603      	mov	r3, r0
 8009456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800945a:	f803 2b01 	strb.w	r2, [r3], #1
 800945e:	2a00      	cmp	r2, #0
 8009460:	d1f9      	bne.n	8009456 <strcpy+0x2>
 8009462:	4770      	bx	lr

08009464 <_strtol_l.constprop.0>:
 8009464:	2b01      	cmp	r3, #1
 8009466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946a:	d001      	beq.n	8009470 <_strtol_l.constprop.0+0xc>
 800946c:	2b24      	cmp	r3, #36	; 0x24
 800946e:	d906      	bls.n	800947e <_strtol_l.constprop.0+0x1a>
 8009470:	f7ff ff90 	bl	8009394 <__errno>
 8009474:	2316      	movs	r3, #22
 8009476:	6003      	str	r3, [r0, #0]
 8009478:	2000      	movs	r0, #0
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009564 <_strtol_l.constprop.0+0x100>
 8009482:	460d      	mov	r5, r1
 8009484:	462e      	mov	r6, r5
 8009486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800948a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800948e:	f017 0708 	ands.w	r7, r7, #8
 8009492:	d1f7      	bne.n	8009484 <_strtol_l.constprop.0+0x20>
 8009494:	2c2d      	cmp	r4, #45	; 0x2d
 8009496:	d132      	bne.n	80094fe <_strtol_l.constprop.0+0x9a>
 8009498:	782c      	ldrb	r4, [r5, #0]
 800949a:	2701      	movs	r7, #1
 800949c:	1cb5      	adds	r5, r6, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d05b      	beq.n	800955a <_strtol_l.constprop.0+0xf6>
 80094a2:	2b10      	cmp	r3, #16
 80094a4:	d109      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 80094a6:	2c30      	cmp	r4, #48	; 0x30
 80094a8:	d107      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 80094aa:	782c      	ldrb	r4, [r5, #0]
 80094ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094b0:	2c58      	cmp	r4, #88	; 0x58
 80094b2:	d14d      	bne.n	8009550 <_strtol_l.constprop.0+0xec>
 80094b4:	786c      	ldrb	r4, [r5, #1]
 80094b6:	2310      	movs	r3, #16
 80094b8:	3502      	adds	r5, #2
 80094ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094be:	f108 38ff 	add.w	r8, r8, #4294967295
 80094c2:	f04f 0c00 	mov.w	ip, #0
 80094c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80094ca:	4666      	mov	r6, ip
 80094cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80094d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80094d4:	f1be 0f09 	cmp.w	lr, #9
 80094d8:	d816      	bhi.n	8009508 <_strtol_l.constprop.0+0xa4>
 80094da:	4674      	mov	r4, lr
 80094dc:	42a3      	cmp	r3, r4
 80094de:	dd24      	ble.n	800952a <_strtol_l.constprop.0+0xc6>
 80094e0:	f1bc 0f00 	cmp.w	ip, #0
 80094e4:	db1e      	blt.n	8009524 <_strtol_l.constprop.0+0xc0>
 80094e6:	45b1      	cmp	r9, r6
 80094e8:	d31c      	bcc.n	8009524 <_strtol_l.constprop.0+0xc0>
 80094ea:	d101      	bne.n	80094f0 <_strtol_l.constprop.0+0x8c>
 80094ec:	45a2      	cmp	sl, r4
 80094ee:	db19      	blt.n	8009524 <_strtol_l.constprop.0+0xc0>
 80094f0:	fb06 4603 	mla	r6, r6, r3, r4
 80094f4:	f04f 0c01 	mov.w	ip, #1
 80094f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094fc:	e7e8      	b.n	80094d0 <_strtol_l.constprop.0+0x6c>
 80094fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009500:	bf04      	itt	eq
 8009502:	782c      	ldrbeq	r4, [r5, #0]
 8009504:	1cb5      	addeq	r5, r6, #2
 8009506:	e7ca      	b.n	800949e <_strtol_l.constprop.0+0x3a>
 8009508:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800950c:	f1be 0f19 	cmp.w	lr, #25
 8009510:	d801      	bhi.n	8009516 <_strtol_l.constprop.0+0xb2>
 8009512:	3c37      	subs	r4, #55	; 0x37
 8009514:	e7e2      	b.n	80094dc <_strtol_l.constprop.0+0x78>
 8009516:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800951a:	f1be 0f19 	cmp.w	lr, #25
 800951e:	d804      	bhi.n	800952a <_strtol_l.constprop.0+0xc6>
 8009520:	3c57      	subs	r4, #87	; 0x57
 8009522:	e7db      	b.n	80094dc <_strtol_l.constprop.0+0x78>
 8009524:	f04f 3cff 	mov.w	ip, #4294967295
 8009528:	e7e6      	b.n	80094f8 <_strtol_l.constprop.0+0x94>
 800952a:	f1bc 0f00 	cmp.w	ip, #0
 800952e:	da05      	bge.n	800953c <_strtol_l.constprop.0+0xd8>
 8009530:	2322      	movs	r3, #34	; 0x22
 8009532:	6003      	str	r3, [r0, #0]
 8009534:	4646      	mov	r6, r8
 8009536:	b942      	cbnz	r2, 800954a <_strtol_l.constprop.0+0xe6>
 8009538:	4630      	mov	r0, r6
 800953a:	e79e      	b.n	800947a <_strtol_l.constprop.0+0x16>
 800953c:	b107      	cbz	r7, 8009540 <_strtol_l.constprop.0+0xdc>
 800953e:	4276      	negs	r6, r6
 8009540:	2a00      	cmp	r2, #0
 8009542:	d0f9      	beq.n	8009538 <_strtol_l.constprop.0+0xd4>
 8009544:	f1bc 0f00 	cmp.w	ip, #0
 8009548:	d000      	beq.n	800954c <_strtol_l.constprop.0+0xe8>
 800954a:	1e69      	subs	r1, r5, #1
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	e7f3      	b.n	8009538 <_strtol_l.constprop.0+0xd4>
 8009550:	2430      	movs	r4, #48	; 0x30
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1b1      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 8009556:	2308      	movs	r3, #8
 8009558:	e7af      	b.n	80094ba <_strtol_l.constprop.0+0x56>
 800955a:	2c30      	cmp	r4, #48	; 0x30
 800955c:	d0a5      	beq.n	80094aa <_strtol_l.constprop.0+0x46>
 800955e:	230a      	movs	r3, #10
 8009560:	e7ab      	b.n	80094ba <_strtol_l.constprop.0+0x56>
 8009562:	bf00      	nop
 8009564:	08009e55 	.word	0x08009e55

08009568 <strtol>:
 8009568:	4613      	mov	r3, r2
 800956a:	460a      	mov	r2, r1
 800956c:	4601      	mov	r1, r0
 800956e:	4802      	ldr	r0, [pc, #8]	; (8009578 <strtol+0x10>)
 8009570:	6800      	ldr	r0, [r0, #0]
 8009572:	f7ff bf77 	b.w	8009464 <_strtol_l.constprop.0>
 8009576:	bf00      	nop
 8009578:	2000000c 	.word	0x2000000c

0800957c <__ssputs_r>:
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	688e      	ldr	r6, [r1, #8]
 8009582:	429e      	cmp	r6, r3
 8009584:	4682      	mov	sl, r0
 8009586:	460c      	mov	r4, r1
 8009588:	4690      	mov	r8, r2
 800958a:	461f      	mov	r7, r3
 800958c:	d838      	bhi.n	8009600 <__ssputs_r+0x84>
 800958e:	898a      	ldrh	r2, [r1, #12]
 8009590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009594:	d032      	beq.n	80095fc <__ssputs_r+0x80>
 8009596:	6825      	ldr	r5, [r4, #0]
 8009598:	6909      	ldr	r1, [r1, #16]
 800959a:	eba5 0901 	sub.w	r9, r5, r1
 800959e:	6965      	ldr	r5, [r4, #20]
 80095a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a8:	3301      	adds	r3, #1
 80095aa:	444b      	add	r3, r9
 80095ac:	106d      	asrs	r5, r5, #1
 80095ae:	429d      	cmp	r5, r3
 80095b0:	bf38      	it	cc
 80095b2:	461d      	movcc	r5, r3
 80095b4:	0553      	lsls	r3, r2, #21
 80095b6:	d531      	bpl.n	800961c <__ssputs_r+0xa0>
 80095b8:	4629      	mov	r1, r5
 80095ba:	f000 fb55 	bl	8009c68 <_malloc_r>
 80095be:	4606      	mov	r6, r0
 80095c0:	b950      	cbnz	r0, 80095d8 <__ssputs_r+0x5c>
 80095c2:	230c      	movs	r3, #12
 80095c4:	f8ca 3000 	str.w	r3, [sl]
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d8:	6921      	ldr	r1, [r4, #16]
 80095da:	464a      	mov	r2, r9
 80095dc:	f7ff ff04 	bl	80093e8 <memcpy>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	6126      	str	r6, [r4, #16]
 80095ee:	6165      	str	r5, [r4, #20]
 80095f0:	444e      	add	r6, r9
 80095f2:	eba5 0509 	sub.w	r5, r5, r9
 80095f6:	6026      	str	r6, [r4, #0]
 80095f8:	60a5      	str	r5, [r4, #8]
 80095fa:	463e      	mov	r6, r7
 80095fc:	42be      	cmp	r6, r7
 80095fe:	d900      	bls.n	8009602 <__ssputs_r+0x86>
 8009600:	463e      	mov	r6, r7
 8009602:	6820      	ldr	r0, [r4, #0]
 8009604:	4632      	mov	r2, r6
 8009606:	4641      	mov	r1, r8
 8009608:	f000 faa8 	bl	8009b5c <memmove>
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	1b9b      	subs	r3, r3, r6
 8009610:	60a3      	str	r3, [r4, #8]
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4433      	add	r3, r6
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	2000      	movs	r0, #0
 800961a:	e7db      	b.n	80095d4 <__ssputs_r+0x58>
 800961c:	462a      	mov	r2, r5
 800961e:	f000 fb97 	bl	8009d50 <_realloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d1e1      	bne.n	80095ec <__ssputs_r+0x70>
 8009628:	6921      	ldr	r1, [r4, #16]
 800962a:	4650      	mov	r0, sl
 800962c:	f000 fab0 	bl	8009b90 <_free_r>
 8009630:	e7c7      	b.n	80095c2 <__ssputs_r+0x46>
	...

08009634 <_svfiprintf_r>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	4698      	mov	r8, r3
 800963a:	898b      	ldrh	r3, [r1, #12]
 800963c:	061b      	lsls	r3, r3, #24
 800963e:	b09d      	sub	sp, #116	; 0x74
 8009640:	4607      	mov	r7, r0
 8009642:	460d      	mov	r5, r1
 8009644:	4614      	mov	r4, r2
 8009646:	d50e      	bpl.n	8009666 <_svfiprintf_r+0x32>
 8009648:	690b      	ldr	r3, [r1, #16]
 800964a:	b963      	cbnz	r3, 8009666 <_svfiprintf_r+0x32>
 800964c:	2140      	movs	r1, #64	; 0x40
 800964e:	f000 fb0b 	bl	8009c68 <_malloc_r>
 8009652:	6028      	str	r0, [r5, #0]
 8009654:	6128      	str	r0, [r5, #16]
 8009656:	b920      	cbnz	r0, 8009662 <_svfiprintf_r+0x2e>
 8009658:	230c      	movs	r3, #12
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	e0d1      	b.n	8009806 <_svfiprintf_r+0x1d2>
 8009662:	2340      	movs	r3, #64	; 0x40
 8009664:	616b      	str	r3, [r5, #20]
 8009666:	2300      	movs	r3, #0
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	2320      	movs	r3, #32
 800966c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009670:	f8cd 800c 	str.w	r8, [sp, #12]
 8009674:	2330      	movs	r3, #48	; 0x30
 8009676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009820 <_svfiprintf_r+0x1ec>
 800967a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800967e:	f04f 0901 	mov.w	r9, #1
 8009682:	4623      	mov	r3, r4
 8009684:	469a      	mov	sl, r3
 8009686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800968a:	b10a      	cbz	r2, 8009690 <_svfiprintf_r+0x5c>
 800968c:	2a25      	cmp	r2, #37	; 0x25
 800968e:	d1f9      	bne.n	8009684 <_svfiprintf_r+0x50>
 8009690:	ebba 0b04 	subs.w	fp, sl, r4
 8009694:	d00b      	beq.n	80096ae <_svfiprintf_r+0x7a>
 8009696:	465b      	mov	r3, fp
 8009698:	4622      	mov	r2, r4
 800969a:	4629      	mov	r1, r5
 800969c:	4638      	mov	r0, r7
 800969e:	f7ff ff6d 	bl	800957c <__ssputs_r>
 80096a2:	3001      	adds	r0, #1
 80096a4:	f000 80aa 	beq.w	80097fc <_svfiprintf_r+0x1c8>
 80096a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096aa:	445a      	add	r2, fp
 80096ac:	9209      	str	r2, [sp, #36]	; 0x24
 80096ae:	f89a 3000 	ldrb.w	r3, [sl]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80a2 	beq.w	80097fc <_svfiprintf_r+0x1c8>
 80096b8:	2300      	movs	r3, #0
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295
 80096be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c2:	f10a 0a01 	add.w	sl, sl, #1
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	9307      	str	r3, [sp, #28]
 80096ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ce:	931a      	str	r3, [sp, #104]	; 0x68
 80096d0:	4654      	mov	r4, sl
 80096d2:	2205      	movs	r2, #5
 80096d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d8:	4851      	ldr	r0, [pc, #324]	; (8009820 <_svfiprintf_r+0x1ec>)
 80096da:	f7f6 fd89 	bl	80001f0 <memchr>
 80096de:	9a04      	ldr	r2, [sp, #16]
 80096e0:	b9d8      	cbnz	r0, 800971a <_svfiprintf_r+0xe6>
 80096e2:	06d0      	lsls	r0, r2, #27
 80096e4:	bf44      	itt	mi
 80096e6:	2320      	movmi	r3, #32
 80096e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ec:	0711      	lsls	r1, r2, #28
 80096ee:	bf44      	itt	mi
 80096f0:	232b      	movmi	r3, #43	; 0x2b
 80096f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f6:	f89a 3000 	ldrb.w	r3, [sl]
 80096fa:	2b2a      	cmp	r3, #42	; 0x2a
 80096fc:	d015      	beq.n	800972a <_svfiprintf_r+0xf6>
 80096fe:	9a07      	ldr	r2, [sp, #28]
 8009700:	4654      	mov	r4, sl
 8009702:	2000      	movs	r0, #0
 8009704:	f04f 0c0a 	mov.w	ip, #10
 8009708:	4621      	mov	r1, r4
 800970a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800970e:	3b30      	subs	r3, #48	; 0x30
 8009710:	2b09      	cmp	r3, #9
 8009712:	d94e      	bls.n	80097b2 <_svfiprintf_r+0x17e>
 8009714:	b1b0      	cbz	r0, 8009744 <_svfiprintf_r+0x110>
 8009716:	9207      	str	r2, [sp, #28]
 8009718:	e014      	b.n	8009744 <_svfiprintf_r+0x110>
 800971a:	eba0 0308 	sub.w	r3, r0, r8
 800971e:	fa09 f303 	lsl.w	r3, r9, r3
 8009722:	4313      	orrs	r3, r2
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	46a2      	mov	sl, r4
 8009728:	e7d2      	b.n	80096d0 <_svfiprintf_r+0x9c>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	1d19      	adds	r1, r3, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	9103      	str	r1, [sp, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	bfbb      	ittet	lt
 8009736:	425b      	neglt	r3, r3
 8009738:	f042 0202 	orrlt.w	r2, r2, #2
 800973c:	9307      	strge	r3, [sp, #28]
 800973e:	9307      	strlt	r3, [sp, #28]
 8009740:	bfb8      	it	lt
 8009742:	9204      	strlt	r2, [sp, #16]
 8009744:	7823      	ldrb	r3, [r4, #0]
 8009746:	2b2e      	cmp	r3, #46	; 0x2e
 8009748:	d10c      	bne.n	8009764 <_svfiprintf_r+0x130>
 800974a:	7863      	ldrb	r3, [r4, #1]
 800974c:	2b2a      	cmp	r3, #42	; 0x2a
 800974e:	d135      	bne.n	80097bc <_svfiprintf_r+0x188>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	1d1a      	adds	r2, r3, #4
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	9203      	str	r2, [sp, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfb8      	it	lt
 800975c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009760:	3402      	adds	r4, #2
 8009762:	9305      	str	r3, [sp, #20]
 8009764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009830 <_svfiprintf_r+0x1fc>
 8009768:	7821      	ldrb	r1, [r4, #0]
 800976a:	2203      	movs	r2, #3
 800976c:	4650      	mov	r0, sl
 800976e:	f7f6 fd3f 	bl	80001f0 <memchr>
 8009772:	b140      	cbz	r0, 8009786 <_svfiprintf_r+0x152>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	eba0 000a 	sub.w	r0, r0, sl
 800977a:	fa03 f000 	lsl.w	r0, r3, r0
 800977e:	9b04      	ldr	r3, [sp, #16]
 8009780:	4303      	orrs	r3, r0
 8009782:	3401      	adds	r4, #1
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	4826      	ldr	r0, [pc, #152]	; (8009824 <_svfiprintf_r+0x1f0>)
 800978c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009790:	2206      	movs	r2, #6
 8009792:	f7f6 fd2d 	bl	80001f0 <memchr>
 8009796:	2800      	cmp	r0, #0
 8009798:	d038      	beq.n	800980c <_svfiprintf_r+0x1d8>
 800979a:	4b23      	ldr	r3, [pc, #140]	; (8009828 <_svfiprintf_r+0x1f4>)
 800979c:	bb1b      	cbnz	r3, 80097e6 <_svfiprintf_r+0x1b2>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	3307      	adds	r3, #7
 80097a2:	f023 0307 	bic.w	r3, r3, #7
 80097a6:	3308      	adds	r3, #8
 80097a8:	9303      	str	r3, [sp, #12]
 80097aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ac:	4433      	add	r3, r6
 80097ae:	9309      	str	r3, [sp, #36]	; 0x24
 80097b0:	e767      	b.n	8009682 <_svfiprintf_r+0x4e>
 80097b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097b6:	460c      	mov	r4, r1
 80097b8:	2001      	movs	r0, #1
 80097ba:	e7a5      	b.n	8009708 <_svfiprintf_r+0xd4>
 80097bc:	2300      	movs	r3, #0
 80097be:	3401      	adds	r4, #1
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	4619      	mov	r1, r3
 80097c4:	f04f 0c0a 	mov.w	ip, #10
 80097c8:	4620      	mov	r0, r4
 80097ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ce:	3a30      	subs	r2, #48	; 0x30
 80097d0:	2a09      	cmp	r2, #9
 80097d2:	d903      	bls.n	80097dc <_svfiprintf_r+0x1a8>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0c5      	beq.n	8009764 <_svfiprintf_r+0x130>
 80097d8:	9105      	str	r1, [sp, #20]
 80097da:	e7c3      	b.n	8009764 <_svfiprintf_r+0x130>
 80097dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e0:	4604      	mov	r4, r0
 80097e2:	2301      	movs	r3, #1
 80097e4:	e7f0      	b.n	80097c8 <_svfiprintf_r+0x194>
 80097e6:	ab03      	add	r3, sp, #12
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	462a      	mov	r2, r5
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <_svfiprintf_r+0x1f8>)
 80097ee:	a904      	add	r1, sp, #16
 80097f0:	4638      	mov	r0, r7
 80097f2:	f3af 8000 	nop.w
 80097f6:	1c42      	adds	r2, r0, #1
 80097f8:	4606      	mov	r6, r0
 80097fa:	d1d6      	bne.n	80097aa <_svfiprintf_r+0x176>
 80097fc:	89ab      	ldrh	r3, [r5, #12]
 80097fe:	065b      	lsls	r3, r3, #25
 8009800:	f53f af2c 	bmi.w	800965c <_svfiprintf_r+0x28>
 8009804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009806:	b01d      	add	sp, #116	; 0x74
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	ab03      	add	r3, sp, #12
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	462a      	mov	r2, r5
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <_svfiprintf_r+0x1f8>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	4638      	mov	r0, r7
 8009818:	f000 f87a 	bl	8009910 <_printf_i>
 800981c:	e7eb      	b.n	80097f6 <_svfiprintf_r+0x1c2>
 800981e:	bf00      	nop
 8009820:	08009f55 	.word	0x08009f55
 8009824:	08009f5f 	.word	0x08009f5f
 8009828:	00000000 	.word	0x00000000
 800982c:	0800957d 	.word	0x0800957d
 8009830:	08009f5b 	.word	0x08009f5b

08009834 <_printf_common>:
 8009834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	4616      	mov	r6, r2
 800983a:	4699      	mov	r9, r3
 800983c:	688a      	ldr	r2, [r1, #8]
 800983e:	690b      	ldr	r3, [r1, #16]
 8009840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009844:	4293      	cmp	r3, r2
 8009846:	bfb8      	it	lt
 8009848:	4613      	movlt	r3, r2
 800984a:	6033      	str	r3, [r6, #0]
 800984c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009850:	4607      	mov	r7, r0
 8009852:	460c      	mov	r4, r1
 8009854:	b10a      	cbz	r2, 800985a <_printf_common+0x26>
 8009856:	3301      	adds	r3, #1
 8009858:	6033      	str	r3, [r6, #0]
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	0699      	lsls	r1, r3, #26
 800985e:	bf42      	ittt	mi
 8009860:	6833      	ldrmi	r3, [r6, #0]
 8009862:	3302      	addmi	r3, #2
 8009864:	6033      	strmi	r3, [r6, #0]
 8009866:	6825      	ldr	r5, [r4, #0]
 8009868:	f015 0506 	ands.w	r5, r5, #6
 800986c:	d106      	bne.n	800987c <_printf_common+0x48>
 800986e:	f104 0a19 	add.w	sl, r4, #25
 8009872:	68e3      	ldr	r3, [r4, #12]
 8009874:	6832      	ldr	r2, [r6, #0]
 8009876:	1a9b      	subs	r3, r3, r2
 8009878:	42ab      	cmp	r3, r5
 800987a:	dc26      	bgt.n	80098ca <_printf_common+0x96>
 800987c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009880:	1e13      	subs	r3, r2, #0
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	bf18      	it	ne
 8009886:	2301      	movne	r3, #1
 8009888:	0692      	lsls	r2, r2, #26
 800988a:	d42b      	bmi.n	80098e4 <_printf_common+0xb0>
 800988c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009890:	4649      	mov	r1, r9
 8009892:	4638      	mov	r0, r7
 8009894:	47c0      	blx	r8
 8009896:	3001      	adds	r0, #1
 8009898:	d01e      	beq.n	80098d8 <_printf_common+0xa4>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	68e5      	ldr	r5, [r4, #12]
 800989e:	6832      	ldr	r2, [r6, #0]
 80098a0:	f003 0306 	and.w	r3, r3, #6
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	bf08      	it	eq
 80098a8:	1aad      	subeq	r5, r5, r2
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	6922      	ldr	r2, [r4, #16]
 80098ae:	bf0c      	ite	eq
 80098b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b4:	2500      	movne	r5, #0
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bfc4      	itt	gt
 80098ba:	1a9b      	subgt	r3, r3, r2
 80098bc:	18ed      	addgt	r5, r5, r3
 80098be:	2600      	movs	r6, #0
 80098c0:	341a      	adds	r4, #26
 80098c2:	42b5      	cmp	r5, r6
 80098c4:	d11a      	bne.n	80098fc <_printf_common+0xc8>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e008      	b.n	80098dc <_printf_common+0xa8>
 80098ca:	2301      	movs	r3, #1
 80098cc:	4652      	mov	r2, sl
 80098ce:	4649      	mov	r1, r9
 80098d0:	4638      	mov	r0, r7
 80098d2:	47c0      	blx	r8
 80098d4:	3001      	adds	r0, #1
 80098d6:	d103      	bne.n	80098e0 <_printf_common+0xac>
 80098d8:	f04f 30ff 	mov.w	r0, #4294967295
 80098dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e0:	3501      	adds	r5, #1
 80098e2:	e7c6      	b.n	8009872 <_printf_common+0x3e>
 80098e4:	18e1      	adds	r1, r4, r3
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	2030      	movs	r0, #48	; 0x30
 80098ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ee:	4422      	add	r2, r4
 80098f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098f8:	3302      	adds	r3, #2
 80098fa:	e7c7      	b.n	800988c <_printf_common+0x58>
 80098fc:	2301      	movs	r3, #1
 80098fe:	4622      	mov	r2, r4
 8009900:	4649      	mov	r1, r9
 8009902:	4638      	mov	r0, r7
 8009904:	47c0      	blx	r8
 8009906:	3001      	adds	r0, #1
 8009908:	d0e6      	beq.n	80098d8 <_printf_common+0xa4>
 800990a:	3601      	adds	r6, #1
 800990c:	e7d9      	b.n	80098c2 <_printf_common+0x8e>
	...

08009910 <_printf_i>:
 8009910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009914:	7e0f      	ldrb	r7, [r1, #24]
 8009916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009918:	2f78      	cmp	r7, #120	; 0x78
 800991a:	4691      	mov	r9, r2
 800991c:	4680      	mov	r8, r0
 800991e:	460c      	mov	r4, r1
 8009920:	469a      	mov	sl, r3
 8009922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009926:	d807      	bhi.n	8009938 <_printf_i+0x28>
 8009928:	2f62      	cmp	r7, #98	; 0x62
 800992a:	d80a      	bhi.n	8009942 <_printf_i+0x32>
 800992c:	2f00      	cmp	r7, #0
 800992e:	f000 80d8 	beq.w	8009ae2 <_printf_i+0x1d2>
 8009932:	2f58      	cmp	r7, #88	; 0x58
 8009934:	f000 80a3 	beq.w	8009a7e <_printf_i+0x16e>
 8009938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800993c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009940:	e03a      	b.n	80099b8 <_printf_i+0xa8>
 8009942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009946:	2b15      	cmp	r3, #21
 8009948:	d8f6      	bhi.n	8009938 <_printf_i+0x28>
 800994a:	a101      	add	r1, pc, #4	; (adr r1, 8009950 <_printf_i+0x40>)
 800994c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009950:	080099a9 	.word	0x080099a9
 8009954:	080099bd 	.word	0x080099bd
 8009958:	08009939 	.word	0x08009939
 800995c:	08009939 	.word	0x08009939
 8009960:	08009939 	.word	0x08009939
 8009964:	08009939 	.word	0x08009939
 8009968:	080099bd 	.word	0x080099bd
 800996c:	08009939 	.word	0x08009939
 8009970:	08009939 	.word	0x08009939
 8009974:	08009939 	.word	0x08009939
 8009978:	08009939 	.word	0x08009939
 800997c:	08009ac9 	.word	0x08009ac9
 8009980:	080099ed 	.word	0x080099ed
 8009984:	08009aab 	.word	0x08009aab
 8009988:	08009939 	.word	0x08009939
 800998c:	08009939 	.word	0x08009939
 8009990:	08009aeb 	.word	0x08009aeb
 8009994:	08009939 	.word	0x08009939
 8009998:	080099ed 	.word	0x080099ed
 800999c:	08009939 	.word	0x08009939
 80099a0:	08009939 	.word	0x08009939
 80099a4:	08009ab3 	.word	0x08009ab3
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	1d1a      	adds	r2, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	602a      	str	r2, [r5, #0]
 80099b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b8:	2301      	movs	r3, #1
 80099ba:	e0a3      	b.n	8009b04 <_printf_i+0x1f4>
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	6829      	ldr	r1, [r5, #0]
 80099c0:	0606      	lsls	r6, r0, #24
 80099c2:	f101 0304 	add.w	r3, r1, #4
 80099c6:	d50a      	bpl.n	80099de <_printf_i+0xce>
 80099c8:	680e      	ldr	r6, [r1, #0]
 80099ca:	602b      	str	r3, [r5, #0]
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	da03      	bge.n	80099d8 <_printf_i+0xc8>
 80099d0:	232d      	movs	r3, #45	; 0x2d
 80099d2:	4276      	negs	r6, r6
 80099d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d8:	485e      	ldr	r0, [pc, #376]	; (8009b54 <_printf_i+0x244>)
 80099da:	230a      	movs	r3, #10
 80099dc:	e019      	b.n	8009a12 <_printf_i+0x102>
 80099de:	680e      	ldr	r6, [r1, #0]
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099e6:	bf18      	it	ne
 80099e8:	b236      	sxthne	r6, r6
 80099ea:	e7ef      	b.n	80099cc <_printf_i+0xbc>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	1d19      	adds	r1, r3, #4
 80099f2:	6029      	str	r1, [r5, #0]
 80099f4:	0601      	lsls	r1, r0, #24
 80099f6:	d501      	bpl.n	80099fc <_printf_i+0xec>
 80099f8:	681e      	ldr	r6, [r3, #0]
 80099fa:	e002      	b.n	8009a02 <_printf_i+0xf2>
 80099fc:	0646      	lsls	r6, r0, #25
 80099fe:	d5fb      	bpl.n	80099f8 <_printf_i+0xe8>
 8009a00:	881e      	ldrh	r6, [r3, #0]
 8009a02:	4854      	ldr	r0, [pc, #336]	; (8009b54 <_printf_i+0x244>)
 8009a04:	2f6f      	cmp	r7, #111	; 0x6f
 8009a06:	bf0c      	ite	eq
 8009a08:	2308      	moveq	r3, #8
 8009a0a:	230a      	movne	r3, #10
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a12:	6865      	ldr	r5, [r4, #4]
 8009a14:	60a5      	str	r5, [r4, #8]
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	bfa2      	ittt	ge
 8009a1a:	6821      	ldrge	r1, [r4, #0]
 8009a1c:	f021 0104 	bicge.w	r1, r1, #4
 8009a20:	6021      	strge	r1, [r4, #0]
 8009a22:	b90e      	cbnz	r6, 8009a28 <_printf_i+0x118>
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	d04d      	beq.n	8009ac4 <_printf_i+0x1b4>
 8009a28:	4615      	mov	r5, r2
 8009a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a32:	5dc7      	ldrb	r7, [r0, r7]
 8009a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a38:	4637      	mov	r7, r6
 8009a3a:	42bb      	cmp	r3, r7
 8009a3c:	460e      	mov	r6, r1
 8009a3e:	d9f4      	bls.n	8009a2a <_printf_i+0x11a>
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d10b      	bne.n	8009a5c <_printf_i+0x14c>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	07de      	lsls	r6, r3, #31
 8009a48:	d508      	bpl.n	8009a5c <_printf_i+0x14c>
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	6861      	ldr	r1, [r4, #4]
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	bfde      	ittt	le
 8009a52:	2330      	movle	r3, #48	; 0x30
 8009a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a5c:	1b52      	subs	r2, r2, r5
 8009a5e:	6122      	str	r2, [r4, #16]
 8009a60:	f8cd a000 	str.w	sl, [sp]
 8009a64:	464b      	mov	r3, r9
 8009a66:	aa03      	add	r2, sp, #12
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f7ff fee2 	bl	8009834 <_printf_common>
 8009a70:	3001      	adds	r0, #1
 8009a72:	d14c      	bne.n	8009b0e <_printf_i+0x1fe>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	b004      	add	sp, #16
 8009a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7e:	4835      	ldr	r0, [pc, #212]	; (8009b54 <_printf_i+0x244>)
 8009a80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a84:	6829      	ldr	r1, [r5, #0]
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a8c:	6029      	str	r1, [r5, #0]
 8009a8e:	061d      	lsls	r5, r3, #24
 8009a90:	d514      	bpl.n	8009abc <_printf_i+0x1ac>
 8009a92:	07df      	lsls	r7, r3, #31
 8009a94:	bf44      	itt	mi
 8009a96:	f043 0320 	orrmi.w	r3, r3, #32
 8009a9a:	6023      	strmi	r3, [r4, #0]
 8009a9c:	b91e      	cbnz	r6, 8009aa6 <_printf_i+0x196>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	f023 0320 	bic.w	r3, r3, #32
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	2310      	movs	r3, #16
 8009aa8:	e7b0      	b.n	8009a0c <_printf_i+0xfc>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	f043 0320 	orr.w	r3, r3, #32
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	2378      	movs	r3, #120	; 0x78
 8009ab4:	4828      	ldr	r0, [pc, #160]	; (8009b58 <_printf_i+0x248>)
 8009ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aba:	e7e3      	b.n	8009a84 <_printf_i+0x174>
 8009abc:	0659      	lsls	r1, r3, #25
 8009abe:	bf48      	it	mi
 8009ac0:	b2b6      	uxthmi	r6, r6
 8009ac2:	e7e6      	b.n	8009a92 <_printf_i+0x182>
 8009ac4:	4615      	mov	r5, r2
 8009ac6:	e7bb      	b.n	8009a40 <_printf_i+0x130>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	6826      	ldr	r6, [r4, #0]
 8009acc:	6961      	ldr	r1, [r4, #20]
 8009ace:	1d18      	adds	r0, r3, #4
 8009ad0:	6028      	str	r0, [r5, #0]
 8009ad2:	0635      	lsls	r5, r6, #24
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	d501      	bpl.n	8009adc <_printf_i+0x1cc>
 8009ad8:	6019      	str	r1, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <_printf_i+0x1d2>
 8009adc:	0670      	lsls	r0, r6, #25
 8009ade:	d5fb      	bpl.n	8009ad8 <_printf_i+0x1c8>
 8009ae0:	8019      	strh	r1, [r3, #0]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6123      	str	r3, [r4, #16]
 8009ae6:	4615      	mov	r5, r2
 8009ae8:	e7ba      	b.n	8009a60 <_printf_i+0x150>
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	602a      	str	r2, [r5, #0]
 8009af0:	681d      	ldr	r5, [r3, #0]
 8009af2:	6862      	ldr	r2, [r4, #4]
 8009af4:	2100      	movs	r1, #0
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7f6 fb7a 	bl	80001f0 <memchr>
 8009afc:	b108      	cbz	r0, 8009b02 <_printf_i+0x1f2>
 8009afe:	1b40      	subs	r0, r0, r5
 8009b00:	6060      	str	r0, [r4, #4]
 8009b02:	6863      	ldr	r3, [r4, #4]
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	2300      	movs	r3, #0
 8009b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b0c:	e7a8      	b.n	8009a60 <_printf_i+0x150>
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4649      	mov	r1, r9
 8009b14:	4640      	mov	r0, r8
 8009b16:	47d0      	blx	sl
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d0ab      	beq.n	8009a74 <_printf_i+0x164>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	079b      	lsls	r3, r3, #30
 8009b20:	d413      	bmi.n	8009b4a <_printf_i+0x23a>
 8009b22:	68e0      	ldr	r0, [r4, #12]
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	4298      	cmp	r0, r3
 8009b28:	bfb8      	it	lt
 8009b2a:	4618      	movlt	r0, r3
 8009b2c:	e7a4      	b.n	8009a78 <_printf_i+0x168>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4632      	mov	r2, r6
 8009b32:	4649      	mov	r1, r9
 8009b34:	4640      	mov	r0, r8
 8009b36:	47d0      	blx	sl
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d09b      	beq.n	8009a74 <_printf_i+0x164>
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	9903      	ldr	r1, [sp, #12]
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	42ab      	cmp	r3, r5
 8009b46:	dcf2      	bgt.n	8009b2e <_printf_i+0x21e>
 8009b48:	e7eb      	b.n	8009b22 <_printf_i+0x212>
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	f104 0619 	add.w	r6, r4, #25
 8009b50:	e7f5      	b.n	8009b3e <_printf_i+0x22e>
 8009b52:	bf00      	nop
 8009b54:	08009f66 	.word	0x08009f66
 8009b58:	08009f77 	.word	0x08009f77

08009b5c <memmove>:
 8009b5c:	4288      	cmp	r0, r1
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	eb01 0402 	add.w	r4, r1, r2
 8009b64:	d902      	bls.n	8009b6c <memmove+0x10>
 8009b66:	4284      	cmp	r4, r0
 8009b68:	4623      	mov	r3, r4
 8009b6a:	d807      	bhi.n	8009b7c <memmove+0x20>
 8009b6c:	1e43      	subs	r3, r0, #1
 8009b6e:	42a1      	cmp	r1, r4
 8009b70:	d008      	beq.n	8009b84 <memmove+0x28>
 8009b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b7a:	e7f8      	b.n	8009b6e <memmove+0x12>
 8009b7c:	4402      	add	r2, r0
 8009b7e:	4601      	mov	r1, r0
 8009b80:	428a      	cmp	r2, r1
 8009b82:	d100      	bne.n	8009b86 <memmove+0x2a>
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b8e:	e7f7      	b.n	8009b80 <memmove+0x24>

08009b90 <_free_r>:
 8009b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d044      	beq.n	8009c20 <_free_r+0x90>
 8009b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9a:	9001      	str	r0, [sp, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009ba2:	bfb8      	it	lt
 8009ba4:	18e4      	addlt	r4, r4, r3
 8009ba6:	f000 f913 	bl	8009dd0 <__malloc_lock>
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <_free_r+0x94>)
 8009bac:	9801      	ldr	r0, [sp, #4]
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	b933      	cbnz	r3, 8009bc0 <_free_r+0x30>
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	6014      	str	r4, [r2, #0]
 8009bb6:	b003      	add	sp, #12
 8009bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bbc:	f000 b90e 	b.w	8009ddc <__malloc_unlock>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d908      	bls.n	8009bd6 <_free_r+0x46>
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1961      	adds	r1, r4, r5
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	bf01      	itttt	eq
 8009bcc:	6819      	ldreq	r1, [r3, #0]
 8009bce:	685b      	ldreq	r3, [r3, #4]
 8009bd0:	1949      	addeq	r1, r1, r5
 8009bd2:	6021      	streq	r1, [r4, #0]
 8009bd4:	e7ed      	b.n	8009bb2 <_free_r+0x22>
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	b10b      	cbz	r3, 8009be0 <_free_r+0x50>
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	d9fa      	bls.n	8009bd6 <_free_r+0x46>
 8009be0:	6811      	ldr	r1, [r2, #0]
 8009be2:	1855      	adds	r5, r2, r1
 8009be4:	42a5      	cmp	r5, r4
 8009be6:	d10b      	bne.n	8009c00 <_free_r+0x70>
 8009be8:	6824      	ldr	r4, [r4, #0]
 8009bea:	4421      	add	r1, r4
 8009bec:	1854      	adds	r4, r2, r1
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	6011      	str	r1, [r2, #0]
 8009bf2:	d1e0      	bne.n	8009bb6 <_free_r+0x26>
 8009bf4:	681c      	ldr	r4, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	6053      	str	r3, [r2, #4]
 8009bfa:	4421      	add	r1, r4
 8009bfc:	6011      	str	r1, [r2, #0]
 8009bfe:	e7da      	b.n	8009bb6 <_free_r+0x26>
 8009c00:	d902      	bls.n	8009c08 <_free_r+0x78>
 8009c02:	230c      	movs	r3, #12
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	e7d6      	b.n	8009bb6 <_free_r+0x26>
 8009c08:	6825      	ldr	r5, [r4, #0]
 8009c0a:	1961      	adds	r1, r4, r5
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf04      	itt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	bf04      	itt	eq
 8009c18:	1949      	addeq	r1, r1, r5
 8009c1a:	6021      	streq	r1, [r4, #0]
 8009c1c:	6054      	str	r4, [r2, #4]
 8009c1e:	e7ca      	b.n	8009bb6 <_free_r+0x26>
 8009c20:	b003      	add	sp, #12
 8009c22:	bd30      	pop	{r4, r5, pc}
 8009c24:	20000520 	.word	0x20000520

08009c28 <sbrk_aligned>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4e0e      	ldr	r6, [pc, #56]	; (8009c64 <sbrk_aligned+0x3c>)
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	6831      	ldr	r1, [r6, #0]
 8009c30:	4605      	mov	r5, r0
 8009c32:	b911      	cbnz	r1, 8009c3a <sbrk_aligned+0x12>
 8009c34:	f000 f8bc 	bl	8009db0 <_sbrk_r>
 8009c38:	6030      	str	r0, [r6, #0]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 f8b7 	bl	8009db0 <_sbrk_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d00a      	beq.n	8009c5c <sbrk_aligned+0x34>
 8009c46:	1cc4      	adds	r4, r0, #3
 8009c48:	f024 0403 	bic.w	r4, r4, #3
 8009c4c:	42a0      	cmp	r0, r4
 8009c4e:	d007      	beq.n	8009c60 <sbrk_aligned+0x38>
 8009c50:	1a21      	subs	r1, r4, r0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 f8ac 	bl	8009db0 <_sbrk_r>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d101      	bne.n	8009c60 <sbrk_aligned+0x38>
 8009c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c60:	4620      	mov	r0, r4
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	20000524 	.word	0x20000524

08009c68 <_malloc_r>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	1ccd      	adds	r5, r1, #3
 8009c6e:	f025 0503 	bic.w	r5, r5, #3
 8009c72:	3508      	adds	r5, #8
 8009c74:	2d0c      	cmp	r5, #12
 8009c76:	bf38      	it	cc
 8009c78:	250c      	movcc	r5, #12
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	db01      	blt.n	8009c84 <_malloc_r+0x1c>
 8009c80:	42a9      	cmp	r1, r5
 8009c82:	d905      	bls.n	8009c90 <_malloc_r+0x28>
 8009c84:	230c      	movs	r3, #12
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	2600      	movs	r6, #0
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	4e2e      	ldr	r6, [pc, #184]	; (8009d4c <_malloc_r+0xe4>)
 8009c92:	f000 f89d 	bl	8009dd0 <__malloc_lock>
 8009c96:	6833      	ldr	r3, [r6, #0]
 8009c98:	461c      	mov	r4, r3
 8009c9a:	bb34      	cbnz	r4, 8009cea <_malloc_r+0x82>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7ff ffc2 	bl	8009c28 <sbrk_aligned>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	d14d      	bne.n	8009d46 <_malloc_r+0xde>
 8009caa:	6834      	ldr	r4, [r6, #0]
 8009cac:	4626      	mov	r6, r4
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d140      	bne.n	8009d34 <_malloc_r+0xcc>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	eb04 0803 	add.w	r8, r4, r3
 8009cbc:	f000 f878 	bl	8009db0 <_sbrk_r>
 8009cc0:	4580      	cmp	r8, r0
 8009cc2:	d13a      	bne.n	8009d3a <_malloc_r+0xd2>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	3503      	adds	r5, #3
 8009cc8:	1a6d      	subs	r5, r5, r1
 8009cca:	f025 0503 	bic.w	r5, r5, #3
 8009cce:	3508      	adds	r5, #8
 8009cd0:	2d0c      	cmp	r5, #12
 8009cd2:	bf38      	it	cc
 8009cd4:	250c      	movcc	r5, #12
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff ffa5 	bl	8009c28 <sbrk_aligned>
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d02b      	beq.n	8009d3a <_malloc_r+0xd2>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	442b      	add	r3, r5
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e00e      	b.n	8009d08 <_malloc_r+0xa0>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	d41e      	bmi.n	8009d2e <_malloc_r+0xc6>
 8009cf0:	2a0b      	cmp	r2, #11
 8009cf2:	d916      	bls.n	8009d22 <_malloc_r+0xba>
 8009cf4:	1961      	adds	r1, r4, r5
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	6025      	str	r5, [r4, #0]
 8009cfa:	bf18      	it	ne
 8009cfc:	6059      	strne	r1, [r3, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	bf08      	it	eq
 8009d02:	6031      	streq	r1, [r6, #0]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f104 060b 	add.w	r6, r4, #11
 8009d0e:	f000 f865 	bl	8009ddc <__malloc_unlock>
 8009d12:	f026 0607 	bic.w	r6, r6, #7
 8009d16:	1d23      	adds	r3, r4, #4
 8009d18:	1af2      	subs	r2, r6, r3
 8009d1a:	d0b6      	beq.n	8009c8a <_malloc_r+0x22>
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	50a3      	str	r3, [r4, r2]
 8009d20:	e7b3      	b.n	8009c8a <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	6032      	streq	r2, [r6, #0]
 8009d2a:	605a      	strne	r2, [r3, #4]
 8009d2c:	e7ec      	b.n	8009d08 <_malloc_r+0xa0>
 8009d2e:	4623      	mov	r3, r4
 8009d30:	6864      	ldr	r4, [r4, #4]
 8009d32:	e7b2      	b.n	8009c9a <_malloc_r+0x32>
 8009d34:	4634      	mov	r4, r6
 8009d36:	6876      	ldr	r6, [r6, #4]
 8009d38:	e7b9      	b.n	8009cae <_malloc_r+0x46>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f000 f84c 	bl	8009ddc <__malloc_unlock>
 8009d44:	e7a1      	b.n	8009c8a <_malloc_r+0x22>
 8009d46:	6025      	str	r5, [r4, #0]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa0>
 8009d4a:	bf00      	nop
 8009d4c:	20000520 	.word	0x20000520

08009d50 <_realloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	4680      	mov	r8, r0
 8009d56:	4614      	mov	r4, r2
 8009d58:	460e      	mov	r6, r1
 8009d5a:	b921      	cbnz	r1, 8009d66 <_realloc_r+0x16>
 8009d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	4611      	mov	r1, r2
 8009d62:	f7ff bf81 	b.w	8009c68 <_malloc_r>
 8009d66:	b92a      	cbnz	r2, 8009d74 <_realloc_r+0x24>
 8009d68:	f7ff ff12 	bl	8009b90 <_free_r>
 8009d6c:	4625      	mov	r5, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	f000 f838 	bl	8009de8 <_malloc_usable_size_r>
 8009d78:	4284      	cmp	r4, r0
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	d802      	bhi.n	8009d84 <_realloc_r+0x34>
 8009d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d82:	d812      	bhi.n	8009daa <_realloc_r+0x5a>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7ff ff6e 	bl	8009c68 <_malloc_r>
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0ed      	beq.n	8009d6e <_realloc_r+0x1e>
 8009d92:	42bc      	cmp	r4, r7
 8009d94:	4622      	mov	r2, r4
 8009d96:	4631      	mov	r1, r6
 8009d98:	bf28      	it	cs
 8009d9a:	463a      	movcs	r2, r7
 8009d9c:	f7ff fb24 	bl	80093e8 <memcpy>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7ff fef4 	bl	8009b90 <_free_r>
 8009da8:	e7e1      	b.n	8009d6e <_realloc_r+0x1e>
 8009daa:	4635      	mov	r5, r6
 8009dac:	e7df      	b.n	8009d6e <_realloc_r+0x1e>
	...

08009db0 <_sbrk_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_sbrk_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f9 fad6 	bl	800336c <_sbrk>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_sbrk_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_sbrk_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	20000528 	.word	0x20000528

08009dd0 <__malloc_lock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__malloc_lock+0x8>)
 8009dd2:	f000 b811 	b.w	8009df8 <__retarget_lock_acquire_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	2000052c 	.word	0x2000052c

08009ddc <__malloc_unlock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__malloc_unlock+0x8>)
 8009dde:	f000 b80c 	b.w	8009dfa <__retarget_lock_release_recursive>
 8009de2:	bf00      	nop
 8009de4:	2000052c 	.word	0x2000052c

08009de8 <_malloc_usable_size_r>:
 8009de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dec:	1f18      	subs	r0, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bfbc      	itt	lt
 8009df2:	580b      	ldrlt	r3, [r1, r0]
 8009df4:	18c0      	addlt	r0, r0, r3
 8009df6:	4770      	bx	lr

08009df8 <__retarget_lock_acquire_recursive>:
 8009df8:	4770      	bx	lr

08009dfa <__retarget_lock_release_recursive>:
 8009dfa:	4770      	bx	lr

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
