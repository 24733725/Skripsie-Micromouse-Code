
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad4c  0800ad4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad54  0800ad54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad58  0800ad58  0001ad58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ad5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000070  0800adcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800adcc  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001647b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8a  00000000  00000000  0003651b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0a8  00000000  00000000  0003b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a004  00000000  00000000  00055858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0760  00000000  00000000  0006f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ffbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c4  00000000  00000000  0011000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab6c 	.word	0x0800ab6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800ab6c 	.word	0x0800ab6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R
extern TIM_HandleTypeDef htim11;

void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2c      	ldr	r4, [pc, #176]	; (8000e38 <TOF_init+0xb8>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f009 f9e1 	bl	800a158 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f857 	bl	8000e4c <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c27      	ldr	r4, [pc, #156]	; (8000e3c <TOF_init+0xbc>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f009 f9d5 	bl	800a158 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f84b 	bl	8000e4c <writeMM>
	writeMM(hi2c3);
 8000db6:	4c22      	ldr	r4, [pc, #136]	; (8000e40 <TOF_init+0xc0>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f009 f9c9 	bl	800a158 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f83f 	bl	8000e4c <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <TOF_init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f003 fafb 	bl	80043d0 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <TOF_init+0xc4>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <TOF_init+0xbc>)
 8000df0:	f004 fa32 	bl	8005258 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <TOF_init+0xc4>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <TOF_init+0xb8>)
 8000e0a:	f004 fa25 	bl	8005258 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <TOF_init+0xc4>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <TOF_init+0xc0>)
 8000e24:	f004 fa18 	bl	8005258 <HAL_I2C_Mem_Write>

	HAL_TIM_Base_Start_IT(&htim11);
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <TOF_init+0xc8>)
 8000e2a:	f007 f8a7 	bl	8007f7c <HAL_TIM_Base_Start_IT>
}
 8000e2e:	bf00      	nop
 8000e30:	3704      	adds	r7, #4
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000210 	.word	0x20000210
 8000e3c:	20000264 	.word	0x20000264
 8000e40:	200002b8 	.word	0x200002b8
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	20000484 	.word	0x20000484

08000e4c <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af04      	add	r7, sp, #16
 8000e54:	f107 0c08 	add.w	ip, r7, #8
 8000e58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e5c:	4bcb      	ldr	r3, [pc, #812]	; (800118c <writeMM+0x340>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	4bc7      	ldr	r3, [pc, #796]	; (800118c <writeMM+0x340>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2310      	movs	r3, #16
 8000e72:	f240 2207 	movw	r2, #519	; 0x207
 8000e76:	2152      	movs	r1, #82	; 0x52
 8000e78:	f107 0008 	add.w	r0, r7, #8
 8000e7c:	f004 f9ec 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f003 faa5 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e86:	4bc1      	ldr	r3, [pc, #772]	; (800118c <writeMM+0x340>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2301      	movs	r3, #1
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4bbd      	ldr	r3, [pc, #756]	; (800118c <writeMM+0x340>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000ea0:	2152      	movs	r1, #82	; 0x52
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f004 f9d7 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f003 fa90 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000eb0:	4bb6      	ldr	r3, [pc, #728]	; (800118c <writeMM+0x340>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4bb2      	ldr	r3, [pc, #712]	; (800118c <writeMM+0x340>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	2296      	movs	r2, #150	; 0x96
 8000ec8:	2152      	movs	r1, #82	; 0x52
 8000eca:	f107 0008 	add.w	r0, r7, #8
 8000ece:	f004 f9c3 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f003 fa7c 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ed8:	4bac      	ldr	r3, [pc, #688]	; (800118c <writeMM+0x340>)
 8000eda:	22fd      	movs	r2, #253	; 0xfd
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	4ba8      	ldr	r3, [pc, #672]	; (800118c <writeMM+0x340>)
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	2297      	movs	r2, #151	; 0x97
 8000ef0:	2152      	movs	r1, #82	; 0x52
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	f004 f9af 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f003 fa68 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000f00:	4ba2      	ldr	r3, [pc, #648]	; (800118c <writeMM+0x340>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b9e      	ldr	r3, [pc, #632]	; (800118c <writeMM+0x340>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2310      	movs	r3, #16
 8000f16:	22e3      	movs	r2, #227	; 0xe3
 8000f18:	2152      	movs	r1, #82	; 0x52
 8000f1a:	f107 0008 	add.w	r0, r7, #8
 8000f1e:	f004 f99b 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f003 fa54 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f28:	4b98      	ldr	r3, [pc, #608]	; (800118c <writeMM+0x340>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <writeMM+0x340>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	22e4      	movs	r2, #228	; 0xe4
 8000f40:	2152      	movs	r1, #82	; 0x52
 8000f42:	f107 0008 	add.w	r0, r7, #8
 8000f46:	f004 f987 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f003 fa40 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <writeMM+0x340>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <writeMM+0x340>)
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2310      	movs	r3, #16
 8000f66:	22e5      	movs	r2, #229	; 0xe5
 8000f68:	2152      	movs	r1, #82	; 0x52
 8000f6a:	f107 0008 	add.w	r0, r7, #8
 8000f6e:	f004 f973 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f003 fa2c 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <writeMM+0x340>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <writeMM+0x340>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	22e6      	movs	r2, #230	; 0xe6
 8000f90:	2152      	movs	r1, #82	; 0x52
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	f004 f95f 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f003 fa18 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <writeMM+0x340>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <writeMM+0x340>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	22e7      	movs	r2, #231	; 0xe7
 8000fb8:	2152      	movs	r1, #82	; 0x52
 8000fba:	f107 0008 	add.w	r0, r7, #8
 8000fbe:	f004 f94b 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f003 fa04 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fc8:	4b70      	ldr	r3, [pc, #448]	; (800118c <writeMM+0x340>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <writeMM+0x340>)
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	22f5      	movs	r2, #245	; 0xf5
 8000fe0:	2152      	movs	r1, #82	; 0x52
 8000fe2:	f107 0008 	add.w	r0, r7, #8
 8000fe6:	f004 f937 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f003 f9f0 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <writeMM+0x340>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <writeMM+0x340>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2310      	movs	r3, #16
 8001006:	22d9      	movs	r2, #217	; 0xd9
 8001008:	2152      	movs	r1, #82	; 0x52
 800100a:	f107 0008 	add.w	r0, r7, #8
 800100e:	f004 f923 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f003 f9dc 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0xce;
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <writeMM+0x340>)
 800101a:	22ce      	movs	r2, #206	; 0xce
 800101c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <writeMM+0x340>)
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2310      	movs	r3, #16
 800102e:	22db      	movs	r2, #219	; 0xdb
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	f004 f90f 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f003 f9c8 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <writeMM+0x340>)
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <writeMM+0x340>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2310      	movs	r3, #16
 8001056:	22dc      	movs	r2, #220	; 0xdc
 8001058:	2152      	movs	r1, #82	; 0x52
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	f004 f8fb 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 f9b4 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <writeMM+0x340>)
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <writeMM+0x340>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	22dd      	movs	r2, #221	; 0xdd
 8001080:	2152      	movs	r1, #82	; 0x52
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	f004 f8e7 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f003 f9a0 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <writeMM+0x340>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <writeMM+0x340>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2310      	movs	r3, #16
 80010a6:	229f      	movs	r2, #159	; 0x9f
 80010a8:	2152      	movs	r1, #82	; 0x52
 80010aa:	f107 0008 	add.w	r0, r7, #8
 80010ae:	f004 f8d3 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f003 f98c 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <writeMM+0x340>)
 80010ba:	223c      	movs	r2, #60	; 0x3c
 80010bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <writeMM+0x340>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2310      	movs	r3, #16
 80010ce:	22a3      	movs	r2, #163	; 0xa3
 80010d0:	2152      	movs	r1, #82	; 0x52
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	f004 f8bf 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f003 f978 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <writeMM+0x340>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <writeMM+0x340>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2310      	movs	r3, #16
 80010f6:	22b7      	movs	r2, #183	; 0xb7
 80010f8:	2152      	movs	r1, #82	; 0x52
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f004 f8ab 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f003 f964 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <writeMM+0x340>)
 800110a:	223c      	movs	r2, #60	; 0x3c
 800110c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <writeMM+0x340>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2310      	movs	r3, #16
 800111e:	22bb      	movs	r2, #187	; 0xbb
 8001120:	2152      	movs	r1, #82	; 0x52
 8001122:	f107 0008 	add.w	r0, r7, #8
 8001126:	f004 f897 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f003 f950 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <writeMM+0x340>)
 8001132:	2209      	movs	r2, #9
 8001134:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <writeMM+0x340>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2310      	movs	r3, #16
 8001146:	22b2      	movs	r2, #178	; 0xb2
 8001148:	2152      	movs	r1, #82	; 0x52
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	f004 f883 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f003 f93c 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <writeMM+0x340>)
 800115a:	2209      	movs	r2, #9
 800115c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <writeMM+0x340>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2310      	movs	r3, #16
 800116e:	22ca      	movs	r2, #202	; 0xca
 8001170:	2152      	movs	r1, #82	; 0x52
 8001172:	f107 0008 	add.w	r0, r7, #8
 8001176:	f004 f86f 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f003 f928 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <writeMM+0x340>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	e001      	b.n	8001190 <writeMM+0x344>
 800118c:	2000008c 	.word	0x2000008c
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <writeMM+0x574>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2310      	movs	r3, #16
 800119c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80011a0:	2152      	movs	r1, #82	; 0x52
 80011a2:	f107 0008 	add.w	r0, r7, #8
 80011a6:	f004 f857 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f003 f910 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <writeMM+0x574>)
 80011b2:	2217      	movs	r2, #23
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <writeMM+0x574>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2310      	movs	r3, #16
 80011c6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011ca:	2152      	movs	r1, #82	; 0x52
 80011cc:	f107 0008 	add.w	r0, r7, #8
 80011d0:	f004 f842 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f003 f8fb 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <writeMM+0x574>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <writeMM+0x574>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2310      	movs	r3, #16
 80011f0:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011f4:	2152      	movs	r1, #82	; 0x52
 80011f6:	f107 0008 	add.w	r0, r7, #8
 80011fa:	f004 f82d 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f003 f8e6 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <writeMM+0x574>)
 8001206:	2205      	movs	r2, #5
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <writeMM+0x574>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2310      	movs	r3, #16
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	2152      	movs	r1, #82	; 0x52
 800121e:	f107 0008 	add.w	r0, r7, #8
 8001222:	f004 f819 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f003 f8d2 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <writeMM+0x574>)
 800122e:	2205      	movs	r2, #5
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <writeMM+0x574>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2310      	movs	r3, #16
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	2152      	movs	r1, #82	; 0x52
 8001248:	f107 0008 	add.w	r0, r7, #8
 800124c:	f004 f804 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f003 f8bd 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <writeMM+0x574>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <writeMM+0x574>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2310      	movs	r3, #16
 800126c:	f240 1299 	movw	r2, #409	; 0x199
 8001270:	2152      	movs	r1, #82	; 0x52
 8001272:	f107 0008 	add.w	r0, r7, #8
 8001276:	f003 ffef 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f003 f8a8 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <writeMM+0x574>)
 8001282:	221b      	movs	r2, #27
 8001284:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <writeMM+0x574>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800129a:	2152      	movs	r1, #82	; 0x52
 800129c:	f107 0008 	add.w	r0, r7, #8
 80012a0:	f003 ffda 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f003 f893 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <writeMM+0x574>)
 80012ac:	223e      	movs	r2, #62	; 0x3e
 80012ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <writeMM+0x574>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2310      	movs	r3, #16
 80012c0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012c4:	2152      	movs	r1, #82	; 0x52
 80012c6:	f107 0008 	add.w	r0, r7, #8
 80012ca:	f003 ffc5 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f003 f87e 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <writeMM+0x574>)
 80012d6:	221f      	movs	r2, #31
 80012d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <writeMM+0x574>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012ee:	2152      	movs	r1, #82	; 0x52
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f003 ffb0 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f003 f869 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <writeMM+0x574>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <writeMM+0x574>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2310      	movs	r3, #16
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2152      	movs	r1, #82	; 0x52
 8001318:	f107 0008 	add.w	r0, r7, #8
 800131c:	f003 ff9c 	bl	8005258 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f003 f855 	bl	80043d0 <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <writeMM+0x574>)
 8001328:	2210      	movs	r2, #16
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <writeMM+0x574>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2310      	movs	r3, #16
 800133c:	2211      	movs	r2, #17
 800133e:	2152      	movs	r1, #82	; 0x52
 8001340:	f107 0008 	add.w	r0, r7, #8
 8001344:	f003 ff88 	bl	8005258 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 f841 	bl	80043d0 <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <writeMM+0x574>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <writeMM+0x574>)
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2310      	movs	r3, #16
 8001364:	221b      	movs	r2, #27
 8001366:	2152      	movs	r1, #82	; 0x52
 8001368:	f107 0008 	add.w	r0, r7, #8
 800136c:	f003 ff74 	bl	8005258 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <writeMM+0x574>)
 8001372:	220a      	movs	r2, #10
 8001374:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <writeMM+0x574>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2310      	movs	r3, #16
 8001386:	221c      	movs	r2, #28
 8001388:	2152      	movs	r1, #82	; 0x52
 800138a:	f107 0008 	add.w	r0, r7, #8
 800138e:	f003 ff63 	bl	8005258 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <writeMM+0x574>)
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <writeMM+0x574>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2310      	movs	r3, #16
 80013a8:	2214      	movs	r2, #20
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	f107 0008 	add.w	r0, r7, #8
 80013b0:	f003 ff52 	bl	8005258 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	2000008c 	.word	0x2000008c

080013c4 <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <TOF_start_measurement+0x50>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <TOF_start_measurement+0x50>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	2218      	movs	r2, #24
 80013dc:	2152      	movs	r1, #82	; 0x52
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <TOF_start_measurement+0x54>)
 80013e0:	f004 f834 	bl	800544c <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <TOF_start_measurement+0x50>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	2218      	movs	r2, #24
 80013f0:	2152      	movs	r1, #82	; 0x52
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <TOF_start_measurement+0x58>)
 80013f4:	f004 f82a 	bl	800544c <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <TOF_start_measurement+0x50>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2310      	movs	r3, #16
 8001402:	2218      	movs	r2, #24
 8001404:	2152      	movs	r1, #82	; 0x52
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <TOF_start_measurement+0x5c>)
 8001408:	f004 f820 	bl	800544c <HAL_I2C_Mem_Write_IT>
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000008c 	.word	0x2000008c
 8001418:	20000264 	.word	0x20000264
 800141c:	20000210 	.word	0x20000210
 8001420:	200002b8 	.word	0x200002b8

08001424 <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <TOF_get_measurement+0x48>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2310      	movs	r3, #16
 8001434:	2262      	movs	r2, #98	; 0x62
 8001436:	2152      	movs	r1, #82	; 0x52
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <TOF_get_measurement+0x4c>)
 800143a:	f004 f8b9 	bl	80055b0 <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <TOF_get_measurement+0x50>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2310      	movs	r3, #16
 8001448:	2262      	movs	r2, #98	; 0x62
 800144a:	2152      	movs	r1, #82	; 0x52
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <TOF_get_measurement+0x54>)
 800144e:	f004 f8af 	bl	80055b0 <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <TOF_get_measurement+0x58>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2310      	movs	r3, #16
 800145c:	2262      	movs	r2, #98	; 0x62
 800145e:	2152      	movs	r1, #82	; 0x52
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <TOF_get_measurement+0x5c>)
 8001462:	f004 f8a5 	bl	80055b0 <HAL_I2C_Mem_Read_IT>
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000124 	.word	0x20000124
 8001470:	20000264 	.word	0x20000264
 8001474:	20000125 	.word	0x20000125
 8001478:	20000210 	.word	0x20000210
 800147c:	20000126 	.word	0x20000126
 8001480:	200002b8 	.word	0x200002b8

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f002 ff2f 	bl	80042ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f853 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f000 fbef 	bl	8001c74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001496:	f000 f90b 	bl	80016b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800149a:	f000 f937 	bl	800170c <MX_I2C2_Init>
  MX_ADC1_Init();
 800149e:	f000 f8b5 	bl	800160c <MX_ADC1_Init>
  MX_I2C3_Init();
 80014a2:	f000 f961 	bl	8001768 <MX_I2C3_Init>
  MX_TIM3_Init();
 80014a6:	f000 faef 	bl	8001a88 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014aa:	f000 fb41 	bl	8001b30 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014ae:	f000 f9bf 	bl	8001830 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014b2:	f000 fa69 	bl	8001988 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 fbb3 	bl	8001c20 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014ba:	f000 f983 	bl	80017c4 <MX_SPI2_Init>
  MX_TIM11_Init();
 80014be:	f000 fb8b 	bl	8001bd8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 80014c2:	f001 fc0d 	bl	8002ce0 <motorsInit>
	TOF_init();
 80014c6:	f7ff fc5b 	bl	8000d80 <TOF_init>
	maze_init();
 80014ca:	f000 fc51 	bl	8001d70 <maze_init>
	HAL_Delay(200);
 80014ce:	20c8      	movs	r0, #200	; 0xc8
 80014d0:	f002 ff7e 	bl	80043d0 <HAL_Delay>
	uart_startup_transmit();
 80014d4:	f002 fe4a 	bl	800416c <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);

	HAL_Delay(3000);
 80014d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014dc:	f002 ff78 	bl	80043d0 <HAL_Delay>

	R_speed_setpoint = 0;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <main+0xac>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 0;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <main+0xb0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]

	explore(END_CELL_X, END_CELL_Y);
 80014ec:	2102      	movs	r1, #2
 80014ee:	2006      	movs	r0, #6
 80014f0:	f000 fe2c 	bl	800214c <explore>

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80014f4:	f002 ff60 	bl	80043b8 <HAL_GetTick>
 80014f8:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 80014fa:	f002 ff5d 	bl	80043b8 <HAL_GetTick>
 80014fe:	6038      	str	r0, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		uart_task();
 8001500:	f002 fe5c 	bl	80041bc <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 8001504:	f002 ff58 	bl	80043b8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b65      	cmp	r3, #101	; 0x65
 8001510:	d902      	bls.n	8001518 <main+0x94>
			prev_main_loop_time = HAL_GetTick();
 8001512:	f002 ff51 	bl	80043b8 <HAL_GetTick>
 8001516:	6038      	str	r0, [r7, #0]

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 8001518:	f002 ff4e 	bl	80043b8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b14      	cmp	r3, #20
 8001524:	d9ec      	bls.n	8001500 <main+0x7c>

			prev_ctr_loop_time = HAL_GetTick();
 8001526:	f002 ff47 	bl	80043b8 <HAL_GetTick>
 800152a:	6078      	str	r0, [r7, #4]
		uart_task();
 800152c:	e7e8      	b.n	8001500 <main+0x7c>
 800152e:	bf00      	nop
 8001530:	200000f8 	.word	0x200000f8
 8001534:	200000f6 	.word	0x200000f6

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	; 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f008 fe14 	bl	800a174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <SystemClock_Config+0xcc>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <SystemClock_Config+0xd0>)
 8001582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 ffad 	bl	800751c <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 fbcc 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80015d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80015de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2103      	movs	r1, #3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 fa0e 	bl	8007a0c <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f6:	f000 fbb5 	bl	8001d64 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	; 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_ADC1_Init+0x9c>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_ADC1_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_ADC1_Init+0x98>)
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <MX_ADC1_Init+0xa0>)
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001658:	2201      	movs	r2, #1
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_ADC1_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001666:	2201      	movs	r2, #1
 8001668:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_ADC1_Init+0x98>)
 800166c:	f002 fed4 	bl	8004418 <HAL_ADC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fb75 	bl	8001d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800167a:	2304      	movs	r3, #4
 800167c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_ADC1_Init+0x98>)
 800168c:	f002 ff08 	bl	80044a0 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001696:	f000 fb65 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001c8 	.word	0x200001c8
 80016a8:	40012000 	.word	0x40012000
 80016ac:	0f000001 	.word	0x0f000001

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f003 fc6f 	bl	8004fd0 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 fb34 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000210 	.word	0x20000210
 8001704:	40005400 	.word	0x40005400
 8001708:	00061a80 	.word	0x00061a80

0800170c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C2_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_I2C2_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C2_Init+0x50>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_I2C2_Init+0x58>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C2_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2C2_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_I2C2_Init+0x50>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_I2C2_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2C2_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_I2C2_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2C2_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_I2C2_Init+0x50>)
 800174a:	f003 fc41 	bl	8004fd0 <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001754:	f000 fb06 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000264 	.word	0x20000264
 8001760:	40005800 	.word	0x40005800
 8001764:	00061a80 	.word	0x00061a80

08001768 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_I2C3_Init+0x50>)
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <MX_I2C3_Init+0x54>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_I2C3_Init+0x50>)
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_I2C3_Init+0x58>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_I2C3_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_I2C3_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_I2C3_Init+0x50>)
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_I2C3_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_I2C3_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_I2C3_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_I2C3_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_I2C3_Init+0x50>)
 80017a6:	f003 fc13 	bl	8004fd0 <HAL_I2C_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017b0:	f000 fad8 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002b8 	.word	0x200002b8
 80017bc:	40005c00 	.word	0x40005c00
 80017c0:	00061a80 	.word	0x00061a80

080017c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_SPI2_Init+0x64>)
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <MX_SPI2_Init+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_SPI2_Init+0x64>)
 80017d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_SPI2_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_SPI2_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_SPI2_Init+0x64>)
 80017f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_SPI2_Init+0x64>)
 80017f8:	2230      	movs	r2, #48	; 0x30
 80017fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_SPI2_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_SPI2_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_SPI2_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_SPI2_Init+0x64>)
 8001810:	220a      	movs	r2, #10
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_SPI2_Init+0x64>)
 8001816:	f006 fad9 	bl	8007dcc <HAL_SPI_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001820:	f000 faa0 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000030c 	.word	0x2000030c
 800182c:	40003800 	.word	0x40003800

08001830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	; 0x58
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2220      	movs	r2, #32
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f008 fc83 	bl	800a174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <MX_TIM1_Init+0x150>)
 8001870:	4a44      	ldr	r2, [pc, #272]	; (8001984 <MX_TIM1_Init+0x154>)
 8001872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001874:	4b42      	ldr	r3, [pc, #264]	; (8001980 <MX_TIM1_Init+0x150>)
 8001876:	2263      	movs	r2, #99	; 0x63
 8001878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <MX_TIM1_Init+0x150>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001880:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <MX_TIM1_Init+0x150>)
 8001882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <MX_TIM1_Init+0x150>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <MX_TIM1_Init+0x150>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <MX_TIM1_Init+0x150>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189a:	4839      	ldr	r0, [pc, #228]	; (8001980 <MX_TIM1_Init+0x150>)
 800189c:	f006 fb1f 	bl	8007ede <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018a6:	f000 fa5d 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b4:	4619      	mov	r1, r3
 80018b6:	4832      	ldr	r0, [pc, #200]	; (8001980 <MX_TIM1_Init+0x150>)
 80018b8:	f006 ffca 	bl	8008850 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018c2:	f000 fa4f 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018c6:	482e      	ldr	r0, [pc, #184]	; (8001980 <MX_TIM1_Init+0x150>)
 80018c8:	f006 fbba 	bl	8008040 <HAL_TIM_PWM_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018d2:	f000 fa47 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e2:	4619      	mov	r1, r3
 80018e4:	4826      	ldr	r0, [pc, #152]	; (8001980 <MX_TIM1_Init+0x150>)
 80018e6:	f007 fb79 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018f0:	f000 fa38 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f4:	2360      	movs	r3, #96	; 0x60
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	2204      	movs	r2, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4819      	ldr	r0, [pc, #100]	; (8001980 <MX_TIM1_Init+0x150>)
 800191a:	f006 fed7 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001924:	f000 fa1e 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	2208      	movs	r2, #8
 800192e:	4619      	mov	r1, r3
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <MX_TIM1_Init+0x150>)
 8001932:	f006 fecb 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800193c:	f000 fa12 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <MX_TIM1_Init+0x150>)
 8001964:	f007 fba8 	bl	80090b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800196e:	f000 f9f9 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <MX_TIM1_Init+0x150>)
 8001974:	f002 fa4c 	bl	8003e10 <HAL_TIM_MspPostInit>

}
 8001978:	bf00      	nop
 800197a:	3758      	adds	r7, #88	; 0x58
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000364 	.word	0x20000364
 8001984:	40010000 	.word	0x40010000

08001988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08e      	sub	sp, #56	; 0x38
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019c2:	2263      	movs	r2, #99	; 0x63
 80019c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e0:	4828      	ldr	r0, [pc, #160]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019e2:	f006 fa7c 	bl	8007ede <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019ec:	f000 f9ba 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4821      	ldr	r0, [pc, #132]	; (8001a84 <MX_TIM2_Init+0xfc>)
 80019fe:	f006 ff27 	bl	8008850 <HAL_TIM_ConfigClockSource>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a08:	f000 f9ac 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <MX_TIM2_Init+0xfc>)
 8001a0e:	f006 fb17 	bl	8008040 <HAL_TIM_PWM_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a18:	f000 f9a4 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4816      	ldr	r0, [pc, #88]	; (8001a84 <MX_TIM2_Init+0xfc>)
 8001a2c:	f007 fad6 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a36:	f000 f995 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3a:	2360      	movs	r3, #96	; 0x60
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM2_Init+0xfc>)
 8001a52:	f006 fe3b 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a5c:	f000 f982 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2204      	movs	r2, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM2_Init+0xfc>)
 8001a68:	f006 fe30 	bl	80086cc <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a72:	f000 f977 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM2_Init+0xfc>)
 8001a78:	f002 f9ca 	bl	8003e10 <HAL_TIM_MspPostInit>

}
 8001a7c:	bf00      	nop
 8001a7e:	3738      	adds	r7, #56	; 0x38
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200003ac 	.word	0x200003ac

08001a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f008 fb6c 	bl	800a174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_TIM3_Init+0xa4>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001af6:	f006 fbad 	bl	8008254 <HAL_TIM_Encoder_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f000 f930 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001b12:	f007 fa63 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b1c:	f000 f922 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200003f4 	.word	0x200003f4
 8001b2c:	40000400 	.word	0x40000400

08001b30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f008 fb18 	bl	800a174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <MX_TIM5_Init+0xa4>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b64:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b72:	2303      	movs	r3, #3
 8001b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001b9e:	f006 fb59 	bl	8008254 <HAL_TIM_Encoder_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ba8:	f000 f8dc 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM5_Init+0xa0>)
 8001bba:	f007 fa0f 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001bc4:	f000 f8ce 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000043c 	.word	0x2000043c
 8001bd4:	40000c00 	.word	0x40000c00

08001bd8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <MX_TIM11_Init+0x44>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 24;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001be4:	2218      	movs	r2, #24
 8001be6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001bf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bf4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_TIM11_Init+0x40>)
 8001c04:	f006 f96b 	bl	8007ede <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c0e:	f000 f8a9 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000484 	.word	0x20000484
 8001c1c:	40014800 	.word	0x40014800

08001c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <MX_USART2_UART_Init+0x50>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c58:	f007 fa94 	bl	8009184 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c62:	f000 f87f 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200004cc 	.word	0x200004cc
 8001c70:	40004400 	.word	0x40004400

08001c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <MX_GPIO_Init+0xe4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ce4:	481d      	ldr	r0, [pc, #116]	; (8001d5c <MX_GPIO_Init+0xe8>)
 8001ce6:	f003 f93f 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <MX_GPIO_Init+0xec>)
 8001cf2:	f003 f939 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4813      	ldr	r0, [pc, #76]	; (8001d5c <MX_GPIO_Init+0xe8>)
 8001d10:	f002 ffa6 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <MX_GPIO_Init+0xe8>)
 8001d2e:	f002 ff97 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_GPIO_Init+0xec>)
 8001d4c:	f002 ff88 	bl	8004c60 <HAL_GPIO_Init>

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020400 	.word	0x40020400

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <maze_init>:

extern MouseStruct Mouse;

//extern TIM_HandleTypeDef htim5;

void maze_init(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
	// set all walls to zero, populate with manhattan dist
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e032      	b.n	8001de2 <maze_init+0x72>
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	e029      	b.n	8001dd6 <maze_init+0x66>
			maze[i][j].dist = abs(END_CELL_X-i) + abs(END_CELL_Y-j);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1c3 0306 	rsb	r3, r3, #6
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bfb8      	it	lt
 8001d8c:	425b      	neglt	r3, r3
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f1c3 0302 	rsb	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bfb8      	it	lt
 8001d9a:	425b      	neglt	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	b2d8      	uxtb	r0, r3
 8001da2:	493d      	ldr	r1, [pc, #244]	; (8001e98 <maze_init+0x128>)
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	440b      	add	r3, r1
 8001db6:	4602      	mov	r2, r0
 8001db8:	705a      	strb	r2, [r3, #1]
			maze[i][j].walls = 0;
 8001dba:	4937      	ldr	r1, [pc, #220]	; (8001e98 <maze_init+0x128>)
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	ddd2      	ble.n	8001d82 <maze_init+0x12>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	ddc9      	ble.n	8001d7c <maze_init+0xc>
		}
	}
	//should actually assume all walls filled in
	//fill top and bottom edge walls
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e010      	b.n	8001e10 <maze_init+0xa0>
		add_wall(i, 0, SOUTH);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2202      	movs	r2, #2
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fcb0 	bl	800275c <add_wall>
		add_wall(i, MAZE_CELL_HEIGHT-1, NORTH);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	2105      	movs	r1, #5
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fca9 	bl	800275c <add_wall>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	ddeb      	ble.n	8001dee <maze_init+0x7e>
	}
	//fill left and right edge walls
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	e010      	b.n	8001e3e <maze_init+0xce>
		add_wall(0, j, WEST);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2203      	movs	r2, #3
 8001e22:	4619      	mov	r1, r3
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 fc99 	bl	800275c <add_wall>
		add_wall(MAZE_CELL_WIDTH-1, j, EAST);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4619      	mov	r1, r3
 8001e32:	200c      	movs	r0, #12
 8001e34:	f000 fc92 	bl	800275c <add_wall>
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	ddeb      	ble.n	8001e1c <maze_init+0xac>
	}
	// explored starting square
    add_wall(0, 0, EAST);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2100      	movs	r1, #0
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 fc87 	bl	800275c <add_wall>
    add_wall(0, 0, SOUTH);
 8001e4e:	2202      	movs	r2, #2
 8001e50:	2100      	movs	r1, #0
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 fc82 	bl	800275c <add_wall>
    add_wall(0, 0, WEST);
 8001e58:	2203      	movs	r2, #3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f000 fc7d 	bl	800275c <add_wall>
	set_explored(0, 0);
 8001e62:	2100      	movs	r1, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 fd5f 	bl	8002928 <set_explored>

	print_maze();
 8001e6a:	f000 f817 	bl	8001e9c <print_maze>

    add_wall(0, 2, EAST);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2102      	movs	r1, #2
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 fc72 	bl	800275c <add_wall>
    add_wall(0, 2, NORTH);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 fc6d 	bl	800275c <add_wall>

    flood(END_CELL_X, END_CELL_Y);
 8001e82:	2102      	movs	r1, #2
 8001e84:	2006      	movs	r0, #6
 8001e86:	f000 fe2d 	bl	8002ae4 <flood>

    print_maze();
 8001e8a:	f000 f807 	bl	8001e9c <print_maze>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000128 	.word	0x20000128

08001e9c <print_maze>:
void print_maze(){
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	b095      	sub	sp, #84	; 0x54
 8001ea0:	af0c      	add	r7, sp, #48	; 0x30
	HAL_Delay(15);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f002 fa94 	bl	80043d0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e06f      	b.n	8001f8e <print_maze+0xf2>
		sprintf(send_buffer, "|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|\n",(int)maze[0][i].walls, (int)maze[1][i].walls,(int)maze[2][i].walls,(int)maze[3][i].walls,(int)maze[4][i].walls,(int)maze[5][i].walls,(int)maze[6][i].walls,(int)maze[7][i].walls,(int)maze[8][i].walls,(int)maze[9][i].walls,(int)maze[10][i].walls,(int)maze[11][i].walls,(int)maze[12][i].walls);
 8001eae:	4a8c      	ldr	r2, [pc, #560]	; (80020e0 <print_maze+0x244>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001eb6:	469c      	mov	ip, r3
 8001eb8:	4a89      	ldr	r2, [pc, #548]	; (80020e0 <print_maze+0x244>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001ec2:	469e      	mov	lr, r3
 8001ec4:	4a86      	ldr	r2, [pc, #536]	; (80020e0 <print_maze+0x244>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4a83      	ldr	r2, [pc, #524]	; (80020e0 <print_maze+0x244>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3312      	adds	r3, #18
 8001ed6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001eda:	4618      	mov	r0, r3
 8001edc:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <print_maze+0x244>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001ee6:	461c      	mov	r4, r3
 8001ee8:	4a7d      	ldr	r2, [pc, #500]	; (80020e0 <print_maze+0x244>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	331e      	adds	r3, #30
 8001eee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <print_maze+0x244>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3324      	adds	r3, #36	; 0x24
 8001efa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001efe:	461e      	mov	r6, r3
 8001f00:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <print_maze+0x244>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	332a      	adds	r3, #42	; 0x2a
 8001f06:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	4a74      	ldr	r2, [pc, #464]	; (80020e0 <print_maze+0x244>)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3330      	adds	r3, #48	; 0x30
 8001f12:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	4a71      	ldr	r2, [pc, #452]	; (80020e0 <print_maze+0x244>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3336      	adds	r3, #54	; 0x36
 8001f1e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <print_maze+0x244>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	333c      	adds	r3, #60	; 0x3c
 8001f2a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4a6b      	ldr	r2, [pc, #428]	; (80020e0 <print_maze+0x244>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3342      	adds	r3, #66	; 0x42
 8001f36:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <print_maze+0x244>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3348      	adds	r3, #72	; 0x48
 8001f42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f46:	930a      	str	r3, [sp, #40]	; 0x28
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	9208      	str	r2, [sp, #32]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	9207      	str	r2, [sp, #28]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	9206      	str	r2, [sp, #24]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	9305      	str	r3, [sp, #20]
 8001f5c:	9604      	str	r6, [sp, #16]
 8001f5e:	9503      	str	r5, [sp, #12]
 8001f60:	9402      	str	r4, [sp, #8]
 8001f62:	9001      	str	r0, [sp, #4]
 8001f64:	9100      	str	r1, [sp, #0]
 8001f66:	4673      	mov	r3, lr
 8001f68:	4662      	mov	r2, ip
 8001f6a:	495e      	ldr	r1, [pc, #376]	; (80020e4 <print_maze+0x248>)
 8001f6c:	485e      	ldr	r0, [pc, #376]	; (80020e8 <print_maze+0x24c>)
 8001f6e:	f008 f909 	bl	800a184 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8001f72:	485d      	ldr	r0, [pc, #372]	; (80020e8 <print_maze+0x24c>)
 8001f74:	f7fe f934 	bl	80001e0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	485a      	ldr	r0, [pc, #360]	; (80020e8 <print_maze+0x24c>)
 8001f7e:	f002 f941 	bl	8004204 <uart_transmit>
		HAL_Delay(15);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f002 fa24 	bl	80043d0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da8c      	bge.n	8001eae <print_maze+0x12>
	}
	sprintf(send_buffer, "\n");
 8001f94:	4955      	ldr	r1, [pc, #340]	; (80020ec <print_maze+0x250>)
 8001f96:	4854      	ldr	r0, [pc, #336]	; (80020e8 <print_maze+0x24c>)
 8001f98:	f008 f8f4 	bl	800a184 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8001f9c:	4852      	ldr	r0, [pc, #328]	; (80020e8 <print_maze+0x24c>)
 8001f9e:	f7fe f91f 	bl	80001e0 <strlen>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4850      	ldr	r0, [pc, #320]	; (80020e8 <print_maze+0x24c>)
 8001fa8:	f002 f92c 	bl	8004204 <uart_transmit>
	HAL_Delay(15);
 8001fac:	200f      	movs	r0, #15
 8001fae:	f002 fa0f 	bl	80043d0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e07c      	b.n	80020b2 <print_maze+0x216>
		sprintf(send_buffer, "|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|%.2d|\n",(int)maze[0][i].dist, (int)maze[1][i].dist,(int)maze[2][i].dist,(int)maze[3][i].dist,(int)maze[4][i].dist,(int)maze[5][i].dist,(int)maze[6][i].dist,(int)maze[7][i].dist,(int)maze[8][i].dist,(int)maze[9][i].dist,(int)maze[10][i].dist,(int)maze[11][i].dist,(int)maze[12][i].dist);
 8001fb8:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <print_maze+0x244>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	469c      	mov	ip, r3
 8001fc4:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <print_maze+0x244>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3306      	adds	r3, #6
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <print_maze+0x244>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <print_maze+0x244>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3312      	adds	r3, #18
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	4618      	mov	r0, r3
 8001fee:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <print_maze+0x244>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4a38      	ldr	r2, [pc, #224]	; (80020e0 <print_maze+0x244>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	331e      	adds	r3, #30
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	461d      	mov	r5, r3
 800200a:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <print_maze+0x244>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	3324      	adds	r3, #36	; 0x24
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	461e      	mov	r6, r3
 8002018:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <print_maze+0x244>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	332a      	adds	r3, #42	; 0x2a
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <print_maze+0x244>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	3330      	adds	r3, #48	; 0x30
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <print_maze+0x244>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3336      	adds	r3, #54	; 0x36
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <print_maze+0x244>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <print_maze+0x244>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3342      	adds	r3, #66	; 0x42
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <print_maze+0x244>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3348      	adds	r3, #72	; 0x48
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	930a      	str	r3, [sp, #40]	; 0x28
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	9209      	str	r2, [sp, #36]	; 0x24
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	9208      	str	r2, [sp, #32]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	9207      	str	r2, [sp, #28]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	9206      	str	r2, [sp, #24]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	9305      	str	r3, [sp, #20]
 8002080:	9604      	str	r6, [sp, #16]
 8002082:	9503      	str	r5, [sp, #12]
 8002084:	9402      	str	r4, [sp, #8]
 8002086:	9001      	str	r0, [sp, #4]
 8002088:	9100      	str	r1, [sp, #0]
 800208a:	4673      	mov	r3, lr
 800208c:	4662      	mov	r2, ip
 800208e:	4915      	ldr	r1, [pc, #84]	; (80020e4 <print_maze+0x248>)
 8002090:	4815      	ldr	r0, [pc, #84]	; (80020e8 <print_maze+0x24c>)
 8002092:	f008 f877 	bl	800a184 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8002096:	4814      	ldr	r0, [pc, #80]	; (80020e8 <print_maze+0x24c>)
 8002098:	f7fe f8a2 	bl	80001e0 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	4619      	mov	r1, r3
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <print_maze+0x24c>)
 80020a2:	f002 f8af 	bl	8004204 <uart_transmit>
		HAL_Delay(15);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f002 f992 	bl	80043d0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f6bf af7f 	bge.w	8001fb8 <print_maze+0x11c>
	}
	sprintf(send_buffer, "\n");
 80020ba:	490c      	ldr	r1, [pc, #48]	; (80020ec <print_maze+0x250>)
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <print_maze+0x24c>)
 80020be:	f008 f861 	bl	800a184 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <print_maze+0x24c>)
 80020c4:	f7fe f88c 	bl	80001e0 <strlen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4619      	mov	r1, r3
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <print_maze+0x24c>)
 80020ce:	f002 f899 	bl	8004204 <uart_transmit>
	HAL_Delay(15);
 80020d2:	200f      	movs	r0, #15
 80020d4:	f002 f97c 	bl	80043d0 <HAL_Delay>
}
 80020d8:	bf00      	nop
 80020da:	3724      	adds	r7, #36	; 0x24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	20000128 	.word	0x20000128
 80020e4:	0800ab84 	.word	0x0800ab84
 80020e8:	20000094 	.word	0x20000094
 80020ec:	0800abc8 	.word	0x0800abc8

080020f0 <turn_to_direction>:
void turn_to_direction(uint8_t target_dir){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t diff = (target_dir - (Mouse.heading / 2)) % 4;
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <turn_to_direction+0x58>)
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	0852      	lsrs	r2, r2, #1
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	425a      	negs	r2, r3
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	bf58      	it	pl
 8002112:	4253      	negpl	r3, r2
 8002114:	73fb      	strb	r3, [r7, #15]
    if (diff == 1){
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d103      	bne.n	8002124 <turn_to_direction+0x34>
    	turn(90);
 800211c:	205a      	movs	r0, #90	; 0x5a
 800211e:	f000 ff83 	bl	8003028 <turn>
    	turn(180);
    }
    else if (diff == 3){
    	turn(-90);
    }
}
 8002122:	e00d      	b.n	8002140 <turn_to_direction+0x50>
    else if (diff == 2){
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d103      	bne.n	8002132 <turn_to_direction+0x42>
    	turn(180);
 800212a:	20b4      	movs	r0, #180	; 0xb4
 800212c:	f000 ff7c 	bl	8003028 <turn>
}
 8002130:	e006      	b.n	8002140 <turn_to_direction+0x50>
    else if (diff == 3){
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d103      	bne.n	8002140 <turn_to_direction+0x50>
    	turn(-90);
 8002138:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800213c:	f000 ff74 	bl	8003028 <turn>
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200001c4 	.word	0x200001c4

0800214c <explore>:
void explore(uint8_t x, uint8_t y){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4613      	mov	r3, r2
 800215a:	71bb      	strb	r3, [r7, #6]
	while((Mouse.current_cell_x != x) && (Mouse.current_cell_y != y)){
 800215c:	e01e      	b.n	800219c <explore+0x50>
		flood(x, y);
 800215e:	79ba      	ldrb	r2, [r7, #6]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fcbd 	bl	8002ae4 <flood>
		HAL_Delay(100);
 800216a:	2064      	movs	r0, #100	; 0x64
 800216c:	f002 f930 	bl	80043d0 <HAL_Delay>
		turn_to_direction(dir_of_lowest(Mouse.current_cell_x,Mouse.current_cell_y));
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <explore+0x6c>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <explore+0x6c>)
 8002176:	7892      	ldrb	r2, [r2, #2]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fc02 	bl	8002984 <dir_of_lowest>
 8002180:	4603      	mov	r3, r0
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffb4 	bl	80020f0 <turn_to_direction>
		HAL_Delay(100);
 8002188:	2064      	movs	r0, #100	; 0x64
 800218a:	f002 f921 	bl	80043d0 <HAL_Delay>
		move(400,0);
 800218e:	2100      	movs	r1, #0
 8002190:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002194:	f000 fe40 	bl	8002e18 <move>
		print_maze();
 8002198:	f7ff fe80 	bl	8001e9c <print_maze>
	while((Mouse.current_cell_x != x) && (Mouse.current_cell_y != y)){
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <explore+0x6c>)
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d004      	beq.n	80021b0 <explore+0x64>
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <explore+0x6c>)
 80021a8:	789b      	ldrb	r3, [r3, #2]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1d6      	bne.n	800215e <explore+0x12>
		//		save_maze();
//		if(Mouse.current_cell_x >= MAZE_CELL_WIDTH || Mouse.current_cell_y >= MAZE_CELL_HEIGHT) break;
		//		sprintf(send_buffer, "L:%.3d M:%.3d R:%.3d E:%d\n",(int)measurements[0],(int)measurements[1] ,(int)measurements[2], (int)htim5.Instance->CNT);
		//		uart_transmit(send_buffer, strlen(send_buffer));
	}
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200001c4 	.word	0x200001c4

080021bc <update>:
void update(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
//	static uint8_t prev_measurements[3] = {255, 255, 255};
	//update current cell coords
	// at 400mm/s, 9-10 counts per loop
	switch (Mouse.heading) {
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <update+0x250>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b07      	cmp	r3, #7
 80021c6:	f200 8291 	bhi.w	80026ec <update+0x530>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <update+0x14>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021f1 	.word	0x080021f1
 80021d4:	080022d1 	.word	0x080022d1
 80021d8:	0800232b 	.word	0x0800232b
 80021dc:	0800241d 	.word	0x0800241d
 80021e0:	08002477 	.word	0x08002477
 80021e4:	08002557 	.word	0x08002557
 80021e8:	080025c1 	.word	0x080025c1
 80021ec:	08002697 	.word	0x08002697
	case 0:
		// update coords
		if (L_acc >= 208 && R_acc >= 208){
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <update+0x254>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2bcf      	cmp	r3, #207	; 0xcf
 80021f6:	dd1b      	ble.n	8002230 <update+0x74>
 80021f8:	4b86      	ldr	r3, [pc, #536]	; (8002414 <update+0x258>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2bcf      	cmp	r3, #207	; 0xcf
 80021fe:	dd17      	ble.n	8002230 <update+0x74>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002200:	4b82      	ldr	r3, [pc, #520]	; (800240c <update+0x250>)
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	4a81      	ldr	r2, [pc, #516]	; (800240c <update+0x250>)
 8002206:	7892      	ldrb	r2, [r2, #2]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fb8c 	bl	8002928 <set_explored>
			Mouse.current_cell_y ++; //208 = (120*180)/33pi
 8002210:	4b7e      	ldr	r3, [pc, #504]	; (800240c <update+0x250>)
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	3301      	adds	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b7c      	ldr	r3, [pc, #496]	; (800240c <update+0x250>)
 800221a:	709a      	strb	r2, [r3, #2]

			L_acc -= 208;
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <update+0x254>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3bd0      	subs	r3, #208	; 0xd0
 8002222:	4a7b      	ldr	r2, [pc, #492]	; (8002410 <update+0x254>)
 8002224:	6013      	str	r3, [r2, #0]
			R_acc -= 208;
 8002226:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <update+0x258>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3bd0      	subs	r3, #208	; 0xd0
 800222c:	4a79      	ldr	r2, [pc, #484]	; (8002414 <update+0x258>)
 800222e:	6013      	str	r3, [r2, #0]
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002230:	4b77      	ldr	r3, [pc, #476]	; (8002410 <update+0x254>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b95      	cmp	r3, #149	; 0x95
 8002236:	dd19      	ble.n	800226c <update+0xb0>
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <update+0x254>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2bc8      	cmp	r3, #200	; 0xc8
 800223e:	dc15      	bgt.n	800226c <update+0xb0>
 8002240:	4b74      	ldr	r3, [pc, #464]	; (8002414 <update+0x258>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b95      	cmp	r3, #149	; 0x95
 8002246:	dd11      	ble.n	800226c <update+0xb0>
 8002248:	4b72      	ldr	r3, [pc, #456]	; (8002414 <update+0x258>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2bc8      	cmp	r3, #200	; 0xc8
 800224e:	dc0d      	bgt.n	800226c <update+0xb0>
			if(measurements[1] < 200){
 8002250:	4b71      	ldr	r3, [pc, #452]	; (8002418 <update+0x25c>)
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	2bc7      	cmp	r3, #199	; 0xc7
 8002256:	d809      	bhi.n	800226c <update+0xb0>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, NORTH);
 8002258:	4b6c      	ldr	r3, [pc, #432]	; (800240c <update+0x250>)
 800225a:	7858      	ldrb	r0, [r3, #1]
 800225c:	4b6b      	ldr	r3, [pc, #428]	; (800240c <update+0x250>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	3301      	adds	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	f000 fa78 	bl	800275c <add_wall>
			}
		}
		//set L and R walls
		if (L_acc >= 90 && L_acc <= 130 && R_acc >= 90 && R_acc <= 130){
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <update+0x254>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b59      	cmp	r3, #89	; 0x59
 8002272:	f340 823d 	ble.w	80026f0 <update+0x534>
 8002276:	4b66      	ldr	r3, [pc, #408]	; (8002410 <update+0x254>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b82      	cmp	r3, #130	; 0x82
 800227c:	f300 8238 	bgt.w	80026f0 <update+0x534>
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <update+0x258>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b59      	cmp	r3, #89	; 0x59
 8002286:	f340 8233 	ble.w	80026f0 <update+0x534>
 800228a:	4b62      	ldr	r3, [pc, #392]	; (8002414 <update+0x258>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b82      	cmp	r3, #130	; 0x82
 8002290:	f300 822e 	bgt.w	80026f0 <update+0x534>
			if(measurements[0] < 100){
 8002294:	4b60      	ldr	r3, [pc, #384]	; (8002418 <update+0x25c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b63      	cmp	r3, #99	; 0x63
 800229a:	d809      	bhi.n	80022b0 <update+0xf4>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, WEST);
 800229c:	4b5b      	ldr	r3, [pc, #364]	; (800240c <update+0x250>)
 800229e:	7858      	ldrb	r0, [r3, #1]
 80022a0:	4b5a      	ldr	r3, [pc, #360]	; (800240c <update+0x250>)
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2203      	movs	r2, #3
 80022aa:	4619      	mov	r1, r3
 80022ac:	f000 fa56 	bl	800275c <add_wall>
			}
			if(measurements[2] < 100){
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <update+0x25c>)
 80022b2:	789b      	ldrb	r3, [r3, #2]
 80022b4:	2b63      	cmp	r3, #99	; 0x63
 80022b6:	f200 821b 	bhi.w	80026f0 <update+0x534>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y+1, EAST);
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <update+0x250>)
 80022bc:	7858      	ldrb	r0, [r3, #1]
 80022be:	4b53      	ldr	r3, [pc, #332]	; (800240c <update+0x250>)
 80022c0:	789b      	ldrb	r3, [r3, #2]
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	4619      	mov	r1, r3
 80022ca:	f000 fa47 	bl	800275c <add_wall>
			}
		}
		break;
 80022ce:	e20f      	b.n	80026f0 <update+0x534>
	case 1:
		if (L_acc >= 295 && R_acc >= 295){
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <update+0x254>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80022d8:	f340 820c 	ble.w	80026f4 <update+0x538>
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <update+0x258>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80022e4:	f340 8206 	ble.w	80026f4 <update+0x538>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80022e8:	4b48      	ldr	r3, [pc, #288]	; (800240c <update+0x250>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	4a47      	ldr	r2, [pc, #284]	; (800240c <update+0x250>)
 80022ee:	7892      	ldrb	r2, [r2, #2]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fb18 	bl	8002928 <set_explored>
			Mouse.current_cell_x ++; //sqrt(2) * 208
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <update+0x250>)
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <update+0x250>)
 8002302:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <update+0x250>)
 8002306:	789b      	ldrb	r3, [r3, #2]
 8002308:	3301      	adds	r3, #1
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <update+0x250>)
 800230e:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <update+0x254>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002318:	4a3d      	ldr	r2, [pc, #244]	; (8002410 <update+0x254>)
 800231a:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 800231c:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <update+0x258>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <update+0x258>)
 8002326:	6013      	str	r3, [r2, #0]
		}
		break;
 8002328:	e1e4      	b.n	80026f4 <update+0x538>
	case 2:
		// update coords
		if (L_acc >= 208 && R_acc >= 208){
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <update+0x254>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2bcf      	cmp	r3, #207	; 0xcf
 8002330:	dd1b      	ble.n	800236a <update+0x1ae>
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <update+0x258>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2bcf      	cmp	r3, #207	; 0xcf
 8002338:	dd17      	ble.n	800236a <update+0x1ae>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <update+0x250>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	4a33      	ldr	r2, [pc, #204]	; (800240c <update+0x250>)
 8002340:	7892      	ldrb	r2, [r2, #2]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f000 faef 	bl	8002928 <set_explored>
			Mouse.current_cell_x ++; //208 = (120*180)/33pi
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <update+0x250>)
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	3301      	adds	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <update+0x250>)
 8002354:	705a      	strb	r2, [r3, #1]

			L_acc -= 208;
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <update+0x254>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3bd0      	subs	r3, #208	; 0xd0
 800235c:	4a2c      	ldr	r2, [pc, #176]	; (8002410 <update+0x254>)
 800235e:	6013      	str	r3, [r2, #0]
			R_acc -= 208;
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <update+0x258>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3bd0      	subs	r3, #208	; 0xd0
 8002366:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <update+0x258>)
 8002368:	6013      	str	r3, [r2, #0]
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <update+0x254>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b95      	cmp	r3, #149	; 0x95
 8002370:	dd19      	ble.n	80023a6 <update+0x1ea>
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <update+0x254>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2bc8      	cmp	r3, #200	; 0xc8
 8002378:	dc15      	bgt.n	80023a6 <update+0x1ea>
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <update+0x258>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b95      	cmp	r3, #149	; 0x95
 8002380:	dd11      	ble.n	80023a6 <update+0x1ea>
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <update+0x258>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2bc8      	cmp	r3, #200	; 0xc8
 8002388:	dc0d      	bgt.n	80023a6 <update+0x1ea>
			if(measurements[1] < 200){
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <update+0x25c>)
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	2bc7      	cmp	r3, #199	; 0xc7
 8002390:	d809      	bhi.n	80023a6 <update+0x1ea>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, EAST);
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <update+0x250>)
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	3301      	adds	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <update+0x250>)
 800239c:	7891      	ldrb	r1, [r2, #2]
 800239e:	2201      	movs	r2, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f9db 	bl	800275c <add_wall>
			}
		}
		//set L and R walls
		if (L_acc >= 90 && L_acc <= 130 && R_acc >= 90 && R_acc <= 130){
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <update+0x254>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b59      	cmp	r3, #89	; 0x59
 80023ac:	f340 81a4 	ble.w	80026f8 <update+0x53c>
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <update+0x254>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b82      	cmp	r3, #130	; 0x82
 80023b6:	f300 819f 	bgt.w	80026f8 <update+0x53c>
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <update+0x258>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b59      	cmp	r3, #89	; 0x59
 80023c0:	f340 819a 	ble.w	80026f8 <update+0x53c>
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <update+0x258>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b82      	cmp	r3, #130	; 0x82
 80023ca:	f300 8195 	bgt.w	80026f8 <update+0x53c>
			if(measurements[0] < 100){
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <update+0x25c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b63      	cmp	r3, #99	; 0x63
 80023d4:	d809      	bhi.n	80023ea <update+0x22e>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, NORTH);
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <update+0x250>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	3301      	adds	r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <update+0x250>)
 80023e0:	7891      	ldrb	r1, [r2, #2]
 80023e2:	2200      	movs	r2, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f9b9 	bl	800275c <add_wall>
			}
			if(measurements[2] < 100){
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <update+0x25c>)
 80023ec:	789b      	ldrb	r3, [r3, #2]
 80023ee:	2b63      	cmp	r3, #99	; 0x63
 80023f0:	f200 8182 	bhi.w	80026f8 <update+0x53c>
				add_wall(Mouse.current_cell_x+1, Mouse.current_cell_y, SOUTH);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <update+0x250>)
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4a03      	ldr	r2, [pc, #12]	; (800240c <update+0x250>)
 80023fe:	7891      	ldrb	r1, [r2, #2]
 8002400:	2202      	movs	r2, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f9aa 	bl	800275c <add_wall>
			}
		}
		break;
 8002408:	e176      	b.n	80026f8 <update+0x53c>
 800240a:	bf00      	nop
 800240c:	200001c4 	.word	0x200001c4
 8002410:	20000118 	.word	0x20000118
 8002414:	2000011c 	.word	0x2000011c
 8002418:	20000124 	.word	0x20000124
	case 3:
		if (L_acc >= 295 && R_acc >= 295){
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <update+0x3f4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002424:	f340 816a 	ble.w	80026fc <update+0x540>
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <update+0x3f8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002430:	f340 8164 	ble.w	80026fc <update+0x540>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002434:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <update+0x3fc>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <update+0x3fc>)
 800243a:	7892      	ldrb	r2, [r2, #2]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fa72 	bl	8002928 <set_explored>
			Mouse.current_cell_x ++;
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <update+0x3fc>)
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <update+0x3fc>)
 800244e:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <update+0x3fc>)
 8002452:	789b      	ldrb	r3, [r3, #2]
 8002454:	3b01      	subs	r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <update+0x3fc>)
 800245a:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <update+0x3f4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002464:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <update+0x3f4>)
 8002466:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <update+0x3f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <update+0x3f8>)
 8002472:	6013      	str	r3, [r2, #0]
		}
		break;
 8002474:	e142      	b.n	80026fc <update+0x540>
	case 4:
		if (L_acc >= 208 && R_acc >= 208){
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <update+0x3f4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2bcf      	cmp	r3, #207	; 0xcf
 800247c:	dd1b      	ble.n	80024b6 <update+0x2fa>
 800247e:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <update+0x3f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2bcf      	cmp	r3, #207	; 0xcf
 8002484:	dd17      	ble.n	80024b6 <update+0x2fa>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <update+0x3fc>)
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <update+0x3fc>)
 800248c:	7892      	ldrb	r2, [r2, #2]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fa49 	bl	8002928 <set_explored>
			Mouse.current_cell_y --;
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <update+0x3fc>)
 8002498:	789b      	ldrb	r3, [r3, #2]
 800249a:	3b01      	subs	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <update+0x3fc>)
 80024a0:	709a      	strb	r2, [r3, #2]

			L_acc -= 208;
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <update+0x3f4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3bd0      	subs	r3, #208	; 0xd0
 80024a8:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <update+0x3f4>)
 80024aa:	6013      	str	r3, [r2, #0]
			R_acc -= 208;
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <update+0x3f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3bd0      	subs	r3, #208	; 0xd0
 80024b2:	4a40      	ldr	r2, [pc, #256]	; (80025b4 <update+0x3f8>)
 80024b4:	6013      	str	r3, [r2, #0]
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <update+0x3f4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b95      	cmp	r3, #149	; 0x95
 80024bc:	dd19      	ble.n	80024f2 <update+0x336>
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <update+0x3f4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2bc8      	cmp	r3, #200	; 0xc8
 80024c4:	dc15      	bgt.n	80024f2 <update+0x336>
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <update+0x3f8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b95      	cmp	r3, #149	; 0x95
 80024cc:	dd11      	ble.n	80024f2 <update+0x336>
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <update+0x3f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2bc8      	cmp	r3, #200	; 0xc8
 80024d4:	dc0d      	bgt.n	80024f2 <update+0x336>
			if(measurements[1] < 200){
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <update+0x400>)
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2bc7      	cmp	r3, #199	; 0xc7
 80024dc:	d809      	bhi.n	80024f2 <update+0x336>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, SOUTH);
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <update+0x3fc>)
 80024e0:	7858      	ldrb	r0, [r3, #1]
 80024e2:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <update+0x3fc>)
 80024e4:	789b      	ldrb	r3, [r3, #2]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2202      	movs	r2, #2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f000 f935 	bl	800275c <add_wall>
			}
		}
		//set L and R walls
		if (L_acc >= 90 && L_acc <= 130 && R_acc >= 90 && R_acc <= 130){
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <update+0x3f4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b59      	cmp	r3, #89	; 0x59
 80024f8:	f340 8102 	ble.w	8002700 <update+0x544>
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <update+0x3f4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b82      	cmp	r3, #130	; 0x82
 8002502:	f300 80fd 	bgt.w	8002700 <update+0x544>
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <update+0x3f8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b59      	cmp	r3, #89	; 0x59
 800250c:	f340 80f8 	ble.w	8002700 <update+0x544>
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <update+0x3f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b82      	cmp	r3, #130	; 0x82
 8002516:	f300 80f3 	bgt.w	8002700 <update+0x544>
			if(measurements[0] < 100){
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <update+0x400>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b63      	cmp	r3, #99	; 0x63
 8002520:	d809      	bhi.n	8002536 <update+0x37a>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, EAST);
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <update+0x3fc>)
 8002524:	7858      	ldrb	r0, [r3, #1]
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <update+0x3fc>)
 8002528:	789b      	ldrb	r3, [r3, #2]
 800252a:	3b01      	subs	r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2201      	movs	r2, #1
 8002530:	4619      	mov	r1, r3
 8002532:	f000 f913 	bl	800275c <add_wall>
			}
			if(measurements[2] < 100){
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <update+0x400>)
 8002538:	789b      	ldrb	r3, [r3, #2]
 800253a:	2b63      	cmp	r3, #99	; 0x63
 800253c:	f200 80e0 	bhi.w	8002700 <update+0x544>
				add_wall(Mouse.current_cell_x, Mouse.current_cell_y-1, WEST);
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <update+0x3fc>)
 8002542:	7858      	ldrb	r0, [r3, #1]
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <update+0x3fc>)
 8002546:	789b      	ldrb	r3, [r3, #2]
 8002548:	3b01      	subs	r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2203      	movs	r2, #3
 800254e:	4619      	mov	r1, r3
 8002550:	f000 f904 	bl	800275c <add_wall>
			}
		}
		break;
 8002554:	e0d4      	b.n	8002700 <update+0x544>
	case 5:
		if (L_acc >= 295 && R_acc >= 295){
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <update+0x3f4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800255e:	f340 80d1 	ble.w	8002704 <update+0x548>
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <update+0x3f8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800256a:	f340 80cb 	ble.w	8002704 <update+0x548>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <update+0x3fc>)
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <update+0x3fc>)
 8002574:	7892      	ldrb	r2, [r2, #2]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f9d5 	bl	8002928 <set_explored>
			Mouse.current_cell_x --;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <update+0x3fc>)
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	3b01      	subs	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <update+0x3fc>)
 8002588:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <update+0x3fc>)
 800258c:	789b      	ldrb	r3, [r3, #2]
 800258e:	3b01      	subs	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <update+0x3fc>)
 8002594:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <update+0x3f4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <update+0x3f4>)
 80025a0:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <update+0x3f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80025aa:	4a02      	ldr	r2, [pc, #8]	; (80025b4 <update+0x3f8>)
 80025ac:	6013      	str	r3, [r2, #0]
		}
		break;
 80025ae:	e0a9      	b.n	8002704 <update+0x548>
 80025b0:	20000118 	.word	0x20000118
 80025b4:	2000011c 	.word	0x2000011c
 80025b8:	200001c4 	.word	0x200001c4
 80025bc:	20000124 	.word	0x20000124
	case 6:
		if (L_acc >= 208 && R_acc >= 208){
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <update+0x558>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2bcf      	cmp	r3, #207	; 0xcf
 80025c6:	dd1b      	ble.n	8002600 <update+0x444>
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <update+0x55c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2bcf      	cmp	r3, #207	; 0xcf
 80025ce:	dd17      	ble.n	8002600 <update+0x444>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80025d0:	4b52      	ldr	r3, [pc, #328]	; (800271c <update+0x560>)
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <update+0x560>)
 80025d6:	7892      	ldrb	r2, [r2, #2]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f9a4 	bl	8002928 <set_explored>
			Mouse.current_cell_x --;
 80025e0:	4b4e      	ldr	r3, [pc, #312]	; (800271c <update+0x560>)
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <update+0x560>)
 80025ea:	705a      	strb	r2, [r3, #1]

			L_acc -= 208;
 80025ec:	4b49      	ldr	r3, [pc, #292]	; (8002714 <update+0x558>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3bd0      	subs	r3, #208	; 0xd0
 80025f2:	4a48      	ldr	r2, [pc, #288]	; (8002714 <update+0x558>)
 80025f4:	6013      	str	r3, [r2, #0]
			R_acc -= 208;
 80025f6:	4b48      	ldr	r3, [pc, #288]	; (8002718 <update+0x55c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3bd0      	subs	r3, #208	; 0xd0
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <update+0x55c>)
 80025fe:	6013      	str	r3, [r2, #0]
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002600:	4b44      	ldr	r3, [pc, #272]	; (8002714 <update+0x558>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b95      	cmp	r3, #149	; 0x95
 8002606:	dd19      	ble.n	800263c <update+0x480>
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <update+0x558>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2bc8      	cmp	r3, #200	; 0xc8
 800260e:	dc15      	bgt.n	800263c <update+0x480>
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <update+0x55c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b95      	cmp	r3, #149	; 0x95
 8002616:	dd11      	ble.n	800263c <update+0x480>
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <update+0x55c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2bc8      	cmp	r3, #200	; 0xc8
 800261e:	dc0d      	bgt.n	800263c <update+0x480>
			if(measurements[1] < 200){
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <update+0x564>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2bc7      	cmp	r3, #199	; 0xc7
 8002626:	d809      	bhi.n	800263c <update+0x480>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, WEST);
 8002628:	4b3c      	ldr	r3, [pc, #240]	; (800271c <update+0x560>)
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	3b01      	subs	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4a3a      	ldr	r2, [pc, #232]	; (800271c <update+0x560>)
 8002632:	7891      	ldrb	r1, [r2, #2]
 8002634:	2203      	movs	r2, #3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f890 	bl	800275c <add_wall>
			}
		}
		//set L and R walls
		if (L_acc >= 90 && L_acc <= 130 && R_acc >= 90 && R_acc <= 130){
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <update+0x558>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b59      	cmp	r3, #89	; 0x59
 8002642:	dd61      	ble.n	8002708 <update+0x54c>
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <update+0x558>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b82      	cmp	r3, #130	; 0x82
 800264a:	dc5d      	bgt.n	8002708 <update+0x54c>
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <update+0x55c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b59      	cmp	r3, #89	; 0x59
 8002652:	dd59      	ble.n	8002708 <update+0x54c>
 8002654:	4b30      	ldr	r3, [pc, #192]	; (8002718 <update+0x55c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b82      	cmp	r3, #130	; 0x82
 800265a:	dc55      	bgt.n	8002708 <update+0x54c>
			if(measurements[0] < 100){
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <update+0x564>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b63      	cmp	r3, #99	; 0x63
 8002662:	d809      	bhi.n	8002678 <update+0x4bc>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, SOUTH);
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <update+0x560>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	3b01      	subs	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4a2b      	ldr	r2, [pc, #172]	; (800271c <update+0x560>)
 800266e:	7891      	ldrb	r1, [r2, #2]
 8002670:	2202      	movs	r2, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f872 	bl	800275c <add_wall>
			}
			if(measurements[2] < 100){
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <update+0x564>)
 800267a:	789b      	ldrb	r3, [r3, #2]
 800267c:	2b63      	cmp	r3, #99	; 0x63
 800267e:	d843      	bhi.n	8002708 <update+0x54c>
				add_wall(Mouse.current_cell_x-1, Mouse.current_cell_y, NORTH);
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <update+0x560>)
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	3b01      	subs	r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <update+0x560>)
 800268a:	7891      	ldrb	r1, [r2, #2]
 800268c:	2200      	movs	r2, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f864 	bl	800275c <add_wall>
			}
		}
		break;
 8002694:	e038      	b.n	8002708 <update+0x54c>
	case 7:
		if (L_acc >= 295 && R_acc >= 295){
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <update+0x558>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800269e:	dd35      	ble.n	800270c <update+0x550>
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <update+0x55c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80026a8:	dd30      	ble.n	800270c <update+0x550>
			set_explored(Mouse.current_cell_x, Mouse.current_cell_y);
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <update+0x560>)
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	4a1b      	ldr	r2, [pc, #108]	; (800271c <update+0x560>)
 80026b0:	7892      	ldrb	r2, [r2, #2]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f937 	bl	8002928 <set_explored>
			Mouse.current_cell_x --;
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <update+0x560>)
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <update+0x560>)
 80026c4:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <update+0x560>)
 80026c8:	789b      	ldrb	r3, [r3, #2]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <update+0x560>)
 80026d0:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <update+0x558>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <update+0x558>)
 80026dc:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <update+0x55c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <update+0x55c>)
 80026e8:	6013      	str	r3, [r2, #0]
		}
		break;
 80026ea:	e00f      	b.n	800270c <update+0x550>
	default:
		break;
 80026ec:	bf00      	nop
 80026ee:	e00e      	b.n	800270e <update+0x552>
		break;
 80026f0:	bf00      	nop
 80026f2:	e00c      	b.n	800270e <update+0x552>
		break;
 80026f4:	bf00      	nop
 80026f6:	e00a      	b.n	800270e <update+0x552>
		break;
 80026f8:	bf00      	nop
 80026fa:	e008      	b.n	800270e <update+0x552>
		break;
 80026fc:	bf00      	nop
 80026fe:	e006      	b.n	800270e <update+0x552>
		break;
 8002700:	bf00      	nop
 8002702:	e004      	b.n	800270e <update+0x552>
		break;
 8002704:	bf00      	nop
 8002706:	e002      	b.n	800270e <update+0x552>
		break;
 8002708:	bf00      	nop
 800270a:	e000      	b.n	800270e <update+0x552>
		break;
 800270c:	bf00      	nop
//	uart_transmit(send_buffer, strlen(send_buffer));

//	prev_measurements[0] = measurements[0];
//	prev_measurements[1] = measurements[1];
//	prev_measurements[2] = measurements[2];
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000118 	.word	0x20000118
 8002718:	2000011c 	.word	0x2000011c
 800271c:	200001c4 	.word	0x200001c4
 8002720:	20000124 	.word	0x20000124

08002724 <rel_to_fixed_dir>:
		}
		//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
	}
	//	HAL_FLASH_Lock();
}
Direction rel_to_fixed_dir(Relative_Direction mouse_dir){
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	return ((Mouse.heading/2)+ mouse_dir)%4;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <rel_to_fixed_dir+0x34>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	4413      	add	r3, r2
 800273c:	425a      	negs	r2, r3
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	bf58      	it	pl
 8002748:	4253      	negpl	r3, r2
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	200001c4 	.word	0x200001c4

0800275c <add_wall>:
        } else if (dir == WEST && x > 0) {
            maze[x - 1][y].walls &= ~(1 << EAST);
        }
    }
}
void add_wall(uint8_t x, uint8_t y, uint8_t dir) {
 800275c:	b490      	push	{r4, r7}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	460b      	mov	r3, r1
 8002768:	71bb      	strb	r3, [r7, #6]
 800276a:	4613      	mov	r3, r2
 800276c:	717b      	strb	r3, [r7, #5]
    if ((maze[x][y].walls & 0xF0) == 0) {
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	79b9      	ldrb	r1, [r7, #6]
 8002772:	4859      	ldr	r0, [pc, #356]	; (80028d8 <add_wall+0x17c>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 80a1 	bne.w	80028ce <add_wall+0x172>
        maze[x][y].walls |= (0b01 << dir);
 800278c:	79fa      	ldrb	r2, [r7, #7]
 800278e:	79b9      	ldrb	r1, [r7, #6]
 8002790:	4851      	ldr	r0, [pc, #324]	; (80028d8 <add_wall+0x17c>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80027a0:	b25a      	sxtb	r2, r3
 80027a2:	797b      	ldrb	r3, [r7, #5]
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	79b9      	ldrb	r1, [r7, #6]
 80027b4:	b2dc      	uxtb	r4, r3
 80027b6:	4848      	ldr	r0, [pc, #288]	; (80028d8 <add_wall+0x17c>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	4622      	mov	r2, r4
 80027c4:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
        if (dir == NORTH) {
 80027c8:	797b      	ldrb	r3, [r7, #5]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <add_wall+0xae>
            if (y + 1 < MAZE_CELL_HEIGHT) {
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d87c      	bhi.n	80028ce <add_wall+0x172>
                maze[x][y + 1].walls |= (0b01 << SOUTH);
 80027d4:	79fa      	ldrb	r2, [r7, #7]
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	483f      	ldr	r0, [pc, #252]	; (80028d8 <add_wall+0x17c>)
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	440b      	add	r3, r1
 80027e6:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	79b9      	ldrb	r1, [r7, #6]
 80027ee:	3101      	adds	r1, #1
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	b2dc      	uxtb	r4, r3
 80027f6:	4838      	ldr	r0, [pc, #224]	; (80028d8 <add_wall+0x17c>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	4622      	mov	r2, r4
 8002804:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
            if (x > 0) {
                maze[x - 1][y].walls |= (0b01 << EAST);
            }
        }
    }
}
 8002808:	e061      	b.n	80028ce <add_wall+0x172>
        } else if (dir == EAST) {
 800280a:	797b      	ldrb	r3, [r7, #5]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d11d      	bne.n	800284c <add_wall+0xf0>
            if (x + 1 < MAZE_CELL_WIDTH) {
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b0b      	cmp	r3, #11
 8002814:	d85b      	bhi.n	80028ce <add_wall+0x172>
                maze[x + 1][y].walls |= (0b01 << WEST);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	79b9      	ldrb	r1, [r7, #6]
 800281c:	482e      	ldr	r0, [pc, #184]	; (80028d8 <add_wall+0x17c>)
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800282c:	79fa      	ldrb	r2, [r7, #7]
 800282e:	3201      	adds	r2, #1
 8002830:	79b9      	ldrb	r1, [r7, #6]
 8002832:	f043 0308 	orr.w	r3, r3, #8
 8002836:	b2dc      	uxtb	r4, r3
 8002838:	4827      	ldr	r0, [pc, #156]	; (80028d8 <add_wall+0x17c>)
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	440b      	add	r3, r1
 8002844:	4622      	mov	r2, r4
 8002846:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 800284a:	e040      	b.n	80028ce <add_wall+0x172>
        } else if (dir == SOUTH) {
 800284c:	797b      	ldrb	r3, [r7, #5]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d11d      	bne.n	800288e <add_wall+0x132>
            if (y > 0) {
 8002852:	79bb      	ldrb	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03a      	beq.n	80028ce <add_wall+0x172>
                maze[x][y - 1].walls |= (0b01 << NORTH);
 8002858:	79fa      	ldrb	r2, [r7, #7]
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	1e59      	subs	r1, r3, #1
 800285e:	481e      	ldr	r0, [pc, #120]	; (80028d8 <add_wall+0x17c>)
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800286e:	79fa      	ldrb	r2, [r7, #7]
 8002870:	79b9      	ldrb	r1, [r7, #6]
 8002872:	3901      	subs	r1, #1
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2dc      	uxtb	r4, r3
 800287a:	4817      	ldr	r0, [pc, #92]	; (80028d8 <add_wall+0x17c>)
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	440b      	add	r3, r1
 8002886:	4622      	mov	r2, r4
 8002888:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 800288c:	e01f      	b.n	80028ce <add_wall+0x172>
        } else if (dir == WEST) {
 800288e:	797b      	ldrb	r3, [r7, #5]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d11c      	bne.n	80028ce <add_wall+0x172>
            if (x > 0) {
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <add_wall+0x172>
                maze[x - 1][y].walls |= (0b01 << EAST);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	79b9      	ldrb	r1, [r7, #6]
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <add_wall+0x17c>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	440b      	add	r3, r1
 80028ac:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80028b0:	79fa      	ldrb	r2, [r7, #7]
 80028b2:	3a01      	subs	r2, #1
 80028b4:	79b9      	ldrb	r1, [r7, #6]
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	b2dc      	uxtb	r4, r3
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <add_wall+0x17c>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	4622      	mov	r2, r4
 80028ca:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc90      	pop	{r4, r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000128 	.word	0x20000128

080028dc <read_wall>:
uint8_t read_wall(uint8_t x, uint8_t y, Direction dir){
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	460b      	mov	r3, r1
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	4613      	mov	r3, r2
 80028ec:	717b      	strb	r3, [r7, #5]
	if ((maze[x][y].walls & (0x01<<dir))==0){
 80028ee:	79fa      	ldrb	r2, [r7, #7]
 80028f0:	79b9      	ldrb	r1, [r7, #6]
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <read_wall+0x48>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	440b      	add	r3, r1
 80028fe:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002902:	461a      	mov	r2, r3
 8002904:	797b      	ldrb	r3, [r7, #5]
 8002906:	fa42 f303 	asr.w	r3, r2, r3
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <read_wall+0x3a>
		return 0;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <read_wall+0x3c>
	}
	else return 1;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20000128 	.word	0x20000128

08002928 <set_explored>:
void set_explored(uint8_t x, uint8_t y) {
 8002928:	b490      	push	{r4, r7}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	71bb      	strb	r3, [r7, #6]
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d81a      	bhi.n	8002974 <set_explored+0x4c>
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d817      	bhi.n	8002974 <set_explored+0x4c>
        maze[x][y].walls |= 0xF0;
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	79b9      	ldrb	r1, [r7, #6]
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <set_explored+0x58>)
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002958:	79fa      	ldrb	r2, [r7, #7]
 800295a:	79b9      	ldrb	r1, [r7, #6]
 800295c:	f063 030f 	orn	r3, r3, #15
 8002960:	b2dc      	uxtb	r4, r3
 8002962:	4807      	ldr	r0, [pc, #28]	; (8002980 <set_explored+0x58>)
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	440b      	add	r3, r1
 800296e:	4622      	mov	r2, r4
 8002970:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
    }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bc90      	pop	{r4, r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000128 	.word	0x20000128

08002984 <dir_of_lowest>:
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
        return (maze[x][y].walls & 0xF0) != 0;
    }
    return 1;
}
uint8_t dir_of_lowest(uint8_t x, uint8_t y) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	460a      	mov	r2, r1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4613      	mov	r3, r2
 8002992:	71bb      	strb	r3, [r7, #6]
	uint8_t min = 255;
 8002994:	23ff      	movs	r3, #255	; 0xff
 8002996:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = NORTH;
 8002998:	2300      	movs	r3, #0
 800299a:	73bb      	strb	r3, [r7, #14]
    if (read_wall(x, y, NORTH) == 0) {
 800299c:	79b9      	ldrb	r1, [r7, #6]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2200      	movs	r2, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff9a 	bl	80028dc <read_wall>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11d      	bne.n	80029ea <dir_of_lowest+0x66>
        if (maze[x][y + 1].dist < min) {
 80029ae:	79fa      	ldrb	r2, [r7, #7]
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	484a      	ldr	r0, [pc, #296]	; (8002ae0 <dir_of_lowest+0x15c>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4403      	add	r3, r0
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d90e      	bls.n	80029ea <dir_of_lowest+0x66>
            min = maze[x][y + 1].dist;
 80029cc:	79fa      	ldrb	r2, [r7, #7]
 80029ce:	79bb      	ldrb	r3, [r7, #6]
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	4843      	ldr	r0, [pc, #268]	; (8002ae0 <dir_of_lowest+0x15c>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4403      	add	r3, r0
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	73fb      	strb	r3, [r7, #15]
            dir = NORTH;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, EAST) == 0) {
 80029ea:	79b9      	ldrb	r1, [r7, #6]
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff73 	bl	80028dc <read_wall>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11d      	bne.n	8002a38 <dir_of_lowest+0xb4>
        if (maze[x + 1][y].dist < min) {
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	79b9      	ldrb	r1, [r7, #6]
 8002a02:	4837      	ldr	r0, [pc, #220]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4403      	add	r3, r0
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90e      	bls.n	8002a38 <dir_of_lowest+0xb4>
            min = maze[x + 1][y].dist;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	79b9      	ldrb	r1, [r7, #6]
 8002a20:	482f      	ldr	r0, [pc, #188]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4403      	add	r3, r0
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	73fb      	strb	r3, [r7, #15]
            dir = EAST;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, SOUTH) == 0) {
 8002a38:	79b9      	ldrb	r1, [r7, #6]
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff4c 	bl	80028dc <read_wall>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11d      	bne.n	8002a86 <dir_of_lowest+0x102>
        if (maze[x][y - 1].dist < min) {
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	79bb      	ldrb	r3, [r7, #6]
 8002a4e:	1e59      	subs	r1, r3, #1
 8002a50:	4823      	ldr	r0, [pc, #140]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4403      	add	r3, r0
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d90e      	bls.n	8002a86 <dir_of_lowest+0x102>
            min = maze[x][y - 1].dist;
 8002a68:	79fa      	ldrb	r2, [r7, #7]
 8002a6a:	79bb      	ldrb	r3, [r7, #6]
 8002a6c:	1e59      	subs	r1, r3, #1
 8002a6e:	481c      	ldr	r0, [pc, #112]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4403      	add	r3, r0
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	73fb      	strb	r3, [r7, #15]
            dir = SOUTH;
 8002a82:	2302      	movs	r3, #2
 8002a84:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(x, y, WEST) == 0) {
 8002a86:	79b9      	ldrb	r1, [r7, #6]
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff25 	bl	80028dc <read_wall>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <dir_of_lowest+0x150>
        if (maze[x - 1][y].dist < min) {
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	79b9      	ldrb	r1, [r7, #6]
 8002a9e:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90e      	bls.n	8002ad4 <dir_of_lowest+0x150>
            min = maze[x - 1][y].dist;
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	79b9      	ldrb	r1, [r7, #6]
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <dir_of_lowest+0x15c>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	440b      	add	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4403      	add	r3, r0
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	73fb      	strb	r3, [r7, #15]
            dir = WEST;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	73bb      	strb	r3, [r7, #14]
        }
    }
    return dir;
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000128 	.word	0x20000128

08002ae4 <flood>:
void flood(uint8_t ex, uint8_t ey) {
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	460a      	mov	r2, r1
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71bb      	strb	r3, [r7, #6]
	uint8_t nochange_flag = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
    maze[ex][ey].dist = 0;
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	79b9      	ldrb	r1, [r7, #6]
 8002afc:	4877      	ldr	r0, [pc, #476]	; (8002cdc <flood+0x1f8>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4403      	add	r3, r0
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	705a      	strb	r2, [r3, #1]

//    uint iter = 0;
    while (nochange_flag == 0) {
 8002b10:	e0da      	b.n	8002cc8 <flood+0x1e4>
    	uint8_t change_flag = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73bb      	strb	r3, [r7, #14]

        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	737b      	strb	r3, [r7, #13]
 8002b1a:	e0cc      	b.n	8002cb6 <flood+0x1d2>
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	733b      	strb	r3, [r7, #12]
 8002b20:	e0c2      	b.n	8002ca8 <flood+0x1c4>
                if (!(x == ex && y == ey)) {
 8002b22:	7b7a      	ldrb	r2, [r7, #13]
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d104      	bne.n	8002b34 <flood+0x50>
 8002b2a:	7b3a      	ldrb	r2, [r7, #12]
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f000 80b7 	beq.w	8002ca2 <flood+0x1be>
                	uint8_t min = 255;
 8002b34:	23ff      	movs	r3, #255	; 0xff
 8002b36:	72fb      	strb	r3, [r7, #11]
                    if (read_wall(x, y, NORTH) == 0) {
 8002b38:	7b39      	ldrb	r1, [r7, #12]
 8002b3a:	7b7b      	ldrb	r3, [r7, #13]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fecc 	bl	80028dc <read_wall>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11b      	bne.n	8002b82 <flood+0x9e>
                        if (maze[x][y + 1].dist < min) {
 8002b4a:	7b7a      	ldrb	r2, [r7, #13]
 8002b4c:	7b3b      	ldrb	r3, [r7, #12]
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	4862      	ldr	r0, [pc, #392]	; (8002cdc <flood+0x1f8>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4403      	add	r3, r0
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	7afa      	ldrb	r2, [r7, #11]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d90c      	bls.n	8002b82 <flood+0x9e>
                            min = maze[x][y + 1].dist;
 8002b68:	7b7a      	ldrb	r2, [r7, #13]
 8002b6a:	7b3b      	ldrb	r3, [r7, #12]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	485b      	ldr	r0, [pc, #364]	; (8002cdc <flood+0x1f8>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	440b      	add	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4403      	add	r3, r0
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, EAST) == 0) {
 8002b82:	7b39      	ldrb	r1, [r7, #12]
 8002b84:	7b7b      	ldrb	r3, [r7, #13]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fea7 	bl	80028dc <read_wall>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11b      	bne.n	8002bcc <flood+0xe8>
                        if (maze[x + 1][y].dist < min) {
 8002b94:	7b7b      	ldrb	r3, [r7, #13]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	7b39      	ldrb	r1, [r7, #12]
 8002b9a:	4850      	ldr	r0, [pc, #320]	; (8002cdc <flood+0x1f8>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	440b      	add	r3, r1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4403      	add	r3, r0
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	7afa      	ldrb	r2, [r7, #11]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <flood+0xe8>
                            min = maze[x + 1][y].dist;
 8002bb2:	7b7b      	ldrb	r3, [r7, #13]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	7b39      	ldrb	r1, [r7, #12]
 8002bb8:	4848      	ldr	r0, [pc, #288]	; (8002cdc <flood+0x1f8>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4403      	add	r3, r0
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, SOUTH) == 0) {
 8002bcc:	7b39      	ldrb	r1, [r7, #12]
 8002bce:	7b7b      	ldrb	r3, [r7, #13]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fe82 	bl	80028dc <read_wall>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11b      	bne.n	8002c16 <flood+0x132>
                        if (maze[x][y - 1].dist < min) {
 8002bde:	7b7a      	ldrb	r2, [r7, #13]
 8002be0:	7b3b      	ldrb	r3, [r7, #12]
 8002be2:	1e59      	subs	r1, r3, #1
 8002be4:	483d      	ldr	r0, [pc, #244]	; (8002cdc <flood+0x1f8>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	440b      	add	r3, r1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4403      	add	r3, r0
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	7afa      	ldrb	r2, [r7, #11]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d90c      	bls.n	8002c16 <flood+0x132>
                            min = maze[x][y - 1].dist;
 8002bfc:	7b7a      	ldrb	r2, [r7, #13]
 8002bfe:	7b3b      	ldrb	r3, [r7, #12]
 8002c00:	1e59      	subs	r1, r3, #1
 8002c02:	4836      	ldr	r0, [pc, #216]	; (8002cdc <flood+0x1f8>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4403      	add	r3, r0
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(x, y, WEST) == 0) {
 8002c16:	7b39      	ldrb	r1, [r7, #12]
 8002c18:	7b7b      	ldrb	r3, [r7, #13]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fe5d 	bl	80028dc <read_wall>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11b      	bne.n	8002c60 <flood+0x17c>
                        if (maze[x - 1][y].dist < min) {
 8002c28:	7b7b      	ldrb	r3, [r7, #13]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	7b39      	ldrb	r1, [r7, #12]
 8002c2e:	482b      	ldr	r0, [pc, #172]	; (8002cdc <flood+0x1f8>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	440b      	add	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4403      	add	r3, r0
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	7afa      	ldrb	r2, [r7, #11]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <flood+0x17c>
                            min = maze[x - 1][y].dist;
 8002c46:	7b7b      	ldrb	r3, [r7, #13]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	7b39      	ldrb	r1, [r7, #12]
 8002c4c:	4823      	ldr	r0, [pc, #140]	; (8002cdc <flood+0x1f8>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4403      	add	r3, r0
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (maze[x][y].dist != min + 1) {
 8002c60:	7b7a      	ldrb	r2, [r7, #13]
 8002c62:	7b39      	ldrb	r1, [r7, #12]
 8002c64:	481d      	ldr	r0, [pc, #116]	; (8002cdc <flood+0x1f8>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	440b      	add	r3, r1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4403      	add	r3, r0
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	461a      	mov	r2, r3
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d010      	beq.n	8002ca2 <flood+0x1be>
                        change_flag = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73bb      	strb	r3, [r7, #14]
                        maze[x][y].dist = min + 1;
 8002c84:	7b7a      	ldrb	r2, [r7, #13]
 8002c86:	7b39      	ldrb	r1, [r7, #12]
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	b2dc      	uxtb	r4, r3
 8002c8e:	4813      	ldr	r0, [pc, #76]	; (8002cdc <flood+0x1f8>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	440b      	add	r3, r1
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4403      	add	r3, r0
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	705a      	strb	r2, [r3, #1]
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	733b      	strb	r3, [r7, #12]
 8002ca8:	7b3b      	ldrb	r3, [r7, #12]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	f67f af39 	bls.w	8002b22 <flood+0x3e>
        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	737b      	strb	r3, [r7, #13]
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	f67f af2f 	bls.w	8002b1c <flood+0x38>
                    }
                }
            }
        }
        // Check if there were no changes in this iteration
        if (change_flag == 0) {
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <flood+0x1e4>
            nochange_flag = 1;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
    while (nochange_flag == 0) {
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f43f af21 	beq.w	8002b12 <flood+0x2e>
//    	sprintf(send_buffer, "fl:%d\n", iter);
//    	uart_transmit(send_buffer, strlen(send_buffer));
//    	HAL_Delay(15);
//    	iter++;
    }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000128 	.word	0x20000128

08002ce0 <motorsInit>:
extern int32_t Dist_error_acc;

extern MouseStruct Mouse;
extern uint8_t measurements[3]; //L:M:R
extern char send_buffer[64];
void motorsInit(){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	4818      	ldr	r0, [pc, #96]	; (8002d48 <motorsInit+0x68>)
 8002ce8:	f005 fa04 	bl	80080f4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002cec:	2108      	movs	r1, #8
 8002cee:	4816      	ldr	r0, [pc, #88]	; (8002d48 <motorsInit+0x68>)
 8002cf0:	f005 fa00 	bl	80080f4 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <motorsInit+0x68>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <motorsInit+0x68>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002d04:	2100      	movs	r1, #0
 8002d06:	4811      	ldr	r0, [pc, #68]	; (8002d4c <motorsInit+0x6c>)
 8002d08:	f005 f9f4 	bl	80080f4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	480f      	ldr	r0, [pc, #60]	; (8002d4c <motorsInit+0x6c>)
 8002d10:	f005 f9f0 	bl	80080f4 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <motorsInit+0x6c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <motorsInit+0x6c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002d24:	213c      	movs	r1, #60	; 0x3c
 8002d26:	480a      	ldr	r0, [pc, #40]	; (8002d50 <motorsInit+0x70>)
 8002d28:	f005 fb3a 	bl	80083a0 <HAL_TIM_Encoder_Start>
	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002d2c:	213c      	movs	r1, #60	; 0x3c
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <motorsInit+0x74>)
 8002d30:	f005 fb36 	bl	80083a0 <HAL_TIM_Encoder_Start>
	  htim3.Instance->CNT = 0;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <motorsInit+0x70>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <motorsInit+0x74>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000364 	.word	0x20000364
 8002d4c:	200003ac 	.word	0x200003ac
 8002d50:	200003f4 	.word	0x200003f4
 8002d54:	2000043c 	.word	0x2000043c

08002d58 <reset_counts>:
void reset_counts(){
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	  htim3.Instance->CNT = 0;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <reset_counts+0x80>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <reset_counts+0x84>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
//	  L_speed_setpoint = 0; //mm/s
//	  R_speed_setpoint = 0;//mm/s
	  L_prev_enc_count = 0;
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <reset_counts+0x88>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	801a      	strh	r2, [r3, #0]
	  R_prev_enc_count = 0;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <reset_counts+0x8c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]
	  L_ctrl_signal = 0;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <reset_counts+0x90>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
	  R_ctrl_signal = 0;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <reset_counts+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
	  L_error = 0;
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <reset_counts+0x98>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
	  R_error = 0;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <reset_counts+0x9c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
	  L_acc_error = 0;
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <reset_counts+0xa0>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
	  R_acc_error = 0;
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <reset_counts+0xa4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
	  L_acc = 0;
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <reset_counts+0xa8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
	  R_acc = 0;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <reset_counts+0xac>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
	  Dist_error_acc = 0;
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <reset_counts+0xb0>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
	  //Motor 1
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <reset_counts+0xb4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <reset_counts+0xb4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <reset_counts+0xb8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <reset_counts+0xb8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	200003f4 	.word	0x200003f4
 8002ddc:	2000043c 	.word	0x2000043c
 8002de0:	200000fa 	.word	0x200000fa
 8002de4:	200000fc 	.word	0x200000fc
 8002de8:	20000100 	.word	0x20000100
 8002dec:	20000104 	.word	0x20000104
 8002df0:	20000108 	.word	0x20000108
 8002df4:	2000010c 	.word	0x2000010c
 8002df8:	20000110 	.word	0x20000110
 8002dfc:	20000114 	.word	0x20000114
 8002e00:	20000118 	.word	0x20000118
 8002e04:	2000011c 	.word	0x2000011c
 8002e08:	20000120 	.word	0x20000120
 8002e0c:	20000364 	.word	0x20000364
 8002e10:	200003ac 	.word	0x200003ac
 8002e14:	00000000 	.word	0x00000000

08002e18 <move>:
void move(int16_t velocity, int16_t omega){ // velocity in mm/s, omega in deg/s
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460a      	mov	r2, r1
 8002e22:	80fb      	strh	r3, [r7, #6]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80bb      	strh	r3, [r7, #4]
	L_speed_setpoint = velocity + (WHEEL_SPACING_MM*omega*PI)/(2*180); //mm/s
 8002e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb81 	bl	8000534 <__aeabi_i2d>
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	00da      	lsls	r2, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb75 	bl	8000534 <__aeabi_i2d>
 8002e4a:	a369      	add	r3, pc, #420	; (adr r3, 8002ff0 <move+0x1d8>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f7fd fbda 	bl	8000608 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <move+0x1e0>)
 8002e62:	f7fd fcfb 	bl	800085c <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fa15 	bl	800029c <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fdd7 	bl	8000a2c <__aeabi_d2iz>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <move+0x1e4>)
 8002e84:	801a      	strh	r2, [r3, #0]
	R_speed_setpoint = velocity - (WHEEL_SPACING_MM*omega*PI)/(2*180);//mm/s
 8002e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb52 	bl	8000534 <__aeabi_i2d>
 8002e90:	4604      	mov	r4, r0
 8002e92:	460d      	mov	r5, r1
 8002e94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00da      	lsls	r2, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb46 	bl	8000534 <__aeabi_i2d>
 8002ea8:	a351      	add	r3, pc, #324	; (adr r3, 8002ff0 <move+0x1d8>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fbab 	bl	8000608 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <move+0x1e0>)
 8002ec0:	f7fd fccc 	bl	800085c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f9e4 	bl	8000298 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fda8 	bl	8000a2c <__aeabi_d2iz>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <move+0x1e8>)
 8002ee2:	801a      	strh	r2, [r3, #0]

	int8_t kickL = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
	int8_t kickR = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73bb      	strb	r3, [r7, #14]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8002eec:	f001 fa64 	bl	80043b8 <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]

	while(measurements[1]>135 && velocity != 0 && (dir_of_lowest(Mouse.current_cell_x, Mouse.current_cell_y)==rel_to_fixed_dir(STRAIGHT))){
 8002ef2:	e03a      	b.n	8002f6a <move+0x152>
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 8002ef4:	f001 fa60 	bl	80043b8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b14      	cmp	r3, #20
 8002f00:	d933      	bls.n	8002f6a <move+0x152>
			prev_ctr_loop_time = HAL_GetTick();
 8002f02:	f001 fa59 	bl	80043b8 <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]

			if (measurements[0]<60) {
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <move+0x1ec>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b3b      	cmp	r3, #59	; 0x3b
 8002f0e:	d804      	bhi.n	8002f1a <move+0x102>
				kickR = -1;
 8002f10:	23ff      	movs	r3, #255	; 0xff
 8002f12:	73bb      	strb	r3, [r7, #14]
				kickL = 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e007      	b.n	8002f2a <move+0x112>
			}
			else if (measurements[2]<60){
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <move+0x1ec>)
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	2b3b      	cmp	r3, #59	; 0x3b
 8002f20:	d803      	bhi.n	8002f2a <move+0x112>
				kickR = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73bb      	strb	r3, [r7, #14]
				kickL = -1;
 8002f26:	23ff      	movs	r3, #255	; 0xff
 8002f28:	73fb      	strb	r3, [r7, #15]
			}
			R_motor_feedback_control(kickR);
 8002f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa9a 	bl	8003468 <R_motor_feedback_control>
			L_motor_feedback_control(kickL);
 8002f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fba1 	bl	8003680 <L_motor_feedback_control>
			update();
 8002f3e:	f7ff f93d 	bl	80021bc <update>
			sprintf(send_buffer, "L:%d R:%d\n",(int)L_acc,(int)R_acc );
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <move+0x1f0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <move+0x1f4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4931      	ldr	r1, [pc, #196]	; (8003010 <move+0x1f8>)
 8002f4c:	4831      	ldr	r0, [pc, #196]	; (8003014 <move+0x1fc>)
 8002f4e:	f007 f919 	bl	800a184 <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 8002f52:	4830      	ldr	r0, [pc, #192]	; (8003014 <move+0x1fc>)
 8002f54:	f7fd f944 	bl	80001e0 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	482d      	ldr	r0, [pc, #180]	; (8003014 <move+0x1fc>)
 8002f5e:	f001 f951 	bl	8004204 <uart_transmit>
			kickL = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
			kickR = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73bb      	strb	r3, [r7, #14]
	while(measurements[1]>135 && velocity != 0 && (dir_of_lowest(Mouse.current_cell_x, Mouse.current_cell_y)==rel_to_fixed_dir(STRAIGHT))){
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <move+0x1ec>)
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b87      	cmp	r3, #135	; 0x87
 8002f70:	d913      	bls.n	8002f9a <move+0x182>
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00f      	beq.n	8002f9a <move+0x182>
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <move+0x200>)
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	4a26      	ldr	r2, [pc, #152]	; (8003018 <move+0x200>)
 8002f80:	7892      	ldrb	r2, [r2, #2]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fcfd 	bl	8002984 <dir_of_lowest>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461c      	mov	r4, r3
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff fbc8 	bl	8002724 <rel_to_fixed_dir>
 8002f94:	4603      	mov	r3, r0
 8002f96:	429c      	cmp	r4, r3
 8002f98:	d0ac      	beq.n	8002ef4 <move+0xdc>
		}
	}
	L_speed_setpoint = 0; //mm/s
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <move+0x1e4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
	R_speed_setpoint = 0;//mm/s
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <move+0x1e8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
	while((L_prev_enc_count > 2)&&(R_prev_enc_count>2)){
 8002fa6:	e011      	b.n	8002fcc <move+0x1b4>
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 8002fa8:	f001 fa06 	bl	80043b8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b14      	cmp	r3, #20
 8002fb4:	d90a      	bls.n	8002fcc <move+0x1b4>
			prev_ctr_loop_time = HAL_GetTick();
 8002fb6:	f001 f9ff 	bl	80043b8 <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]
			R_motor_feedback_control(0);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f000 fa53 	bl	8003468 <R_motor_feedback_control>
			L_motor_feedback_control(0);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 fb5c 	bl	8003680 <L_motor_feedback_control>
			update();
 8002fc8:	f7ff f8f8 	bl	80021bc <update>
	while((L_prev_enc_count > 2)&&(R_prev_enc_count>2)){
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <move+0x204>)
 8002fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	dd04      	ble.n	8002fe0 <move+0x1c8>
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <move+0x208>)
 8002fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	dce3      	bgt.n	8002fa8 <move+0x190>
		}
	}
	reset_counts();
 8002fe0:	f7ff feba 	bl	8002d58 <reset_counts>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bdb0      	pop	{r4, r5, r7, pc}
 8002fec:	f3af 8000 	nop.w
 8002ff0:	f01b866e 	.word	0xf01b866e
 8002ff4:	400921f9 	.word	0x400921f9
 8002ff8:	40768000 	.word	0x40768000
 8002ffc:	200000f6 	.word	0x200000f6
 8003000:	200000f8 	.word	0x200000f8
 8003004:	20000124 	.word	0x20000124
 8003008:	20000118 	.word	0x20000118
 800300c:	2000011c 	.word	0x2000011c
 8003010:	0800abcc 	.word	0x0800abcc
 8003014:	20000094 	.word	0x20000094
 8003018:	200001c4 	.word	0x200001c4
 800301c:	200000fa 	.word	0x200000fa
 8003020:	200000fc 	.word	0x200000fc
 8003024:	00000000 	.word	0x00000000

08003028 <turn>:
void turn(int16_t deg){
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
	reset_counts();
 8003032:	f7ff fe91 	bl	8002d58 <reset_counts>
	int16_t L_count_target = (int)(1.01*(WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360));
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	f242 52f8 	movw	r2, #9720	; 0x25f8
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa76 	bl	8000534 <__aeabi_i2d>
 8003048:	a3b3      	add	r3, pc, #716	; (adr r3, 8003318 <turn+0x2f0>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fadb 	bl	8000608 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	a3b1      	add	r3, pc, #708	; (adr r3, 8003320 <turn+0x2f8>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fbfc 	bl	800085c <__aeabi_ddiv>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f7fd fcde 	bl	8000a2c <__aeabi_d2iz>
 8003070:	4603      	mov	r3, r0
 8003072:	81bb      	strh	r3, [r7, #12]
	int16_t R_count_target = (int)(-1.01*(WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360));
 8003074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003078:	f242 52f8 	movw	r2, #9720	; 0x25f8
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa57 	bl	8000534 <__aeabi_i2d>
 8003086:	a3a8      	add	r3, pc, #672	; (adr r3, 8003328 <turn+0x300>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f7fd fabc 	bl	8000608 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	a3a1      	add	r3, pc, #644	; (adr r3, 8003320 <turn+0x2f8>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fbdd 	bl	800085c <__aeabi_ddiv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fcbf 	bl	8000a2c <__aeabi_d2iz>
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
	int16_t L_prev_error = L_count_target;
 80030b2:	89bb      	ldrh	r3, [r7, #12]
 80030b4:	82fb      	strh	r3, [r7, #22]
	int16_t R_prev_error = R_count_target;
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	82bb      	strh	r3, [r7, #20]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80030ba:	f001 f97d 	bl	80043b8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]
	uint8_t turn_cmplt = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	73fb      	strb	r3, [r7, #15]
	while(turn_cmplt == 0){
 80030c4:	e184      	b.n	80033d0 <turn+0x3a8>
		if (HAL_GetTick() - prev_ctr_loop_time > CONTROL_LOOP_PERIOD_MS){
 80030c6:	f001 f977 	bl	80043b8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b14      	cmp	r3, #20
 80030d2:	f240 817d 	bls.w	80033d0 <turn+0x3a8>
			prev_ctr_loop_time = HAL_GetTick();
 80030d6:	f001 f96f 	bl	80043b8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]
			R_prev_enc_count = htim3.Instance->CNT;
 80030dc:	4b82      	ldr	r3, [pc, #520]	; (80032e8 <turn+0x2c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <turn+0x2c4>)
 80030e6:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 80030e8:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <turn+0x2c8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <turn+0x2cc>)
 80030f2:	801a      	strh	r2, [r3, #0]
//			R_motor_feedback_control();
			R_error = R_count_target - R_prev_enc_count;
 80030f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030f8:	4a7c      	ldr	r2, [pc, #496]	; (80032ec <turn+0x2c4>)
 80030fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	4a7d      	ldr	r2, [pc, #500]	; (80032f8 <turn+0x2d0>)
 8003102:	6013      	str	r3, [r2, #0]
			R_ctrl_signal = R_Kpt*R_error + R_Kid*(R_error-R_prev_error)*50;
 8003104:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <turn+0x2d0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa10 	bl	8000534 <__aeabi_i2d>
 8003114:	4604      	mov	r4, r0
 8003116:	460d      	mov	r5, r1
 8003118:	4b77      	ldr	r3, [pc, #476]	; (80032f8 <turn+0x2d0>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fa06 	bl	8000534 <__aeabi_i2d>
 8003128:	a36d      	add	r3, pc, #436	; (adr r3, 80032e0 <turn+0x2b8>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd fa6b 	bl	8000608 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <turn+0x2d4>)
 8003140:	f7fd fa62 	bl	8000608 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f8a6 	bl	800029c <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fc68 	bl	8000a2c <__aeabi_d2iz>
 800315c:	4603      	mov	r3, r0
 800315e:	4a68      	ldr	r2, [pc, #416]	; (8003300 <turn+0x2d8>)
 8003160:	6013      	str	r3, [r2, #0]

			if (R_error > 0) R_ctrl_signal += R_ff_offset;
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <turn+0x2d0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	dd04      	ble.n	8003174 <turn+0x14c>
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <turn+0x2d8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	337d      	adds	r3, #125	; 0x7d
 8003170:	4a63      	ldr	r2, [pc, #396]	; (8003300 <turn+0x2d8>)
 8003172:	6013      	str	r3, [r2, #0]
			if (R_error < 0) R_ctrl_signal -= R_ff_offset;
 8003174:	4b60      	ldr	r3, [pc, #384]	; (80032f8 <turn+0x2d0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da04      	bge.n	8003186 <turn+0x15e>
 800317c:	4b60      	ldr	r3, [pc, #384]	; (8003300 <turn+0x2d8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3b7d      	subs	r3, #125	; 0x7d
 8003182:	4a5f      	ldr	r2, [pc, #380]	; (8003300 <turn+0x2d8>)
 8003184:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= 500) R_ctrl_signal = 500;
 8003186:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <turn+0x2d8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800318e:	db03      	blt.n	8003198 <turn+0x170>
 8003190:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <turn+0x2d8>)
 8003192:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003196:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -500) R_ctrl_signal = -500;
 8003198:	4b59      	ldr	r3, [pc, #356]	; (8003300 <turn+0x2d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80031a0:	dc02      	bgt.n	80031a8 <turn+0x180>
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <turn+0x2d8>)
 80031a4:	4a57      	ldr	r2, [pc, #348]	; (8003304 <turn+0x2dc>)
 80031a6:	601a      	str	r2, [r3, #0]

			if (R_ctrl_signal == 0){
 80031a8:	4b55      	ldr	r3, [pc, #340]	; (8003300 <turn+0x2d8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d108      	bne.n	80031c2 <turn+0x19a>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80031b0:	4b55      	ldr	r3, [pc, #340]	; (8003308 <turn+0x2e0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <turn+0x2e0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c0:	e017      	b.n	80031f2 <turn+0x1ca>
			}
			else if (R_ctrl_signal > 0){
 80031c2:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <turn+0x2d8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dd09      	ble.n	80031de <turn+0x1b6>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80031ca:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <turn+0x2d8>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <turn+0x2e0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <turn+0x2e0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
 80031dc:	e009      	b.n	80031f2 <turn+0x1ca>
			}
			else{
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80031de:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <turn+0x2e0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <turn+0x2d8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	425a      	negs	r2, r3
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <turn+0x2e0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
			}


//			L_motor_feedback_control();
			L_error = L_count_target - L_prev_enc_count;
 80031f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <turn+0x2cc>)
 80031f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	4a43      	ldr	r2, [pc, #268]	; (800330c <turn+0x2e4>)
 8003200:	6013      	str	r3, [r2, #0]
			L_ctrl_signal = L_Kpt*L_error + L_Kid*(L_error-L_prev_error)*50;
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <turn+0x2e4>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f991 	bl	8000534 <__aeabi_i2d>
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <turn+0x2e4>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f987 	bl	8000534 <__aeabi_i2d>
 8003226:	a32e      	add	r3, pc, #184	; (adr r3, 80032e0 <turn+0x2b8>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd f9ec 	bl	8000608 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <turn+0x2d4>)
 800323e:	f7fd f9e3 	bl	8000608 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f827 	bl	800029c <__adddf3>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fbe9 	bl	8000a2c <__aeabi_d2iz>
 800325a:	4603      	mov	r3, r0
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <turn+0x2e8>)
 800325e:	6013      	str	r3, [r2, #0]
			if (L_error > 0) L_ctrl_signal += L_ff_offset;
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <turn+0x2e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	dd04      	ble.n	8003272 <turn+0x24a>
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <turn+0x2e8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	337d      	adds	r3, #125	; 0x7d
 800326e:	4a28      	ldr	r2, [pc, #160]	; (8003310 <turn+0x2e8>)
 8003270:	6013      	str	r3, [r2, #0]
			if (L_error < 0) L_ctrl_signal -= L_ff_offset;
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <turn+0x2e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da04      	bge.n	8003284 <turn+0x25c>
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <turn+0x2e8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b7d      	subs	r3, #125	; 0x7d
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <turn+0x2e8>)
 8003282:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=500) L_ctrl_signal = 500;
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <turn+0x2e8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800328c:	db03      	blt.n	8003296 <turn+0x26e>
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <turn+0x2e8>)
 8003290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003294:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-500) L_ctrl_signal = -500;
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <turn+0x2e8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800329e:	dc02      	bgt.n	80032a6 <turn+0x27e>
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <turn+0x2e8>)
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <turn+0x2dc>)
 80032a4:	601a      	str	r2, [r3, #0]

			if (L_ctrl_signal == 0){
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <turn+0x2e8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <turn+0x298>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <turn+0x2ec>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <turn+0x2ec>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
 80032be:	e041      	b.n	8003344 <turn+0x31c>
			}
			else if (L_ctrl_signal > 0){
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <turn+0x2e8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dd33      	ble.n	8003330 <turn+0x308>
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <turn+0x2e8>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <turn+0x2ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <turn+0x2ec>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
 80032da:	e033      	b.n	8003344 <turn+0x31c>
 80032dc:	f3af 8000 	nop.w
 80032e0:	9999999a 	.word	0x9999999a
 80032e4:	3fc99999 	.word	0x3fc99999
 80032e8:	200003f4 	.word	0x200003f4
 80032ec:	200000fc 	.word	0x200000fc
 80032f0:	2000043c 	.word	0x2000043c
 80032f4:	200000fa 	.word	0x200000fa
 80032f8:	2000010c 	.word	0x2000010c
 80032fc:	40490000 	.word	0x40490000
 8003300:	20000104 	.word	0x20000104
 8003304:	fffffe0c 	.word	0xfffffe0c
 8003308:	20000364 	.word	0x20000364
 800330c:	20000108 	.word	0x20000108
 8003310:	20000100 	.word	0x20000100
 8003314:	200003ac 	.word	0x200003ac
 8003318:	c28f5c29 	.word	0xc28f5c29
 800331c:	3ff028f5 	.word	0x3ff028f5
 8003320:	00000000 	.word	0x00000000
 8003324:	40c73400 	.word	0x40c73400
 8003328:	c28f5c29 	.word	0xc28f5c29
 800332c:	bff028f5 	.word	0xbff028f5
			}
			else{
				//motor 1
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003330:	4b41      	ldr	r3, [pc, #260]	; (8003438 <turn+0x410>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2200      	movs	r2, #0
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8003338:	4b40      	ldr	r3, [pc, #256]	; (800343c <turn+0x414>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	425a      	negs	r2, r3
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <turn+0x410>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (abs(L_error) <= Enc_Turn_Error && abs(L_prev_error) <= Enc_Turn_Error && abs(R_error) <= Enc_Turn_Error && abs(R_prev_error) <= Enc_Turn_Error) turn_cmplt=1;
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <turn+0x418>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	db1e      	blt.n	800338c <turn+0x364>
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <turn+0x418>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	dc1a      	bgt.n	800338c <turn+0x364>
 8003356:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	425b      	neglt	r3, r3
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d812      	bhi.n	800338c <turn+0x364>
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <turn+0x41c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	db0d      	blt.n	800338c <turn+0x364>
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <turn+0x41c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	dc09      	bgt.n	800338c <turn+0x364>
 8003378:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	bfb8      	it	lt
 8003380:	425b      	neglt	r3, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d801      	bhi.n	800338c <turn+0x364>
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
			L_prev_error = L_error;
 800338c:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <turn+0x418>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	82fb      	strh	r3, [r7, #22]
			R_prev_error = R_error;
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <turn+0x41c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	82bb      	strh	r3, [r7, #20]

			sprintf(send_buffer, "L:%d R:%d LT:%d RT:%d\n",(int)L_prev_enc_count,(int)R_prev_enc_count, (int)L_count_target , (int)R_count_target);
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <turn+0x420>)
 800339a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339e:	4619      	mov	r1, r3
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <turn+0x424>)
 80033a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	460a      	mov	r2, r1
 80033b8:	4925      	ldr	r1, [pc, #148]	; (8003450 <turn+0x428>)
 80033ba:	4826      	ldr	r0, [pc, #152]	; (8003454 <turn+0x42c>)
 80033bc:	f006 fee2 	bl	800a184 <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 80033c0:	4824      	ldr	r0, [pc, #144]	; (8003454 <turn+0x42c>)
 80033c2:	f7fc ff0d 	bl	80001e0 <strlen>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4619      	mov	r1, r3
 80033ca:	4822      	ldr	r0, [pc, #136]	; (8003454 <turn+0x42c>)
 80033cc:	f000 ff1a 	bl	8004204 <uart_transmit>
	while(turn_cmplt == 0){
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f43f ae77 	beq.w	80030c6 <turn+0x9e>
		}
	}
	Mouse.heading = (8 + Mouse.heading + (8+(8*deg)/360)%8)%8;
 80033d8:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <turn+0x430>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f103 0208 	add.w	r2, r3, #8
 80033e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e4:	491d      	ldr	r1, [pc, #116]	; (800345c <turn+0x434>)
 80033e6:	fb81 0103 	smull	r0, r1, r1, r3
 80033ea:	4419      	add	r1, r3
 80033ec:	1149      	asrs	r1, r1, #5
 80033ee:	17db      	asrs	r3, r3, #31
 80033f0:	1acb      	subs	r3, r1, r3
 80033f2:	3308      	adds	r3, #8
 80033f4:	4259      	negs	r1, r3
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	f001 0107 	and.w	r1, r1, #7
 80033fe:	bf58      	it	pl
 8003400:	424b      	negpl	r3, r1
 8003402:	4413      	add	r3, r2
 8003404:	425a      	negs	r2, r3
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	f002 0207 	and.w	r2, r2, #7
 800340e:	bf58      	it	pl
 8003410:	4253      	negpl	r3, r2
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <turn+0x430>)
 8003416:	701a      	strb	r2, [r3, #0]
	reset_counts();
 8003418:	f7ff fc9e 	bl	8002d58 <reset_counts>
	//need to take into account that after turn, mouse is in middle of cell
	R_acc += 35;
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <turn+0x438>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3323      	adds	r3, #35	; 0x23
 8003422:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <turn+0x438>)
 8003424:	6013      	str	r3, [r2, #0]
	L_acc += 35;
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <turn+0x43c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3323      	adds	r3, #35	; 0x23
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <turn+0x43c>)
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bdb0      	pop	{r4, r5, r7, pc}
 8003438:	200003ac 	.word	0x200003ac
 800343c:	20000100 	.word	0x20000100
 8003440:	20000108 	.word	0x20000108
 8003444:	2000010c 	.word	0x2000010c
 8003448:	200000fa 	.word	0x200000fa
 800344c:	200000fc 	.word	0x200000fc
 8003450:	0800abd8 	.word	0x0800abd8
 8003454:	20000094 	.word	0x20000094
 8003458:	200001c4 	.word	0x200001c4
 800345c:	b60b60b7 	.word	0xb60b60b7
 8003460:	2000011c 	.word	0x2000011c
 8003464:	20000118 	.word	0x20000118

08003468 <R_motor_feedback_control>:
void R_motor_feedback_control(int8_t kick){//speed in mm/s
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
	Dist_error_acc += L_acc - R_acc;
 8003472:	4b75      	ldr	r3, [pc, #468]	; (8003648 <R_motor_feedback_control+0x1e0>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b75      	ldr	r3, [pc, #468]	; (800364c <R_motor_feedback_control+0x1e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	4b74      	ldr	r3, [pc, #464]	; (8003650 <R_motor_feedback_control+0x1e8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4413      	add	r3, r2
 8003482:	4a73      	ldr	r2, [pc, #460]	; (8003650 <R_motor_feedback_control+0x1e8>)
 8003484:	6013      	str	r3, [r2, #0]
	R_prev_enc_count = htim3.Instance->CNT;
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <R_motor_feedback_control+0x1ec>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b21a      	sxth	r2, r3
 800348e:	4b72      	ldr	r3, [pc, #456]	; (8003658 <R_motor_feedback_control+0x1f0>)
 8003490:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 8003492:	4b71      	ldr	r3, [pc, #452]	; (8003658 <R_motor_feedback_control+0x1f0>)
 8003494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003498:	461a      	mov	r2, r3
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <R_motor_feedback_control+0x1e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <R_motor_feedback_control+0x1e4>)
 80034a2:	6013      	str	r3, [r2, #0]

	//error in encoder count for that ctrl period
	R_error = (int)((R_speed_setpoint*COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - R_prev_enc_count;
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <R_motor_feedback_control+0x1f4>)
 80034a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f83d 	bl	8000534 <__aeabi_i2d>
 80034ba:	a361      	add	r3, pc, #388	; (adr r3, 8003640 <R_motor_feedback_control+0x1d8>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f9cc 	bl	800085c <__aeabi_ddiv>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd faae 	bl	8000a2c <__aeabi_d2iz>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <R_motor_feedback_control+0x1f0>)
 80034d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	4a61      	ldr	r2, [pc, #388]	; (8003660 <R_motor_feedback_control+0x1f8>)
 80034dc:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error *(1-abs(kick));
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfb8      	it	lt
 80034e6:	425b      	neglt	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f1c3 0301 	rsb	r3, r3, #1
 80034ee:	4a5c      	ldr	r2, [pc, #368]	; (8003660 <R_motor_feedback_control+0x1f8>)
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fb03 f202 	mul.w	r2, r3, r2
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <R_motor_feedback_control+0x1fc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a59      	ldr	r2, [pc, #356]	; (8003664 <R_motor_feedback_control+0x1fc>)
 80034fe:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 8003500:	4b58      	ldr	r3, [pc, #352]	; (8003664 <R_motor_feedback_control+0x1fc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003508:	dd03      	ble.n	8003512 <R_motor_feedback_control+0xaa>
 800350a:	4b56      	ldr	r3, [pc, #344]	; (8003664 <R_motor_feedback_control+0x1fc>)
 800350c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003510:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <R_motor_feedback_control+0x1fc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800351a:	da02      	bge.n	8003522 <R_motor_feedback_control+0xba>
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <R_motor_feedback_control+0x1fc>)
 800351e:	4a52      	ldr	r2, [pc, #328]	; (8003668 <R_motor_feedback_control+0x200>)
 8003520:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward 				proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint + K_kick*kick;// + K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 8003522:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <R_motor_feedback_control+0x1f8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2232      	movs	r2, #50	; 0x32
 8003528:	fb03 f202 	mul.w	r2, r3, r2
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <R_motor_feedback_control+0x1fc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4413      	add	r3, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc fffe 	bl	8000534 <__aeabi_i2d>
 8003538:	4604      	mov	r4, r0
 800353a:	460d      	mov	r5, r1
 800353c:	4b47      	ldr	r3, [pc, #284]	; (800365c <R_motor_feedback_control+0x1f4>)
 800353e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc fff6 	bl	8000534 <__aeabi_i2d>
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	4b47      	ldr	r3, [pc, #284]	; (800366c <R_motor_feedback_control+0x204>)
 800354e:	f7fd f85b 	bl	8000608 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fc fe9f 	bl	800029c <__adddf3>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4614      	mov	r4, r2
 8003564:	461d      	mov	r5, r3
 8003566:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffdd 	bl	8000534 <__aeabi_i2d>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4620      	mov	r0, r4
 8003580:	4629      	mov	r1, r5
 8003582:	f7fc fe8b 	bl	800029c <__adddf3>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fa4d 	bl	8000a2c <__aeabi_d2iz>
 8003592:	4603      	mov	r3, r0
 8003594:	4a36      	ldr	r2, [pc, #216]	; (8003670 <R_motor_feedback_control+0x208>)
 8003596:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint > 0) R_ctrl_signal += R_ff_offset;
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <R_motor_feedback_control+0x1f4>)
 800359a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dd04      	ble.n	80035ac <R_motor_feedback_control+0x144>
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <R_motor_feedback_control+0x208>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	337d      	adds	r3, #125	; 0x7d
 80035a8:	4a31      	ldr	r2, [pc, #196]	; (8003670 <R_motor_feedback_control+0x208>)
 80035aa:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint < 0) R_ctrl_signal -= R_ff_offset;
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <R_motor_feedback_control+0x1f4>)
 80035ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da04      	bge.n	80035c0 <R_motor_feedback_control+0x158>
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <R_motor_feedback_control+0x208>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3b7d      	subs	r3, #125	; 0x7d
 80035bc:	4a2c      	ldr	r2, [pc, #176]	; (8003670 <R_motor_feedback_control+0x208>)
 80035be:	6013      	str	r3, [r2, #0]

	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <R_motor_feedback_control+0x208>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c8:	db03      	blt.n	80035d2 <R_motor_feedback_control+0x16a>
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <R_motor_feedback_control+0x208>)
 80035cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d0:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <R_motor_feedback_control+0x208>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80035da:	dc02      	bgt.n	80035e2 <R_motor_feedback_control+0x17a>
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <R_motor_feedback_control+0x208>)
 80035de:	4a25      	ldr	r2, [pc, #148]	; (8003674 <R_motor_feedback_control+0x20c>)
 80035e0:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <R_motor_feedback_control+0x208>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d108      	bne.n	80035fc <R_motor_feedback_control+0x194>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80035ea:	4b23      	ldr	r3, [pc, #140]	; (8003678 <R_motor_feedback_control+0x210>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <R_motor_feedback_control+0x210>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80035fa:	e017      	b.n	800362c <R_motor_feedback_control+0x1c4>
	}
	else if (R_ctrl_signal > 0){
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <R_motor_feedback_control+0x208>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	dd09      	ble.n	8003618 <R_motor_feedback_control+0x1b0>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <R_motor_feedback_control+0x208>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <R_motor_feedback_control+0x210>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <R_motor_feedback_control+0x210>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	63da      	str	r2, [r3, #60]	; 0x3c
 8003616:	e009      	b.n	800362c <R_motor_feedback_control+0x1c4>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003618:	4b17      	ldr	r3, [pc, #92]	; (8003678 <R_motor_feedback_control+0x210>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <R_motor_feedback_control+0x208>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	425a      	negs	r2, r3
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <R_motor_feedback_control+0x210>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	htim3.Instance->CNT = 0;
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <R_motor_feedback_control+0x1ec>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bdb0      	pop	{r4, r5, r7, pc}
 800363c:	f3af 8000 	nop.w
 8003640:	851eb851 	.word	0x851eb851
 8003644:	40f94f87 	.word	0x40f94f87
 8003648:	20000118 	.word	0x20000118
 800364c:	2000011c 	.word	0x2000011c
 8003650:	20000120 	.word	0x20000120
 8003654:	200003f4 	.word	0x200003f4
 8003658:	200000fc 	.word	0x200000fc
 800365c:	200000f8 	.word	0x200000f8
 8003660:	2000010c 	.word	0x2000010c
 8003664:	20000114 	.word	0x20000114
 8003668:	fffffc18 	.word	0xfffffc18
 800366c:	3fe00000 	.word	0x3fe00000
 8003670:	20000104 	.word	0x20000104
 8003674:	fffffc19 	.word	0xfffffc19
 8003678:	20000364 	.word	0x20000364
 800367c:	00000000 	.word	0x00000000

08003680 <L_motor_feedback_control>:

void L_motor_feedback_control(int8_t kick){//speed in mm/s
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
	L_prev_enc_count = htim5.Instance->CNT;
 800368a:	4b71      	ldr	r3, [pc, #452]	; (8003850 <L_motor_feedback_control+0x1d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b21a      	sxth	r2, r3
 8003692:	4b70      	ldr	r3, [pc, #448]	; (8003854 <L_motor_feedback_control+0x1d4>)
 8003694:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <L_motor_feedback_control+0x1d4>)
 8003698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369c:	461a      	mov	r2, r3
 800369e:	4b6e      	ldr	r3, [pc, #440]	; (8003858 <L_motor_feedback_control+0x1d8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	4a6c      	ldr	r2, [pc, #432]	; (8003858 <L_motor_feedback_control+0x1d8>)
 80036a6:	6013      	str	r3, [r2, #0]
	//error in encoder count for that ctrl period
	L_error = (int)((L_speed_setpoint*COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - L_prev_enc_count;
 80036a8:	4b6c      	ldr	r3, [pc, #432]	; (800385c <L_motor_feedback_control+0x1dc>)
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff3b 	bl	8000534 <__aeabi_i2d>
 80036be:	a360      	add	r3, pc, #384	; (adr r3, 8003840 <L_motor_feedback_control+0x1c0>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fd f8ca 	bl	800085c <__aeabi_ddiv>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fd f9ac 	bl	8000a2c <__aeabi_d2iz>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4a5f      	ldr	r2, [pc, #380]	; (8003854 <L_motor_feedback_control+0x1d4>)
 80036d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	4a60      	ldr	r2, [pc, #384]	; (8003860 <L_motor_feedback_control+0x1e0>)
 80036e0:	6013      	str	r3, [r2, #0]

	L_acc_error += L_error * (1-abs(kick));
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f1c3 0301 	rsb	r3, r3, #1
 80036f2:	4a5b      	ldr	r2, [pc, #364]	; (8003860 <L_motor_feedback_control+0x1e0>)
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	fb03 f202 	mul.w	r2, r3, r2
 80036fa:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <L_motor_feedback_control+0x1e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003702:	6013      	str	r3, [r2, #0]
	if(L_acc_error > 1000) L_acc_error = 1000;
 8003704:	4b57      	ldr	r3, [pc, #348]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370c:	dd03      	ble.n	8003716 <L_motor_feedback_control+0x96>
 800370e:	4b55      	ldr	r3, [pc, #340]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003714:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;  //limits integral term
 8003716:	4b53      	ldr	r3, [pc, #332]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800371e:	da02      	bge.n	8003726 <L_motor_feedback_control+0xa6>
 8003720:	4b50      	ldr	r3, [pc, #320]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003722:	4a51      	ldr	r2, [pc, #324]	; (8003868 <L_motor_feedback_control+0x1e8>)
 8003724:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint + K_kick*kick;//K_pdisterror*(R_acc-L_acc) - K_idisterror*Dist_error_acc;
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <L_motor_feedback_control+0x1e0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2232      	movs	r2, #50	; 0x32
 800372c:	fb03 f202 	mul.w	r2, r3, r2
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <L_motor_feedback_control+0x1e4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4413      	add	r3, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fefc 	bl	8000534 <__aeabi_i2d>
 800373c:	4604      	mov	r4, r0
 800373e:	460d      	mov	r5, r1
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <L_motor_feedback_control+0x1dc>)
 8003742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fef4 	bl	8000534 <__aeabi_i2d>
 800374c:	a33e      	add	r3, pc, #248	; (adr r3, 8003848 <L_motor_feedback_control+0x1c8>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fc ff59 	bl	8000608 <__aeabi_dmul>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4620      	mov	r0, r4
 800375c:	4629      	mov	r1, r5
 800375e:	f7fc fd9d 	bl	800029c <__adddf3>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4614      	mov	r4, r2
 8003768:	461d      	mov	r5, r3
 800376a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fedb 	bl	8000534 <__aeabi_i2d>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4620      	mov	r0, r4
 8003784:	4629      	mov	r1, r5
 8003786:	f7fc fd89 	bl	800029c <__adddf3>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f94b 	bl	8000a2c <__aeabi_d2iz>
 8003796:	4603      	mov	r3, r0
 8003798:	4a34      	ldr	r2, [pc, #208]	; (800386c <L_motor_feedback_control+0x1ec>)
 800379a:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint > 0) L_ctrl_signal += L_ff_offset;
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <L_motor_feedback_control+0x1dc>)
 800379e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	dd04      	ble.n	80037b0 <L_motor_feedback_control+0x130>
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	337d      	adds	r3, #125	; 0x7d
 80037ac:	4a2f      	ldr	r2, [pc, #188]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037ae:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint < 0) L_ctrl_signal -= L_ff_offset;
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <L_motor_feedback_control+0x1dc>)
 80037b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da04      	bge.n	80037c4 <L_motor_feedback_control+0x144>
 80037ba:	4b2c      	ldr	r3, [pc, #176]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3b7d      	subs	r3, #125	; 0x7d
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037c2:	6013      	str	r3, [r2, #0]


	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037cc:	dd03      	ble.n	80037d6 <L_motor_feedback_control+0x156>
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037d4:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80037de:	da02      	bge.n	80037e6 <L_motor_feedback_control+0x166>
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037e2:	4a23      	ldr	r2, [pc, #140]	; (8003870 <L_motor_feedback_control+0x1f0>)
 80037e4:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <L_motor_feedback_control+0x1ec>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <L_motor_feedback_control+0x180>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <L_motor_feedback_control+0x1f4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <L_motor_feedback_control+0x1f4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
 80037fe:	e017      	b.n	8003830 <L_motor_feedback_control+0x1b0>
	}
	else if (L_ctrl_signal > 0){
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <L_motor_feedback_control+0x1ec>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	dd09      	ble.n	800381c <L_motor_feedback_control+0x19c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <L_motor_feedback_control+0x1ec>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <L_motor_feedback_control+0x1f4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <L_motor_feedback_control+0x1f4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
 800381a:	e009      	b.n	8003830 <L_motor_feedback_control+0x1b0>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <L_motor_feedback_control+0x1f4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <L_motor_feedback_control+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	425a      	negs	r2, r3
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <L_motor_feedback_control+0x1f4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	htim5.Instance->CNT = 0;
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <L_motor_feedback_control+0x1d0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bdb0      	pop	{r4, r5, r7, pc}
 8003840:	851eb851 	.word	0x851eb851
 8003844:	40f94f87 	.word	0x40f94f87
 8003848:	66666666 	.word	0x66666666
 800384c:	3fde6666 	.word	0x3fde6666
 8003850:	2000043c 	.word	0x2000043c
 8003854:	200000fa 	.word	0x200000fa
 8003858:	20000118 	.word	0x20000118
 800385c:	200000f6 	.word	0x200000f6
 8003860:	20000108 	.word	0x20000108
 8003864:	20000110 	.word	0x20000110
 8003868:	fffffc18 	.word	0xfffffc18
 800386c:	20000100 	.word	0x20000100
 8003870:	fffffc19 	.word	0xfffffc19
 8003874:	200003ac 	.word	0x200003ac

08003878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_MspInit+0x4c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <HAL_MspInit+0x4c>)
 8003888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388c:	6453      	str	r3, [r2, #68]	; 0x44
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_MspInit+0x4c>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_MspInit+0x4c>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <HAL_MspInit+0x4c>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_MspInit+0x4c>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_ADC_MspInit+0x7c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d127      	bne.n	800393a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <HAL_ADC_MspInit+0x80>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <HAL_ADC_MspInit+0x80>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_ADC_MspInit+0x80>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_ADC_MspInit+0x80>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <HAL_ADC_MspInit+0x80>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_ADC_MspInit+0x80>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8003922:	2310      	movs	r3, #16
 8003924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003926:	2303      	movs	r3, #3
 8003928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	4619      	mov	r1, r3
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <HAL_ADC_MspInit+0x84>)
 8003936:	f001 f993 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800393a:	bf00      	nop
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40012000 	.word	0x40012000
 8003948:	40023800 	.word	0x40023800
 800394c:	40020000 	.word	0x40020000

08003950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	; 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a83      	ldr	r2, [pc, #524]	; (8003b7c <HAL_I2C_MspInit+0x22c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d14c      	bne.n	8003a0c <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	4b82      	ldr	r3, [pc, #520]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a81      	ldr	r2, [pc, #516]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800398e:	2340      	movs	r3, #64	; 0x40
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003992:	2312      	movs	r3, #18
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003996:	2301      	movs	r3, #1
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399e:	2304      	movs	r3, #4
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a6:	4619      	mov	r1, r3
 80039a8:	4876      	ldr	r0, [pc, #472]	; (8003b84 <HAL_I2C_MspInit+0x234>)
 80039aa:	f001 f959 	bl	8004c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039b2:	2312      	movs	r3, #18
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ba:	2303      	movs	r3, #3
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039be:	2304      	movs	r3, #4
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	486e      	ldr	r0, [pc, #440]	; (8003b84 <HAL_I2C_MspInit+0x234>)
 80039ca:	f001 f949 	bl	8004c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 80039d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2100      	movs	r1, #0
 80039ee:	201f      	movs	r0, #31
 80039f0:	f001 f85f 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80039f4:	201f      	movs	r0, #31
 80039f6:	f001 f878 	bl	8004aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	2020      	movs	r0, #32
 8003a00:	f001 f857 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003a04:	2020      	movs	r0, #32
 8003a06:	f001 f870 	bl	8004aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003a0a:	e0b3      	b.n	8003b74 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_I2C_MspInit+0x238>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d14e      	bne.n	8003ab4 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a44:	2304      	movs	r3, #4
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	484d      	ldr	r0, [pc, #308]	; (8003b84 <HAL_I2C_MspInit+0x234>)
 8003a50:	f001 f906 	bl	8004c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a5a:	2312      	movs	r3, #18
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003a66:	2309      	movs	r3, #9
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4844      	ldr	r0, [pc, #272]	; (8003b84 <HAL_I2C_MspInit+0x234>)
 8003a72:	f001 f8f5 	bl	8004c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	2021      	movs	r0, #33	; 0x21
 8003a98:	f001 f80b 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003a9c:	2021      	movs	r0, #33	; 0x21
 8003a9e:	f001 f824 	bl	8004aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2022      	movs	r0, #34	; 0x22
 8003aa8:	f001 f803 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003aac:	2022      	movs	r0, #34	; 0x22
 8003aae:	f001 f81c 	bl	8004aea <HAL_NVIC_EnableIRQ>
}
 8003ab2:	e05f      	b.n	8003b74 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <HAL_I2C_MspInit+0x23c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d15a      	bne.n	8003b74 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a2e      	ldr	r2, [pc, #184]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afc:	2312      	movs	r3, #18
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b10:	4619      	mov	r1, r3
 8003b12:	481f      	ldr	r0, [pc, #124]	; (8003b90 <HAL_I2C_MspInit+0x240>)
 8003b14:	f001 f8a4 	bl	8004c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b18:	2310      	movs	r3, #16
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1c:	2312      	movs	r3, #18
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003b28:	2309      	movs	r3, #9
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b30:	4619      	mov	r1, r3
 8003b32:	4814      	ldr	r0, [pc, #80]	; (8003b84 <HAL_I2C_MspInit+0x234>)
 8003b34:	f001 f894 	bl	8004c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b46:	6413      	str	r3, [r2, #64]	; 0x40
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_I2C_MspInit+0x230>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	2048      	movs	r0, #72	; 0x48
 8003b5a:	f000 ffaa 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b5e:	2048      	movs	r0, #72	; 0x48
 8003b60:	f000 ffc3 	bl	8004aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	2049      	movs	r0, #73	; 0x49
 8003b6a:	f000 ffa2 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b6e:	2049      	movs	r0, #73	; 0x49
 8003b70:	f000 ffbb 	bl	8004aea <HAL_NVIC_EnableIRQ>
}
 8003b74:	bf00      	nop
 8003b76:	3738      	adds	r7, #56	; 0x38
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40005400 	.word	0x40005400
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40005800 	.word	0x40005800
 8003b8c:	40005c00 	.word	0x40005c00
 8003b90:	40020000 	.word	0x40020000

08003b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_SPI_MspInit+0x84>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d12c      	bne.n	8003c10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_SPI_MspInit+0x88>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c00:	2305      	movs	r3, #5
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4805      	ldr	r0, [pc, #20]	; (8003c20 <HAL_SPI_MspInit+0x8c>)
 8003c0c:	f001 f828 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c10:	bf00      	nop
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40003800 	.word	0x40003800
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40020400 	.word	0x40020400

08003c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_TIM_Base_MspInit+0xa8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d116      	bne.n	8003c64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2100      	movs	r1, #0
 8003c56:	201a      	movs	r0, #26
 8003c58:	f000 ff2b 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c5c:	201a      	movs	r0, #26
 8003c5e:	f000 ff44 	bl	8004aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003c62:	e02e      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
}
 8003c8a:	e01a      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_TIM_Base_MspInit+0xb0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d115      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_TIM_Base_MspInit+0xac>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	201a      	movs	r0, #26
 8003cb8:	f000 fefb 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003cbc:	201a      	movs	r0, #26
 8003cbe:	f000 ff14 	bl	8004aea <HAL_NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40014800 	.word	0x40014800

08003cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce0:	f107 031c 	add.w	r3, r7, #28
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d14a      	bne.n	8003d90 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a3f      	ldr	r2, [pc, #252]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6313      	str	r3, [r2, #48]	; 0x30
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a31      	ldr	r2, [pc, #196]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 8003d4e:	2340      	movs	r3, #64	; 0x40
 8003d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8003d62:	f107 031c 	add.w	r3, r7, #28
 8003d66:	4619      	mov	r1, r3
 8003d68:	4826      	ldr	r0, [pc, #152]	; (8003e04 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d6a:	f000 ff79 	bl	8004c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4619      	mov	r1, r3
 8003d88:	481f      	ldr	r0, [pc, #124]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d8a:	f000 ff69 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003d8e:	e030      	b.n	8003df2 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x134>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d12b      	bne.n	8003df2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003de2:	2302      	movs	r3, #2
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dee:	f000 ff37 	bl	8004c60 <HAL_GPIO_Init>
}
 8003df2:	bf00      	nop
 8003df4:	3730      	adds	r7, #48	; 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40000c00 	.word	0x40000c00

08003e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <HAL_TIM_MspPostInit+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d11f      	bne.n	8003e72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 8003e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e60:	2301      	movs	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4827      	ldr	r0, [pc, #156]	; (8003f08 <HAL_TIM_MspPostInit+0xf8>)
 8003e6c:	f000 fef8 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e70:	e041      	b.n	8003ef6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d13c      	bne.n	8003ef6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003ea2:	f043 0302 	orr.w	r3, r3, #2
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <HAL_TIM_MspPostInit+0xf4>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	4619      	mov	r1, r3
 8003ed0:	480d      	ldr	r0, [pc, #52]	; (8003f08 <HAL_TIM_MspPostInit+0xf8>)
 8003ed2:	f000 fec5 	bl	8004c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4806      	ldr	r0, [pc, #24]	; (8003f0c <HAL_TIM_MspPostInit+0xfc>)
 8003ef2:	f000 feb5 	bl	8004c60 <HAL_GPIO_Init>
}
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400

08003f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_UART_MspInit+0x94>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d133      	bne.n	8003f9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_UART_MspInit+0x98>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4809      	ldr	r0, [pc, #36]	; (8003fac <HAL_UART_MspInit+0x9c>)
 8003f86:	f000 fe6b 	bl	8004c60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2026      	movs	r0, #38	; 0x26
 8003f90:	f000 fd8f 	bl	8004ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f94:	2026      	movs	r0, #38	; 0x26
 8003f96:	f000 fda8 	bl	8004aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f9a:	bf00      	nop
 8003f9c:	3728      	adds	r7, #40	; 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40020000 	.word	0x40020000

08003fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <NMI_Handler+0x4>

08003fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fba:	e7fe      	b.n	8003fba <HardFault_Handler+0x4>

08003fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc0:	e7fe      	b.n	8003fc0 <MemManage_Handler+0x4>

08003fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fc6:	e7fe      	b.n	8003fc6 <BusFault_Handler+0x4>

08003fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <UsageFault_Handler+0x4>

08003fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ffc:	f000 f9c8 	bl	8004390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}

08004004 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	static uint8_t flag = 0;
	if (flag ==0){
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>
		TOF_get_measurement();
 8004010:	f7fd fa08 	bl	8001424 <TOF_get_measurement>
		flag = 1;
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e009      	b.n	8004030 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>
	}
	else{
		TOF_start_measurement();
 800401c:	f7fd f9d2 	bl	80013c4 <TOF_start_measurement>
		flag = 0;
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800402a:	4806      	ldr	r0, [pc, #24]	; (8004044 <TIM1_TRG_COM_TIM11_IRQHandler+0x40>)
 800402c:	f000 ffb5 	bl	8004f9a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 8004032:	f004 fa43 	bl	80084bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004036:	4805      	ldr	r0, [pc, #20]	; (800404c <TIM1_TRG_COM_TIM11_IRQHandler+0x48>)
 8004038:	f004 fa40 	bl	80084bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000510 	.word	0x20000510
 8004044:	40020800 	.word	0x40020800
 8004048:	20000364 	.word	0x20000364
 800404c:	20000484 	.word	0x20000484

08004050 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <I2C1_EV_IRQHandler+0x10>)
 8004056:	f001 fb69 	bl	800572c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000210 	.word	0x20000210

08004064 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <I2C1_ER_IRQHandler+0x10>)
 800406a:	f001 fcd0 	bl	8005a0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000210 	.word	0x20000210

08004078 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <I2C2_EV_IRQHandler+0x10>)
 800407e:	f001 fb55 	bl	800572c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000264 	.word	0x20000264

0800408c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <I2C2_ER_IRQHandler+0x10>)
 8004092:	f001 fcbc 	bl	8005a0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000264 	.word	0x20000264

080040a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <USART2_IRQHandler+0x10>)
 80040a6:	f005 f92f 	bl	8009308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200004cc 	.word	0x200004cc

080040b4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <I2C3_EV_IRQHandler+0x10>)
 80040ba:	f001 fb37 	bl	800572c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200002b8 	.word	0x200002b8

080040c8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <I2C3_ER_IRQHandler+0x10>)
 80040ce:	f001 fc9e 	bl	8005a0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200002b8 	.word	0x200002b8

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f005 fffa 	bl	800a104 <__errno>
 8004110:	4603      	mov	r3, r0
 8004112:	220c      	movs	r2, #12
 8004114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <_sbrk+0x64>)
 800412c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20020000 	.word	0x20020000
 800413c:	00000400 	.word	0x00000400
 8004140:	20000514 	.word	0x20000514
 8004144:	20000530 	.word	0x20000530

08004148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SystemInit+0x20>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <SystemInit+0x20>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8004172:	2005      	movs	r0, #5
 8004174:	f000 f92c 	bl	80043d0 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <uart_startup_transmit+0x40>)
 800417a:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	480c      	ldr	r0, [pc, #48]	; (80041b0 <uart_startup_transmit+0x44>)
 8004180:	f006 f820 	bl	800a1c4 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8004184:	480a      	ldr	r0, [pc, #40]	; (80041b0 <uart_startup_transmit+0x44>)
 8004186:	f7fc f82b 	bl	80001e0 <strlen>
 800418a:	4603      	mov	r3, r0
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	4907      	ldr	r1, [pc, #28]	; (80041b0 <uart_startup_transmit+0x44>)
 8004192:	4808      	ldr	r0, [pc, #32]	; (80041b4 <uart_startup_transmit+0x48>)
 8004194:	f005 f843 	bl	800921e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 8004198:	2201      	movs	r2, #1
 800419a:	4907      	ldr	r1, [pc, #28]	; (80041b8 <uart_startup_transmit+0x4c>)
 800419c:	4805      	ldr	r0, [pc, #20]	; (80041b4 <uart_startup_transmit+0x48>)
 800419e:	f005 f883 	bl	80092a8 <HAL_UART_Receive_IT>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	0800abf0 	.word	0x0800abf0
 80041b0:	20000094 	.word	0x20000094
 80041b4:	200004cc 	.word	0x200004cc
 80041b8:	200000d4 	.word	0x200000d4

080041bc <uart_task>:

void uart_task()
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 80041c0:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <uart_task+0x3c>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d014      	beq.n	80041f2 <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 80041c8:	480c      	ldr	r0, [pc, #48]	; (80041fc <uart_task+0x40>)
 80041ca:	f7fc f809 	bl	80001e0 <strlen>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4619      	mov	r1, r3
 80041d2:	480a      	ldr	r0, [pc, #40]	; (80041fc <uart_task+0x40>)
 80041d4:	f000 f816 	bl	8004204 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 80041d8:	4808      	ldr	r0, [pc, #32]	; (80041fc <uart_task+0x40>)
 80041da:	f005 ff8f 	bl	800a0fc <atoi>
 80041de:	4603      	mov	r3, r0
 80041e0:	b21a      	sxth	r2, r3
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <uart_task+0x44>)
 80041e4:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <uart_task+0x3c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <uart_task+0x40>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
	}
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200000f4 	.word	0x200000f4
 80041fc:	200000d4 	.word	0x200000d4
 8004200:	200000f8 	.word	0x200000f8

08004204 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4803      	ldr	r0, [pc, #12]	; (8004224 <uart_transmit+0x20>)
 8004218:	f005 f801 	bl	800921e <HAL_UART_Transmit_IT>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	200004cc 	.word	0x200004cc

08004228 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_UART_RxCpltCallback+0x64>)
 8004238:	5c9b      	ldrb	r3, [r3, r2]
 800423a:	2b0a      	cmp	r3, #10
 800423c:	d10c      	bne.n	8004258 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <HAL_UART_RxCpltCallback+0x64>)
 8004246:	2100      	movs	r1, #0
 8004248:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_UART_RxCpltCallback+0x68>)
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
		index = 0;
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e009      	b.n	800426c <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b1d      	cmp	r3, #29
 800425e:	d805      	bhi.n	800426c <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 800426a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_UART_RxCpltCallback+0x60>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_UART_RxCpltCallback+0x64>)
 8004274:	4413      	add	r3, r2
 8004276:	2201      	movs	r2, #1
 8004278:	4619      	mov	r1, r3
 800427a:	4806      	ldr	r0, [pc, #24]	; (8004294 <HAL_UART_RxCpltCallback+0x6c>)
 800427c:	f005 f814 	bl	80092a8 <HAL_UART_Receive_IT>

}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000518 	.word	0x20000518
 800428c:	200000d4 	.word	0x200000d4
 8004290:	200000f4 	.word	0x200000f4
 8004294:	200004cc 	.word	0x200004cc

08004298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800429e:	490e      	ldr	r1, [pc, #56]	; (80042d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a4:	e002      	b.n	80042ac <LoopCopyDataInit>

080042a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042aa:	3304      	adds	r3, #4

080042ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b0:	d3f9      	bcc.n	80042a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042b4:	4c0b      	ldr	r4, [pc, #44]	; (80042e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b8:	e001      	b.n	80042be <LoopFillZerobss>

080042ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042bc:	3204      	adds	r2, #4

080042be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c0:	d3fb      	bcc.n	80042ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042c2:	f7ff ff41 	bl	8004148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042c6:	f005 ff23 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ca:	f7fd f8db 	bl	8001484 <main>
  bx  lr    
 80042ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80042dc:	0800ad5c 	.word	0x0800ad5c
  ldr r2, =_sbss
 80042e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80042e4:	20000530 	.word	0x20000530

080042e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042e8:	e7fe      	b.n	80042e8 <ADC_IRQHandler>
	...

080042ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0d      	ldr	r2, [pc, #52]	; (800432c <HAL_Init+0x40>)
 80042f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <HAL_Init+0x40>)
 8004302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_Init+0x40>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <HAL_Init+0x40>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004314:	2003      	movs	r0, #3
 8004316:	f000 fbc1 	bl	8004a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800431a:	200f      	movs	r0, #15
 800431c:	f000 f808 	bl	8004330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004320:	f7ff faaa 	bl	8003878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00

08004330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_InitTick+0x54>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_InitTick+0x58>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004346:	fbb3 f3f1 	udiv	r3, r3, r1
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fbd9 	bl	8004b06 <HAL_SYSTICK_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e00e      	b.n	800437c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b0f      	cmp	r3, #15
 8004362:	d80a      	bhi.n	800437a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004364:	2200      	movs	r2, #0
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	f000 fba1 	bl	8004ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004370:	4a06      	ldr	r2, [pc, #24]	; (800438c <HAL_InitTick+0x5c>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000000 	.word	0x20000000
 8004388:	20000008 	.word	0x20000008
 800438c:	20000004 	.word	0x20000004

08004390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_IncTick+0x20>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_IncTick+0x24>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4413      	add	r3, r2
 80043a0:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <HAL_IncTick+0x24>)
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000008 	.word	0x20000008
 80043b4:	2000051c 	.word	0x2000051c

080043b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return uwTick;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_GetTick+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	2000051c 	.word	0x2000051c

080043d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d8:	f7ff ffee 	bl	80043b8 <HAL_GetTick>
 80043dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d005      	beq.n	80043f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_Delay+0x44>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043f6:	bf00      	nop
 80043f8:	f7ff ffde 	bl	80043b8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	429a      	cmp	r2, r3
 8004406:	d8f7      	bhi.n	80043f8 <HAL_Delay+0x28>
  {
  }
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000008 	.word	0x20000008

08004418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e033      	b.n	8004496 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fa46 	bl	80038c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800445e:	f023 0302 	bic.w	r3, r3, #2
 8004462:	f043 0202 	orr.w	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f94a 	bl	8004704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
 8004486:	e001      	b.n	800448c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x1c>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e113      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x244>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d925      	bls.n	8004518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68d9      	ldr	r1, [r3, #12]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	4613      	mov	r3, r2
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	4413      	add	r3, r2
 80044e0:	3b1e      	subs	r3, #30
 80044e2:	2207      	movs	r2, #7
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43da      	mvns	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	400a      	ands	r2, r1
 80044f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68d9      	ldr	r1, [r3, #12]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	4618      	mov	r0, r3
 8004504:	4603      	mov	r3, r0
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4403      	add	r3, r0
 800450a:	3b1e      	subs	r3, #30
 800450c:	409a      	lsls	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e022      	b.n	800455e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6919      	ldr	r1, [r3, #16]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	2207      	movs	r2, #7
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43da      	mvns	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	400a      	ands	r2, r1
 800453a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6919      	ldr	r1, [r3, #16]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	4618      	mov	r0, r3
 800454e:	4603      	mov	r3, r0
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4403      	add	r3, r0
 8004554:	409a      	lsls	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d824      	bhi.n	80045b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	3b05      	subs	r3, #5
 8004578:	221f      	movs	r2, #31
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	400a      	ands	r2, r1
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	4618      	mov	r0, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	3b05      	subs	r3, #5
 80045a2:	fa00 f203 	lsl.w	r2, r0, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
 80045ae:	e04c      	b.n	800464a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	d824      	bhi.n	8004602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	3b23      	subs	r3, #35	; 0x23
 80045ca:	221f      	movs	r2, #31
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43da      	mvns	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	400a      	ands	r2, r1
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4618      	mov	r0, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	3b23      	subs	r3, #35	; 0x23
 80045f4:	fa00 f203 	lsl.w	r2, r0, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004600:	e023      	b.n	800464a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	3b41      	subs	r3, #65	; 0x41
 8004614:	221f      	movs	r2, #31
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	400a      	ands	r2, r1
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	4618      	mov	r0, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3b41      	subs	r3, #65	; 0x41
 800463e:	fa00 f203 	lsl.w	r2, r0, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800464a:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_ADC_ConfigChannel+0x250>)
 800464c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a28      	ldr	r2, [pc, #160]	; (80046f4 <HAL_ADC_ConfigChannel+0x254>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10f      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x1d8>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b12      	cmp	r3, #18
 800465e:	d10b      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_ADC_ConfigChannel+0x254>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d12b      	bne.n	80046da <HAL_ADC_ConfigChannel+0x23a>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_ADC_ConfigChannel+0x258>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x1f4>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b11      	cmp	r3, #17
 8004692:	d122      	bne.n	80046da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a11      	ldr	r2, [pc, #68]	; (80046f8 <HAL_ADC_ConfigChannel+0x258>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d111      	bne.n	80046da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_ADC_ConfigChannel+0x25c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <HAL_ADC_ConfigChannel+0x260>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	0c9a      	lsrs	r2, r3, #18
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046cc:	e002      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f9      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40012300 	.word	0x40012300
 80046f4:	40012000 	.word	0x40012000
 80046f8:	10000012 	.word	0x10000012
 80046fc:	20000000 	.word	0x20000000
 8004700:	431bde83 	.word	0x431bde83

08004704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800470c:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <ADC_Init+0x1f0>)
 800470e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800475c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <ADC_Init+0x1f4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	e00f      	b.n	8004802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0202 	bic.w	r2, r2, #2
 8004810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7e1b      	ldrb	r3, [r3, #24]
 800481c:	005a      	lsls	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800484e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	3b01      	subs	r3, #1
 800485c:	035a      	lsls	r2, r3, #13
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	e007      	b.n	8004878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	3b01      	subs	r3, #1
 8004894:	051a      	lsls	r2, r3, #20
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ba:	025a      	lsls	r2, r3, #9
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	029a      	lsls	r2, r3, #10
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40012300 	.word	0x40012300
 80048f8:	0f000001 	.word	0x0f000001

080048fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004918:	4013      	ands	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	60d3      	str	r3, [r2, #12]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <__NVIC_GetPriorityGrouping+0x18>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 0307 	and.w	r3, r3, #7
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db0b      	blt.n	800498a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4907      	ldr	r1, [pc, #28]	; (8004998 <__NVIC_EnableIRQ+0x38>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db0a      	blt.n	80049c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	490c      	ldr	r1, [pc, #48]	; (80049e8 <__NVIC_SetPriority+0x4c>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	440b      	add	r3, r1
 80049c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049c4:	e00a      	b.n	80049dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4908      	ldr	r1, [pc, #32]	; (80049ec <__NVIC_SetPriority+0x50>)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3b04      	subs	r3, #4
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	440b      	add	r3, r1
 80049da:	761a      	strb	r2, [r3, #24]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf28      	it	cs
 8004a0e:	2304      	movcs	r3, #4
 8004a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d902      	bls.n	8004a20 <NVIC_EncodePriority+0x30>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b03      	subs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <NVIC_EncodePriority+0x32>
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a38:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43d9      	mvns	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	4313      	orrs	r3, r2
         );
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a68:	d301      	bcc.n	8004a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00f      	b.n	8004a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <SysTick_Config+0x40>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a76:	210f      	movs	r1, #15
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f7ff ff8e 	bl	800499c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <SysTick_Config+0x40>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <SysTick_Config+0x40>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e010 	.word	0xe000e010

08004a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff29 	bl	80048fc <__NVIC_SetPriorityGrouping>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ac4:	f7ff ff3e 	bl	8004944 <__NVIC_GetPriorityGrouping>
 8004ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f7ff ff8e 	bl	80049f0 <NVIC_EncodePriority>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff5d 	bl	800499c <__NVIC_SetPriority>
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4603      	mov	r3, r0
 8004af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff31 	bl	8004960 <__NVIC_EnableIRQ>
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ffa2 	bl	8004a58 <SysTick_Config>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff fc44 	bl	80043b8 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d008      	beq.n	8004b50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2280      	movs	r2, #128	; 0x80
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e052      	b.n	8004bf6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0216 	bic.w	r2, r2, #22
 8004b5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <HAL_DMA_Abort+0x62>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0208 	bic.w	r2, r2, #8
 8004b8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba0:	e013      	b.n	8004bca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ba2:	f7ff fc09 	bl	80043b8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	d90c      	bls.n	8004bca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e015      	b.n	8004bf6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e4      	bne.n	8004ba2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	223f      	movs	r2, #63	; 0x3f
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00c      	b.n	8004c36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2205      	movs	r2, #5
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e159      	b.n	8004f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	f040 8148 	bne.w	8004f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d005      	beq.n	8004cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d130      	bne.n	8004d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 0201 	and.w	r2, r3, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d017      	beq.n	8004d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d123      	bne.n	8004da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	08da      	lsrs	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3208      	adds	r2, #8
 8004d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	220f      	movs	r2, #15
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	08da      	lsrs	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3208      	adds	r2, #8
 8004d9e:	69b9      	ldr	r1, [r7, #24]
 8004da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0203 	and.w	r2, r3, #3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a2 	beq.w	8004f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b57      	ldr	r3, [pc, #348]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df4:	6453      	str	r3, [r2, #68]	; 0x44
 8004df6:	4b54      	ldr	r3, [pc, #336]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e02:	4a52      	ldr	r2, [pc, #328]	; (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a49      	ldr	r2, [pc, #292]	; (8004f50 <HAL_GPIO_Init+0x2f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_Init+0x202>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a48      	ldr	r2, [pc, #288]	; (8004f54 <HAL_GPIO_Init+0x2f4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0x1fe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a47      	ldr	r2, [pc, #284]	; (8004f58 <HAL_GPIO_Init+0x2f8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a46      	ldr	r2, [pc, #280]	; (8004f5c <HAL_GPIO_Init+0x2fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_Init+0x1f6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a45      	ldr	r2, [pc, #276]	; (8004f60 <HAL_GPIO_Init+0x300>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_Init+0x1f2>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	e008      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e006      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e56:	2303      	movs	r3, #3
 8004e58:	e004      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e002      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e62:	2300      	movs	r3, #0
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	f002 0203 	and.w	r2, r2, #3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	4093      	lsls	r3, r2
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e74:	4935      	ldr	r1, [pc, #212]	; (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efa:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f24:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	f67f aea2 	bls.w	8004c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	40020000 	.word	0x40020000
 8004f54:	40020400 	.word	0x40020400
 8004f58:	40020800 	.word	0x40020800
 8004f5c:	40020c00 	.word	0x40020c00
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40013c00 	.word	0x40013c00

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f84:	e003      	b.n	8004f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	619a      	str	r2, [r3, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	041a      	lsls	r2, r3, #16
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	43d9      	mvns	r1, r3
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	400b      	ands	r3, r1
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	619a      	str	r2, [r3, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e12b      	b.n	800523a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fe fcaa 	bl	8003950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	; 0x24
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005034:	f002 fea2 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 8005038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a81      	ldr	r2, [pc, #516]	; (8005244 <HAL_I2C_Init+0x274>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d807      	bhi.n	8005054 <HAL_I2C_Init+0x84>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a80      	ldr	r2, [pc, #512]	; (8005248 <HAL_I2C_Init+0x278>)
 8005048:	4293      	cmp	r3, r2
 800504a:	bf94      	ite	ls
 800504c:	2301      	movls	r3, #1
 800504e:	2300      	movhi	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e006      	b.n	8005062 <HAL_I2C_Init+0x92>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a7d      	ldr	r2, [pc, #500]	; (800524c <HAL_I2C_Init+0x27c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	bf94      	ite	ls
 800505c:	2301      	movls	r3, #1
 800505e:	2300      	movhi	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0e7      	b.n	800523a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a78      	ldr	r2, [pc, #480]	; (8005250 <HAL_I2C_Init+0x280>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0c9b      	lsrs	r3, r3, #18
 8005074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4a6a      	ldr	r2, [pc, #424]	; (8005244 <HAL_I2C_Init+0x274>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d802      	bhi.n	80050a4 <HAL_I2C_Init+0xd4>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3301      	adds	r3, #1
 80050a2:	e009      	b.n	80050b8 <HAL_I2C_Init+0xe8>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	4a69      	ldr	r2, [pc, #420]	; (8005254 <HAL_I2C_Init+0x284>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	3301      	adds	r3, #1
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	430b      	orrs	r3, r1
 80050be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	495c      	ldr	r1, [pc, #368]	; (8005244 <HAL_I2C_Init+0x274>)
 80050d4:	428b      	cmp	r3, r1
 80050d6:	d819      	bhi.n	800510c <HAL_I2C_Init+0x13c>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e59      	subs	r1, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050ec:	400b      	ands	r3, r1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_I2C_Init+0x138>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1e59      	subs	r1, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005106:	e051      	b.n	80051ac <HAL_I2C_Init+0x1dc>
 8005108:	2304      	movs	r3, #4
 800510a:	e04f      	b.n	80051ac <HAL_I2C_Init+0x1dc>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d111      	bne.n	8005138 <HAL_I2C_Init+0x168>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1e58      	subs	r0, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	440b      	add	r3, r1
 8005122:	fbb0 f3f3 	udiv	r3, r0, r3
 8005126:	3301      	adds	r3, #1
 8005128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e012      	b.n	800515e <HAL_I2C_Init+0x18e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1e58      	subs	r0, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	0099      	lsls	r1, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	fbb0 f3f3 	udiv	r3, r0, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Init+0x196>
 8005162:	2301      	movs	r3, #1
 8005164:	e022      	b.n	80051ac <HAL_I2C_Init+0x1dc>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10e      	bne.n	800518c <HAL_I2C_Init+0x1bc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1e58      	subs	r0, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6859      	ldr	r1, [r3, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	440b      	add	r3, r1
 800517c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518a:	e00f      	b.n	80051ac <HAL_I2C_Init+0x1dc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1e58      	subs	r0, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	0099      	lsls	r1, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	6809      	ldr	r1, [r1, #0]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6911      	ldr	r1, [r2, #16]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	4311      	orrs	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	000186a0 	.word	0x000186a0
 8005248:	001e847f 	.word	0x001e847f
 800524c:	003d08ff 	.word	0x003d08ff
 8005250:	431bde83 	.word	0x431bde83
 8005254:	10624dd3 	.word	0x10624dd3

08005258 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	461a      	mov	r2, r3
 8005266:	4603      	mov	r3, r0
 8005268:	817b      	strh	r3, [r7, #10]
 800526a:	460b      	mov	r3, r1
 800526c:	813b      	strh	r3, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005272:	f7ff f8a1 	bl	80043b8 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b20      	cmp	r3, #32
 8005282:	f040 80d9 	bne.w	8005438 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2319      	movs	r3, #25
 800528c:	2201      	movs	r2, #1
 800528e:	496d      	ldr	r1, [pc, #436]	; (8005444 <HAL_I2C_Mem_Write+0x1ec>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f001 ff6f 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
 800529e:	e0cc      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_I2C_Mem_Write+0x56>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e0c5      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d007      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	; 0x21
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2240      	movs	r2, #64	; 0x40
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a4d      	ldr	r2, [pc, #308]	; (8005448 <HAL_I2C_Mem_Write+0x1f0>)
 8005314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005316:	88f8      	ldrh	r0, [r7, #6]
 8005318:	893a      	ldrh	r2, [r7, #8]
 800531a:	8979      	ldrh	r1, [r7, #10]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 fde6 	bl	8006ef8 <I2C_RequestMemoryWrite>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d052      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e081      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f001 fff0 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b04      	cmp	r3, #4
 800534c:	d107      	bne.n	800535e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e06b      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d11b      	bne.n	80053d8 <HAL_I2C_Mem_Write+0x180>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1aa      	bne.n	8005336 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 ffdc 	bl	80073a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d107      	bne.n	8005408 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e016      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	00100002 	.word	0x00100002
 8005448:	ffff0000 	.word	0xffff0000

0800544c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	817b      	strh	r3, [r7, #10]
 800545e:	460b      	mov	r3, r1
 8005460:	813b      	strh	r3, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b20      	cmp	r3, #32
 8005474:	f040 808e 	bne.w	8005594 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005478:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <HAL_I2C_Mem_Write_IT+0x158>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_I2C_Mem_Write_IT+0x15c>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	0a1a      	lsrs	r2, r3, #8
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009a      	lsls	r2, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3b01      	subs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d116      	bne.n	80054cc <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e064      	b.n	8005596 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d0db      	beq.n	8005492 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_I2C_Mem_Write_IT+0x9c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e056      	b.n	8005596 <HAL_I2C_Mem_Write_IT+0x14a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d007      	beq.n	800550e <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2221      	movs	r2, #33	; 0x21
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800553e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_I2C_Mem_Write_IT+0x160>)
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005550:	897a      	ldrh	r2, [r7, #10]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005556:	893a      	ldrh	r2, [r7, #8]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800558e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000000 	.word	0x20000000
 80055a8:	14f8b589 	.word	0x14f8b589
 80055ac:	ffff0000 	.word	0xffff0000

080055b0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	4603      	mov	r3, r0
 80055c0:	817b      	strh	r3, [r7, #10]
 80055c2:	460b      	mov	r3, r1
 80055c4:	813b      	strh	r3, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	f040 809a 	bne.w	8005710 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80055dc:	4b50      	ldr	r3, [pc, #320]	; (8005720 <HAL_I2C_Mem_Read_IT+0x170>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	08db      	lsrs	r3, r3, #3
 80055e2:	4a50      	ldr	r2, [pc, #320]	; (8005724 <HAL_I2C_Mem_Read_IT+0x174>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	0a1a      	lsrs	r2, r3, #8
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009a      	lsls	r2, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d116      	bne.n	8005630 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e070      	b.n	8005712 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d0db      	beq.n	80055f6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_I2C_Mem_Read_IT+0x9c>
 8005648:	2302      	movs	r3, #2
 800564a:	e062      	b.n	8005712 <HAL_I2C_Mem_Read_IT+0x162>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d007      	beq.n	8005672 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005680:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2222      	movs	r2, #34	; 0x22
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <HAL_I2C_Mem_Read_IT+0x178>)
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80056b4:	897a      	ldrh	r2, [r7, #10]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80056ba:	893a      	ldrh	r2, [r7, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056da:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800570a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000000 	.word	0x20000000
 8005724:	14f8b589 	.word	0x14f8b589
 8005728:	ffff0000 	.word	0xffff0000

0800572c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b10      	cmp	r3, #16
 800575a:	d003      	beq.n	8005764 <HAL_I2C_EV_IRQHandler+0x38>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	f040 80c1 	bne.w	80058e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <HAL_I2C_EV_IRQHandler+0x6e>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005784:	d003      	beq.n	800578e <HAL_I2C_EV_IRQHandler+0x62>
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800578c:	d101      	bne.n	8005792 <HAL_I2C_EV_IRQHandler+0x66>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x68>
 8005792:	2300      	movs	r3, #0
 8005794:	2b01      	cmp	r3, #1
 8005796:	f000 8132 	beq.w	80059fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x92>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	0a5b      	lsrs	r3, r3, #9
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fe98 	bl	80074e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fd83 	bl	80062c2 <I2C_Master_SB>
 80057bc:	e092      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0xb2>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	0a5b      	lsrs	r3, r3, #9
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fdf9 	bl	80063ce <I2C_Master_ADD10>
 80057dc:	e082      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_I2C_EV_IRQHandler+0xd2>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fe13 	bl	8006422 <I2C_Master_ADDR>
 80057fc:	e072      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d03b      	beq.n	8005882 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005818:	f000 80f3 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	09db      	lsrs	r3, r3, #7
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00f      	beq.n	8005848 <HAL_I2C_EV_IRQHandler+0x11c>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	0a9b      	lsrs	r3, r3, #10
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_I2C_EV_IRQHandler+0x11c>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f9f3 	bl	8005c2c <I2C_MasterTransmit_TXE>
 8005846:	e04d      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80d6 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80cf 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b21      	cmp	r3, #33	; 0x21
 8005868:	d103      	bne.n	8005872 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa7a 	bl	8005d64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005870:	e0c7      	b.n	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	f040 80c4 	bne.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fae8 	bl	8005e50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005880:	e0bf      	b.n	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005890:	f000 80b7 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <HAL_I2C_EV_IRQHandler+0x194>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	0a9b      	lsrs	r3, r3, #10
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_I2C_EV_IRQHandler+0x194>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb5d 	bl	8005f78 <I2C_MasterReceive_RXNE>
 80058be:	e011      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 809a 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	0a5b      	lsrs	r3, r3, #9
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8093 	beq.w	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fc06 	bl	80060ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e2:	e08e      	b.n	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058e4:	e08d      	b.n	8005a02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d004      	beq.n	80058f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e007      	b.n	8005908 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d012      	beq.n	800593a <HAL_I2C_EV_IRQHandler+0x20e>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0a5b      	lsrs	r3, r3, #9
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 ffc4 	bl	80068c0 <I2C_Slave_ADDR>
 8005938:	e066      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x22e>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	0a5b      	lsrs	r3, r3, #9
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fffe 	bl	8006954 <I2C_Slave_STOPF>
 8005958:	e056      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d002      	beq.n	8005966 <HAL_I2C_EV_IRQHandler+0x23a>
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b29      	cmp	r3, #41	; 0x29
 8005964:	d125      	bne.n	80059b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	09db      	lsrs	r3, r3, #7
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <HAL_I2C_EV_IRQHandler+0x266>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	0a9b      	lsrs	r3, r3, #10
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_I2C_EV_IRQHandler+0x266>
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 feda 	bl	8006744 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005990:	e039      	b.n	8005a06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	089b      	lsrs	r3, r3, #2
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d033      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x2da>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02d      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 ff07 	bl	80067be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059b0:	e029      	b.n	8005a06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00f      	beq.n	80059de <HAL_I2C_EV_IRQHandler+0x2b2>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	0a9b      	lsrs	r3, r3, #10
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_I2C_EV_IRQHandler+0x2b2>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 ff12 	bl	8006800 <I2C_SlaveReceive_RXNE>
 80059dc:	e014      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00e      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	0a5b      	lsrs	r3, r3, #9
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 ff40 	bl	800687c <I2C_SlaveReceive_BTF>
 80059fc:	e004      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08a      	sub	sp, #40	; 0x28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_I2C_ER_IRQHandler+0x4e>
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	0a5b      	lsrs	r3, r3, #9
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <HAL_I2C_ER_IRQHandler+0x78>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	f043 0302 	orr.w	r3, r3, #2
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005a84:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	0a9b      	lsrs	r3, r3, #10
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03f      	beq.n	8005b12 <HAL_I2C_ER_IRQHandler+0x104>
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d039      	beq.n	8005b12 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a9e:	7efb      	ldrb	r3, [r7, #27]
 8005aa0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ab8:	7ebb      	ldrb	r3, [r7, #26]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d112      	bne.n	8005ae4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b21      	cmp	r3, #33	; 0x21
 8005ac8:	d008      	beq.n	8005adc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	2b29      	cmp	r3, #41	; 0x29
 8005ace:	d005      	beq.n	8005adc <HAL_I2C_ER_IRQHandler+0xce>
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	2b28      	cmp	r3, #40	; 0x28
 8005ad4:	d106      	bne.n	8005ae4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b21      	cmp	r3, #33	; 0x21
 8005ada:	d103      	bne.n	8005ae4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 f869 	bl	8006bb4 <I2C_Slave_AF>
 8005ae2:	e016      	b.n	8005b12 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f043 0304 	orr.w	r3, r3, #4
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005af6:	7efb      	ldrb	r3, [r7, #27]
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d002      	beq.n	8005b02 <HAL_I2C_ER_IRQHandler+0xf4>
 8005afc:	7efb      	ldrb	r3, [r7, #27]
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d107      	bne.n	8005b12 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	0adb      	lsrs	r3, r3, #11
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <HAL_I2C_ER_IRQHandler+0x12e>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	f043 0308 	orr.w	r3, r3, #8
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005b3a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 f8a0 	bl	8006c94 <I2C_ITError>
  }
}
 8005b54:	bf00      	nop
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d150      	bne.n	8005cf4 <I2C_MasterTransmit_TXE+0xc8>
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b21      	cmp	r3, #33	; 0x21
 8005c56:	d14d      	bne.n	8005cf4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d01d      	beq.n	8005c9a <I2C_MasterTransmit_TXE+0x6e>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d01a      	beq.n	8005c9a <I2C_MasterTransmit_TXE+0x6e>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c6a:	d016      	beq.n	8005c9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2211      	movs	r2, #17
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff62 	bl	8005b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c98:	e060      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d107      	bne.n	8005ce4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ff7d 	bl	8005bdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ce2:	e03b      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff35 	bl	8005b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cf2:	e033      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b21      	cmp	r3, #33	; 0x21
 8005cf8:	d005      	beq.n	8005d06 <I2C_MasterTransmit_TXE+0xda>
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d12d      	bne.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b22      	cmp	r3, #34	; 0x22
 8005d04:	d12a      	bne.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d20:	e01c      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d103      	bne.n	8005d36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f88e 	bl	8005e50 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d34:	e012      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d5a:	e7ff      	b.n	8005d5c <I2C_MasterTransmit_TXE+0x130>
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b21      	cmp	r3, #33	; 0x21
 8005d7c:	d164      	bne.n	8005e48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d012      	beq.n	8005dae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005dac:	e04c      	b.n	8005e48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d01d      	beq.n	8005df0 <I2C_MasterTransmit_BTF+0x8c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d01a      	beq.n	8005df0 <I2C_MasterTransmit_BTF+0x8c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dc0:	d016      	beq.n	8005df0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2211      	movs	r2, #17
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff feb7 	bl	8005b5c <HAL_I2C_MasterTxCpltCallback>
}
 8005dee:	e02b      	b.n	8005e48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d107      	bne.n	8005e3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fed2 	bl	8005bdc <HAL_I2C_MemTxCpltCallback>
}
 8005e38:	e006      	b.n	8005e48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fe8a 	bl	8005b5c <HAL_I2C_MasterTxCpltCallback>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d11d      	bne.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10b      	bne.n	8005e88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	1c9a      	adds	r2, r3, #2
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e86:	e073      	b.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	121b      	asrs	r3, r3, #8
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ea2:	e065      	b.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10b      	bne.n	8005ec4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ec2:	e055      	b.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d151      	bne.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b22      	cmp	r3, #34	; 0x22
 8005ed0:	d10d      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005eec:	e040      	b.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b21      	cmp	r3, #33	; 0x21
 8005efc:	d112      	bne.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f22:	e025      	b.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d120      	bne.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b21      	cmp	r3, #33	; 0x21
 8005f32:	d11d      	bne.n	8005f70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fe36 	bl	8005bdc <HAL_I2C_MemTxCpltCallback>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b22      	cmp	r3, #34	; 0x22
 8005f8a:	f040 80ac 	bne.w	80060e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d921      	bls.n	8005fe0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	f040 808c 	bne.w	80060e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005fde:	e082      	b.n	80060e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d075      	beq.n	80060d4 <I2C_MasterReceive_RXNE+0x15c>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d002      	beq.n	8005ff4 <I2C_MasterReceive_RXNE+0x7c>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d16f      	bne.n	80060d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fa15 	bl	8007424 <I2C_WaitOnSTOPRequestThroughIT>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d142      	bne.n	8006086 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800601e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d10a      	bne.n	8006070 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fdc1 	bl	8005bf0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800606e:	e03a      	b.n	80060e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2212      	movs	r2, #18
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fd76 	bl	8005b70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006084:	e02f      	b.n	80060e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006094:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fd99 	bl	8005c04 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060d2:	e008      	b.n	80060e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e2:	605a      	str	r2, [r3, #4]
}
 80060e4:	e7ff      	b.n	80060e6 <I2C_MasterReceive_RXNE+0x16e>
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b04      	cmp	r3, #4
 8006104:	d11b      	bne.n	800613e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006114:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800613c:	e0bd      	b.n	80062ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d129      	bne.n	800619c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d00a      	beq.n	8006174 <I2C_MasterReceive_BTF+0x86>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d007      	beq.n	8006174 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006172:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800619a:	e08e      	b.n	80062ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d176      	bne.n	8006294 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d002      	beq.n	80061b2 <I2C_MasterReceive_BTF+0xc4>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d108      	bne.n	80061c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e019      	b.n	80061f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d002      	beq.n	80061d0 <I2C_MasterReceive_BTF+0xe2>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d108      	bne.n	80061e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e00a      	b.n	80061f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d007      	beq.n	80061f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006252:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d10a      	bne.n	800627e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fcba 	bl	8005bf0 <HAL_I2C_MemRxCpltCallback>
}
 800627c:	e01d      	b.n	80062ba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2212      	movs	r2, #18
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fc6f 	bl	8005b70 <HAL_I2C_MasterRxCpltCallback>
}
 8006292:	e012      	b.n	80062ba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d117      	bne.n	8006306 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80062f0:	e067      	b.n	80063c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	611a      	str	r2, [r3, #16]
}
 8006304:	e05d      	b.n	80063c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630e:	d133      	bne.n	8006378 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b21      	cmp	r3, #33	; 0x21
 800631a:	d109      	bne.n	8006330 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	b2db      	uxtb	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800632c:	611a      	str	r2, [r3, #16]
 800632e:	e008      	b.n	8006342 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	b2da      	uxtb	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <I2C_Master_SB+0x92>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d108      	bne.n	8006366 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d032      	beq.n	80063c2 <I2C_Master_SB+0x100>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02d      	beq.n	80063c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006374:	605a      	str	r2, [r3, #4]
}
 8006376:	e024      	b.n	80063c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10e      	bne.n	800639e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	b29b      	uxth	r3, r3
 8006386:	11db      	asrs	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f063 030f 	orn	r3, r3, #15
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
}
 800639c:	e011      	b.n	80063c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10d      	bne.n	80063c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	11db      	asrs	r3, r3, #7
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0306 	and.w	r3, r3, #6
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f063 030e 	orn	r3, r3, #14
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <I2C_Master_ADD10+0x26>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00c      	beq.n	8006416 <I2C_Master_ADD10+0x48>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006414:	605a      	str	r2, [r3, #4]
  }
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006422:	b480      	push	{r7}
 8006424:	b091      	sub	sp, #68	; 0x44
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006430:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b22      	cmp	r3, #34	; 0x22
 800644a:	f040 8169 	bne.w	8006720 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <I2C_Master_ADDR+0x54>
 8006456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d10b      	bne.n	8006476 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	633b      	str	r3, [r7, #48]	; 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	633b      	str	r3, [r7, #48]	; 0x30
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	633b      	str	r3, [r7, #48]	; 0x30
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	e160      	b.n	8006738 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	2b00      	cmp	r3, #0
 800647c:	d11d      	bne.n	80064ba <I2C_Master_ADDR+0x98>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006486:	d118      	bne.n	80064ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	651a      	str	r2, [r3, #80]	; 0x50
 80064b8:	e13e      	b.n	8006738 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e115      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f040 808a 	bne.w	800660c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064fe:	d137      	bne.n	8006570 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651e:	d113      	bne.n	8006548 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006530:	2300      	movs	r3, #0
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	e0e7      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e0d3      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2b08      	cmp	r3, #8
 8006574:	d02e      	beq.n	80065d4 <I2C_Master_ADDR+0x1b2>
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b20      	cmp	r3, #32
 800657a:	d02b      	beq.n	80065d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	2b12      	cmp	r3, #18
 8006580:	d102      	bne.n	8006588 <I2C_Master_ADDR+0x166>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	2b01      	cmp	r3, #1
 8006586:	d125      	bne.n	80065d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	2b04      	cmp	r3, #4
 800658c:	d00e      	beq.n	80065ac <I2C_Master_ADDR+0x18a>
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b02      	cmp	r3, #2
 8006592:	d00b      	beq.n	80065ac <I2C_Master_ADDR+0x18a>
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	2b10      	cmp	r3, #16
 8006598:	d008      	beq.n	80065ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e007      	b.n	80065bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	e0a1      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e085      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d14d      	bne.n	80066b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	2b04      	cmp	r3, #4
 800661a:	d016      	beq.n	800664a <I2C_Master_ADDR+0x228>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	2b02      	cmp	r3, #2
 8006620:	d013      	beq.n	800664a <I2C_Master_ADDR+0x228>
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	2b10      	cmp	r3, #16
 8006626:	d010      	beq.n	800664a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006636:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e007      	b.n	800665a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d117      	bne.n	800669a <I2C_Master_ADDR+0x278>
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006670:	d00b      	beq.n	800668a <I2C_Master_ADDR+0x268>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b01      	cmp	r3, #1
 8006676:	d008      	beq.n	800668a <I2C_Master_ADDR+0x268>
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	2b08      	cmp	r3, #8
 800667c:	d005      	beq.n	800668a <I2C_Master_ADDR+0x268>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	2b10      	cmp	r3, #16
 8006682:	d002      	beq.n	800668a <I2C_Master_ADDR+0x268>
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b20      	cmp	r3, #32
 8006688:	d107      	bne.n	800669a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006698:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	e032      	b.n	8006718 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d0:	d117      	bne.n	8006702 <I2C_Master_ADDR+0x2e0>
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d8:	d00b      	beq.n	80066f2 <I2C_Master_ADDR+0x2d0>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d008      	beq.n	80066f2 <I2C_Master_ADDR+0x2d0>
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d005      	beq.n	80066f2 <I2C_Master_ADDR+0x2d0>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d002      	beq.n	80066f2 <I2C_Master_ADDR+0x2d0>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d107      	bne.n	8006702 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006700:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800671e:	e00b      	b.n	8006738 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
}
 8006736:	e7ff      	b.n	8006738 <I2C_Master_ADDR+0x316>
 8006738:	bf00      	nop
 800673a:	3744      	adds	r7, #68	; 0x44
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d02b      	beq.n	80067b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d114      	bne.n	80067b6 <I2C_SlaveTransmit_TXE+0x72>
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	2b29      	cmp	r3, #41	; 0x29
 8006790:	d111      	bne.n	80067b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2221      	movs	r2, #33	; 0x21
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2228      	movs	r2, #40	; 0x28
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f9e7 	bl	8005b84 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d02c      	beq.n	8006874 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d114      	bne.n	8006874 <I2C_SlaveReceive_RXNE+0x74>
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b2a      	cmp	r3, #42	; 0x2a
 800684e:	d111      	bne.n	8006874 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2222      	movs	r2, #34	; 0x22
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2228      	movs	r2, #40	; 0x28
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff f992 	bl	8005b98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d012      	beq.n	80068b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068da:	2b28      	cmp	r3, #40	; 0x28
 80068dc:	d127      	bne.n	800692e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	09db      	lsrs	r3, r3, #7
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	81bb      	strh	r3, [r7, #12]
 8006910:	e002      	b.n	8006918 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006920:	89ba      	ldrh	r2, [r7, #12]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff f940 	bl	8005bac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800692c:	e00e      	b.n	800694c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006962:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006972:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006974:	2300      	movs	r3, #0
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b0:	d172      	bne.n	8006a98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b22      	cmp	r3, #34	; 0x22
 80069b6:	d002      	beq.n	80069be <I2C_Slave_STOPF+0x6a>
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b2a      	cmp	r3, #42	; 0x2a
 80069bc:	d135      	bne.n	8006a2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe f923 	bl	8004c42 <HAL_DMA_GetState>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d049      	beq.n	8006a96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	4a69      	ldr	r2, [pc, #420]	; (8006bac <I2C_Slave_STOPF+0x258>)
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe f8f5 	bl	8004bfe <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d03d      	beq.n	8006a96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a28:	e035      	b.n	8006a96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f043 0204 	orr.w	r2, r3, #4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe f8ed 	bl	8004c42 <HAL_DMA_GetState>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d014      	beq.n	8006a98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	4a4e      	ldr	r2, [pc, #312]	; (8006bac <I2C_Slave_STOPF+0x258>)
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe f8bf 	bl	8004bfe <HAL_DMA_Abort_IT>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	e000      	b.n	8006a98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03e      	beq.n	8006b20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d112      	bne.n	8006ad6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d112      	bne.n	8006b0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0204 	orr.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8b3 	bl	8006c94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b2e:	e039      	b.n	8006ba4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b2a      	cmp	r3, #42	; 0x2a
 8006b34:	d109      	bne.n	8006b4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2228      	movs	r2, #40	; 0x28
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff f827 	bl	8005b98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b28      	cmp	r3, #40	; 0x28
 8006b54:	d111      	bne.n	8006b7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <I2C_Slave_STOPF+0x25c>)
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff f828 	bl	8005bc8 <HAL_I2C_ListenCpltCallback>
}
 8006b78:	e014      	b.n	8006ba4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	2b22      	cmp	r3, #34	; 0x22
 8006b80:	d002      	beq.n	8006b88 <I2C_Slave_STOPF+0x234>
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b22      	cmp	r3, #34	; 0x22
 8006b86:	d10d      	bne.n	8006ba4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe fffa 	bl	8005b98 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	08007025 	.word	0x08007025
 8006bb0:	ffff0000 	.word	0xffff0000

08006bb4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d002      	beq.n	8006bd6 <I2C_Slave_AF+0x22>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d129      	bne.n	8006c2a <I2C_Slave_AF+0x76>
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	2b28      	cmp	r3, #40	; 0x28
 8006bda:	d126      	bne.n	8006c2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a2c      	ldr	r2, [pc, #176]	; (8006c90 <I2C_Slave_AF+0xdc>)
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fe ffd0 	bl	8005bc8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006c28:	e02e      	b.n	8006c88 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b21      	cmp	r3, #33	; 0x21
 8006c2e:	d126      	bne.n	8006c7e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <I2C_Slave_AF+0xdc>)
 8006c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c74:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe ff84 	bl	8005b84 <HAL_I2C_SlaveTxCpltCallback>
}
 8006c7c:	e004      	b.n	8006c88 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c86:	615a      	str	r2, [r3, #20]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	ffff0000 	.word	0xffff0000

08006c94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006caa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d002      	beq.n	8006cb8 <I2C_ITError+0x24>
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d10a      	bne.n	8006cce <I2C_ITError+0x3a>
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b22      	cmp	r3, #34	; 0x22
 8006cbc:	d107      	bne.n	8006cce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cd4:	2b28      	cmp	r3, #40	; 0x28
 8006cd6:	d107      	bne.n	8006ce8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2228      	movs	r2, #40	; 0x28
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ce6:	e015      	b.n	8006d14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf6:	d00a      	beq.n	8006d0e <I2C_ITError+0x7a>
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b60      	cmp	r3, #96	; 0x60
 8006cfc:	d007      	beq.n	8006d0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d22:	d162      	bne.n	8006dea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d020      	beq.n	8006d84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	4a6a      	ldr	r2, [pc, #424]	; (8006ef0 <I2C_ITError+0x25c>)
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd ff55 	bl	8004bfe <HAL_DMA_Abort_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 8089 	beq.w	8006e6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4798      	blx	r3
 8006d82:	e074      	b.n	8006e6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	4a59      	ldr	r2, [pc, #356]	; (8006ef0 <I2C_ITError+0x25c>)
 8006d8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd ff34 	bl	8004bfe <HAL_DMA_Abort_IT>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d068      	beq.n	8006e6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d10b      	bne.n	8006dc2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	e041      	b.n	8006e6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b60      	cmp	r3, #96	; 0x60
 8006df4:	d125      	bne.n	8006e42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d10b      	bne.n	8006e2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe feec 	bl	8005c18 <HAL_I2C_AbortCpltCallback>
 8006e40:	e015      	b.n	8006e6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d10b      	bne.n	8006e68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fe fecb 	bl	8005c04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10e      	bne.n	8006e9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d007      	beq.n	8006eac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d113      	bne.n	8006ee8 <I2C_ITError+0x254>
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b28      	cmp	r3, #40	; 0x28
 8006ec4:	d110      	bne.n	8006ee8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a0a      	ldr	r2, [pc, #40]	; (8006ef4 <I2C_ITError+0x260>)
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fe fe70 	bl	8005bc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	08007025 	.word	0x08007025
 8006ef4:	ffff0000 	.word	0xffff0000

08006ef8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	817b      	strh	r3, [r7, #10]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	813b      	strh	r3, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f920 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00d      	beq.n	8006f56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f48:	d103      	bne.n	8006f52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e05f      	b.n	8007016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f56:	897b      	ldrh	r3, [r7, #10]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	492d      	ldr	r1, [pc, #180]	; (8007020 <I2C_RequestMemoryWrite+0x128>)
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f958 	bl	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e04c      	b.n	8007016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f94:	6a39      	ldr	r1, [r7, #32]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f9c2 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d107      	bne.n	8006fba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e02b      	b.n	8007016 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d105      	bne.n	8006fd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	611a      	str	r2, [r3, #16]
 8006fce:	e021      	b.n	8007014 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fd0:	893b      	ldrh	r3, [r7, #8]
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe0:	6a39      	ldr	r1, [r7, #32]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f99c 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d107      	bne.n	8007006 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e005      	b.n	8007016 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800700a:	893b      	ldrh	r3, [r7, #8]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	00010002 	.word	0x00010002

08007024 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800703e:	4b4b      	ldr	r3, [pc, #300]	; (800716c <I2C_DMAAbort+0x148>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <I2C_DMAAbort+0x14c>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	0a1a      	lsrs	r2, r3, #8
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	00da      	lsls	r2, r3, #3
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f043 0220 	orr.w	r2, r3, #32
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800706a:	e00a      	b.n	8007082 <I2C_DMAAbort+0x5e>
    }
    count--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3b01      	subs	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007080:	d0ea      	beq.n	8007058 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	2200      	movs	r2, #0
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	2200      	movs	r2, #0
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c4:	2200      	movs	r2, #0
 80070c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	2200      	movs	r2, #0
 80070d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b60      	cmp	r3, #96	; 0x60
 80070f2:	d10e      	bne.n	8007112 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800710a:	6978      	ldr	r0, [r7, #20]
 800710c:	f7fe fd84 	bl	8005c18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007110:	e027      	b.n	8007162 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007118:	2b28      	cmp	r3, #40	; 0x28
 800711a:	d117      	bne.n	800714c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800713a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2228      	movs	r2, #40	; 0x28
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800714a:	e007      	b.n	800715c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f7fe fd51 	bl	8005c04 <HAL_I2C_ErrorCallback>
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000000 	.word	0x20000000
 8007170:	14f8b589 	.word	0x14f8b589

08007174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007184:	e025      	b.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d021      	beq.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fd f913 	bl	80043b8 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d116      	bne.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e023      	b.n	800721a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	0c1b      	lsrs	r3, r3, #16
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d10d      	bne.n	80071f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	43da      	mvns	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	e00c      	b.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	43da      	mvns	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf0c      	ite	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2300      	movne	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	429a      	cmp	r2, r3
 8007216:	d0b6      	beq.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007230:	e051      	b.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007240:	d123      	bne.n	800728a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800725a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0204 	orr.w	r2, r3, #4
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e046      	b.n	8007318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d021      	beq.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fd f891 	bl	80043b8 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e020      	b.n	8007318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10c      	bne.n	80072fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	43da      	mvns	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2301      	movne	r3, #1
 80072f4:	2300      	moveq	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	e00b      	b.n	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	43da      	mvns	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d18d      	bne.n	8007232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800732c:	e02d      	b.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f8aa 	bl	8007488 <I2C_IsAcknowledgeFailed>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e02d      	b.n	800739a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d021      	beq.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007346:	f7fd f837 	bl	80043b8 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	d302      	bcc.n	800735c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d116      	bne.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e007      	b.n	800739a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d1ca      	bne.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ae:	e02d      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f869 	bl	8007488 <I2C_IsAcknowledgeFailed>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e02d      	b.n	800741c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d021      	beq.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c8:	f7fc fff6 	bl	80043b8 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f043 0220 	orr.w	r2, r3, #32
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e007      	b.n	800741c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d1ca      	bne.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	08db      	lsrs	r3, r3, #3
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	0a1a      	lsrs	r2, r3, #8
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3b01      	subs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f043 0220 	orr.w	r2, r3, #32
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e008      	b.n	8007474 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007470:	d0e9      	beq.n	8007446 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000000 	.word	0x20000000
 8007484:	14f8b589 	.word	0x14f8b589

08007488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749e:	d11b      	bne.n	80074d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f043 0204 	orr.w	r2, r3, #4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80074f6:	d103      	bne.n	8007500 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80074fe:	e007      	b.n	8007510 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007508:	d102      	bne.n	8007510 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2208      	movs	r2, #8
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e267      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d075      	beq.n	8007626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800753a:	4b88      	ldr	r3, [pc, #544]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b04      	cmp	r3, #4
 8007544:	d00c      	beq.n	8007560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007546:	4b85      	ldr	r3, [pc, #532]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800754e:	2b08      	cmp	r3, #8
 8007550:	d112      	bne.n	8007578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007552:	4b82      	ldr	r3, [pc, #520]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755e:	d10b      	bne.n	8007578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007560:	4b7e      	ldr	r3, [pc, #504]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05b      	beq.n	8007624 <HAL_RCC_OscConfig+0x108>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d157      	bne.n	8007624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e242      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007580:	d106      	bne.n	8007590 <HAL_RCC_OscConfig+0x74>
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a75      	ldr	r2, [pc, #468]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e01d      	b.n	80075cc <HAL_RCC_OscConfig+0xb0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x98>
 800759a:	4b70      	ldr	r3, [pc, #448]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6f      	ldr	r2, [pc, #444]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	4b6d      	ldr	r3, [pc, #436]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a6c      	ldr	r2, [pc, #432]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e00b      	b.n	80075cc <HAL_RCC_OscConfig+0xb0>
 80075b4:	4b69      	ldr	r3, [pc, #420]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a68      	ldr	r2, [pc, #416]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	4b66      	ldr	r3, [pc, #408]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a65      	ldr	r2, [pc, #404]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d4:	f7fc fef0 	bl	80043b8 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075dc:	f7fc feec 	bl	80043b8 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e207      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ee:	4b5b      	ldr	r3, [pc, #364]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0xc0>
 80075fa:	e014      	b.n	8007626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fc fedc 	bl	80043b8 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007604:	f7fc fed8 	bl	80043b8 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b64      	cmp	r3, #100	; 0x64
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e1f3      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007616:	4b51      	ldr	r3, [pc, #324]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <HAL_RCC_OscConfig+0xe8>
 8007622:	e000      	b.n	8007626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d063      	beq.n	80076fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007632:	4b4a      	ldr	r3, [pc, #296]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800763e:	4b47      	ldr	r3, [pc, #284]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007646:	2b08      	cmp	r3, #8
 8007648:	d11c      	bne.n	8007684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800764a:	4b44      	ldr	r3, [pc, #272]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d116      	bne.n	8007684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007656:	4b41      	ldr	r3, [pc, #260]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_RCC_OscConfig+0x152>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e1c7      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800766e:	4b3b      	ldr	r3, [pc, #236]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4937      	ldr	r1, [pc, #220]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800767e:	4313      	orrs	r3, r2
 8007680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007682:	e03a      	b.n	80076fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d020      	beq.n	80076ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800768c:	4b34      	ldr	r3, [pc, #208]	; (8007760 <HAL_RCC_OscConfig+0x244>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fc fe91 	bl	80043b8 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800769a:	f7fc fe8d 	bl	80043b8 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e1a8      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ac:	4b2b      	ldr	r3, [pc, #172]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4925      	ldr	r1, [pc, #148]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	600b      	str	r3, [r1, #0]
 80076cc:	e015      	b.n	80076fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ce:	4b24      	ldr	r3, [pc, #144]	; (8007760 <HAL_RCC_OscConfig+0x244>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fc fe70 	bl	80043b8 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076dc:	f7fc fe6c 	bl	80043b8 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e187      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ee:	4b1b      	ldr	r3, [pc, #108]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f0      	bne.n	80076dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d036      	beq.n	8007774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d016      	beq.n	800773c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <HAL_RCC_OscConfig+0x248>)
 8007710:	2201      	movs	r2, #1
 8007712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fc fe50 	bl	80043b8 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800771c:	f7fc fe4c 	bl	80043b8 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e167      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800772e:	4b0b      	ldr	r3, [pc, #44]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x200>
 800773a:	e01b      	b.n	8007774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <HAL_RCC_OscConfig+0x248>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007742:	f7fc fe39 	bl	80043b8 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007748:	e00e      	b.n	8007768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800774a:	f7fc fe35 	bl	80043b8 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d907      	bls.n	8007768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e150      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
 800775c:	40023800 	.word	0x40023800
 8007760:	42470000 	.word	0x42470000
 8007764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007768:	4b88      	ldr	r3, [pc, #544]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800776a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1ea      	bne.n	800774a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8097 	beq.w	80078b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007786:	4b81      	ldr	r3, [pc, #516]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10f      	bne.n	80077b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007792:	2300      	movs	r3, #0
 8007794:	60bb      	str	r3, [r7, #8]
 8007796:	4b7d      	ldr	r3, [pc, #500]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	4a7c      	ldr	r2, [pc, #496]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6413      	str	r3, [r2, #64]	; 0x40
 80077a2:	4b7a      	ldr	r3, [pc, #488]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b2:	4b77      	ldr	r3, [pc, #476]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d118      	bne.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077be:	4b74      	ldr	r3, [pc, #464]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a73      	ldr	r2, [pc, #460]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ca:	f7fc fdf5 	bl	80043b8 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d2:	f7fc fdf1 	bl	80043b8 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e10c      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e4:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d106      	bne.n	8007806 <HAL_RCC_OscConfig+0x2ea>
 80077f8:	4b64      	ldr	r3, [pc, #400]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	4a63      	ldr	r2, [pc, #396]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6713      	str	r3, [r2, #112]	; 0x70
 8007804:	e01c      	b.n	8007840 <HAL_RCC_OscConfig+0x324>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b05      	cmp	r3, #5
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0x30c>
 800780e:	4b5f      	ldr	r3, [pc, #380]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a5e      	ldr	r2, [pc, #376]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007814:	f043 0304 	orr.w	r3, r3, #4
 8007818:	6713      	str	r3, [r2, #112]	; 0x70
 800781a:	4b5c      	ldr	r3, [pc, #368]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a5b      	ldr	r2, [pc, #364]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	6713      	str	r3, [r2, #112]	; 0x70
 8007826:	e00b      	b.n	8007840 <HAL_RCC_OscConfig+0x324>
 8007828:	4b58      	ldr	r3, [pc, #352]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	4a57      	ldr	r2, [pc, #348]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	6713      	str	r3, [r2, #112]	; 0x70
 8007834:	4b55      	ldr	r3, [pc, #340]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	4a54      	ldr	r2, [pc, #336]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800783a:	f023 0304 	bic.w	r3, r3, #4
 800783e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d015      	beq.n	8007874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7fc fdb6 	bl	80043b8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784e:	e00a      	b.n	8007866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7fc fdb2 	bl	80043b8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e0cb      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007866:	4b49      	ldr	r3, [pc, #292]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0ee      	beq.n	8007850 <HAL_RCC_OscConfig+0x334>
 8007872:	e014      	b.n	800789e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007874:	f7fc fda0 	bl	80043b8 <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800787a:	e00a      	b.n	8007892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800787c:	f7fc fd9c 	bl	80043b8 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	; 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e0b5      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007892:	4b3e      	ldr	r3, [pc, #248]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ee      	bne.n	800787c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d105      	bne.n	80078b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	4a38      	ldr	r2, [pc, #224]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80a1 	beq.w	80079fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078ba:	4b34      	ldr	r3, [pc, #208]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d05c      	beq.n	8007980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d141      	bne.n	8007952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d4:	f7fc fd70 	bl	80043b8 <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078dc:	f7fc fd6c 	bl	80043b8 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e087      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ee:	4b27      	ldr	r3, [pc, #156]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f0      	bne.n	80078dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	019b      	lsls	r3, r3, #6
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	3b01      	subs	r3, #1
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	061b      	lsls	r3, r3, #24
 800791e:	491b      	ldr	r1, [pc, #108]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007920:	4313      	orrs	r3, r2
 8007922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007924:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792a:	f7fc fd45 	bl	80043b8 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007932:	f7fc fd41 	bl	80043b8 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e05c      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x416>
 8007950:	e054      	b.n	80079fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007958:	f7fc fd2e 	bl	80043b8 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007960:	f7fc fd2a 	bl	80043b8 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e045      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0x444>
 800797e:	e03d      	b.n	80079fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d107      	bne.n	8007998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e038      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
 800798c:	40023800 	.word	0x40023800
 8007990:	40007000 	.word	0x40007000
 8007994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <HAL_RCC_OscConfig+0x4ec>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d028      	beq.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d121      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079be:	429a      	cmp	r2, r3
 80079c0:	d11a      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079c8:	4013      	ands	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d111      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	3b01      	subs	r3, #1
 80079e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d107      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023800 	.word	0x40023800

08007a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0cc      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a20:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d90c      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2e:	4b65      	ldr	r3, [pc, #404]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0b8      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d020      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a60:	4b59      	ldr	r3, [pc, #356]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a58      	ldr	r2, [pc, #352]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a52      	ldr	r2, [pc, #328]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	494d      	ldr	r1, [pc, #308]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d044      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d119      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d003      	beq.n	8007aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d107      	bne.n	8007ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aca:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e06f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ada:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e067      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f023 0203 	bic.w	r2, r3, #3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4934      	ldr	r1, [pc, #208]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007afc:	f7fc fc5c 	bl	80043b8 <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	e00a      	b.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b04:	f7fc fc58 	bl	80043b8 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e04f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 020c 	and.w	r2, r3, #12
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d1eb      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d20c      	bcs.n	8007b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e032      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4916      	ldr	r1, [pc, #88]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	490e      	ldr	r1, [pc, #56]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b92:	f000 f821 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	490a      	ldr	r1, [pc, #40]	; (8007bcc <HAL_RCC_ClockConfig+0x1c0>)
 8007ba4:	5ccb      	ldrb	r3, [r1, r3]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc fbbc 	bl	8004330 <HAL_InitTick>

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023c00 	.word	0x40023c00
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	0800ac00 	.word	0x0800ac00
 8007bd0:	20000000 	.word	0x20000000
 8007bd4:	20000004 	.word	0x20000004

08007bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bdc:	b090      	sub	sp, #64	; 0x40
 8007bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	637b      	str	r3, [r7, #52]	; 0x34
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be8:	2300      	movs	r3, #0
 8007bea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf0:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d00d      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x40>
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	f200 80a1 	bhi.w	8007d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_RCC_GetSysClockFreq+0x34>
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d003      	beq.n	8007c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c0a:	e09b      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c0c:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c10:	e09b      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c12:	4b53      	ldr	r3, [pc, #332]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c16:	e098      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c18:	4b4f      	ldr	r3, [pc, #316]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c22:	4b4d      	ldr	r3, [pc, #308]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d028      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c2e:	4b4a      	ldr	r3, [pc, #296]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	099b      	lsrs	r3, r3, #6
 8007c34:	2200      	movs	r2, #0
 8007c36:	623b      	str	r3, [r7, #32]
 8007c38:	627a      	str	r2, [r7, #36]	; 0x24
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c40:	2100      	movs	r1, #0
 8007c42:	4b47      	ldr	r3, [pc, #284]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c44:	fb03 f201 	mul.w	r2, r3, r1
 8007c48:	2300      	movs	r3, #0
 8007c4a:	fb00 f303 	mul.w	r3, r0, r3
 8007c4e:	4413      	add	r3, r2
 8007c50:	4a43      	ldr	r2, [pc, #268]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c52:	fba0 1202 	umull	r1, r2, r0, r2
 8007c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c58:	460a      	mov	r2, r1
 8007c5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5e:	4413      	add	r3, r2
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	2200      	movs	r2, #0
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	61fa      	str	r2, [r7, #28]
 8007c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c72:	f7f8 ff03 	bl	8000a7c <__aeabi_uldivmod>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c7e:	e053      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c80:	4b35      	ldr	r3, [pc, #212]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	099b      	lsrs	r3, r3, #6
 8007c86:	2200      	movs	r2, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	617a      	str	r2, [r7, #20]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c92:	f04f 0b00 	mov.w	fp, #0
 8007c96:	4652      	mov	r2, sl
 8007c98:	465b      	mov	r3, fp
 8007c9a:	f04f 0000 	mov.w	r0, #0
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	0159      	lsls	r1, r3, #5
 8007ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ca8:	0150      	lsls	r0, r2, #5
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	ebb2 080a 	subs.w	r8, r2, sl
 8007cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007cca:	ebb2 0408 	subs.w	r4, r2, r8
 8007cce:	eb63 0509 	sbc.w	r5, r3, r9
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	00eb      	lsls	r3, r5, #3
 8007cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ce0:	00e2      	lsls	r2, r4, #3
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	461d      	mov	r5, r3
 8007ce6:	eb14 030a 	adds.w	r3, r4, sl
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	eb45 030b 	adc.w	r3, r5, fp
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cfe:	4629      	mov	r1, r5
 8007d00:	028b      	lsls	r3, r1, #10
 8007d02:	4621      	mov	r1, r4
 8007d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d08:	4621      	mov	r1, r4
 8007d0a:	028a      	lsls	r2, r1, #10
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	2200      	movs	r2, #0
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	60fa      	str	r2, [r7, #12]
 8007d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d1c:	f7f8 feae 	bl	8000a7c <__aeabi_uldivmod>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4613      	mov	r3, r2
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d28:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	3301      	adds	r3, #1
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d42:	e002      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8007d46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3740      	adds	r7, #64	; 0x40
 8007d50:	46bd      	mov	sp, r7
 8007d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d56:	bf00      	nop
 8007d58:	40023800 	.word	0x40023800
 8007d5c:	00f42400 	.word	0x00f42400
 8007d60:	017d7840 	.word	0x017d7840

08007d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d68:	4b03      	ldr	r3, [pc, #12]	; (8007d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000000 	.word	0x20000000

08007d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d80:	f7ff fff0 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	0a9b      	lsrs	r3, r3, #10
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4903      	ldr	r1, [pc, #12]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	0800ac10 	.word	0x0800ac10

08007da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007da8:	f7ff ffdc 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	0b5b      	lsrs	r3, r3, #13
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	4903      	ldr	r1, [pc, #12]	; (8007dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	0800ac10 	.word	0x0800ac10

08007dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e07b      	b.n	8007ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d108      	bne.n	8007df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dee:	d009      	beq.n	8007e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	61da      	str	r2, [r3, #28]
 8007df6:	e005      	b.n	8007e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7fb feb8 	bl	8003b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	ea42 0103 	orr.w	r1, r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	f003 0104 	and.w	r1, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	f003 0210 	and.w	r2, r3, #16
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e041      	b.n	8007f74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fb fe8d 	bl	8003c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f000 fd91 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d001      	beq.n	8007f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e044      	b.n	800801e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1e      	ldr	r2, [pc, #120]	; (800802c <HAL_TIM_Base_Start_IT+0xb0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d018      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbe:	d013      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1a      	ldr	r2, [pc, #104]	; (8008030 <HAL_TIM_Base_Start_IT+0xb4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a19      	ldr	r2, [pc, #100]	; (8008034 <HAL_TIM_Base_Start_IT+0xb8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a17      	ldr	r2, [pc, #92]	; (8008038 <HAL_TIM_Base_Start_IT+0xbc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a16      	ldr	r2, [pc, #88]	; (800803c <HAL_TIM_Base_Start_IT+0xc0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d111      	bne.n	800800c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b06      	cmp	r3, #6
 8007ff8:	d010      	beq.n	800801c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0201 	orr.w	r2, r2, #1
 8008008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800a:	e007      	b.n	800801c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40014000 	.word	0x40014000

08008040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e041      	b.n	80080d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f839 	bl	80080de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f000 fce0 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start+0x24>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e022      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d109      	bne.n	8008132 <HAL_TIM_PWM_Start+0x3e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b01      	cmp	r3, #1
 8008128:	bf14      	ite	ne
 800812a:	2301      	movne	r3, #1
 800812c:	2300      	moveq	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	e015      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b08      	cmp	r3, #8
 8008136:	d109      	bne.n	800814c <HAL_TIM_PWM_Start+0x58>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	bf14      	ite	ne
 8008144:	2301      	movne	r3, #1
 8008146:	2300      	moveq	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	e008      	b.n	800815e <HAL_TIM_PWM_Start+0x6a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	bf14      	ite	ne
 8008158:	2301      	movne	r3, #1
 800815a:	2300      	moveq	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e068      	b.n	8008238 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <HAL_TIM_PWM_Start+0x82>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008174:	e013      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d104      	bne.n	8008186 <HAL_TIM_PWM_Start+0x92>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008184:	e00b      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d104      	bne.n	8008196 <HAL_TIM_PWM_Start+0xa2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008194:	e003      	b.n	800819e <HAL_TIM_PWM_Start+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2201      	movs	r2, #1
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fef2 	bl	8008f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a23      	ldr	r2, [pc, #140]	; (8008240 <HAL_TIM_PWM_Start+0x14c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d107      	bne.n	80081c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <HAL_TIM_PWM_Start+0x14c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d018      	beq.n	8008202 <HAL_TIM_PWM_Start+0x10e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d013      	beq.n	8008202 <HAL_TIM_PWM_Start+0x10e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a19      	ldr	r2, [pc, #100]	; (8008244 <HAL_TIM_PWM_Start+0x150>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00e      	beq.n	8008202 <HAL_TIM_PWM_Start+0x10e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a17      	ldr	r2, [pc, #92]	; (8008248 <HAL_TIM_PWM_Start+0x154>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d009      	beq.n	8008202 <HAL_TIM_PWM_Start+0x10e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a16      	ldr	r2, [pc, #88]	; (800824c <HAL_TIM_PWM_Start+0x158>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d004      	beq.n	8008202 <HAL_TIM_PWM_Start+0x10e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a14      	ldr	r2, [pc, #80]	; (8008250 <HAL_TIM_PWM_Start+0x15c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d111      	bne.n	8008226 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b06      	cmp	r3, #6
 8008212:	d010      	beq.n	8008236 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	e007      	b.n	8008236 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0201 	orr.w	r2, r2, #1
 8008234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40010000 	.word	0x40010000
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40014000 	.word	0x40014000

08008254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e097      	b.n	8008398 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fb fd2b 	bl	8003cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2202      	movs	r2, #2
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f000 fbcb 	bl	8008a44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	4313      	orrs	r3, r2
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082f4:	f023 030c 	bic.w	r3, r3, #12
 80082f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	4313      	orrs	r3, r2
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	011a      	lsls	r2, r3, #4
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	031b      	lsls	r3, r3, #12
 8008324:	4313      	orrs	r3, r2
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008332:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800833a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	4313      	orrs	r3, r2
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d110      	bne.n	80083f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d102      	bne.n	80083dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80083d6:	7b7b      	ldrb	r3, [r7, #13]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d001      	beq.n	80083e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e069      	b.n	80084b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f0:	e031      	b.n	8008456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d110      	bne.n	800841a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d102      	bne.n	8008404 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083fe:	7b3b      	ldrb	r3, [r7, #12]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d001      	beq.n	8008408 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e055      	b.n	80084b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008418:	e01d      	b.n	8008456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d108      	bne.n	8008432 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d105      	bne.n	8008432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008426:	7b7b      	ldrb	r3, [r7, #13]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d102      	bne.n	8008432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800842c:	7b3b      	ldrb	r3, [r7, #12]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d001      	beq.n	8008436 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e03e      	b.n	80084b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_TIM_Encoder_Start+0xc4>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b04      	cmp	r3, #4
 8008460:	d008      	beq.n	8008474 <HAL_TIM_Encoder_Start+0xd4>
 8008462:	e00f      	b.n	8008484 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2201      	movs	r2, #1
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fd8f 	bl	8008f90 <TIM_CCxChannelCmd>
      break;
 8008472:	e016      	b.n	80084a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2201      	movs	r2, #1
 800847a:	2104      	movs	r1, #4
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fd87 	bl	8008f90 <TIM_CCxChannelCmd>
      break;
 8008482:	e00e      	b.n	80084a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2201      	movs	r2, #1
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fd7f 	bl	8008f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2201      	movs	r2, #1
 8008498:	2104      	movs	r1, #4
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fd78 	bl	8008f90 <TIM_CCxChannelCmd>
      break;
 80084a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0201 	orr.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0202 	mvn.w	r2, #2
 80084e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa81 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa73 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa84 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b04      	cmp	r3, #4
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0204 	mvn.w	r2, #4
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa57 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa49 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa5a 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b08      	cmp	r3, #8
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0208 	mvn.w	r2, #8
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2204      	movs	r2, #4
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa2d 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa1f 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa30 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b10      	cmp	r3, #16
 80085cc:	d122      	bne.n	8008614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d11b      	bne.n	8008614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0210 	mvn.w	r2, #16
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2208      	movs	r2, #8
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa03 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9f5 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fa06 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b01      	cmp	r3, #1
 8008620:	d10e      	bne.n	8008640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	d107      	bne.n	8008640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0201 	mvn.w	r2, #1
 8008638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9cf 	bl	80089de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d10e      	bne.n	800866c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d107      	bne.n	800866c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fd82 	bl	8009170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d10e      	bne.n	8008698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	d107      	bne.n	8008698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9cb 	bl	8008a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d10e      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d107      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0220 	mvn.w	r2, #32
 80086bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fd4c 	bl	800915c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e0ae      	b.n	8008848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	f200 809f 	bhi.w	8008838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008735 	.word	0x08008735
 8008704:	08008839 	.word	0x08008839
 8008708:	08008839 	.word	0x08008839
 800870c:	08008839 	.word	0x08008839
 8008710:	08008775 	.word	0x08008775
 8008714:	08008839 	.word	0x08008839
 8008718:	08008839 	.word	0x08008839
 800871c:	08008839 	.word	0x08008839
 8008720:	080087b7 	.word	0x080087b7
 8008724:	08008839 	.word	0x08008839
 8008728:	08008839 	.word	0x08008839
 800872c:	08008839 	.word	0x08008839
 8008730:	080087f7 	.word	0x080087f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fa02 	bl	8008b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0208 	orr.w	r2, r2, #8
 800874e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699a      	ldr	r2, [r3, #24]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0204 	bic.w	r2, r2, #4
 800875e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6999      	ldr	r1, [r3, #24]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	619a      	str	r2, [r3, #24]
      break;
 8008772:	e064      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fa48 	bl	8008c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800878e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	021a      	lsls	r2, r3, #8
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	619a      	str	r2, [r3, #24]
      break;
 80087b4:	e043      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fa93 	bl	8008ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0208 	orr.w	r2, r2, #8
 80087d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69da      	ldr	r2, [r3, #28]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0204 	bic.w	r2, r2, #4
 80087e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	69d9      	ldr	r1, [r3, #28]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	61da      	str	r2, [r3, #28]
      break;
 80087f4:	e023      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fadd 	bl	8008dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69d9      	ldr	r1, [r3, #28]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	021a      	lsls	r2, r3, #8
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	61da      	str	r2, [r3, #28]
      break;
 8008836:	e002      	b.n	800883e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_TIM_ConfigClockSource+0x1c>
 8008868:	2302      	movs	r3, #2
 800886a:	e0b4      	b.n	80089d6 <HAL_TIM_ConfigClockSource+0x186>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800888a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a4:	d03e      	beq.n	8008924 <HAL_TIM_ConfigClockSource+0xd4>
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088aa:	f200 8087 	bhi.w	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b2:	f000 8086 	beq.w	80089c2 <HAL_TIM_ConfigClockSource+0x172>
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ba:	d87f      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088bc:	2b70      	cmp	r3, #112	; 0x70
 80088be:	d01a      	beq.n	80088f6 <HAL_TIM_ConfigClockSource+0xa6>
 80088c0:	2b70      	cmp	r3, #112	; 0x70
 80088c2:	d87b      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088c4:	2b60      	cmp	r3, #96	; 0x60
 80088c6:	d050      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x11a>
 80088c8:	2b60      	cmp	r3, #96	; 0x60
 80088ca:	d877      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088cc:	2b50      	cmp	r3, #80	; 0x50
 80088ce:	d03c      	beq.n	800894a <HAL_TIM_ConfigClockSource+0xfa>
 80088d0:	2b50      	cmp	r3, #80	; 0x50
 80088d2:	d873      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	d058      	beq.n	800898a <HAL_TIM_ConfigClockSource+0x13a>
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d86f      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d064      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15a>
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d86b      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	d060      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15a>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d867      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d05c      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15a>
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d05a      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15a>
 80088f4:	e062      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6899      	ldr	r1, [r3, #8]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f000 fb23 	bl	8008f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	609a      	str	r2, [r3, #8]
      break;
 8008922:	e04f      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	6899      	ldr	r1, [r3, #8]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f000 fb0c 	bl	8008f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008946:	609a      	str	r2, [r3, #8]
      break;
 8008948:	e03c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6859      	ldr	r1, [r3, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	461a      	mov	r2, r3
 8008958:	f000 fa80 	bl	8008e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2150      	movs	r1, #80	; 0x50
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fad9 	bl	8008f1a <TIM_ITRx_SetConfig>
      break;
 8008968:	e02c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6859      	ldr	r1, [r3, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	461a      	mov	r2, r3
 8008978:	f000 fa9f 	bl	8008eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2160      	movs	r1, #96	; 0x60
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fac9 	bl	8008f1a <TIM_ITRx_SetConfig>
      break;
 8008988:	e01c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	6859      	ldr	r1, [r3, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	461a      	mov	r2, r3
 8008998:	f000 fa60 	bl	8008e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2140      	movs	r1, #64	; 0x40
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fab9 	bl	8008f1a <TIM_ITRx_SetConfig>
      break;
 80089a8:	e00c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f000 fab0 	bl	8008f1a <TIM_ITRx_SetConfig>
      break;
 80089ba:	e003      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
      break;
 80089c0:	e000      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a34      	ldr	r2, [pc, #208]	; (8008b28 <TIM_Base_SetConfig+0xe4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00f      	beq.n	8008a7c <TIM_Base_SetConfig+0x38>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d00b      	beq.n	8008a7c <TIM_Base_SetConfig+0x38>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a31      	ldr	r2, [pc, #196]	; (8008b2c <TIM_Base_SetConfig+0xe8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d007      	beq.n	8008a7c <TIM_Base_SetConfig+0x38>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a30      	ldr	r2, [pc, #192]	; (8008b30 <TIM_Base_SetConfig+0xec>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d003      	beq.n	8008a7c <TIM_Base_SetConfig+0x38>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a2f      	ldr	r2, [pc, #188]	; (8008b34 <TIM_Base_SetConfig+0xf0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d108      	bne.n	8008a8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a25      	ldr	r2, [pc, #148]	; (8008b28 <TIM_Base_SetConfig+0xe4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d01b      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9c:	d017      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a22      	ldr	r2, [pc, #136]	; (8008b2c <TIM_Base_SetConfig+0xe8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d013      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a21      	ldr	r2, [pc, #132]	; (8008b30 <TIM_Base_SetConfig+0xec>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00f      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a20      	ldr	r2, [pc, #128]	; (8008b34 <TIM_Base_SetConfig+0xf0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00b      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <TIM_Base_SetConfig+0xf4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d007      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <TIM_Base_SetConfig+0xf8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_Base_SetConfig+0x8a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <TIM_Base_SetConfig+0xfc>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d108      	bne.n	8008ae0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <TIM_Base_SetConfig+0xe4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d103      	bne.n	8008b14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	615a      	str	r2, [r3, #20]
}
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f023 0201 	bic.w	r2, r3, #1
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f023 0302 	bic.w	r3, r3, #2
 8008b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <TIM_OC1_SetConfig+0xc8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10c      	bne.n	8008bba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f023 0308 	bic.w	r3, r3, #8
 8008ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 0304 	bic.w	r3, r3, #4
 8008bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a13      	ldr	r2, [pc, #76]	; (8008c0c <TIM_OC1_SetConfig+0xc8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d111      	bne.n	8008be6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	621a      	str	r2, [r3, #32]
}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40010000 	.word	0x40010000

08008c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f023 0210 	bic.w	r2, r3, #16
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f023 0320 	bic.w	r3, r3, #32
 8008c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <TIM_OC2_SetConfig+0xd4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10d      	bne.n	8008c8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <TIM_OC2_SetConfig+0xd4>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d113      	bne.n	8008cbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40010000 	.word	0x40010000

08008ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a1d      	ldr	r2, [pc, #116]	; (8008db8 <TIM_OC3_SetConfig+0xd0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d10d      	bne.n	8008d62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <TIM_OC3_SetConfig+0xd0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d113      	bne.n	8008d92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	621a      	str	r2, [r3, #32]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	40010000 	.word	0x40010000

08008dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	031b      	lsls	r3, r3, #12
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a10      	ldr	r2, [pc, #64]	; (8008e58 <TIM_OC4_SetConfig+0x9c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d109      	bne.n	8008e30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	019b      	lsls	r3, r3, #6
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	621a      	str	r2, [r3, #32]
}
 8008e4a:	bf00      	nop
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40010000 	.word	0x40010000

08008e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	f023 0201 	bic.w	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f023 030a 	bic.w	r3, r3, #10
 8008e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b087      	sub	sp, #28
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f023 0210 	bic.w	r2, r3, #16
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	031b      	lsls	r3, r3, #12
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	621a      	str	r2, [r3, #32]
}
 8008f0e:	bf00      	nop
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f043 0307 	orr.w	r3, r3, #7
 8008f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	609a      	str	r2, [r3, #8]
}
 8008f44:	bf00      	nop
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	609a      	str	r2, [r3, #8]
}
 8008f84:	bf00      	nop
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f003 031f 	and.w	r3, r3, #31
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1a      	ldr	r2, [r3, #32]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a1a      	ldr	r2, [r3, #32]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
	...

08008fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e050      	b.n	8009096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d018      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009040:	d013      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00e      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d10c      	bne.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	4313      	orrs	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40000400 	.word	0x40000400
 80090ac:	40000800 	.word	0x40000800
 80090b0:	40000c00 	.word	0x40000c00
 80090b4:	40014000 	.word	0x40014000

080090b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d101      	bne.n	80090d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090d0:	2302      	movs	r3, #2
 80090d2:	e03d      	b.n	8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e03f      	b.n	8009216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fa feb0 	bl	8003f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2224      	movs	r2, #36	; 0x24
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fd23 	bl	8009c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	4613      	mov	r3, r2
 800922a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b20      	cmp	r3, #32
 8009236:	d130      	bne.n	800929a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_UART_Transmit_IT+0x26>
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e029      	b.n	800929c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_UART_Transmit_IT+0x38>
 8009252:	2302      	movs	r3, #2
 8009254:	e022      	b.n	800929c <HAL_UART_Transmit_IT+0x7e>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	88fa      	ldrh	r2, [r7, #6]
 800926e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2221      	movs	r2, #33	; 0x21
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009294:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b20      	cmp	r3, #32
 80092c0:	d11d      	bne.n	80092fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_UART_Receive_IT+0x26>
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e016      	b.n	8009300 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UART_Receive_IT+0x38>
 80092dc:	2302      	movs	r3, #2
 80092de:	e00f      	b.n	8009300 <HAL_UART_Receive_IT+0x58>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	461a      	mov	r2, r3
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fab5 	bl	8009864 <UART_Start_Receive_IT>
 80092fa:	4603      	mov	r3, r0
 80092fc:	e000      	b.n	8009300 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092fe:	2302      	movs	r3, #2
  }
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b0ba      	sub	sp, #232	; 0xe8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800932e:	2300      	movs	r3, #0
 8009330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009334:	2300      	movs	r3, #0
 8009336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800933a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10f      	bne.n	800936e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800934e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <HAL_UART_IRQHandler+0x66>
 800935a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fb99 	bl	8009a9e <UART_Receive_IT>
      return;
 800936c:	e256      	b.n	800981c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800936e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 80de 	beq.w	8009534 <HAL_UART_IRQHandler+0x22c>
 8009378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009388:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 80d1 	beq.w	8009534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <HAL_UART_IRQHandler+0xae>
 800939e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f043 0201 	orr.w	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <HAL_UART_IRQHandler+0xd2>
 80093c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	f043 0202 	orr.w	r2, r3, #2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <HAL_UART_IRQHandler+0xf6>
 80093e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	f043 0204 	orr.w	r2, r3, #4
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	d011      	beq.n	800942e <HAL_UART_IRQHandler+0x126>
 800940a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800940e:	f003 0320 	and.w	r3, r3, #32
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0208 	orr.w	r2, r3, #8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 81ed 	beq.w	8009812 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_UART_IRQHandler+0x14e>
 8009444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fb24 	bl	8009a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	bf0c      	ite	eq
 8009464:	2301      	moveq	r3, #1
 8009466:	2300      	movne	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <HAL_UART_IRQHandler+0x17a>
 800947a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d04f      	beq.n	8009522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa2c 	bl	80098e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009492:	2b40      	cmp	r3, #64	; 0x40
 8009494:	d141      	bne.n	800951a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3314      	adds	r3, #20
 800949c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3314      	adds	r3, #20
 80094be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1d9      	bne.n	8009496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d013      	beq.n	8009512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	4a7d      	ldr	r2, [pc, #500]	; (80096e4 <HAL_UART_IRQHandler+0x3dc>)
 80094f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fb fb81 	bl	8004bfe <HAL_DMA_Abort_IT>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d016      	beq.n	8009530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009510:	e00e      	b.n	8009530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f990 	bl	8009838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	e00a      	b.n	8009530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f98c 	bl	8009838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009520:	e006      	b.n	8009530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f988 	bl	8009838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800952e:	e170      	b.n	8009812 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	bf00      	nop
    return;
 8009532:	e16e      	b.n	8009812 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	2b01      	cmp	r3, #1
 800953a:	f040 814a 	bne.w	80097d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800953e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009542:	f003 0310 	and.w	r3, r3, #16
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8143 	beq.w	80097d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800954c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 813c 	beq.w	80097d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60bb      	str	r3, [r7, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	60bb      	str	r3, [r7, #8]
 800956e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	f040 80b4 	bne.w	80096e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800958c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 8140 	beq.w	8009816 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800959a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800959e:	429a      	cmp	r2, r3
 80095a0:	f080 8139 	bcs.w	8009816 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b6:	f000 8088 	beq.w	80096ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1d9      	bne.n	80095ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3314      	adds	r3, #20
 800960c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3314      	adds	r3, #20
 8009626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800962a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800962e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800963c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e1      	bne.n	8009606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3314      	adds	r3, #20
 8009648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3314      	adds	r3, #20
 8009662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009666:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800966c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e3      	bne.n	8009642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969a:	f023 0310 	bic.w	r3, r3, #16
 800969e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	330c      	adds	r3, #12
 80096a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80096ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e3      	bne.n	8009688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fb fa2a 	bl	8004b1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f8b6 	bl	800984c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096e0:	e099      	b.n	8009816 <HAL_UART_IRQHandler+0x50e>
 80096e2:	bf00      	nop
 80096e4:	080099a7 	.word	0x080099a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 808b 	beq.w	800981a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8086 	beq.w	800981a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	330c      	adds	r3, #12
 8009714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800971e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	330c      	adds	r3, #12
 800972e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009732:	647a      	str	r2, [r7, #68]	; 0x44
 8009734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e3      	bne.n	800970e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3314      	adds	r3, #20
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	623b      	str	r3, [r7, #32]
   return(result);
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3314      	adds	r3, #20
 8009766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800976a:	633a      	str	r2, [r7, #48]	; 0x30
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e3      	bne.n	8009746 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2220      	movs	r2, #32
 8009782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	60fb      	str	r3, [r7, #12]
   return(result);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0310 	bic.w	r3, r3, #16
 80097a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097b0:	61fa      	str	r2, [r7, #28]
 80097b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69b9      	ldr	r1, [r7, #24]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	617b      	str	r3, [r7, #20]
   return(result);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e3      	bne.n	800978c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f83e 	bl	800984c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097d0:	e023      	b.n	800981a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d009      	beq.n	80097f2 <HAL_UART_IRQHandler+0x4ea>
 80097de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f8ef 	bl	80099ce <UART_Transmit_IT>
    return;
 80097f0:	e014      	b.n	800981c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00e      	beq.n	800981c <HAL_UART_IRQHandler+0x514>
 80097fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d008      	beq.n	800981c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f92f 	bl	8009a6e <UART_EndTransmit_IT>
    return;
 8009810:	e004      	b.n	800981c <HAL_UART_IRQHandler+0x514>
    return;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <HAL_UART_IRQHandler+0x514>
      return;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <HAL_UART_IRQHandler+0x514>
      return;
 800981a:	bf00      	nop
  }
}
 800981c:	37e8      	adds	r7, #232	; 0xe8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop

08009824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	88fa      	ldrh	r2, [r7, #6]
 8009882:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2222      	movs	r2, #34	; 0x22
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695a      	ldr	r2, [r3, #20]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0201 	orr.w	r2, r2, #1
 80098c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0220 	orr.w	r2, r2, #32
 80098d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b095      	sub	sp, #84	; 0x54
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009908:	643a      	str	r2, [r7, #64]	; 0x40
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800990e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e5      	bne.n	80098e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	61fb      	str	r3, [r7, #28]
   return(result);
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	64bb      	str	r3, [r7, #72]	; 0x48
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800993c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e5      	bne.n	800991c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	2b01      	cmp	r3, #1
 8009956:	d119      	bne.n	800998c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	60bb      	str	r3, [r7, #8]
   return(result);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f023 0310 	bic.w	r3, r3, #16
 800996e:	647b      	str	r3, [r7, #68]	; 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009978:	61ba      	str	r2, [r7, #24]
 800997a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6979      	ldr	r1, [r7, #20]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	613b      	str	r3, [r7, #16]
   return(result);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e5      	bne.n	8009958 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800999a:	bf00      	nop
 800999c:	3754      	adds	r7, #84	; 0x54
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff ff39 	bl	8009838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b21      	cmp	r3, #33	; 0x21
 80099e0:	d13e      	bne.n	8009a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ea:	d114      	bne.n	8009a16 <UART_Transmit_IT+0x48>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d110      	bne.n	8009a16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	1c9a      	adds	r2, r3, #2
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	621a      	str	r2, [r3, #32]
 8009a14:	e008      	b.n	8009a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	1c59      	adds	r1, r3, #1
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6211      	str	r1, [r2, #32]
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	4619      	mov	r1, r3
 8009a36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10f      	bne.n	8009a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e000      	b.n	8009a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a60:	2302      	movs	r3, #2
  }
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff fec8 	bl	8009824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b08c      	sub	sp, #48	; 0x30
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b22      	cmp	r3, #34	; 0x22
 8009ab0:	f040 80ab 	bne.w	8009c0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009abc:	d117      	bne.n	8009aee <UART_Receive_IT+0x50>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d113      	bne.n	8009aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	1c9a      	adds	r2, r3, #2
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	629a      	str	r2, [r3, #40]	; 0x28
 8009aec:	e026      	b.n	8009b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b00:	d007      	beq.n	8009b12 <UART_Receive_IT+0x74>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <UART_Receive_IT+0x82>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	e008      	b.n	8009b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d15a      	bne.n	8009c06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0220 	bic.w	r2, r2, #32
 8009b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0201 	bic.w	r2, r2, #1
 8009b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d135      	bne.n	8009bfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f023 0310 	bic.w	r3, r3, #16
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	330c      	adds	r3, #12
 8009bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb6:	623a      	str	r2, [r7, #32]
 8009bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	69f9      	ldr	r1, [r7, #28]
 8009bbc:	6a3a      	ldr	r2, [r7, #32]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0310 	and.w	r3, r3, #16
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d10a      	bne.n	8009bee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fe29 	bl	800984c <HAL_UARTEx_RxEventCallback>
 8009bfa:	e002      	b.n	8009c02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fa fb13 	bl	8004228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e002      	b.n	8009c0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c0a:	2302      	movs	r3, #2
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3730      	adds	r7, #48	; 0x30
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c18:	b0c0      	sub	sp, #256	; 0x100
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c30:	68d9      	ldr	r1, [r3, #12]
 8009c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	ea40 0301 	orr.w	r3, r0, r1
 8009c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c6c:	f021 010c 	bic.w	r1, r1, #12
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8e:	6999      	ldr	r1, [r3, #24]
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	ea40 0301 	orr.w	r3, r0, r1
 8009c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b8f      	ldr	r3, [pc, #572]	; (8009ee0 <UART_SetConfig+0x2cc>)
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d005      	beq.n	8009cb4 <UART_SetConfig+0xa0>
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b8d      	ldr	r3, [pc, #564]	; (8009ee4 <UART_SetConfig+0x2d0>)
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d104      	bne.n	8009cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cb4:	f7fe f876 	bl	8007da4 <HAL_RCC_GetPCLK2Freq>
 8009cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009cbc:	e003      	b.n	8009cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cbe:	f7fe f85d 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 8009cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd0:	f040 810c 	bne.w	8009eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	1891      	adds	r1, r2, r2
 8009cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8009cee:	415b      	adcs	r3, r3
 8009cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	eb12 0801 	adds.w	r8, r2, r1
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	eb43 0901 	adc.w	r9, r3, r1
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d16:	4690      	mov	r8, r2
 8009d18:	4699      	mov	r9, r3
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	eb18 0303 	adds.w	r3, r8, r3
 8009d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d24:	462b      	mov	r3, r5
 8009d26:	eb49 0303 	adc.w	r3, r9, r3
 8009d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d42:	460b      	mov	r3, r1
 8009d44:	18db      	adds	r3, r3, r3
 8009d46:	653b      	str	r3, [r7, #80]	; 0x50
 8009d48:	4613      	mov	r3, r2
 8009d4a:	eb42 0303 	adc.w	r3, r2, r3
 8009d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d58:	f7f6 fe90 	bl	8000a7c <__aeabi_uldivmod>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4b61      	ldr	r3, [pc, #388]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009d62:	fba3 2302 	umull	r2, r3, r3, r2
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	011c      	lsls	r4, r3, #4
 8009d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	1891      	adds	r1, r2, r2
 8009d82:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d84:	415b      	adcs	r3, r3
 8009d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d92:	4649      	mov	r1, r9
 8009d94:	eb43 0b01 	adc.w	fp, r3, r1
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dac:	4692      	mov	sl, r2
 8009dae:	469b      	mov	fp, r3
 8009db0:	4643      	mov	r3, r8
 8009db2:	eb1a 0303 	adds.w	r3, sl, r3
 8009db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8009dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	18db      	adds	r3, r3, r3
 8009ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8009dde:	4613      	mov	r3, r2
 8009de0:	eb42 0303 	adc.w	r3, r2, r3
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
 8009de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009dee:	f7f6 fe45 	bl	8000a7c <__aeabi_uldivmod>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	4b3b      	ldr	r3, [pc, #236]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	2264      	movs	r2, #100	; 0x64
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
 8009e06:	1acb      	subs	r3, r1, r3
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e0e:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009e10:	fba3 2302 	umull	r2, r3, r3, r2
 8009e14:	095b      	lsrs	r3, r3, #5
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e1c:	441c      	add	r4, r3
 8009e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	1891      	adds	r1, r2, r2
 8009e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e38:	415b      	adcs	r3, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e40:	4641      	mov	r1, r8
 8009e42:	1851      	adds	r1, r2, r1
 8009e44:	6339      	str	r1, [r7, #48]	; 0x30
 8009e46:	4649      	mov	r1, r9
 8009e48:	414b      	adcs	r3, r1
 8009e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e58:	4659      	mov	r1, fp
 8009e5a:	00cb      	lsls	r3, r1, #3
 8009e5c:	4651      	mov	r1, sl
 8009e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e62:	4651      	mov	r1, sl
 8009e64:	00ca      	lsls	r2, r1, #3
 8009e66:	4610      	mov	r0, r2
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e74:	464b      	mov	r3, r9
 8009e76:	460a      	mov	r2, r1
 8009e78:	eb42 0303 	adc.w	r3, r2, r3
 8009e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e94:	460b      	mov	r3, r1
 8009e96:	18db      	adds	r3, r3, r3
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009eaa:	f7f6 fde7 	bl	8000a7c <__aeabi_uldivmod>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2164      	movs	r1, #100	; 0x64
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	3332      	adds	r3, #50	; 0x32
 8009ec6:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <UART_SetConfig+0x2d4>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 0207 	and.w	r2, r3, #7
 8009ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4422      	add	r2, r4
 8009eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009edc:	e105      	b.n	800a0ea <UART_SetConfig+0x4d6>
 8009ede:	bf00      	nop
 8009ee0:	40011000 	.word	0x40011000
 8009ee4:	40011400 	.word	0x40011400
 8009ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009efe:	4642      	mov	r2, r8
 8009f00:	464b      	mov	r3, r9
 8009f02:	1891      	adds	r1, r2, r2
 8009f04:	6239      	str	r1, [r7, #32]
 8009f06:	415b      	adcs	r3, r3
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f0e:	4641      	mov	r1, r8
 8009f10:	1854      	adds	r4, r2, r1
 8009f12:	4649      	mov	r1, r9
 8009f14:	eb43 0501 	adc.w	r5, r3, r1
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	f04f 0300 	mov.w	r3, #0
 8009f20:	00eb      	lsls	r3, r5, #3
 8009f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f26:	00e2      	lsls	r2, r4, #3
 8009f28:	4614      	mov	r4, r2
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	18e3      	adds	r3, r4, r3
 8009f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f34:	464b      	mov	r3, r9
 8009f36:	eb45 0303 	adc.w	r3, r5, r3
 8009f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	008b      	lsls	r3, r1, #2
 8009f5e:	4621      	mov	r1, r4
 8009f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f64:	4621      	mov	r1, r4
 8009f66:	008a      	lsls	r2, r1, #2
 8009f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f6c:	f7f6 fd86 	bl	8000a7c <__aeabi_uldivmod>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <UART_SetConfig+0x4e4>)
 8009f76:	fba3 2302 	umull	r2, r3, r3, r2
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	011c      	lsls	r4, r3, #4
 8009f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f90:	4642      	mov	r2, r8
 8009f92:	464b      	mov	r3, r9
 8009f94:	1891      	adds	r1, r2, r2
 8009f96:	61b9      	str	r1, [r7, #24]
 8009f98:	415b      	adcs	r3, r3
 8009f9a:	61fb      	str	r3, [r7, #28]
 8009f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	1851      	adds	r1, r2, r1
 8009fa4:	6139      	str	r1, [r7, #16]
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	414b      	adcs	r3, r1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fb8:	4659      	mov	r1, fp
 8009fba:	00cb      	lsls	r3, r1, #3
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fc2:	4651      	mov	r1, sl
 8009fc4:	00ca      	lsls	r2, r1, #3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4642      	mov	r2, r8
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	eb42 0303 	adc.w	r3, r2, r3
 8009fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	f04f 0300 	mov.w	r3, #0
 8009ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	008b      	lsls	r3, r1, #2
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a002:	4641      	mov	r1, r8
 800a004:	008a      	lsls	r2, r1, #2
 800a006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a00a:	f7f6 fd37 	bl	8000a7c <__aeabi_uldivmod>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a014:	fba3 1302 	umull	r1, r3, r3, r2
 800a018:	095b      	lsrs	r3, r3, #5
 800a01a:	2164      	movs	r1, #100	; 0x64
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	3332      	adds	r3, #50	; 0x32
 800a026:	4a34      	ldr	r2, [pc, #208]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a028:	fba2 2303 	umull	r2, r3, r2, r3
 800a02c:	095b      	lsrs	r3, r3, #5
 800a02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a032:	441c      	add	r4, r3
 800a034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a038:	2200      	movs	r2, #0
 800a03a:	673b      	str	r3, [r7, #112]	; 0x70
 800a03c:	677a      	str	r2, [r7, #116]	; 0x74
 800a03e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	1891      	adds	r1, r2, r2
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	415b      	adcs	r3, r3
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a052:	4641      	mov	r1, r8
 800a054:	1851      	adds	r1, r2, r1
 800a056:	6039      	str	r1, [r7, #0]
 800a058:	4649      	mov	r1, r9
 800a05a:	414b      	adcs	r3, r1
 800a05c:	607b      	str	r3, [r7, #4]
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a06a:	4659      	mov	r1, fp
 800a06c:	00cb      	lsls	r3, r1, #3
 800a06e:	4651      	mov	r1, sl
 800a070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a074:	4651      	mov	r1, sl
 800a076:	00ca      	lsls	r2, r1, #3
 800a078:	4610      	mov	r0, r2
 800a07a:	4619      	mov	r1, r3
 800a07c:	4603      	mov	r3, r0
 800a07e:	4642      	mov	r2, r8
 800a080:	189b      	adds	r3, r3, r2
 800a082:	66bb      	str	r3, [r7, #104]	; 0x68
 800a084:	464b      	mov	r3, r9
 800a086:	460a      	mov	r2, r1
 800a088:	eb42 0303 	adc.w	r3, r2, r3
 800a08c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	663b      	str	r3, [r7, #96]	; 0x60
 800a098:	667a      	str	r2, [r7, #100]	; 0x64
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	008b      	lsls	r3, r1, #2
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0b0:	4641      	mov	r1, r8
 800a0b2:	008a      	lsls	r2, r1, #2
 800a0b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0b8:	f7f6 fce0 	bl	8000a7c <__aeabi_uldivmod>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a0c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	2164      	movs	r1, #100	; 0x64
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	3332      	adds	r3, #50	; 0x32
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <UART_SetConfig+0x4e4>)
 800a0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0da:	095b      	lsrs	r3, r3, #5
 800a0dc:	f003 020f 	and.w	r2, r3, #15
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4422      	add	r2, r4
 800a0e8:	609a      	str	r2, [r3, #8]
}
 800a0ea:	bf00      	nop
 800a0ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0f6:	bf00      	nop
 800a0f8:	51eb851f 	.word	0x51eb851f

0800a0fc <atoi>:
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	2100      	movs	r1, #0
 800a100:	f000 b8ea 	b.w	800a2d8 <strtol>

0800a104 <__errno>:
 800a104:	4b01      	ldr	r3, [pc, #4]	; (800a10c <__errno+0x8>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	2000000c 	.word	0x2000000c

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4d0d      	ldr	r5, [pc, #52]	; (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	; (800a14c <__libc_init_array+0x3c>)
 800a116:	1b64      	subs	r4, r4, r5
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2600      	movs	r6, #0
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4d0b      	ldr	r5, [pc, #44]	; (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	; (800a154 <__libc_init_array+0x44>)
 800a124:	f000 fd22 	bl	800ab6c <_init>
 800a128:	1b64      	subs	r4, r4, r5
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2600      	movs	r6, #0
 800a12e:	42a6      	cmp	r6, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f855 3b04 	ldr.w	r3, [r5], #4
 800a138:	4798      	blx	r3
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a142:	4798      	blx	r3
 800a144:	3601      	adds	r6, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	0800ad54 	.word	0x0800ad54
 800a14c:	0800ad54 	.word	0x0800ad54
 800a150:	0800ad54 	.word	0x0800ad54
 800a154:	0800ad58 	.word	0x0800ad58

0800a158 <memcpy>:
 800a158:	440a      	add	r2, r1
 800a15a:	4291      	cmp	r1, r2
 800a15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a160:	d100      	bne.n	800a164 <memcpy+0xc>
 800a162:	4770      	bx	lr
 800a164:	b510      	push	{r4, lr}
 800a166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a16e:	4291      	cmp	r1, r2
 800a170:	d1f9      	bne.n	800a166 <memcpy+0xe>
 800a172:	bd10      	pop	{r4, pc}

0800a174 <memset>:
 800a174:	4402      	add	r2, r0
 800a176:	4603      	mov	r3, r0
 800a178:	4293      	cmp	r3, r2
 800a17a:	d100      	bne.n	800a17e <memset+0xa>
 800a17c:	4770      	bx	lr
 800a17e:	f803 1b01 	strb.w	r1, [r3], #1
 800a182:	e7f9      	b.n	800a178 <memset+0x4>

0800a184 <siprintf>:
 800a184:	b40e      	push	{r1, r2, r3}
 800a186:	b500      	push	{lr}
 800a188:	b09c      	sub	sp, #112	; 0x70
 800a18a:	ab1d      	add	r3, sp, #116	; 0x74
 800a18c:	9002      	str	r0, [sp, #8]
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a194:	4809      	ldr	r0, [pc, #36]	; (800a1bc <siprintf+0x38>)
 800a196:	9107      	str	r1, [sp, #28]
 800a198:	9104      	str	r1, [sp, #16]
 800a19a:	4909      	ldr	r1, [pc, #36]	; (800a1c0 <siprintf+0x3c>)
 800a19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	6800      	ldr	r0, [r0, #0]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	a902      	add	r1, sp, #8
 800a1a8:	f000 f8fc 	bl	800a3a4 <_svfiprintf_r>
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	b01c      	add	sp, #112	; 0x70
 800a1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b8:	b003      	add	sp, #12
 800a1ba:	4770      	bx	lr
 800a1bc:	2000000c 	.word	0x2000000c
 800a1c0:	ffff0208 	.word	0xffff0208

0800a1c4 <strcpy>:
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ca:	f803 2b01 	strb.w	r2, [r3], #1
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	d1f9      	bne.n	800a1c6 <strcpy+0x2>
 800a1d2:	4770      	bx	lr

0800a1d4 <_strtol_l.constprop.0>:
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1da:	d001      	beq.n	800a1e0 <_strtol_l.constprop.0+0xc>
 800a1dc:	2b24      	cmp	r3, #36	; 0x24
 800a1de:	d906      	bls.n	800a1ee <_strtol_l.constprop.0+0x1a>
 800a1e0:	f7ff ff90 	bl	800a104 <__errno>
 800a1e4:	2316      	movs	r3, #22
 800a1e6:	6003      	str	r3, [r0, #0]
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2d4 <_strtol_l.constprop.0+0x100>
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	462e      	mov	r6, r5
 800a1f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1fe:	f017 0708 	ands.w	r7, r7, #8
 800a202:	d1f7      	bne.n	800a1f4 <_strtol_l.constprop.0+0x20>
 800a204:	2c2d      	cmp	r4, #45	; 0x2d
 800a206:	d132      	bne.n	800a26e <_strtol_l.constprop.0+0x9a>
 800a208:	782c      	ldrb	r4, [r5, #0]
 800a20a:	2701      	movs	r7, #1
 800a20c:	1cb5      	adds	r5, r6, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d05b      	beq.n	800a2ca <_strtol_l.constprop.0+0xf6>
 800a212:	2b10      	cmp	r3, #16
 800a214:	d109      	bne.n	800a22a <_strtol_l.constprop.0+0x56>
 800a216:	2c30      	cmp	r4, #48	; 0x30
 800a218:	d107      	bne.n	800a22a <_strtol_l.constprop.0+0x56>
 800a21a:	782c      	ldrb	r4, [r5, #0]
 800a21c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a220:	2c58      	cmp	r4, #88	; 0x58
 800a222:	d14d      	bne.n	800a2c0 <_strtol_l.constprop.0+0xec>
 800a224:	786c      	ldrb	r4, [r5, #1]
 800a226:	2310      	movs	r3, #16
 800a228:	3502      	adds	r5, #2
 800a22a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a22e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a232:	f04f 0c00 	mov.w	ip, #0
 800a236:	fbb8 f9f3 	udiv	r9, r8, r3
 800a23a:	4666      	mov	r6, ip
 800a23c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a240:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a244:	f1be 0f09 	cmp.w	lr, #9
 800a248:	d816      	bhi.n	800a278 <_strtol_l.constprop.0+0xa4>
 800a24a:	4674      	mov	r4, lr
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	dd24      	ble.n	800a29a <_strtol_l.constprop.0+0xc6>
 800a250:	f1bc 0f00 	cmp.w	ip, #0
 800a254:	db1e      	blt.n	800a294 <_strtol_l.constprop.0+0xc0>
 800a256:	45b1      	cmp	r9, r6
 800a258:	d31c      	bcc.n	800a294 <_strtol_l.constprop.0+0xc0>
 800a25a:	d101      	bne.n	800a260 <_strtol_l.constprop.0+0x8c>
 800a25c:	45a2      	cmp	sl, r4
 800a25e:	db19      	blt.n	800a294 <_strtol_l.constprop.0+0xc0>
 800a260:	fb06 4603 	mla	r6, r6, r3, r4
 800a264:	f04f 0c01 	mov.w	ip, #1
 800a268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a26c:	e7e8      	b.n	800a240 <_strtol_l.constprop.0+0x6c>
 800a26e:	2c2b      	cmp	r4, #43	; 0x2b
 800a270:	bf04      	itt	eq
 800a272:	782c      	ldrbeq	r4, [r5, #0]
 800a274:	1cb5      	addeq	r5, r6, #2
 800a276:	e7ca      	b.n	800a20e <_strtol_l.constprop.0+0x3a>
 800a278:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a27c:	f1be 0f19 	cmp.w	lr, #25
 800a280:	d801      	bhi.n	800a286 <_strtol_l.constprop.0+0xb2>
 800a282:	3c37      	subs	r4, #55	; 0x37
 800a284:	e7e2      	b.n	800a24c <_strtol_l.constprop.0+0x78>
 800a286:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a28a:	f1be 0f19 	cmp.w	lr, #25
 800a28e:	d804      	bhi.n	800a29a <_strtol_l.constprop.0+0xc6>
 800a290:	3c57      	subs	r4, #87	; 0x57
 800a292:	e7db      	b.n	800a24c <_strtol_l.constprop.0+0x78>
 800a294:	f04f 3cff 	mov.w	ip, #4294967295
 800a298:	e7e6      	b.n	800a268 <_strtol_l.constprop.0+0x94>
 800a29a:	f1bc 0f00 	cmp.w	ip, #0
 800a29e:	da05      	bge.n	800a2ac <_strtol_l.constprop.0+0xd8>
 800a2a0:	2322      	movs	r3, #34	; 0x22
 800a2a2:	6003      	str	r3, [r0, #0]
 800a2a4:	4646      	mov	r6, r8
 800a2a6:	b942      	cbnz	r2, 800a2ba <_strtol_l.constprop.0+0xe6>
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	e79e      	b.n	800a1ea <_strtol_l.constprop.0+0x16>
 800a2ac:	b107      	cbz	r7, 800a2b0 <_strtol_l.constprop.0+0xdc>
 800a2ae:	4276      	negs	r6, r6
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d0f9      	beq.n	800a2a8 <_strtol_l.constprop.0+0xd4>
 800a2b4:	f1bc 0f00 	cmp.w	ip, #0
 800a2b8:	d000      	beq.n	800a2bc <_strtol_l.constprop.0+0xe8>
 800a2ba:	1e69      	subs	r1, r5, #1
 800a2bc:	6011      	str	r1, [r2, #0]
 800a2be:	e7f3      	b.n	800a2a8 <_strtol_l.constprop.0+0xd4>
 800a2c0:	2430      	movs	r4, #48	; 0x30
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1b1      	bne.n	800a22a <_strtol_l.constprop.0+0x56>
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	e7af      	b.n	800a22a <_strtol_l.constprop.0+0x56>
 800a2ca:	2c30      	cmp	r4, #48	; 0x30
 800a2cc:	d0a5      	beq.n	800a21a <_strtol_l.constprop.0+0x46>
 800a2ce:	230a      	movs	r3, #10
 800a2d0:	e7ab      	b.n	800a22a <_strtol_l.constprop.0+0x56>
 800a2d2:	bf00      	nop
 800a2d4:	0800ac19 	.word	0x0800ac19

0800a2d8 <strtol>:
 800a2d8:	4613      	mov	r3, r2
 800a2da:	460a      	mov	r2, r1
 800a2dc:	4601      	mov	r1, r0
 800a2de:	4802      	ldr	r0, [pc, #8]	; (800a2e8 <strtol+0x10>)
 800a2e0:	6800      	ldr	r0, [r0, #0]
 800a2e2:	f7ff bf77 	b.w	800a1d4 <_strtol_l.constprop.0>
 800a2e6:	bf00      	nop
 800a2e8:	2000000c 	.word	0x2000000c

0800a2ec <__ssputs_r>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	688e      	ldr	r6, [r1, #8]
 800a2f2:	429e      	cmp	r6, r3
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	4690      	mov	r8, r2
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	d838      	bhi.n	800a370 <__ssputs_r+0x84>
 800a2fe:	898a      	ldrh	r2, [r1, #12]
 800a300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a304:	d032      	beq.n	800a36c <__ssputs_r+0x80>
 800a306:	6825      	ldr	r5, [r4, #0]
 800a308:	6909      	ldr	r1, [r1, #16]
 800a30a:	eba5 0901 	sub.w	r9, r5, r1
 800a30e:	6965      	ldr	r5, [r4, #20]
 800a310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a318:	3301      	adds	r3, #1
 800a31a:	444b      	add	r3, r9
 800a31c:	106d      	asrs	r5, r5, #1
 800a31e:	429d      	cmp	r5, r3
 800a320:	bf38      	it	cc
 800a322:	461d      	movcc	r5, r3
 800a324:	0553      	lsls	r3, r2, #21
 800a326:	d531      	bpl.n	800a38c <__ssputs_r+0xa0>
 800a328:	4629      	mov	r1, r5
 800a32a:	f000 fb55 	bl	800a9d8 <_malloc_r>
 800a32e:	4606      	mov	r6, r0
 800a330:	b950      	cbnz	r0, 800a348 <__ssputs_r+0x5c>
 800a332:	230c      	movs	r3, #12
 800a334:	f8ca 3000 	str.w	r3, [sl]
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a33e:	81a3      	strh	r3, [r4, #12]
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	6921      	ldr	r1, [r4, #16]
 800a34a:	464a      	mov	r2, r9
 800a34c:	f7ff ff04 	bl	800a158 <memcpy>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	6126      	str	r6, [r4, #16]
 800a35e:	6165      	str	r5, [r4, #20]
 800a360:	444e      	add	r6, r9
 800a362:	eba5 0509 	sub.w	r5, r5, r9
 800a366:	6026      	str	r6, [r4, #0]
 800a368:	60a5      	str	r5, [r4, #8]
 800a36a:	463e      	mov	r6, r7
 800a36c:	42be      	cmp	r6, r7
 800a36e:	d900      	bls.n	800a372 <__ssputs_r+0x86>
 800a370:	463e      	mov	r6, r7
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	4632      	mov	r2, r6
 800a376:	4641      	mov	r1, r8
 800a378:	f000 faa8 	bl	800a8cc <memmove>
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	1b9b      	subs	r3, r3, r6
 800a380:	60a3      	str	r3, [r4, #8]
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	4433      	add	r3, r6
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	2000      	movs	r0, #0
 800a38a:	e7db      	b.n	800a344 <__ssputs_r+0x58>
 800a38c:	462a      	mov	r2, r5
 800a38e:	f000 fb97 	bl	800aac0 <_realloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	2800      	cmp	r0, #0
 800a396:	d1e1      	bne.n	800a35c <__ssputs_r+0x70>
 800a398:	6921      	ldr	r1, [r4, #16]
 800a39a:	4650      	mov	r0, sl
 800a39c:	f000 fab0 	bl	800a900 <_free_r>
 800a3a0:	e7c7      	b.n	800a332 <__ssputs_r+0x46>
	...

0800a3a4 <_svfiprintf_r>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	4698      	mov	r8, r3
 800a3aa:	898b      	ldrh	r3, [r1, #12]
 800a3ac:	061b      	lsls	r3, r3, #24
 800a3ae:	b09d      	sub	sp, #116	; 0x74
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	460d      	mov	r5, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	d50e      	bpl.n	800a3d6 <_svfiprintf_r+0x32>
 800a3b8:	690b      	ldr	r3, [r1, #16]
 800a3ba:	b963      	cbnz	r3, 800a3d6 <_svfiprintf_r+0x32>
 800a3bc:	2140      	movs	r1, #64	; 0x40
 800a3be:	f000 fb0b 	bl	800a9d8 <_malloc_r>
 800a3c2:	6028      	str	r0, [r5, #0]
 800a3c4:	6128      	str	r0, [r5, #16]
 800a3c6:	b920      	cbnz	r0, 800a3d2 <_svfiprintf_r+0x2e>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d0:	e0d1      	b.n	800a576 <_svfiprintf_r+0x1d2>
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	616b      	str	r3, [r5, #20]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3da:	2320      	movs	r3, #32
 800a3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3e4:	2330      	movs	r3, #48	; 0x30
 800a3e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a590 <_svfiprintf_r+0x1ec>
 800a3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ee:	f04f 0901 	mov.w	r9, #1
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	469a      	mov	sl, r3
 800a3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fa:	b10a      	cbz	r2, 800a400 <_svfiprintf_r+0x5c>
 800a3fc:	2a25      	cmp	r2, #37	; 0x25
 800a3fe:	d1f9      	bne.n	800a3f4 <_svfiprintf_r+0x50>
 800a400:	ebba 0b04 	subs.w	fp, sl, r4
 800a404:	d00b      	beq.n	800a41e <_svfiprintf_r+0x7a>
 800a406:	465b      	mov	r3, fp
 800a408:	4622      	mov	r2, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	4638      	mov	r0, r7
 800a40e:	f7ff ff6d 	bl	800a2ec <__ssputs_r>
 800a412:	3001      	adds	r0, #1
 800a414:	f000 80aa 	beq.w	800a56c <_svfiprintf_r+0x1c8>
 800a418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a41a:	445a      	add	r2, fp
 800a41c:	9209      	str	r2, [sp, #36]	; 0x24
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80a2 	beq.w	800a56c <_svfiprintf_r+0x1c8>
 800a428:	2300      	movs	r3, #0
 800a42a:	f04f 32ff 	mov.w	r2, #4294967295
 800a42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a432:	f10a 0a01 	add.w	sl, sl, #1
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a43e:	931a      	str	r3, [sp, #104]	; 0x68
 800a440:	4654      	mov	r4, sl
 800a442:	2205      	movs	r2, #5
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	4851      	ldr	r0, [pc, #324]	; (800a590 <_svfiprintf_r+0x1ec>)
 800a44a:	f7f5 fed1 	bl	80001f0 <memchr>
 800a44e:	9a04      	ldr	r2, [sp, #16]
 800a450:	b9d8      	cbnz	r0, 800a48a <_svfiprintf_r+0xe6>
 800a452:	06d0      	lsls	r0, r2, #27
 800a454:	bf44      	itt	mi
 800a456:	2320      	movmi	r3, #32
 800a458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45c:	0711      	lsls	r1, r2, #28
 800a45e:	bf44      	itt	mi
 800a460:	232b      	movmi	r3, #43	; 0x2b
 800a462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a466:	f89a 3000 	ldrb.w	r3, [sl]
 800a46a:	2b2a      	cmp	r3, #42	; 0x2a
 800a46c:	d015      	beq.n	800a49a <_svfiprintf_r+0xf6>
 800a46e:	9a07      	ldr	r2, [sp, #28]
 800a470:	4654      	mov	r4, sl
 800a472:	2000      	movs	r0, #0
 800a474:	f04f 0c0a 	mov.w	ip, #10
 800a478:	4621      	mov	r1, r4
 800a47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a47e:	3b30      	subs	r3, #48	; 0x30
 800a480:	2b09      	cmp	r3, #9
 800a482:	d94e      	bls.n	800a522 <_svfiprintf_r+0x17e>
 800a484:	b1b0      	cbz	r0, 800a4b4 <_svfiprintf_r+0x110>
 800a486:	9207      	str	r2, [sp, #28]
 800a488:	e014      	b.n	800a4b4 <_svfiprintf_r+0x110>
 800a48a:	eba0 0308 	sub.w	r3, r0, r8
 800a48e:	fa09 f303 	lsl.w	r3, r9, r3
 800a492:	4313      	orrs	r3, r2
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	46a2      	mov	sl, r4
 800a498:	e7d2      	b.n	800a440 <_svfiprintf_r+0x9c>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	1d19      	adds	r1, r3, #4
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	9103      	str	r1, [sp, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfbb      	ittet	lt
 800a4a6:	425b      	neglt	r3, r3
 800a4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ac:	9307      	strge	r3, [sp, #28]
 800a4ae:	9307      	strlt	r3, [sp, #28]
 800a4b0:	bfb8      	it	lt
 800a4b2:	9204      	strlt	r2, [sp, #16]
 800a4b4:	7823      	ldrb	r3, [r4, #0]
 800a4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b8:	d10c      	bne.n	800a4d4 <_svfiprintf_r+0x130>
 800a4ba:	7863      	ldrb	r3, [r4, #1]
 800a4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4be:	d135      	bne.n	800a52c <_svfiprintf_r+0x188>
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	9203      	str	r2, [sp, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	bfb8      	it	lt
 800a4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d0:	3402      	adds	r4, #2
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5a0 <_svfiprintf_r+0x1fc>
 800a4d8:	7821      	ldrb	r1, [r4, #0]
 800a4da:	2203      	movs	r2, #3
 800a4dc:	4650      	mov	r0, sl
 800a4de:	f7f5 fe87 	bl	80001f0 <memchr>
 800a4e2:	b140      	cbz	r0, 800a4f6 <_svfiprintf_r+0x152>
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	eba0 000a 	sub.w	r0, r0, sl
 800a4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	4303      	orrs	r3, r0
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fa:	4826      	ldr	r0, [pc, #152]	; (800a594 <_svfiprintf_r+0x1f0>)
 800a4fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a500:	2206      	movs	r2, #6
 800a502:	f7f5 fe75 	bl	80001f0 <memchr>
 800a506:	2800      	cmp	r0, #0
 800a508:	d038      	beq.n	800a57c <_svfiprintf_r+0x1d8>
 800a50a:	4b23      	ldr	r3, [pc, #140]	; (800a598 <_svfiprintf_r+0x1f4>)
 800a50c:	bb1b      	cbnz	r3, 800a556 <_svfiprintf_r+0x1b2>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	3307      	adds	r3, #7
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	3308      	adds	r3, #8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	4433      	add	r3, r6
 800a51e:	9309      	str	r3, [sp, #36]	; 0x24
 800a520:	e767      	b.n	800a3f2 <_svfiprintf_r+0x4e>
 800a522:	fb0c 3202 	mla	r2, ip, r2, r3
 800a526:	460c      	mov	r4, r1
 800a528:	2001      	movs	r0, #1
 800a52a:	e7a5      	b.n	800a478 <_svfiprintf_r+0xd4>
 800a52c:	2300      	movs	r3, #0
 800a52e:	3401      	adds	r4, #1
 800a530:	9305      	str	r3, [sp, #20]
 800a532:	4619      	mov	r1, r3
 800a534:	f04f 0c0a 	mov.w	ip, #10
 800a538:	4620      	mov	r0, r4
 800a53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53e:	3a30      	subs	r2, #48	; 0x30
 800a540:	2a09      	cmp	r2, #9
 800a542:	d903      	bls.n	800a54c <_svfiprintf_r+0x1a8>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c5      	beq.n	800a4d4 <_svfiprintf_r+0x130>
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	e7c3      	b.n	800a4d4 <_svfiprintf_r+0x130>
 800a54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a550:	4604      	mov	r4, r0
 800a552:	2301      	movs	r3, #1
 800a554:	e7f0      	b.n	800a538 <_svfiprintf_r+0x194>
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <_svfiprintf_r+0x1f8>)
 800a55e:	a904      	add	r1, sp, #16
 800a560:	4638      	mov	r0, r7
 800a562:	f3af 8000 	nop.w
 800a566:	1c42      	adds	r2, r0, #1
 800a568:	4606      	mov	r6, r0
 800a56a:	d1d6      	bne.n	800a51a <_svfiprintf_r+0x176>
 800a56c:	89ab      	ldrh	r3, [r5, #12]
 800a56e:	065b      	lsls	r3, r3, #25
 800a570:	f53f af2c 	bmi.w	800a3cc <_svfiprintf_r+0x28>
 800a574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a576:	b01d      	add	sp, #116	; 0x74
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	ab03      	add	r3, sp, #12
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	462a      	mov	r2, r5
 800a582:	4b06      	ldr	r3, [pc, #24]	; (800a59c <_svfiprintf_r+0x1f8>)
 800a584:	a904      	add	r1, sp, #16
 800a586:	4638      	mov	r0, r7
 800a588:	f000 f87a 	bl	800a680 <_printf_i>
 800a58c:	e7eb      	b.n	800a566 <_svfiprintf_r+0x1c2>
 800a58e:	bf00      	nop
 800a590:	0800ad19 	.word	0x0800ad19
 800a594:	0800ad23 	.word	0x0800ad23
 800a598:	00000000 	.word	0x00000000
 800a59c:	0800a2ed 	.word	0x0800a2ed
 800a5a0:	0800ad1f 	.word	0x0800ad1f

0800a5a4 <_printf_common>:
 800a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	688a      	ldr	r2, [r1, #8]
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bfb8      	it	lt
 800a5b8:	4613      	movlt	r3, r2
 800a5ba:	6033      	str	r3, [r6, #0]
 800a5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	b10a      	cbz	r2, 800a5ca <_printf_common+0x26>
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	0699      	lsls	r1, r3, #26
 800a5ce:	bf42      	ittt	mi
 800a5d0:	6833      	ldrmi	r3, [r6, #0]
 800a5d2:	3302      	addmi	r3, #2
 800a5d4:	6033      	strmi	r3, [r6, #0]
 800a5d6:	6825      	ldr	r5, [r4, #0]
 800a5d8:	f015 0506 	ands.w	r5, r5, #6
 800a5dc:	d106      	bne.n	800a5ec <_printf_common+0x48>
 800a5de:	f104 0a19 	add.w	sl, r4, #25
 800a5e2:	68e3      	ldr	r3, [r4, #12]
 800a5e4:	6832      	ldr	r2, [r6, #0]
 800a5e6:	1a9b      	subs	r3, r3, r2
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	dc26      	bgt.n	800a63a <_printf_common+0x96>
 800a5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f0:	1e13      	subs	r3, r2, #0
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	bf18      	it	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	0692      	lsls	r2, r2, #26
 800a5fa:	d42b      	bmi.n	800a654 <_printf_common+0xb0>
 800a5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a600:	4649      	mov	r1, r9
 800a602:	4638      	mov	r0, r7
 800a604:	47c0      	blx	r8
 800a606:	3001      	adds	r0, #1
 800a608:	d01e      	beq.n	800a648 <_printf_common+0xa4>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	68e5      	ldr	r5, [r4, #12]
 800a60e:	6832      	ldr	r2, [r6, #0]
 800a610:	f003 0306 	and.w	r3, r3, #6
 800a614:	2b04      	cmp	r3, #4
 800a616:	bf08      	it	eq
 800a618:	1aad      	subeq	r5, r5, r2
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	6922      	ldr	r2, [r4, #16]
 800a61e:	bf0c      	ite	eq
 800a620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a624:	2500      	movne	r5, #0
 800a626:	4293      	cmp	r3, r2
 800a628:	bfc4      	itt	gt
 800a62a:	1a9b      	subgt	r3, r3, r2
 800a62c:	18ed      	addgt	r5, r5, r3
 800a62e:	2600      	movs	r6, #0
 800a630:	341a      	adds	r4, #26
 800a632:	42b5      	cmp	r5, r6
 800a634:	d11a      	bne.n	800a66c <_printf_common+0xc8>
 800a636:	2000      	movs	r0, #0
 800a638:	e008      	b.n	800a64c <_printf_common+0xa8>
 800a63a:	2301      	movs	r3, #1
 800a63c:	4652      	mov	r2, sl
 800a63e:	4649      	mov	r1, r9
 800a640:	4638      	mov	r0, r7
 800a642:	47c0      	blx	r8
 800a644:	3001      	adds	r0, #1
 800a646:	d103      	bne.n	800a650 <_printf_common+0xac>
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	e7c6      	b.n	800a5e2 <_printf_common+0x3e>
 800a654:	18e1      	adds	r1, r4, r3
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	2030      	movs	r0, #48	; 0x30
 800a65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a65e:	4422      	add	r2, r4
 800a660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a668:	3302      	adds	r3, #2
 800a66a:	e7c7      	b.n	800a5fc <_printf_common+0x58>
 800a66c:	2301      	movs	r3, #1
 800a66e:	4622      	mov	r2, r4
 800a670:	4649      	mov	r1, r9
 800a672:	4638      	mov	r0, r7
 800a674:	47c0      	blx	r8
 800a676:	3001      	adds	r0, #1
 800a678:	d0e6      	beq.n	800a648 <_printf_common+0xa4>
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7d9      	b.n	800a632 <_printf_common+0x8e>
	...

0800a680 <_printf_i>:
 800a680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	7e0f      	ldrb	r7, [r1, #24]
 800a686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a688:	2f78      	cmp	r7, #120	; 0x78
 800a68a:	4691      	mov	r9, r2
 800a68c:	4680      	mov	r8, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	469a      	mov	sl, r3
 800a692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a696:	d807      	bhi.n	800a6a8 <_printf_i+0x28>
 800a698:	2f62      	cmp	r7, #98	; 0x62
 800a69a:	d80a      	bhi.n	800a6b2 <_printf_i+0x32>
 800a69c:	2f00      	cmp	r7, #0
 800a69e:	f000 80d8 	beq.w	800a852 <_printf_i+0x1d2>
 800a6a2:	2f58      	cmp	r7, #88	; 0x58
 800a6a4:	f000 80a3 	beq.w	800a7ee <_printf_i+0x16e>
 800a6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b0:	e03a      	b.n	800a728 <_printf_i+0xa8>
 800a6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6b6:	2b15      	cmp	r3, #21
 800a6b8:	d8f6      	bhi.n	800a6a8 <_printf_i+0x28>
 800a6ba:	a101      	add	r1, pc, #4	; (adr r1, 800a6c0 <_printf_i+0x40>)
 800a6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c0:	0800a719 	.word	0x0800a719
 800a6c4:	0800a72d 	.word	0x0800a72d
 800a6c8:	0800a6a9 	.word	0x0800a6a9
 800a6cc:	0800a6a9 	.word	0x0800a6a9
 800a6d0:	0800a6a9 	.word	0x0800a6a9
 800a6d4:	0800a6a9 	.word	0x0800a6a9
 800a6d8:	0800a72d 	.word	0x0800a72d
 800a6dc:	0800a6a9 	.word	0x0800a6a9
 800a6e0:	0800a6a9 	.word	0x0800a6a9
 800a6e4:	0800a6a9 	.word	0x0800a6a9
 800a6e8:	0800a6a9 	.word	0x0800a6a9
 800a6ec:	0800a839 	.word	0x0800a839
 800a6f0:	0800a75d 	.word	0x0800a75d
 800a6f4:	0800a81b 	.word	0x0800a81b
 800a6f8:	0800a6a9 	.word	0x0800a6a9
 800a6fc:	0800a6a9 	.word	0x0800a6a9
 800a700:	0800a85b 	.word	0x0800a85b
 800a704:	0800a6a9 	.word	0x0800a6a9
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a6a9 	.word	0x0800a6a9
 800a710:	0800a6a9 	.word	0x0800a6a9
 800a714:	0800a823 	.word	0x0800a823
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	1d1a      	adds	r2, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	602a      	str	r2, [r5, #0]
 800a720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a728:	2301      	movs	r3, #1
 800a72a:	e0a3      	b.n	800a874 <_printf_i+0x1f4>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	6829      	ldr	r1, [r5, #0]
 800a730:	0606      	lsls	r6, r0, #24
 800a732:	f101 0304 	add.w	r3, r1, #4
 800a736:	d50a      	bpl.n	800a74e <_printf_i+0xce>
 800a738:	680e      	ldr	r6, [r1, #0]
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	da03      	bge.n	800a748 <_printf_i+0xc8>
 800a740:	232d      	movs	r3, #45	; 0x2d
 800a742:	4276      	negs	r6, r6
 800a744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a748:	485e      	ldr	r0, [pc, #376]	; (800a8c4 <_printf_i+0x244>)
 800a74a:	230a      	movs	r3, #10
 800a74c:	e019      	b.n	800a782 <_printf_i+0x102>
 800a74e:	680e      	ldr	r6, [r1, #0]
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a756:	bf18      	it	ne
 800a758:	b236      	sxthne	r6, r6
 800a75a:	e7ef      	b.n	800a73c <_printf_i+0xbc>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	1d19      	adds	r1, r3, #4
 800a762:	6029      	str	r1, [r5, #0]
 800a764:	0601      	lsls	r1, r0, #24
 800a766:	d501      	bpl.n	800a76c <_printf_i+0xec>
 800a768:	681e      	ldr	r6, [r3, #0]
 800a76a:	e002      	b.n	800a772 <_printf_i+0xf2>
 800a76c:	0646      	lsls	r6, r0, #25
 800a76e:	d5fb      	bpl.n	800a768 <_printf_i+0xe8>
 800a770:	881e      	ldrh	r6, [r3, #0]
 800a772:	4854      	ldr	r0, [pc, #336]	; (800a8c4 <_printf_i+0x244>)
 800a774:	2f6f      	cmp	r7, #111	; 0x6f
 800a776:	bf0c      	ite	eq
 800a778:	2308      	moveq	r3, #8
 800a77a:	230a      	movne	r3, #10
 800a77c:	2100      	movs	r1, #0
 800a77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a782:	6865      	ldr	r5, [r4, #4]
 800a784:	60a5      	str	r5, [r4, #8]
 800a786:	2d00      	cmp	r5, #0
 800a788:	bfa2      	ittt	ge
 800a78a:	6821      	ldrge	r1, [r4, #0]
 800a78c:	f021 0104 	bicge.w	r1, r1, #4
 800a790:	6021      	strge	r1, [r4, #0]
 800a792:	b90e      	cbnz	r6, 800a798 <_printf_i+0x118>
 800a794:	2d00      	cmp	r5, #0
 800a796:	d04d      	beq.n	800a834 <_printf_i+0x1b4>
 800a798:	4615      	mov	r5, r2
 800a79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a79e:	fb03 6711 	mls	r7, r3, r1, r6
 800a7a2:	5dc7      	ldrb	r7, [r0, r7]
 800a7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7a8:	4637      	mov	r7, r6
 800a7aa:	42bb      	cmp	r3, r7
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	d9f4      	bls.n	800a79a <_printf_i+0x11a>
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10b      	bne.n	800a7cc <_printf_i+0x14c>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07de      	lsls	r6, r3, #31
 800a7b8:	d508      	bpl.n	800a7cc <_printf_i+0x14c>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	bfde      	ittt	le
 800a7c2:	2330      	movle	r3, #48	; 0x30
 800a7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7cc:	1b52      	subs	r2, r2, r5
 800a7ce:	6122      	str	r2, [r4, #16]
 800a7d0:	f8cd a000 	str.w	sl, [sp]
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fee2 	bl	800a5a4 <_printf_common>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d14c      	bne.n	800a87e <_printf_i+0x1fe>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	4835      	ldr	r0, [pc, #212]	; (800a8c4 <_printf_i+0x244>)
 800a7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7f4:	6829      	ldr	r1, [r5, #0]
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7fc:	6029      	str	r1, [r5, #0]
 800a7fe:	061d      	lsls	r5, r3, #24
 800a800:	d514      	bpl.n	800a82c <_printf_i+0x1ac>
 800a802:	07df      	lsls	r7, r3, #31
 800a804:	bf44      	itt	mi
 800a806:	f043 0320 	orrmi.w	r3, r3, #32
 800a80a:	6023      	strmi	r3, [r4, #0]
 800a80c:	b91e      	cbnz	r6, 800a816 <_printf_i+0x196>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f023 0320 	bic.w	r3, r3, #32
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	2310      	movs	r3, #16
 800a818:	e7b0      	b.n	800a77c <_printf_i+0xfc>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	f043 0320 	orr.w	r3, r3, #32
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	2378      	movs	r3, #120	; 0x78
 800a824:	4828      	ldr	r0, [pc, #160]	; (800a8c8 <_printf_i+0x248>)
 800a826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a82a:	e7e3      	b.n	800a7f4 <_printf_i+0x174>
 800a82c:	0659      	lsls	r1, r3, #25
 800a82e:	bf48      	it	mi
 800a830:	b2b6      	uxthmi	r6, r6
 800a832:	e7e6      	b.n	800a802 <_printf_i+0x182>
 800a834:	4615      	mov	r5, r2
 800a836:	e7bb      	b.n	800a7b0 <_printf_i+0x130>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	6826      	ldr	r6, [r4, #0]
 800a83c:	6961      	ldr	r1, [r4, #20]
 800a83e:	1d18      	adds	r0, r3, #4
 800a840:	6028      	str	r0, [r5, #0]
 800a842:	0635      	lsls	r5, r6, #24
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	d501      	bpl.n	800a84c <_printf_i+0x1cc>
 800a848:	6019      	str	r1, [r3, #0]
 800a84a:	e002      	b.n	800a852 <_printf_i+0x1d2>
 800a84c:	0670      	lsls	r0, r6, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0x1c8>
 800a850:	8019      	strh	r1, [r3, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	6123      	str	r3, [r4, #16]
 800a856:	4615      	mov	r5, r2
 800a858:	e7ba      	b.n	800a7d0 <_printf_i+0x150>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	1d1a      	adds	r2, r3, #4
 800a85e:	602a      	str	r2, [r5, #0]
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	6862      	ldr	r2, [r4, #4]
 800a864:	2100      	movs	r1, #0
 800a866:	4628      	mov	r0, r5
 800a868:	f7f5 fcc2 	bl	80001f0 <memchr>
 800a86c:	b108      	cbz	r0, 800a872 <_printf_i+0x1f2>
 800a86e:	1b40      	subs	r0, r0, r5
 800a870:	6060      	str	r0, [r4, #4]
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	2300      	movs	r3, #0
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87c:	e7a8      	b.n	800a7d0 <_printf_i+0x150>
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	462a      	mov	r2, r5
 800a882:	4649      	mov	r1, r9
 800a884:	4640      	mov	r0, r8
 800a886:	47d0      	blx	sl
 800a888:	3001      	adds	r0, #1
 800a88a:	d0ab      	beq.n	800a7e4 <_printf_i+0x164>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	079b      	lsls	r3, r3, #30
 800a890:	d413      	bmi.n	800a8ba <_printf_i+0x23a>
 800a892:	68e0      	ldr	r0, [r4, #12]
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	4298      	cmp	r0, r3
 800a898:	bfb8      	it	lt
 800a89a:	4618      	movlt	r0, r3
 800a89c:	e7a4      	b.n	800a7e8 <_printf_i+0x168>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d09b      	beq.n	800a7e4 <_printf_i+0x164>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	68e3      	ldr	r3, [r4, #12]
 800a8b0:	9903      	ldr	r1, [sp, #12]
 800a8b2:	1a5b      	subs	r3, r3, r1
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	dcf2      	bgt.n	800a89e <_printf_i+0x21e>
 800a8b8:	e7eb      	b.n	800a892 <_printf_i+0x212>
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	f104 0619 	add.w	r6, r4, #25
 800a8c0:	e7f5      	b.n	800a8ae <_printf_i+0x22e>
 800a8c2:	bf00      	nop
 800a8c4:	0800ad2a 	.word	0x0800ad2a
 800a8c8:	0800ad3b 	.word	0x0800ad3b

0800a8cc <memmove>:
 800a8cc:	4288      	cmp	r0, r1
 800a8ce:	b510      	push	{r4, lr}
 800a8d0:	eb01 0402 	add.w	r4, r1, r2
 800a8d4:	d902      	bls.n	800a8dc <memmove+0x10>
 800a8d6:	4284      	cmp	r4, r0
 800a8d8:	4623      	mov	r3, r4
 800a8da:	d807      	bhi.n	800a8ec <memmove+0x20>
 800a8dc:	1e43      	subs	r3, r0, #1
 800a8de:	42a1      	cmp	r1, r4
 800a8e0:	d008      	beq.n	800a8f4 <memmove+0x28>
 800a8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ea:	e7f8      	b.n	800a8de <memmove+0x12>
 800a8ec:	4402      	add	r2, r0
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	428a      	cmp	r2, r1
 800a8f2:	d100      	bne.n	800a8f6 <memmove+0x2a>
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8fe:	e7f7      	b.n	800a8f0 <memmove+0x24>

0800a900 <_free_r>:
 800a900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a902:	2900      	cmp	r1, #0
 800a904:	d044      	beq.n	800a990 <_free_r+0x90>
 800a906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f1a1 0404 	sub.w	r4, r1, #4
 800a912:	bfb8      	it	lt
 800a914:	18e4      	addlt	r4, r4, r3
 800a916:	f000 f913 	bl	800ab40 <__malloc_lock>
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <_free_r+0x94>)
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	b933      	cbnz	r3, 800a930 <_free_r+0x30>
 800a922:	6063      	str	r3, [r4, #4]
 800a924:	6014      	str	r4, [r2, #0]
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a92c:	f000 b90e 	b.w	800ab4c <__malloc_unlock>
 800a930:	42a3      	cmp	r3, r4
 800a932:	d908      	bls.n	800a946 <_free_r+0x46>
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1961      	adds	r1, r4, r5
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf01      	itttt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	1949      	addeq	r1, r1, r5
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	e7ed      	b.n	800a922 <_free_r+0x22>
 800a946:	461a      	mov	r2, r3
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	b10b      	cbz	r3, 800a950 <_free_r+0x50>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d9fa      	bls.n	800a946 <_free_r+0x46>
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	1855      	adds	r5, r2, r1
 800a954:	42a5      	cmp	r5, r4
 800a956:	d10b      	bne.n	800a970 <_free_r+0x70>
 800a958:	6824      	ldr	r4, [r4, #0]
 800a95a:	4421      	add	r1, r4
 800a95c:	1854      	adds	r4, r2, r1
 800a95e:	42a3      	cmp	r3, r4
 800a960:	6011      	str	r1, [r2, #0]
 800a962:	d1e0      	bne.n	800a926 <_free_r+0x26>
 800a964:	681c      	ldr	r4, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	6053      	str	r3, [r2, #4]
 800a96a:	4421      	add	r1, r4
 800a96c:	6011      	str	r1, [r2, #0]
 800a96e:	e7da      	b.n	800a926 <_free_r+0x26>
 800a970:	d902      	bls.n	800a978 <_free_r+0x78>
 800a972:	230c      	movs	r3, #12
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	e7d6      	b.n	800a926 <_free_r+0x26>
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf04      	itt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	bf04      	itt	eq
 800a988:	1949      	addeq	r1, r1, r5
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	6054      	str	r4, [r2, #4]
 800a98e:	e7ca      	b.n	800a926 <_free_r+0x26>
 800a990:	b003      	add	sp, #12
 800a992:	bd30      	pop	{r4, r5, pc}
 800a994:	20000520 	.word	0x20000520

0800a998 <sbrk_aligned>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4e0e      	ldr	r6, [pc, #56]	; (800a9d4 <sbrk_aligned+0x3c>)
 800a99c:	460c      	mov	r4, r1
 800a99e:	6831      	ldr	r1, [r6, #0]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	b911      	cbnz	r1, 800a9aa <sbrk_aligned+0x12>
 800a9a4:	f000 f8bc 	bl	800ab20 <_sbrk_r>
 800a9a8:	6030      	str	r0, [r6, #0]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f8b7 	bl	800ab20 <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d00a      	beq.n	800a9cc <sbrk_aligned+0x34>
 800a9b6:	1cc4      	adds	r4, r0, #3
 800a9b8:	f024 0403 	bic.w	r4, r4, #3
 800a9bc:	42a0      	cmp	r0, r4
 800a9be:	d007      	beq.n	800a9d0 <sbrk_aligned+0x38>
 800a9c0:	1a21      	subs	r1, r4, r0
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f8ac 	bl	800ab20 <_sbrk_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d101      	bne.n	800a9d0 <sbrk_aligned+0x38>
 800a9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	20000524 	.word	0x20000524

0800a9d8 <_malloc_r>:
 800a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9dc:	1ccd      	adds	r5, r1, #3
 800a9de:	f025 0503 	bic.w	r5, r5, #3
 800a9e2:	3508      	adds	r5, #8
 800a9e4:	2d0c      	cmp	r5, #12
 800a9e6:	bf38      	it	cc
 800a9e8:	250c      	movcc	r5, #12
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	db01      	blt.n	800a9f4 <_malloc_r+0x1c>
 800a9f0:	42a9      	cmp	r1, r5
 800a9f2:	d905      	bls.n	800aa00 <_malloc_r+0x28>
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	4e2e      	ldr	r6, [pc, #184]	; (800aabc <_malloc_r+0xe4>)
 800aa02:	f000 f89d 	bl	800ab40 <__malloc_lock>
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	461c      	mov	r4, r3
 800aa0a:	bb34      	cbnz	r4, 800aa5a <_malloc_r+0x82>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7ff ffc2 	bl	800a998 <sbrk_aligned>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	4604      	mov	r4, r0
 800aa18:	d14d      	bne.n	800aab6 <_malloc_r+0xde>
 800aa1a:	6834      	ldr	r4, [r6, #0]
 800aa1c:	4626      	mov	r6, r4
 800aa1e:	2e00      	cmp	r6, #0
 800aa20:	d140      	bne.n	800aaa4 <_malloc_r+0xcc>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	4631      	mov	r1, r6
 800aa26:	4638      	mov	r0, r7
 800aa28:	eb04 0803 	add.w	r8, r4, r3
 800aa2c:	f000 f878 	bl	800ab20 <_sbrk_r>
 800aa30:	4580      	cmp	r8, r0
 800aa32:	d13a      	bne.n	800aaaa <_malloc_r+0xd2>
 800aa34:	6821      	ldr	r1, [r4, #0]
 800aa36:	3503      	adds	r5, #3
 800aa38:	1a6d      	subs	r5, r5, r1
 800aa3a:	f025 0503 	bic.w	r5, r5, #3
 800aa3e:	3508      	adds	r5, #8
 800aa40:	2d0c      	cmp	r5, #12
 800aa42:	bf38      	it	cc
 800aa44:	250c      	movcc	r5, #12
 800aa46:	4629      	mov	r1, r5
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff ffa5 	bl	800a998 <sbrk_aligned>
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d02b      	beq.n	800aaaa <_malloc_r+0xd2>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	442b      	add	r3, r5
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	e00e      	b.n	800aa78 <_malloc_r+0xa0>
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	1b52      	subs	r2, r2, r5
 800aa5e:	d41e      	bmi.n	800aa9e <_malloc_r+0xc6>
 800aa60:	2a0b      	cmp	r2, #11
 800aa62:	d916      	bls.n	800aa92 <_malloc_r+0xba>
 800aa64:	1961      	adds	r1, r4, r5
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	6025      	str	r5, [r4, #0]
 800aa6a:	bf18      	it	ne
 800aa6c:	6059      	strne	r1, [r3, #4]
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	bf08      	it	eq
 800aa72:	6031      	streq	r1, [r6, #0]
 800aa74:	5162      	str	r2, [r4, r5]
 800aa76:	604b      	str	r3, [r1, #4]
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f104 060b 	add.w	r6, r4, #11
 800aa7e:	f000 f865 	bl	800ab4c <__malloc_unlock>
 800aa82:	f026 0607 	bic.w	r6, r6, #7
 800aa86:	1d23      	adds	r3, r4, #4
 800aa88:	1af2      	subs	r2, r6, r3
 800aa8a:	d0b6      	beq.n	800a9fa <_malloc_r+0x22>
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	50a3      	str	r3, [r4, r2]
 800aa90:	e7b3      	b.n	800a9fa <_malloc_r+0x22>
 800aa92:	6862      	ldr	r2, [r4, #4]
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	bf0c      	ite	eq
 800aa98:	6032      	streq	r2, [r6, #0]
 800aa9a:	605a      	strne	r2, [r3, #4]
 800aa9c:	e7ec      	b.n	800aa78 <_malloc_r+0xa0>
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	6864      	ldr	r4, [r4, #4]
 800aaa2:	e7b2      	b.n	800aa0a <_malloc_r+0x32>
 800aaa4:	4634      	mov	r4, r6
 800aaa6:	6876      	ldr	r6, [r6, #4]
 800aaa8:	e7b9      	b.n	800aa1e <_malloc_r+0x46>
 800aaaa:	230c      	movs	r3, #12
 800aaac:	603b      	str	r3, [r7, #0]
 800aaae:	4638      	mov	r0, r7
 800aab0:	f000 f84c 	bl	800ab4c <__malloc_unlock>
 800aab4:	e7a1      	b.n	800a9fa <_malloc_r+0x22>
 800aab6:	6025      	str	r5, [r4, #0]
 800aab8:	e7de      	b.n	800aa78 <_malloc_r+0xa0>
 800aaba:	bf00      	nop
 800aabc:	20000520 	.word	0x20000520

0800aac0 <_realloc_r>:
 800aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac4:	4680      	mov	r8, r0
 800aac6:	4614      	mov	r4, r2
 800aac8:	460e      	mov	r6, r1
 800aaca:	b921      	cbnz	r1, 800aad6 <_realloc_r+0x16>
 800aacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	4611      	mov	r1, r2
 800aad2:	f7ff bf81 	b.w	800a9d8 <_malloc_r>
 800aad6:	b92a      	cbnz	r2, 800aae4 <_realloc_r+0x24>
 800aad8:	f7ff ff12 	bl	800a900 <_free_r>
 800aadc:	4625      	mov	r5, r4
 800aade:	4628      	mov	r0, r5
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	f000 f838 	bl	800ab58 <_malloc_usable_size_r>
 800aae8:	4284      	cmp	r4, r0
 800aaea:	4607      	mov	r7, r0
 800aaec:	d802      	bhi.n	800aaf4 <_realloc_r+0x34>
 800aaee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaf2:	d812      	bhi.n	800ab1a <_realloc_r+0x5a>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7ff ff6e 	bl	800a9d8 <_malloc_r>
 800aafc:	4605      	mov	r5, r0
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d0ed      	beq.n	800aade <_realloc_r+0x1e>
 800ab02:	42bc      	cmp	r4, r7
 800ab04:	4622      	mov	r2, r4
 800ab06:	4631      	mov	r1, r6
 800ab08:	bf28      	it	cs
 800ab0a:	463a      	movcs	r2, r7
 800ab0c:	f7ff fb24 	bl	800a158 <memcpy>
 800ab10:	4631      	mov	r1, r6
 800ab12:	4640      	mov	r0, r8
 800ab14:	f7ff fef4 	bl	800a900 <_free_r>
 800ab18:	e7e1      	b.n	800aade <_realloc_r+0x1e>
 800ab1a:	4635      	mov	r5, r6
 800ab1c:	e7df      	b.n	800aade <_realloc_r+0x1e>
	...

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f9 fad6 	bl	80040dc <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20000528 	.word	0x20000528

0800ab40 <__malloc_lock>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__malloc_lock+0x8>)
 800ab42:	f000 b811 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800ab46:	bf00      	nop
 800ab48:	2000052c 	.word	0x2000052c

0800ab4c <__malloc_unlock>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__malloc_unlock+0x8>)
 800ab4e:	f000 b80c 	b.w	800ab6a <__retarget_lock_release_recursive>
 800ab52:	bf00      	nop
 800ab54:	2000052c 	.word	0x2000052c

0800ab58 <_malloc_usable_size_r>:
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f18      	subs	r0, r3, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfbc      	itt	lt
 800ab62:	580b      	ldrlt	r3, [r1, r0]
 800ab64:	18c0      	addlt	r0, r0, r3
 800ab66:	4770      	bx	lr

0800ab68 <__retarget_lock_acquire_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_release_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <_init>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr

0800ab78 <_fini>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr
