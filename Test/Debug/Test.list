
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800c200  0800c200  0001c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e0  0800c3e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e8  0800c3e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e8  0800c3e8  0001c3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000078  0800c468  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002560  0800c468  00022560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017478  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003081  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3b7  00000000  00000000  0003cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b82b  00000000  00000000  00057187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cd1  00000000  00000000  000729b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da0  00000000  00000000  001136d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1e8 	.word	0x0800c1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800c1e8 	.word	0x0800c1e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R
extern TIM_HandleTypeDef htim11;

void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2c      	ldr	r4, [pc, #176]	; (8000e38 <TOF_init+0xb8>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f00a fd1f 	bl	800b7d4 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f857 	bl	8000e4c <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c27      	ldr	r4, [pc, #156]	; (8000e3c <TOF_init+0xbc>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f00a fd13 	bl	800b7d4 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f84b 	bl	8000e4c <writeMM>
	writeMM(hi2c3);
 8000db6:	4c22      	ldr	r4, [pc, #136]	; (8000e40 <TOF_init+0xc0>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f00a fd07 	bl	800b7d4 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f83f 	bl	8000e4c <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <TOF_init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f004 fc83 	bl	80056e0 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <TOF_init+0xc4>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <TOF_init+0xbc>)
 8000df0:	f005 fd70 	bl	80068d4 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <TOF_init+0xc4>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <TOF_init+0xb8>)
 8000e0a:	f005 fd63 	bl	80068d4 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <TOF_init+0xc4>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <TOF_init+0xc0>)
 8000e24:	f005 fd56 	bl	80068d4 <HAL_I2C_Mem_Write>

	HAL_TIM_Base_Start_IT(&htim11);
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <TOF_init+0xc8>)
 8000e2a:	f008 fbe5 	bl	80095f8 <HAL_TIM_Base_Start_IT>
}
 8000e2e:	bf00      	nop
 8000e30:	3704      	adds	r7, #4
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20002220 	.word	0x20002220
 8000e3c:	20002274 	.word	0x20002274
 8000e40:	200022c8 	.word	0x200022c8
 8000e44:	20000094 	.word	0x20000094
 8000e48:	20002494 	.word	0x20002494

08000e4c <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af04      	add	r7, sp, #16
 8000e54:	f107 0c08 	add.w	ip, r7, #8
 8000e58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e5c:	4bcb      	ldr	r3, [pc, #812]	; (800118c <writeMM+0x340>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	4bc7      	ldr	r3, [pc, #796]	; (800118c <writeMM+0x340>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2310      	movs	r3, #16
 8000e72:	f240 2207 	movw	r2, #519	; 0x207
 8000e76:	2152      	movs	r1, #82	; 0x52
 8000e78:	f107 0008 	add.w	r0, r7, #8
 8000e7c:	f005 fd2a 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f004 fc2d 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e86:	4bc1      	ldr	r3, [pc, #772]	; (800118c <writeMM+0x340>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2301      	movs	r3, #1
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4bbd      	ldr	r3, [pc, #756]	; (800118c <writeMM+0x340>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000ea0:	2152      	movs	r1, #82	; 0x52
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f005 fd15 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f004 fc18 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000eb0:	4bb6      	ldr	r3, [pc, #728]	; (800118c <writeMM+0x340>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4bb2      	ldr	r3, [pc, #712]	; (800118c <writeMM+0x340>)
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	2296      	movs	r2, #150	; 0x96
 8000ec8:	2152      	movs	r1, #82	; 0x52
 8000eca:	f107 0008 	add.w	r0, r7, #8
 8000ece:	f005 fd01 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f004 fc04 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ed8:	4bac      	ldr	r3, [pc, #688]	; (800118c <writeMM+0x340>)
 8000eda:	22fd      	movs	r2, #253	; 0xfd
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	4ba8      	ldr	r3, [pc, #672]	; (800118c <writeMM+0x340>)
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2310      	movs	r3, #16
 8000eee:	2297      	movs	r2, #151	; 0x97
 8000ef0:	2152      	movs	r1, #82	; 0x52
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	f005 fced 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f004 fbf0 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000f00:	4ba2      	ldr	r3, [pc, #648]	; (800118c <writeMM+0x340>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b9e      	ldr	r3, [pc, #632]	; (800118c <writeMM+0x340>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2310      	movs	r3, #16
 8000f16:	22e3      	movs	r2, #227	; 0xe3
 8000f18:	2152      	movs	r1, #82	; 0x52
 8000f1a:	f107 0008 	add.w	r0, r7, #8
 8000f1e:	f005 fcd9 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f004 fbdc 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f28:	4b98      	ldr	r3, [pc, #608]	; (800118c <writeMM+0x340>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <writeMM+0x340>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	22e4      	movs	r2, #228	; 0xe4
 8000f40:	2152      	movs	r1, #82	; 0x52
 8000f42:	f107 0008 	add.w	r0, r7, #8
 8000f46:	f005 fcc5 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f004 fbc8 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <writeMM+0x340>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <writeMM+0x340>)
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2310      	movs	r3, #16
 8000f66:	22e5      	movs	r2, #229	; 0xe5
 8000f68:	2152      	movs	r1, #82	; 0x52
 8000f6a:	f107 0008 	add.w	r0, r7, #8
 8000f6e:	f005 fcb1 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f004 fbb4 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <writeMM+0x340>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <writeMM+0x340>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	22e6      	movs	r2, #230	; 0xe6
 8000f90:	2152      	movs	r1, #82	; 0x52
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	f005 fc9d 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f004 fba0 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <writeMM+0x340>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <writeMM+0x340>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	22e7      	movs	r2, #231	; 0xe7
 8000fb8:	2152      	movs	r1, #82	; 0x52
 8000fba:	f107 0008 	add.w	r0, r7, #8
 8000fbe:	f005 fc89 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f004 fb8c 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fc8:	4b70      	ldr	r3, [pc, #448]	; (800118c <writeMM+0x340>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <writeMM+0x340>)
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	22f5      	movs	r2, #245	; 0xf5
 8000fe0:	2152      	movs	r1, #82	; 0x52
 8000fe2:	f107 0008 	add.w	r0, r7, #8
 8000fe6:	f005 fc75 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f004 fb78 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <writeMM+0x340>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <writeMM+0x340>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2310      	movs	r3, #16
 8001006:	22d9      	movs	r2, #217	; 0xd9
 8001008:	2152      	movs	r1, #82	; 0x52
 800100a:	f107 0008 	add.w	r0, r7, #8
 800100e:	f005 fc61 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f004 fb64 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0xce;
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <writeMM+0x340>)
 800101a:	22ce      	movs	r2, #206	; 0xce
 800101c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <writeMM+0x340>)
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2310      	movs	r3, #16
 800102e:	22db      	movs	r2, #219	; 0xdb
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	f005 fc4d 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f004 fb50 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <writeMM+0x340>)
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <writeMM+0x340>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2310      	movs	r3, #16
 8001056:	22dc      	movs	r2, #220	; 0xdc
 8001058:	2152      	movs	r1, #82	; 0x52
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	f005 fc39 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fb3c 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <writeMM+0x340>)
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <writeMM+0x340>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	22dd      	movs	r2, #221	; 0xdd
 8001080:	2152      	movs	r1, #82	; 0x52
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	f005 fc25 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f004 fb28 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <writeMM+0x340>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <writeMM+0x340>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2310      	movs	r3, #16
 80010a6:	229f      	movs	r2, #159	; 0x9f
 80010a8:	2152      	movs	r1, #82	; 0x52
 80010aa:	f107 0008 	add.w	r0, r7, #8
 80010ae:	f005 fc11 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f004 fb14 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <writeMM+0x340>)
 80010ba:	223c      	movs	r2, #60	; 0x3c
 80010bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <writeMM+0x340>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2310      	movs	r3, #16
 80010ce:	22a3      	movs	r2, #163	; 0xa3
 80010d0:	2152      	movs	r1, #82	; 0x52
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	f005 fbfd 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f004 fb00 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <writeMM+0x340>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <writeMM+0x340>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2310      	movs	r3, #16
 80010f6:	22b7      	movs	r2, #183	; 0xb7
 80010f8:	2152      	movs	r1, #82	; 0x52
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f005 fbe9 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f004 faec 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <writeMM+0x340>)
 800110a:	223c      	movs	r2, #60	; 0x3c
 800110c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <writeMM+0x340>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2310      	movs	r3, #16
 800111e:	22bb      	movs	r2, #187	; 0xbb
 8001120:	2152      	movs	r1, #82	; 0x52
 8001122:	f107 0008 	add.w	r0, r7, #8
 8001126:	f005 fbd5 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fad8 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <writeMM+0x340>)
 8001132:	2209      	movs	r2, #9
 8001134:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <writeMM+0x340>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2310      	movs	r3, #16
 8001146:	22b2      	movs	r2, #178	; 0xb2
 8001148:	2152      	movs	r1, #82	; 0x52
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	f005 fbc1 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f004 fac4 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <writeMM+0x340>)
 800115a:	2209      	movs	r2, #9
 800115c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <writeMM+0x340>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2310      	movs	r3, #16
 800116e:	22ca      	movs	r2, #202	; 0xca
 8001170:	2152      	movs	r1, #82	; 0x52
 8001172:	f107 0008 	add.w	r0, r7, #8
 8001176:	f005 fbad 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f004 fab0 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <writeMM+0x340>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	e001      	b.n	8001190 <writeMM+0x344>
 800118c:	20000094 	.word	0x20000094
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <writeMM+0x574>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2310      	movs	r3, #16
 800119c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80011a0:	2152      	movs	r1, #82	; 0x52
 80011a2:	f107 0008 	add.w	r0, r7, #8
 80011a6:	f005 fb95 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f004 fa98 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <writeMM+0x574>)
 80011b2:	2217      	movs	r2, #23
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <writeMM+0x574>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2310      	movs	r3, #16
 80011c6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011ca:	2152      	movs	r1, #82	; 0x52
 80011cc:	f107 0008 	add.w	r0, r7, #8
 80011d0:	f005 fb80 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f004 fa83 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <writeMM+0x574>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <writeMM+0x574>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2310      	movs	r3, #16
 80011f0:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011f4:	2152      	movs	r1, #82	; 0x52
 80011f6:	f107 0008 	add.w	r0, r7, #8
 80011fa:	f005 fb6b 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f004 fa6e 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <writeMM+0x574>)
 8001206:	2205      	movs	r2, #5
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <writeMM+0x574>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2310      	movs	r3, #16
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	2152      	movs	r1, #82	; 0x52
 800121e:	f107 0008 	add.w	r0, r7, #8
 8001222:	f005 fb57 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f004 fa5a 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <writeMM+0x574>)
 800122e:	2205      	movs	r2, #5
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <writeMM+0x574>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2310      	movs	r3, #16
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	2152      	movs	r1, #82	; 0x52
 8001248:	f107 0008 	add.w	r0, r7, #8
 800124c:	f005 fb42 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f004 fa45 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <writeMM+0x574>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <writeMM+0x574>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2310      	movs	r3, #16
 800126c:	f240 1299 	movw	r2, #409	; 0x199
 8001270:	2152      	movs	r1, #82	; 0x52
 8001272:	f107 0008 	add.w	r0, r7, #8
 8001276:	f005 fb2d 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f004 fa30 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <writeMM+0x574>)
 8001282:	221b      	movs	r2, #27
 8001284:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <writeMM+0x574>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800129a:	2152      	movs	r1, #82	; 0x52
 800129c:	f107 0008 	add.w	r0, r7, #8
 80012a0:	f005 fb18 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f004 fa1b 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <writeMM+0x574>)
 80012ac:	223e      	movs	r2, #62	; 0x3e
 80012ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <writeMM+0x574>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2310      	movs	r3, #16
 80012c0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012c4:	2152      	movs	r1, #82	; 0x52
 80012c6:	f107 0008 	add.w	r0, r7, #8
 80012ca:	f005 fb03 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f004 fa06 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <writeMM+0x574>)
 80012d6:	221f      	movs	r2, #31
 80012d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <writeMM+0x574>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012ee:	2152      	movs	r1, #82	; 0x52
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f005 faee 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f004 f9f1 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <writeMM+0x574>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <writeMM+0x574>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2310      	movs	r3, #16
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2152      	movs	r1, #82	; 0x52
 8001318:	f107 0008 	add.w	r0, r7, #8
 800131c:	f005 fada 	bl	80068d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f004 f9dd 	bl	80056e0 <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <writeMM+0x574>)
 8001328:	2210      	movs	r2, #16
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <writeMM+0x574>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2310      	movs	r3, #16
 800133c:	2211      	movs	r2, #17
 800133e:	2152      	movs	r1, #82	; 0x52
 8001340:	f107 0008 	add.w	r0, r7, #8
 8001344:	f005 fac6 	bl	80068d4 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f004 f9c9 	bl	80056e0 <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <writeMM+0x574>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <writeMM+0x574>)
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2310      	movs	r3, #16
 8001364:	221b      	movs	r2, #27
 8001366:	2152      	movs	r1, #82	; 0x52
 8001368:	f107 0008 	add.w	r0, r7, #8
 800136c:	f005 fab2 	bl	80068d4 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <writeMM+0x574>)
 8001372:	220a      	movs	r2, #10
 8001374:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <writeMM+0x574>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2310      	movs	r3, #16
 8001386:	221c      	movs	r2, #28
 8001388:	2152      	movs	r1, #82	; 0x52
 800138a:	f107 0008 	add.w	r0, r7, #8
 800138e:	f005 faa1 	bl	80068d4 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <writeMM+0x574>)
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <writeMM+0x574>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2310      	movs	r3, #16
 80013a8:	2214      	movs	r2, #20
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	f107 0008 	add.w	r0, r7, #8
 80013b0:	f005 fa90 	bl	80068d4 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	20000094 	.word	0x20000094

080013c4 <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <TOF_start_measurement+0x50>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <TOF_start_measurement+0x50>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	2218      	movs	r2, #24
 80013dc:	2152      	movs	r1, #82	; 0x52
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <TOF_start_measurement+0x54>)
 80013e0:	f005 fb72 	bl	8006ac8 <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <TOF_start_measurement+0x50>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	2218      	movs	r2, #24
 80013f0:	2152      	movs	r1, #82	; 0x52
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <TOF_start_measurement+0x58>)
 80013f4:	f005 fb68 	bl	8006ac8 <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <TOF_start_measurement+0x50>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2310      	movs	r3, #16
 8001402:	2218      	movs	r2, #24
 8001404:	2152      	movs	r1, #82	; 0x52
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <TOF_start_measurement+0x5c>)
 8001408:	f005 fb5e 	bl	8006ac8 <HAL_I2C_Mem_Write_IT>
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000094 	.word	0x20000094
 8001418:	20002274 	.word	0x20002274
 800141c:	20002220 	.word	0x20002220
 8001420:	200022c8 	.word	0x200022c8

08001424 <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <TOF_get_measurement+0x48>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2310      	movs	r3, #16
 8001434:	2262      	movs	r2, #98	; 0x62
 8001436:	2152      	movs	r1, #82	; 0x52
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <TOF_get_measurement+0x4c>)
 800143a:	f005 fbf7 	bl	8006c2c <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <TOF_get_measurement+0x50>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2310      	movs	r3, #16
 8001448:	2262      	movs	r2, #98	; 0x62
 800144a:	2152      	movs	r1, #82	; 0x52
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <TOF_get_measurement+0x54>)
 800144e:	f005 fbed 	bl	8006c2c <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <TOF_get_measurement+0x58>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2310      	movs	r3, #16
 800145c:	2262      	movs	r2, #98	; 0x62
 800145e:	2152      	movs	r1, #82	; 0x52
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <TOF_get_measurement+0x5c>)
 8001462:	f005 fbe3 	bl	8006c2c <HAL_I2C_Mem_Read_IT>
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000012c 	.word	0x2000012c
 8001470:	20002274 	.word	0x20002274
 8001474:	2000012d 	.word	0x2000012d
 8001478:	20002220 	.word	0x20002220
 800147c:	2000012e 	.word	0x2000012e
 8001480:	200022c8 	.word	0x200022c8

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f004 f8b7 	bl	80055fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f895 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f000 fc31 	bl	8001cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001496:	f000 f94d 	bl	8001734 <MX_I2C1_Init>
  MX_I2C2_Init();
 800149a:	f000 f979 	bl	8001790 <MX_I2C2_Init>
  MX_ADC1_Init();
 800149e:	f000 f8f7 	bl	8001690 <MX_ADC1_Init>
  MX_I2C3_Init();
 80014a2:	f000 f9a3 	bl	80017ec <MX_I2C3_Init>
  MX_TIM3_Init();
 80014a6:	f000 fb31 	bl	8001b0c <MX_TIM3_Init>
  MX_TIM5_Init();
 80014aa:	f000 fb83 	bl	8001bb4 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014ae:	f000 fa01 	bl	80018b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014b2:	f000 faab 	bl	8001a0c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 fbf5 	bl	8001ca4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014ba:	f000 f9c5 	bl	8001848 <MX_SPI2_Init>
  MX_TIM11_Init();
 80014be:	f000 fbcd 	bl	8001c5c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 80014c2:	f002 fb39 	bl	8003b38 <motorsInit>
	TOF_init();
 80014c6:	f7ff fc5b 	bl	8000d80 <TOF_init>
	maze_init();
 80014ca:	f000 fc93 	bl	8001df4 <maze_init>
	HAL_Delay(200);
 80014ce:	20c8      	movs	r0, #200	; 0xc8
 80014d0:	f004 f906 	bl	80056e0 <HAL_Delay>
	uart_startup_transmit();
 80014d4:	f003 ffd2 	bl	800547c <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);
	if (HAL_FLASH_Unlock() != HAL_OK) while(1){  HAL_Delay(10);}
 80014d8:	f004 fd9e 	bl	8006018 <HAL_FLASH_Unlock>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <main+0x66>
 80014e2:	200a      	movs	r0, #10
 80014e4:	f004 f8fc 	bl	80056e0 <HAL_Delay>
 80014e8:	e7fb      	b.n	80014e2 <main+0x5e>

//	HAL_Delay(500);
//	race_forward(635);
	R_speed_setpoint = 0;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <main+0x11c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 0;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <main+0x120>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
	while(measurements[1]>100) HAL_Delay(100);
 80014f6:	e002      	b.n	80014fe <main+0x7a>
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f004 f8f1 	bl	80056e0 <HAL_Delay>
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <main+0x124>)
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d8f8      	bhi.n	80014f8 <main+0x74>
	while(measurements[1]<100) HAL_Delay(100);
 8001506:	e002      	b.n	800150e <main+0x8a>
 8001508:	2064      	movs	r0, #100	; 0x64
 800150a:	f004 f8e9 	bl	80056e0 <HAL_Delay>
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <main+0x124>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	2b63      	cmp	r3, #99	; 0x63
 8001514:	d9f8      	bls.n	8001508 <main+0x84>
	HAL_Delay(1000);
 8001516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151a:	f004 f8e1 	bl	80056e0 <HAL_Delay>
//	explore();
//	go_home();
	race();
 800151e:	f002 f99b 	bl	8003858 <race>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8001522:	f004 f8d1 	bl	80056c8 <HAL_GetTick>
 8001526:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 8001528:	f004 f8ce 	bl	80056c8 <HAL_GetTick>
 800152c:	6038      	str	r0, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		uart_task();
 800152e:	f003 ffcd 	bl	80054cc <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 8001532:	f004 f8c9 	bl	80056c8 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b65      	cmp	r3, #101	; 0x65
 800153e:	d902      	bls.n	8001546 <main+0xc2>
			prev_main_loop_time = HAL_GetTick();
 8001540:	f004 f8c2 	bl	80056c8 <HAL_GetTick>
 8001544:	6038      	str	r0, [r7, #0]

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time > STR_CONTROL_LOOP_PERIOD_MS){
 8001546:	f004 f8bf 	bl	80056c8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b14      	cmp	r3, #20
 8001552:	d9ec      	bls.n	800152e <main+0xaa>
			prev_ctr_loop_time = HAL_GetTick();
 8001554:	f004 f8b8 	bl	80056c8 <HAL_GetTick>
 8001558:	6078      	str	r0, [r7, #4]
			sprintf(send_buffer, "L:%.3d M:%.3d R:%.3d LE:%.3d RE:%.3d\n",(int)measurements[0],(int)measurements[1] ,(int)measurements[2], (int)htim5.Instance->CNT, (int)htim3.Instance->CNT);
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <main+0x124>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <main+0x124>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	461c      	mov	r4, r3
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <main+0x124>)
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	461a      	mov	r2, r3
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <main+0x128>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <main+0x12c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	9101      	str	r1, [sp, #4]
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	4623      	mov	r3, r4
 8001582:	4602      	mov	r2, r0
 8001584:	490b      	ldr	r1, [pc, #44]	; (80015b4 <main+0x130>)
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <main+0x134>)
 8001588:	f00a f93a 	bl	800b800 <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <main+0x134>)
 800158e:	f7fe fe27 	bl	80001e0 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <main+0x134>)
 8001598:	f003 ffbc 	bl	8005514 <uart_transmit>
		uart_task();
 800159c:	e7c7      	b.n	800152e <main+0xaa>
 800159e:	bf00      	nop
 80015a0:	20000100 	.word	0x20000100
 80015a4:	200000fe 	.word	0x200000fe
 80015a8:	2000012c 	.word	0x2000012c
 80015ac:	2000244c 	.word	0x2000244c
 80015b0:	20002404 	.word	0x20002404
 80015b4:	0800c200 	.word	0x0800c200
 80015b8:	2000009c 	.word	0x2000009c

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00a f910 	bl	800b7f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <SystemClock_Config+0xcc>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <SystemClock_Config+0xcc>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <SystemClock_Config+0xcc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <SystemClock_Config+0xd0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <SystemClock_Config+0xd0>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <SystemClock_Config+0xd0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800162c:	2308      	movs	r3, #8
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001630:	2364      	movs	r3, #100	; 0x64
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f007 faa9 	bl	8008b98 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800164c:	f000 fbcc 	bl	8001de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800165c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2103      	movs	r1, #3
 800166e:	4618      	mov	r0, r3
 8001670:	f007 fd0a 	bl	8009088 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800167a:	f000 fbb5 	bl	8001de8 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3750      	adds	r7, #80	; 0x50
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000

08001690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_ADC1_Init+0x98>)
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_ADC1_Init+0x9c>)
 80016a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_ADC1_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_ADC1_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_ADC1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_ADC1_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_ADC1_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_ADC1_Init+0x98>)
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MX_ADC1_Init+0xa0>)
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_ADC1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_ADC1_Init+0x98>)
 80016dc:	2201      	movs	r2, #1
 80016de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_ADC1_Init+0x98>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <MX_ADC1_Init+0x98>)
 80016f0:	f004 f81a 	bl	8005728 <HAL_ADC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 fb75 	bl	8001de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016fe:	2304      	movs	r3, #4
 8001700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_ADC1_Init+0x98>)
 8001710:	f004 f84e 	bl	80057b0 <HAL_ADC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800171a:	f000 fb65 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200021d8 	.word	0x200021d8
 800172c:	40012000 	.word	0x40012000
 8001730:	0f000001 	.word	0x0f000001

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C1_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C1_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_I2C1_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_I2C1_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_I2C1_Init+0x50>)
 8001772:	f004 ff6b 	bl	800664c <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fb34 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20002220 	.word	0x20002220
 8001788:	40005400 	.word	0x40005400
 800178c:	00061a80 	.word	0x00061a80

08001790 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C2_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C2_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C2_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_I2C2_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_I2C2_Init+0x50>)
 80017ce:	f004 ff3d 	bl	800664c <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f000 fb06 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20002274 	.word	0x20002274
 80017e4:	40005800 	.word	0x40005800
 80017e8:	00061a80 	.word	0x00061a80

080017ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C3_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_I2C3_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C3_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_I2C3_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C3_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_I2C3_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_I2C3_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_I2C3_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_I2C3_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <MX_I2C3_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_I2C3_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C3_Init+0x50>)
 800182a:	f004 ff0f 	bl	800664c <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 fad8 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200022c8 	.word	0x200022c8
 8001840:	40005c00 	.word	0x40005c00
 8001844:	00061a80 	.word	0x00061a80

08001848 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_SPI2_Init+0x64>)
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <MX_SPI2_Init+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI2_Init+0x64>)
 8001854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_SPI2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI2_Init+0x64>)
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI2_Init+0x64>)
 800187c:	2230      	movs	r2, #48	; 0x30
 800187e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_SPI2_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI2_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_SPI2_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI2_Init+0x64>)
 8001894:	220a      	movs	r2, #10
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_SPI2_Init+0x64>)
 800189a:	f007 fdd5 	bl	8009448 <HAL_SPI_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018a4:	f000 faa0 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000231c 	.word	0x2000231c
 80018b0:	40003800 	.word	0x40003800

080018b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b096      	sub	sp, #88	; 0x58
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2220      	movs	r2, #32
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f009 ff7f 	bl	800b7f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <MX_TIM1_Init+0x150>)
 80018f4:	4a44      	ldr	r2, [pc, #272]	; (8001a08 <MX_TIM1_Init+0x154>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <MX_TIM1_Init+0x150>)
 80018fa:	2218      	movs	r2, #24
 80018fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM1_Init+0x150>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_TIM1_Init+0x150>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800191e:	4839      	ldr	r0, [pc, #228]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001920:	f007 fe1b 	bl	800955a <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800192a:	f000 fa5d 	bl	8001de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001938:	4619      	mov	r1, r3
 800193a:	4832      	ldr	r0, [pc, #200]	; (8001a04 <MX_TIM1_Init+0x150>)
 800193c:	f008 fac6 	bl	8009ecc <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001946:	f000 fa4f 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194a:	482e      	ldr	r0, [pc, #184]	; (8001a04 <MX_TIM1_Init+0x150>)
 800194c:	f007 feb6 	bl	80096bc <HAL_TIM_PWM_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001956:	f000 fa47 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001962:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001966:	4619      	mov	r1, r3
 8001968:	4826      	ldr	r0, [pc, #152]	; (8001a04 <MX_TIM1_Init+0x150>)
 800196a:	f008 fe75 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001974:	f000 fa38 	bl	8001de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001978:	2360      	movs	r3, #96	; 0x60
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	2204      	movs	r2, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4819      	ldr	r0, [pc, #100]	; (8001a04 <MX_TIM1_Init+0x150>)
 800199e:	f008 f9d3 	bl	8009d48 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019a8:	f000 fa1e 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	2208      	movs	r2, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019b6:	f008 f9c7 	bl	8009d48 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019c0:	f000 fa12 	bl	8001de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019e8:	f008 fea4 	bl	800a734 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f2:	f000 f9f9 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019f8:	f003 fb82 	bl	8005100 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3758      	adds	r7, #88	; 0x58
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20002374 	.word	0x20002374
 8001a08:	40010000 	.word	0x40010000

08001a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3c:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a46:	2218      	movs	r2, #24
 8001a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a64:	4828      	ldr	r0, [pc, #160]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a66:	f007 fd78 	bl	800955a <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a70:	f000 f9ba 	bl	8001de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4821      	ldr	r0, [pc, #132]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a82:	f008 fa23 	bl	8009ecc <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a8c:	f000 f9ac 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a90:	481d      	ldr	r0, [pc, #116]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001a92:	f007 fe13 	bl	80096bc <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a9c:	f000 f9a4 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	4619      	mov	r1, r3
 8001aae:	4816      	ldr	r0, [pc, #88]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001ab0:	f008 fdd2 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001aba:	f000 f995 	bl	8001de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001ad6:	f008 f937 	bl	8009d48 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ae0:	f000 f982 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001aec:	f008 f92c 	bl	8009d48 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001af6:	f000 f977 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <MX_TIM2_Init+0xfc>)
 8001afc:	f003 fb00 	bl	8005100 <HAL_TIM_MspPostInit>

}
 8001b00:	bf00      	nop
 8001b02:	3738      	adds	r7, #56	; 0x38
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200023bc 	.word	0x200023bc

08001b0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	2224      	movs	r2, #36	; 0x24
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f009 fe68 	bl	800b7f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b2a:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <MX_TIM3_Init+0xa4>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b66:	2301      	movs	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b7a:	f007 fea9 	bl	80098d0 <HAL_TIM_Encoder_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b84:	f000 f930 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_TIM3_Init+0xa0>)
 8001b96:	f008 fd5f 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba0:	f000 f922 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20002404 	.word	0x20002404
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 fe14 	bl	800b7f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <MX_TIM5_Init+0xa4>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001c22:	f007 fe55 	bl	80098d0 <HAL_TIM_Encoder_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c2c:	f000 f8dc 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_TIM5_Init+0xa0>)
 8001c3e:	f008 fd0b 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c48:	f000 f8ce 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000244c 	.word	0x2000244c
 8001c58:	40000c00 	.word	0x40000c00

08001c5c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <MX_TIM11_Init+0x44>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 24;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c68:	2218      	movs	r2, #24
 8001c6a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c74:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c78:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_TIM11_Init+0x40>)
 8001c88:	f007 fc67 	bl	800955a <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c92:	f000 f8a9 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20002494 	.word	0x20002494
 8001ca0:	40014800 	.word	0x40014800

08001ca4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_USART2_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f008 fd90 	bl	800a800 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f000 f87f 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200024dc 	.word	0x200024dc
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a31      	ldr	r2, [pc, #196]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MX_GPIO_Init+0xe4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d68:	481d      	ldr	r0, [pc, #116]	; (8001de0 <MX_GPIO_Init+0xe8>)
 8001d6a:	f004 fc3b 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d74:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_GPIO_Init+0xec>)
 8001d76:	f004 fc35 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4619      	mov	r1, r3
 8001d92:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_GPIO_Init+0xe8>)
 8001d94:	f004 faa2 	bl	80062dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4619      	mov	r1, r3
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <MX_GPIO_Init+0xe8>)
 8001db2:	f004 fa93 	bl	80062dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_GPIO_Init+0xec>)
 8001dd0:	f004 fa84 	bl	80062dc <HAL_GPIO_Init>

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020400 	.word	0x40020400

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001df0:	e7fe      	b.n	8001df0 <Error_Handler+0x8>
	...

08001df4 <maze_init>:
extern uint8_t target_y;
extern MouseStruct Mouse;

//extern TIM_HandleTypeDef htim5;

void maze_init(){
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b090      	sub	sp, #64	; 0x40
 8001df8:	af00      	add	r7, sp, #0
	// set all walls to zero, populate with manhattan dist
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfe:	e055      	b.n	8001eac <maze_init+0xb8>
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e04:	e04c      	b.n	8001ea0 <maze_init+0xac>
			exp_maze[i][j].dist = abs(END_CELL_X-i) + abs(END_CELL_Y-j);
 8001e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e08:	f1c3 0305 	rsb	r3, r3, #5
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bfb8      	it	lt
 8001e10:	425b      	neglt	r3, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bfb8      	it	lt
 8001e1a:	425b      	neglt	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2d8      	uxtb	r0, r3
 8001e22:	4966      	ldr	r1, [pc, #408]	; (8001fbc <maze_init+0x1c8>)
 8001e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	440b      	add	r3, r1
 8001e36:	4602      	mov	r2, r0
 8001e38:	705a      	strb	r2, [r3, #1]
			exp_maze[i][j].walls = 0;
 8001e3a:	4960      	ldr	r1, [pc, #384]	; (8001fbc <maze_init+0x1c8>)
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e48:	4413      	add	r3, r2
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
			race_maze[i][j].dist = abs(END_CELL_X-i) + abs(END_CELL_Y-j);
 8001e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e52:	f1c3 0305 	rsb	r3, r3, #5
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bfb8      	it	lt
 8001e5a:	425b      	neglt	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bfb8      	it	lt
 8001e64:	425b      	neglt	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2d8      	uxtb	r0, r3
 8001e6c:	4954      	ldr	r1, [pc, #336]	; (8001fc0 <maze_init+0x1cc>)
 8001e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	4602      	mov	r2, r0
 8001e82:	705a      	strb	r2, [r3, #1]
			race_maze[i][j].walls = 0;
 8001e84:	494e      	ldr	r1, [pc, #312]	; (8001fc0 <maze_init+0x1cc>)
 8001e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e92:	4413      	add	r3, r2
 8001e94:	2200      	movs	r2, #0
 8001e96:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	ddaf      	ble.n	8001e06 <maze_init+0x12>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	dda6      	ble.n	8001e00 <maze_init+0xc>
		}
	}
	//should actually assume all walls filled in
	//fill top and bottom edge walls
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb6:	e010      	b.n	8001eda <maze_init+0xe6>
		add_wall(exp_maze, i, 0, SOUTH);
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	b2d9      	uxtb	r1, r3
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	483e      	ldr	r0, [pc, #248]	; (8001fbc <maze_init+0x1c8>)
 8001ec2:	f000 fd9f 	bl	8002a04 <add_wall>
		add_wall(exp_maze, i, MAZE_CELL_HEIGHT-1, NORTH);
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	b2d9      	uxtb	r1, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2205      	movs	r2, #5
 8001ece:	483b      	ldr	r0, [pc, #236]	; (8001fbc <maze_init+0x1c8>)
 8001ed0:	f000 fd98 	bl	8002a04 <add_wall>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	ddeb      	ble.n	8001eb8 <maze_init+0xc4>
	}
	//fill left and right edge walls
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee4:	e010      	b.n	8001f08 <maze_init+0x114>
		add_wall(exp_maze, 0, j, WEST);
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	2306      	movs	r3, #6
 8001eec:	2100      	movs	r1, #0
 8001eee:	4833      	ldr	r0, [pc, #204]	; (8001fbc <maze_init+0x1c8>)
 8001ef0:	f000 fd88 	bl	8002a04 <add_wall>
		add_wall(exp_maze, MAZE_CELL_WIDTH-1, j, EAST);
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	2302      	movs	r3, #2
 8001efa:	2105      	movs	r1, #5
 8001efc:	482f      	ldr	r0, [pc, #188]	; (8001fbc <maze_init+0x1c8>)
 8001efe:	f000 fd81 	bl	8002a04 <add_wall>
	for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	3301      	adds	r3, #1
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	ddeb      	ble.n	8001ee6 <maze_init+0xf2>
	}
	// explored starting square
    add_wall(exp_maze, 0, 0, EAST);
 8001f0e:	2302      	movs	r3, #2
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	4829      	ldr	r0, [pc, #164]	; (8001fbc <maze_init+0x1c8>)
 8001f16:	f000 fd75 	bl	8002a04 <add_wall>
    add_wall(exp_maze, 0, 0, SOUTH);
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4826      	ldr	r0, [pc, #152]	; (8001fbc <maze_init+0x1c8>)
 8001f22:	f000 fd6f 	bl	8002a04 <add_wall>
    add_wall(exp_maze, 0, 0, WEST);
 8001f26:	2306      	movs	r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4823      	ldr	r0, [pc, #140]	; (8001fbc <maze_init+0x1c8>)
 8001f2e:	f000 fd69 	bl	8002a04 <add_wall>
	set_explored(exp_maze, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	4821      	ldr	r0, [pc, #132]	; (8001fbc <maze_init+0x1c8>)
 8001f38:	f000 fea2 	bl	8002c80 <set_explored>
//    set_explored(exp_maze, 1, 2);
//    set_explored(exp_maze, 4, 2);
//    set_explored(exp_maze, 5, 2);
//    set_explored(exp_maze, 5, 1);
//    set_explored(exp_maze, 5, 0);
	uint8_t dummy[6][6] = {
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <maze_init+0x1d0>)
 8001f3e:	1d3c      	adds	r4, r7, #4
 8001f40:	461d      	mov	r5, r3
 8001f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	6023      	str	r3, [r4, #0]
			{0x08, 0x06, 0xF8, 0xF5, 0xF3, 0x0A},
			{0x0C, 0xF1, 0xF6, 0xF9, 0xF0, 0xF2},
			{0xF9, 0xF4, 0xF7, 0xFA, 0xFE, 0xFE},
			{0xF8, 0xF1, 0xF3, 0xFC, 0xF5, 0xF3},
			{0xFE, 0x0C, 0xF4, 0xF5, 0xF7, 0xFE}};
	for (int y = 0; y<6; y++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f52:	e023      	b.n	8001f9c <maze_init+0x1a8>
		for (int x = 0; x < 6; x++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f58:	e01a      	b.n	8001f90 <maze_init+0x19c>
			exp_maze[x][y].walls = dummy[5-y][x];
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	f1c3 0205 	rsb	r2, r3, #5
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	3340      	adds	r3, #64	; 0x40
 8001f6a:	19da      	adds	r2, r3, r7
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b3c      	subs	r3, #60	; 0x3c
 8001f72:	7818      	ldrb	r0, [r3, #0]
 8001f74:	4911      	ldr	r1, [pc, #68]	; (8001fbc <maze_init+0x1c8>)
 8001f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f82:	4413      	add	r3, r2
 8001f84:	4602      	mov	r2, r0
 8001f86:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		for (int x = 0; x < 6; x++) {
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	dde1      	ble.n	8001f5a <maze_init+0x166>
	for (int y = 0; y<6; y++) {
 8001f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f98:	3301      	adds	r3, #1
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	ddd8      	ble.n	8001f54 <maze_init+0x160>
		}
	}

//    print_maze(exp_maze);
//    int t1 = HAL_GetTick();
    flood(exp_maze, END_CELL_X, END_CELL_Y);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2105      	movs	r1, #5
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <maze_init+0x1c8>)
 8001fa8:	f000 ff72 	bl	8002e90 <flood>
//	HAL_Delay(15);
//	sprintf(send_buffer, "%d\n",t2);
//	uart_transmit(send_buffer, strlen(send_buffer));
//	HAL_Delay(15);
//
	print_maze(exp_maze);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <maze_init+0x1c8>)
 8001fae:	f000 f881 	bl	80020b4 <print_maze>
//	save_maze();
//	race();
}
 8001fb2:	bf00      	nop
 8001fb4:	3740      	adds	r7, #64	; 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000134 	.word	0x20000134
 8001fc0:	2000017c 	.word	0x2000017c
 8001fc4:	0800c228 	.word	0x0800c228

08001fc8 <printpath>:
void printpath(Path p){
 8001fc8:	b084      	sub	sp, #16
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	f107 0c10 	add.w	ip, r7, #16
 8001fd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for (int i = 0; i < p.len; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	e016      	b.n	800200c <printpath+0x44>
		sprintf(send_buffer, "%d ",(int)p.direction[i]);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	443b      	add	r3, r7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	492e      	ldr	r1, [pc, #184]	; (80020a4 <printpath+0xdc>)
 8001fea:	482f      	ldr	r0, [pc, #188]	; (80020a8 <printpath+0xe0>)
 8001fec:	f009 fc08 	bl	800b800 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8001ff0:	482d      	ldr	r0, [pc, #180]	; (80020a8 <printpath+0xe0>)
 8001ff2:	f7fe f8f5 	bl	80001e0 <strlen>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	482b      	ldr	r0, [pc, #172]	; (80020a8 <printpath+0xe0>)
 8001ffc:	f003 fa8a 	bl	8005514 <uart_transmit>
		HAL_Delay(1);
 8002000:	2001      	movs	r0, #1
 8002002:	f003 fb6d 	bl	80056e0 <HAL_Delay>
	for (int i = 0; i < p.len; i++) {
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3301      	adds	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4293      	cmp	r3, r2
 8002016:	dbe2      	blt.n	8001fde <printpath+0x16>
	}
	sprintf(send_buffer, "\n");
 8002018:	4924      	ldr	r1, [pc, #144]	; (80020ac <printpath+0xe4>)
 800201a:	4823      	ldr	r0, [pc, #140]	; (80020a8 <printpath+0xe0>)
 800201c:	f009 fbf0 	bl	800b800 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8002020:	4821      	ldr	r0, [pc, #132]	; (80020a8 <printpath+0xe0>)
 8002022:	f7fe f8dd 	bl	80001e0 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	481f      	ldr	r0, [pc, #124]	; (80020a8 <printpath+0xe0>)
 800202c:	f003 fa72 	bl	8005514 <uart_transmit>
	HAL_Delay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f003 fb55 	bl	80056e0 <HAL_Delay>
	for (int i = 0; i < p.len; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	e017      	b.n	800206c <printpath+0xa4>
		sprintf(send_buffer, "%d ",(int)p.distance[i]);
 800203c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <printpath+0xdc>)
 800204a:	4817      	ldr	r0, [pc, #92]	; (80020a8 <printpath+0xe0>)
 800204c:	f009 fbd8 	bl	800b800 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8002050:	4815      	ldr	r0, [pc, #84]	; (80020a8 <printpath+0xe0>)
 8002052:	f7fe f8c5 	bl	80001e0 <strlen>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <printpath+0xe0>)
 800205c:	f003 fa5a 	bl	8005514 <uart_transmit>
		HAL_Delay(1);
 8002060:	2001      	movs	r0, #1
 8002062:	f003 fb3d 	bl	80056e0 <HAL_Delay>
	for (int i = 0; i < p.len; i++) {
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8002070:	461a      	mov	r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	4293      	cmp	r3, r2
 8002076:	dbe1      	blt.n	800203c <printpath+0x74>
	}
	sprintf(send_buffer, "\n\n");
 8002078:	490d      	ldr	r1, [pc, #52]	; (80020b0 <printpath+0xe8>)
 800207a:	480b      	ldr	r0, [pc, #44]	; (80020a8 <printpath+0xe0>)
 800207c:	f009 fbc0 	bl	800b800 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <printpath+0xe0>)
 8002082:	f7fe f8ad 	bl	80001e0 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <printpath+0xe0>)
 800208c:	f003 fa42 	bl	8005514 <uart_transmit>
	HAL_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f003 fb25 	bl	80056e0 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020a0:	b004      	add	sp, #16
 80020a2:	4770      	bx	lr
 80020a4:	0800c24c 	.word	0x0800c24c
 80020a8:	2000009c 	.word	0x2000009c
 80020ac:	0800c250 	.word	0x0800c250
 80020b0:	0800c254 	.word	0x0800c254

080020b4 <print_maze>:
void print_maze(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT]){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	HAL_Delay(15);
 80020bc:	200f      	movs	r0, #15
 80020be:	f003 fb0f 	bl	80056e0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 80020c2:	2305      	movs	r3, #5
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e035      	b.n	8002134 <print_maze+0x80>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e01d      	b.n	800210a <print_maze+0x56>
			sprintf(send_buffer, "|%.3d",(int)maze[j][i].walls);
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4944      	ldr	r1, [pc, #272]	; (80021f8 <print_maze+0x144>)
 80020e8:	4844      	ldr	r0, [pc, #272]	; (80021fc <print_maze+0x148>)
 80020ea:	f009 fb89 	bl	800b800 <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 80020ee:	4843      	ldr	r0, [pc, #268]	; (80021fc <print_maze+0x148>)
 80020f0:	f7fe f876 	bl	80001e0 <strlen>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4619      	mov	r1, r3
 80020f8:	4840      	ldr	r0, [pc, #256]	; (80021fc <print_maze+0x148>)
 80020fa:	f003 fa0b 	bl	8005514 <uart_transmit>
			HAL_Delay(15);
 80020fe:	200f      	movs	r0, #15
 8002100:	f003 faee 	bl	80056e0 <HAL_Delay>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	3301      	adds	r3, #1
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b05      	cmp	r3, #5
 800210e:	ddde      	ble.n	80020ce <print_maze+0x1a>
		}
		sprintf(send_buffer, "|\n");
 8002110:	493b      	ldr	r1, [pc, #236]	; (8002200 <print_maze+0x14c>)
 8002112:	483a      	ldr	r0, [pc, #232]	; (80021fc <print_maze+0x148>)
 8002114:	f009 fb74 	bl	800b800 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8002118:	4838      	ldr	r0, [pc, #224]	; (80021fc <print_maze+0x148>)
 800211a:	f7fe f861 	bl	80001e0 <strlen>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	4836      	ldr	r0, [pc, #216]	; (80021fc <print_maze+0x148>)
 8002124:	f003 f9f6 	bl	8005514 <uart_transmit>
		HAL_Delay(15);
 8002128:	200f      	movs	r0, #15
 800212a:	f003 fad9 	bl	80056e0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3b01      	subs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	dac6      	bge.n	80020c8 <print_maze+0x14>
	}
	sprintf(send_buffer, "\n");
 800213a:	4932      	ldr	r1, [pc, #200]	; (8002204 <print_maze+0x150>)
 800213c:	482f      	ldr	r0, [pc, #188]	; (80021fc <print_maze+0x148>)
 800213e:	f009 fb5f 	bl	800b800 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 8002142:	482e      	ldr	r0, [pc, #184]	; (80021fc <print_maze+0x148>)
 8002144:	f7fe f84c 	bl	80001e0 <strlen>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	482b      	ldr	r0, [pc, #172]	; (80021fc <print_maze+0x148>)
 800214e:	f003 f9e1 	bl	8005514 <uart_transmit>
	HAL_Delay(15);
 8002152:	200f      	movs	r0, #15
 8002154:	f003 fac4 	bl	80056e0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 8002158:	2305      	movs	r3, #5
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e036      	b.n	80021cc <print_maze+0x118>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	e01e      	b.n	80021a2 <print_maze+0xee>
			sprintf(send_buffer, "|%.2d",(int)maze[j][i].dist);
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	441a      	add	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	461a      	mov	r2, r3
 800217e:	4922      	ldr	r1, [pc, #136]	; (8002208 <print_maze+0x154>)
 8002180:	481e      	ldr	r0, [pc, #120]	; (80021fc <print_maze+0x148>)
 8002182:	f009 fb3d 	bl	800b800 <siprintf>
			uart_transmit(send_buffer, strlen(send_buffer));
 8002186:	481d      	ldr	r0, [pc, #116]	; (80021fc <print_maze+0x148>)
 8002188:	f7fe f82a 	bl	80001e0 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	481a      	ldr	r0, [pc, #104]	; (80021fc <print_maze+0x148>)
 8002192:	f003 f9bf 	bl	8005514 <uart_transmit>
			HAL_Delay(15);
 8002196:	200f      	movs	r0, #15
 8002198:	f003 faa2 	bl	80056e0 <HAL_Delay>
		for (int j = 0; j < MAZE_CELL_WIDTH; j++) {
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	dddd      	ble.n	8002164 <print_maze+0xb0>
		}
		sprintf(send_buffer, "|\n");
 80021a8:	4915      	ldr	r1, [pc, #84]	; (8002200 <print_maze+0x14c>)
 80021aa:	4814      	ldr	r0, [pc, #80]	; (80021fc <print_maze+0x148>)
 80021ac:	f009 fb28 	bl	800b800 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 80021b0:	4812      	ldr	r0, [pc, #72]	; (80021fc <print_maze+0x148>)
 80021b2:	f7fe f815 	bl	80001e0 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4810      	ldr	r0, [pc, #64]	; (80021fc <print_maze+0x148>)
 80021bc:	f003 f9aa 	bl	8005514 <uart_transmit>
		HAL_Delay(15);
 80021c0:	200f      	movs	r0, #15
 80021c2:	f003 fa8d 	bl	80056e0 <HAL_Delay>
	for (int i = MAZE_CELL_HEIGHT-1; i>=0; i--) {
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dac5      	bge.n	800215e <print_maze+0xaa>
	}
	sprintf(send_buffer, "\n");
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <print_maze+0x150>)
 80021d4:	4809      	ldr	r0, [pc, #36]	; (80021fc <print_maze+0x148>)
 80021d6:	f009 fb13 	bl	800b800 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <print_maze+0x148>)
 80021dc:	f7fe f800 	bl	80001e0 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <print_maze+0x148>)
 80021e6:	f003 f995 	bl	8005514 <uart_transmit>
	HAL_Delay(15);
 80021ea:	200f      	movs	r0, #15
 80021ec:	f003 fa78 	bl	80056e0 <HAL_Delay>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0800c258 	.word	0x0800c258
 80021fc:	2000009c 	.word	0x2000009c
 8002200:	0800c260 	.word	0x0800c260
 8002204:	0800c250 	.word	0x0800c250
 8002208:	0800c264 	.word	0x0800c264

0800220c <turn_to_direction>:
void turn_to_direction(uint8_t target_dir){
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	uint8_t diff = (8 + target_dir - Mouse.heading ) % 8;
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	3308      	adds	r3, #8
 800221a:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <turn_to_direction+0x9c>)
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	425a      	negs	r2, r3
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	f002 0207 	and.w	r2, r2, #7
 800222a:	bf58      	it	pl
 800222c:	4253      	negpl	r3, r2
 800222e:	73fb      	strb	r3, [r7, #15]
    if (diff == 1){
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d103      	bne.n	800223e <turn_to_direction+0x32>
    	turn(45);
 8002236:	202d      	movs	r0, #45	; 0x2d
 8002238:	f001 fd4e 	bl	8003cd8 <turn>
    	turn(-90);
    }
    else if (diff == 7){
    	turn(-45);
    }
}
 800223c:	e02f      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 2){
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d103      	bne.n	800224c <turn_to_direction+0x40>
    	turn(90);
 8002244:	205a      	movs	r0, #90	; 0x5a
 8002246:	f001 fd47 	bl	8003cd8 <turn>
}
 800224a:	e028      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 3){
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d103      	bne.n	800225a <turn_to_direction+0x4e>
    	turn(135);
 8002252:	2087      	movs	r0, #135	; 0x87
 8002254:	f001 fd40 	bl	8003cd8 <turn>
}
 8002258:	e021      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 4){
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d107      	bne.n	8002270 <turn_to_direction+0x64>
    	turn(180);
 8002260:	20b4      	movs	r0, #180	; 0xb4
 8002262:	f001 fd39 	bl	8003cd8 <turn>
    	reverse(-150);
 8002266:	f06f 0095 	mvn.w	r0, #149	; 0x95
 800226a:	f001 fcff 	bl	8003c6c <reverse>
}
 800226e:	e016      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 5){
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d104      	bne.n	8002280 <turn_to_direction+0x74>
    	turn(-135);
 8002276:	f06f 0086 	mvn.w	r0, #134	; 0x86
 800227a:	f001 fd2d 	bl	8003cd8 <turn>
}
 800227e:	e00e      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 6){
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b06      	cmp	r3, #6
 8002284:	d104      	bne.n	8002290 <turn_to_direction+0x84>
    	turn(-90);
 8002286:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800228a:	f001 fd25 	bl	8003cd8 <turn>
}
 800228e:	e006      	b.n	800229e <turn_to_direction+0x92>
    else if (diff == 7){
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b07      	cmp	r3, #7
 8002294:	d103      	bne.n	800229e <turn_to_direction+0x92>
    	turn(-45);
 8002296:	f06f 002c 	mvn.w	r0, #44	; 0x2c
 800229a:	f001 fd1d 	bl	8003cd8 <turn>
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200001c4 	.word	0x200001c4

080022ac <update>:
	sprintf(send_buffer, "home\n");
	uart_transmit(send_buffer, strlen(send_buffer));
	turn(180);
	reverse(-150);
}
void update(){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	static uint8_t L_open_count = 0;
	static uint8_t R_open_count = 0;
	//update current cell coords
	// at 400mm/s, 9-10 counts per loop
	switch (Mouse.heading) {
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <update+0x1a0>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b07      	cmp	r3, #7
 80022b6:	f200 8331 	bhi.w	800291c <update+0x670>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <update+0x14>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022e1 	.word	0x080022e1
 80022c4:	080023f3 	.word	0x080023f3
 80022c8:	08002475 	.word	0x08002475
 80022cc:	08002587 	.word	0x08002587
 80022d0:	08002609 	.word	0x08002609
 80022d4:	0800271b 	.word	0x0800271b
 80022d8:	0800279d 	.word	0x0800279d
 80022dc:	080028c7 	.word	0x080028c7
	case 0:
		// update coords
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 80022e0:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <update+0x1a4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2bcf      	cmp	r3, #207	; 0xcf
 80022e6:	dd45      	ble.n	8002374 <update+0xc8>
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <update+0x1a8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2bcf      	cmp	r3, #207	; 0xcf
 80022ee:	dd41      	ble.n	8002374 <update+0xc8>
			if (L_open_count == 0){
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <update+0x1ac>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <update+0x60>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y+1, WEST);
 80022f8:	4b54      	ldr	r3, [pc, #336]	; (800244c <update+0x1a0>)
 80022fa:	7859      	ldrb	r1, [r3, #1]
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <update+0x1a0>)
 80022fe:	789b      	ldrb	r3, [r3, #2]
 8002300:	3301      	adds	r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	2306      	movs	r3, #6
 8002306:	4855      	ldr	r0, [pc, #340]	; (800245c <update+0x1b0>)
 8002308:	f000 fb7c 	bl	8002a04 <add_wall>
			}
			if (R_open_count == 0){
 800230c:	4b54      	ldr	r3, [pc, #336]	; (8002460 <update+0x1b4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <update+0x7c>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y+1, EAST);
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <update+0x1a0>)
 8002316:	7859      	ldrb	r1, [r3, #1]
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <update+0x1a0>)
 800231a:	789b      	ldrb	r3, [r3, #2]
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	2302      	movs	r3, #2
 8002322:	484e      	ldr	r0, [pc, #312]	; (800245c <update+0x1b0>)
 8002324:	f000 fb6e 	bl	8002a04 <add_wall>
			}
			L_open_count = 0;
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <update+0x1ac>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <update+0x1b4>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]

			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <update+0x1a0>)
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	4a44      	ldr	r2, [pc, #272]	; (800244c <update+0x1a0>)
 800233a:	7892      	ldrb	r2, [r2, #2]
 800233c:	4619      	mov	r1, r3
 800233e:	4847      	ldr	r0, [pc, #284]	; (800245c <update+0x1b0>)
 8002340:	f000 fc9e 	bl	8002c80 <set_explored>
			Mouse.current_cell_y ++; //208 = (120*180)/33pi
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <update+0x1a0>)
 8002346:	789b      	ldrb	r3, [r3, #2]
 8002348:	3301      	adds	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <update+0x1a0>)
 800234e:	709a      	strb	r2, [r3, #2]

			L_acc -= COUNTS_PER_CELL;
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <update+0x1a4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3bd0      	subs	r3, #208	; 0xd0
 8002356:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <update+0x1a4>)
 8002358:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 800235a:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <update+0x1a8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3bd0      	subs	r3, #208	; 0xd0
 8002360:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <update+0x1a8>)
 8002362:	6013      	str	r3, [r2, #0]

			flood(exp_maze, target_x, target_y);
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <update+0x1b8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <update+0x1bc>)
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	483b      	ldr	r0, [pc, #236]	; (800245c <update+0x1b0>)
 8002370:	f000 fd8e 	bl	8002e90 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <update+0x1a4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b95      	cmp	r3, #149	; 0x95
 800237a:	dd19      	ble.n	80023b0 <update+0x104>
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <update+0x1a4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2bc8      	cmp	r3, #200	; 0xc8
 8002382:	dc15      	bgt.n	80023b0 <update+0x104>
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <update+0x1a8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b95      	cmp	r3, #149	; 0x95
 800238a:	dd11      	ble.n	80023b0 <update+0x104>
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <update+0x1a8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2bc8      	cmp	r3, #200	; 0xc8
 8002392:	dc0d      	bgt.n	80023b0 <update+0x104>
			if(measurements[1] < 200){
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <update+0x1c0>)
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2bc7      	cmp	r3, #199	; 0xc7
 800239a:	d809      	bhi.n	80023b0 <update+0x104>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y+1, NORTH);
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <update+0x1a0>)
 800239e:	7859      	ldrb	r1, [r3, #1]
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <update+0x1a0>)
 80023a2:	789b      	ldrb	r3, [r3, #2]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	482c      	ldr	r0, [pc, #176]	; (800245c <update+0x1b0>)
 80023ac:	f000 fb2a 	bl	8002a04 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 180){
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <update+0x1c0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <update+0x1c4>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b32      	cmp	r3, #50	; 0x32
 80023be:	dd06      	ble.n	80023ce <update+0x122>
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <update+0x1c0>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2bb4      	cmp	r3, #180	; 0xb4
 80023c6:	d902      	bls.n	80023ce <update+0x122>
			L_open_count = 1;
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <update+0x1ac>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 180){
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <update+0x1c0>)
 80023d0:	789b      	ldrb	r3, [r3, #2]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <update+0x1c4>)
 80023d6:	789b      	ldrb	r3, [r3, #2]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b32      	cmp	r3, #50	; 0x32
 80023dc:	f340 82a0 	ble.w	8002920 <update+0x674>
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <update+0x1c0>)
 80023e2:	789b      	ldrb	r3, [r3, #2]
 80023e4:	2bb4      	cmp	r3, #180	; 0xb4
 80023e6:	f240 829b 	bls.w	8002920 <update+0x674>
			R_open_count = 1;
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <update+0x1b4>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023f0:	e296      	b.n	8002920 <update+0x674>
	case 1:
		if (L_acc >= 295 && R_acc >= 295){
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <update+0x1a4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80023fa:	f340 8293 	ble.w	8002924 <update+0x678>
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <update+0x1a8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002406:	f340 828d 	ble.w	8002924 <update+0x678>
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <update+0x1a0>)
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <update+0x1a0>)
 8002410:	7892      	ldrb	r2, [r2, #2]
 8002412:	4619      	mov	r1, r3
 8002414:	4811      	ldr	r0, [pc, #68]	; (800245c <update+0x1b0>)
 8002416:	f000 fc33 	bl	8002c80 <set_explored>
			Mouse.current_cell_x ++; //sqrt(2) * 208
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <update+0x1a0>)
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	3301      	adds	r3, #1
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <update+0x1a0>)
 8002424:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <update+0x1a0>)
 8002428:	789b      	ldrb	r3, [r3, #2]
 800242a:	3301      	adds	r3, #1
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <update+0x1a0>)
 8002430:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <update+0x1a4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <update+0x1a4>)
 800243c:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <update+0x1a8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002446:	4a03      	ldr	r2, [pc, #12]	; (8002454 <update+0x1a8>)
 8002448:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 800244a:	e26b      	b.n	8002924 <update+0x678>
 800244c:	200001c4 	.word	0x200001c4
 8002450:	20000120 	.word	0x20000120
 8002454:	20000124 	.word	0x20000124
 8002458:	20002520 	.word	0x20002520
 800245c:	20000134 	.word	0x20000134
 8002460:	20002521 	.word	0x20002521
 8002464:	20000000 	.word	0x20000000
 8002468:	20000133 	.word	0x20000133
 800246c:	2000012c 	.word	0x2000012c
 8002470:	20000130 	.word	0x20000130
	case 2:
		// update coords
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 8002474:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <update+0x334>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2bcf      	cmp	r3, #207	; 0xcf
 800247a:	dd45      	ble.n	8002508 <update+0x25c>
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <update+0x338>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2bcf      	cmp	r3, #207	; 0xcf
 8002482:	dd41      	ble.n	8002508 <update+0x25c>
			if (L_open_count == 0){
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <update+0x33c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <update+0x1f4>
				add_wall(exp_maze, Mouse.current_cell_x+1, Mouse.current_cell_y, NORTH);
 800248c:	4b57      	ldr	r3, [pc, #348]	; (80025ec <update+0x340>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	3301      	adds	r3, #1
 8002492:	b2d9      	uxtb	r1, r3
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <update+0x340>)
 8002496:	789a      	ldrb	r2, [r3, #2]
 8002498:	2300      	movs	r3, #0
 800249a:	4855      	ldr	r0, [pc, #340]	; (80025f0 <update+0x344>)
 800249c:	f000 fab2 	bl	8002a04 <add_wall>
			}
			if (R_open_count == 0){
 80024a0:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <update+0x348>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <update+0x210>
				add_wall(exp_maze, Mouse.current_cell_x+1, Mouse.current_cell_y, SOUTH);
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <update+0x340>)
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <update+0x340>)
 80024b2:	789a      	ldrb	r2, [r3, #2]
 80024b4:	2304      	movs	r3, #4
 80024b6:	484e      	ldr	r0, [pc, #312]	; (80025f0 <update+0x344>)
 80024b8:	f000 faa4 	bl	8002a04 <add_wall>
			}
			L_open_count = 0;
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <update+0x33c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <update+0x348>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <update+0x340>)
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	4a47      	ldr	r2, [pc, #284]	; (80025ec <update+0x340>)
 80024ce:	7892      	ldrb	r2, [r2, #2]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4847      	ldr	r0, [pc, #284]	; (80025f0 <update+0x344>)
 80024d4:	f000 fbd4 	bl	8002c80 <set_explored>
			Mouse.current_cell_x ++; //208 = (120*180)/33pi
 80024d8:	4b44      	ldr	r3, [pc, #272]	; (80025ec <update+0x340>)
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	3301      	adds	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b42      	ldr	r3, [pc, #264]	; (80025ec <update+0x340>)
 80024e2:	705a      	strb	r2, [r3, #1]

			L_acc -= COUNTS_PER_CELL;
 80024e4:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <update+0x334>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3bd0      	subs	r3, #208	; 0xd0
 80024ea:	4a3d      	ldr	r2, [pc, #244]	; (80025e0 <update+0x334>)
 80024ec:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <update+0x338>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3bd0      	subs	r3, #208	; 0xd0
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <update+0x338>)
 80024f6:	6013      	str	r3, [r2, #0]
			flood(exp_maze, target_x, target_y);
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <update+0x34c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4a3f      	ldr	r2, [pc, #252]	; (80025fc <update+0x350>)
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	483b      	ldr	r0, [pc, #236]	; (80025f0 <update+0x344>)
 8002504:	f000 fcc4 	bl	8002e90 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <update+0x334>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b95      	cmp	r3, #149	; 0x95
 800250e:	dd19      	ble.n	8002544 <update+0x298>
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <update+0x334>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2bc8      	cmp	r3, #200	; 0xc8
 8002516:	dc15      	bgt.n	8002544 <update+0x298>
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <update+0x338>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b95      	cmp	r3, #149	; 0x95
 800251e:	dd11      	ble.n	8002544 <update+0x298>
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <update+0x338>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2bc8      	cmp	r3, #200	; 0xc8
 8002526:	dc0d      	bgt.n	8002544 <update+0x298>
			if(measurements[1] < 200){
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <update+0x354>)
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2bc7      	cmp	r3, #199	; 0xc7
 800252e:	d809      	bhi.n	8002544 <update+0x298>
				add_wall(exp_maze, Mouse.current_cell_x+1, Mouse.current_cell_y, EAST);
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <update+0x340>)
 8002532:	785b      	ldrb	r3, [r3, #1]
 8002534:	3301      	adds	r3, #1
 8002536:	b2d9      	uxtb	r1, r3
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <update+0x340>)
 800253a:	789a      	ldrb	r2, [r3, #2]
 800253c:	2302      	movs	r3, #2
 800253e:	482c      	ldr	r0, [pc, #176]	; (80025f0 <update+0x344>)
 8002540:	f000 fa60 	bl	8002a04 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 180){
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <update+0x354>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <update+0x358>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b32      	cmp	r3, #50	; 0x32
 8002552:	dd06      	ble.n	8002562 <update+0x2b6>
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <update+0x354>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2bb4      	cmp	r3, #180	; 0xb4
 800255a:	d902      	bls.n	8002562 <update+0x2b6>
			L_open_count = 1;
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <update+0x33c>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 180){
 8002562:	4b27      	ldr	r3, [pc, #156]	; (8002600 <update+0x354>)
 8002564:	789b      	ldrb	r3, [r3, #2]
 8002566:	461a      	mov	r2, r3
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <update+0x358>)
 800256a:	789b      	ldrb	r3, [r3, #2]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b32      	cmp	r3, #50	; 0x32
 8002570:	f340 81da 	ble.w	8002928 <update+0x67c>
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <update+0x354>)
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	2bb4      	cmp	r3, #180	; 0xb4
 800257a:	f240 81d5 	bls.w	8002928 <update+0x67c>
			R_open_count = 1;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <update+0x348>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002584:	e1d0      	b.n	8002928 <update+0x67c>
	case 3:
		if (L_acc >= 295 && R_acc >= 295){
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <update+0x334>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800258e:	f340 81cd 	ble.w	800292c <update+0x680>
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <update+0x338>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800259a:	f340 81c7 	ble.w	800292c <update+0x680>
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <update+0x340>)
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <update+0x340>)
 80025a4:	7892      	ldrb	r2, [r2, #2]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4811      	ldr	r0, [pc, #68]	; (80025f0 <update+0x344>)
 80025aa:	f000 fb69 	bl	8002c80 <set_explored>
			Mouse.current_cell_x ++;
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <update+0x340>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <update+0x340>)
 80025b8:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <update+0x340>)
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	3b01      	subs	r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <update+0x340>)
 80025c4:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <update+0x334>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <update+0x334>)
 80025d0:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <update+0x338>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 80025da:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <update+0x338>)
 80025dc:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 80025de:	e1a5      	b.n	800292c <update+0x680>
 80025e0:	20000120 	.word	0x20000120
 80025e4:	20000124 	.word	0x20000124
 80025e8:	20002520 	.word	0x20002520
 80025ec:	200001c4 	.word	0x200001c4
 80025f0:	20000134 	.word	0x20000134
 80025f4:	20002521 	.word	0x20002521
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000133 	.word	0x20000133
 8002600:	2000012c 	.word	0x2000012c
 8002604:	20000130 	.word	0x20000130
	case 4:
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 8002608:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <update+0x4c8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2bcf      	cmp	r3, #207	; 0xcf
 800260e:	dd45      	ble.n	800269c <update+0x3f0>
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <update+0x4cc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2bcf      	cmp	r3, #207	; 0xcf
 8002616:	dd41      	ble.n	800269c <update+0x3f0>
			if (L_open_count == 0){
 8002618:	4b58      	ldr	r3, [pc, #352]	; (800277c <update+0x4d0>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <update+0x388>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y-1, EAST);
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <update+0x4d4>)
 8002622:	7859      	ldrb	r1, [r3, #1]
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <update+0x4d4>)
 8002626:	789b      	ldrb	r3, [r3, #2]
 8002628:	3b01      	subs	r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	4855      	ldr	r0, [pc, #340]	; (8002784 <update+0x4d8>)
 8002630:	f000 f9e8 	bl	8002a04 <add_wall>
			}
			if (R_open_count == 0){
 8002634:	4b54      	ldr	r3, [pc, #336]	; (8002788 <update+0x4dc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <update+0x3a4>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y-1, WEST);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <update+0x4d4>)
 800263e:	7859      	ldrb	r1, [r3, #1]
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <update+0x4d4>)
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	3b01      	subs	r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	2306      	movs	r3, #6
 800264a:	484e      	ldr	r0, [pc, #312]	; (8002784 <update+0x4d8>)
 800264c:	f000 f9da 	bl	8002a04 <add_wall>
			}
			L_open_count = 0;
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <update+0x4d0>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 8002656:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <update+0x4dc>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <update+0x4d4>)
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	4a47      	ldr	r2, [pc, #284]	; (8002780 <update+0x4d4>)
 8002662:	7892      	ldrb	r2, [r2, #2]
 8002664:	4619      	mov	r1, r3
 8002666:	4847      	ldr	r0, [pc, #284]	; (8002784 <update+0x4d8>)
 8002668:	f000 fb0a 	bl	8002c80 <set_explored>
			Mouse.current_cell_y --;
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <update+0x4d4>)
 800266e:	789b      	ldrb	r3, [r3, #2]
 8002670:	3b01      	subs	r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <update+0x4d4>)
 8002676:	709a      	strb	r2, [r3, #2]

			L_acc -= COUNTS_PER_CELL;
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <update+0x4c8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3bd0      	subs	r3, #208	; 0xd0
 800267e:	4a3d      	ldr	r2, [pc, #244]	; (8002774 <update+0x4c8>)
 8002680:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <update+0x4cc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3bd0      	subs	r3, #208	; 0xd0
 8002688:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <update+0x4cc>)
 800268a:	6013      	str	r3, [r2, #0]
			flood(exp_maze, target_x, target_y);
 800268c:	4b3f      	ldr	r3, [pc, #252]	; (800278c <update+0x4e0>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <update+0x4e4>)
 8002692:	7812      	ldrb	r2, [r2, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	483b      	ldr	r0, [pc, #236]	; (8002784 <update+0x4d8>)
 8002698:	f000 fbfa 	bl	8002e90 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <update+0x4c8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b95      	cmp	r3, #149	; 0x95
 80026a2:	dd19      	ble.n	80026d8 <update+0x42c>
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <update+0x4c8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2bc8      	cmp	r3, #200	; 0xc8
 80026aa:	dc15      	bgt.n	80026d8 <update+0x42c>
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <update+0x4cc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b95      	cmp	r3, #149	; 0x95
 80026b2:	dd11      	ble.n	80026d8 <update+0x42c>
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <update+0x4cc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2bc8      	cmp	r3, #200	; 0xc8
 80026ba:	dc0d      	bgt.n	80026d8 <update+0x42c>
			if(measurements[1] < 200){
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <update+0x4e8>)
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2bc7      	cmp	r3, #199	; 0xc7
 80026c2:	d809      	bhi.n	80026d8 <update+0x42c>
				add_wall(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y-1, SOUTH);
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <update+0x4d4>)
 80026c6:	7859      	ldrb	r1, [r3, #1]
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <update+0x4d4>)
 80026ca:	789b      	ldrb	r3, [r3, #2]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	2304      	movs	r3, #4
 80026d2:	482c      	ldr	r0, [pc, #176]	; (8002784 <update+0x4d8>)
 80026d4:	f000 f996 	bl	8002a04 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0]- prev_measurements[0]>50)&& measurements[0] > 180){
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <update+0x4e8>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <update+0x4ec>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b32      	cmp	r3, #50	; 0x32
 80026e6:	dd06      	ble.n	80026f6 <update+0x44a>
 80026e8:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <update+0x4e8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2bb4      	cmp	r3, #180	; 0xb4
 80026ee:	d902      	bls.n	80026f6 <update+0x44a>
			L_open_count = 1;
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <update+0x4d0>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 180){
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <update+0x4e8>)
 80026f8:	789b      	ldrb	r3, [r3, #2]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <update+0x4ec>)
 80026fe:	789b      	ldrb	r3, [r3, #2]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b32      	cmp	r3, #50	; 0x32
 8002704:	f340 8114 	ble.w	8002930 <update+0x684>
 8002708:	4b22      	ldr	r3, [pc, #136]	; (8002794 <update+0x4e8>)
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	2bb4      	cmp	r3, #180	; 0xb4
 800270e:	f240 810f 	bls.w	8002930 <update+0x684>
			R_open_count = 1;
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <update+0x4dc>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002718:	e10a      	b.n	8002930 <update+0x684>
	case 5:
		if (L_acc >= 295 && R_acc >= 295){
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <update+0x4c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8002722:	f340 8107 	ble.w	8002934 <update+0x688>
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <update+0x4cc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800272e:	f340 8101 	ble.w	8002934 <update+0x688>
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <update+0x4d4>)
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <update+0x4d4>)
 8002738:	7892      	ldrb	r2, [r2, #2]
 800273a:	4619      	mov	r1, r3
 800273c:	4811      	ldr	r0, [pc, #68]	; (8002784 <update+0x4d8>)
 800273e:	f000 fa9f 	bl	8002c80 <set_explored>
			Mouse.current_cell_x --;
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <update+0x4d4>)
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	3b01      	subs	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <update+0x4d4>)
 800274c:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y --;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <update+0x4d4>)
 8002750:	789b      	ldrb	r3, [r3, #2]
 8002752:	3b01      	subs	r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <update+0x4d4>)
 8002758:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <update+0x4c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <update+0x4c8>)
 8002764:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <update+0x4cc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800276e:	4a02      	ldr	r2, [pc, #8]	; (8002778 <update+0x4cc>)
 8002770:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 8002772:	e0df      	b.n	8002934 <update+0x688>
 8002774:	20000120 	.word	0x20000120
 8002778:	20000124 	.word	0x20000124
 800277c:	20002520 	.word	0x20002520
 8002780:	200001c4 	.word	0x200001c4
 8002784:	20000134 	.word	0x20000134
 8002788:	20002521 	.word	0x20002521
 800278c:	20000000 	.word	0x20000000
 8002790:	20000133 	.word	0x20000133
 8002794:	2000012c 	.word	0x2000012c
 8002798:	20000130 	.word	0x20000130
	case 6:
		if (L_acc >= COUNTS_PER_CELL && R_acc >= COUNTS_PER_CELL){
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <update+0x698>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2bcf      	cmp	r3, #207	; 0xcf
 80027a2:	dd53      	ble.n	800284c <update+0x5a0>
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <update+0x69c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2bcf      	cmp	r3, #207	; 0xcf
 80027aa:	dd4f      	ble.n	800284c <update+0x5a0>
			if (L_open_count == 0){
 80027ac:	4b67      	ldr	r3, [pc, #412]	; (800294c <update+0x6a0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <update+0x51c>
				add_wall(exp_maze, Mouse.current_cell_x-1, Mouse.current_cell_y, SOUTH);
 80027b4:	4b66      	ldr	r3, [pc, #408]	; (8002950 <update+0x6a4>)
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b2d9      	uxtb	r1, r3
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <update+0x6a4>)
 80027be:	789a      	ldrb	r2, [r3, #2]
 80027c0:	2304      	movs	r3, #4
 80027c2:	4864      	ldr	r0, [pc, #400]	; (8002954 <update+0x6a8>)
 80027c4:	f000 f91e 	bl	8002a04 <add_wall>
			}
			if (R_open_count == 0){
 80027c8:	4b63      	ldr	r3, [pc, #396]	; (8002958 <update+0x6ac>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <update+0x538>
				add_wall(exp_maze, Mouse.current_cell_x-1, Mouse.current_cell_y, NORTH);
 80027d0:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <update+0x6a4>)
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <update+0x6a4>)
 80027da:	789a      	ldrb	r2, [r3, #2]
 80027dc:	2300      	movs	r3, #0
 80027de:	485d      	ldr	r0, [pc, #372]	; (8002954 <update+0x6a8>)
 80027e0:	f000 f910 	bl	8002a04 <add_wall>
			}
			L_open_count = 0;
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <update+0x6a0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
			R_open_count = 0;
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <update+0x6ac>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			if(measurements[1] < 200){
 80027f0:	4b5a      	ldr	r3, [pc, #360]	; (800295c <update+0x6b0>)
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	2bc7      	cmp	r3, #199	; 0xc7
 80027f6:	d809      	bhi.n	800280c <update+0x560>
				add_wall(exp_maze, Mouse.current_cell_x-1, Mouse.current_cell_y, WEST);
 80027f8:	4b55      	ldr	r3, [pc, #340]	; (8002950 <update+0x6a4>)
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b2d9      	uxtb	r1, r3
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <update+0x6a4>)
 8002802:	789a      	ldrb	r2, [r3, #2]
 8002804:	2306      	movs	r3, #6
 8002806:	4853      	ldr	r0, [pc, #332]	; (8002954 <update+0x6a8>)
 8002808:	f000 f8fc 	bl	8002a04 <add_wall>
			}
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <update+0x6a4>)
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <update+0x6a4>)
 8002812:	7892      	ldrb	r2, [r2, #2]
 8002814:	4619      	mov	r1, r3
 8002816:	484f      	ldr	r0, [pc, #316]	; (8002954 <update+0x6a8>)
 8002818:	f000 fa32 	bl	8002c80 <set_explored>
			Mouse.current_cell_x --;
 800281c:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <update+0x6a4>)
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	3b01      	subs	r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <update+0x6a4>)
 8002826:	705a      	strb	r2, [r3, #1]

			L_acc -= COUNTS_PER_CELL;
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <update+0x698>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3bd0      	subs	r3, #208	; 0xd0
 800282e:	4a45      	ldr	r2, [pc, #276]	; (8002944 <update+0x698>)
 8002830:	6013      	str	r3, [r2, #0]
			R_acc -= COUNTS_PER_CELL;
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <update+0x69c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3bd0      	subs	r3, #208	; 0xd0
 8002838:	4a43      	ldr	r2, [pc, #268]	; (8002948 <update+0x69c>)
 800283a:	6013      	str	r3, [r2, #0]
			flood(exp_maze, target_x, target_y);
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <update+0x6b4>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4a48      	ldr	r2, [pc, #288]	; (8002964 <update+0x6b8>)
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	4843      	ldr	r0, [pc, #268]	; (8002954 <update+0x6a8>)
 8002848:	f000 fb22 	bl	8002e90 <flood>
		}
		// set middle wall
		if (L_acc >= 150 && L_acc <= 200 && R_acc >= 150 && R_acc <= 200){
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <update+0x698>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b95      	cmp	r3, #149	; 0x95
 8002852:	dd19      	ble.n	8002888 <update+0x5dc>
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <update+0x698>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2bc8      	cmp	r3, #200	; 0xc8
 800285a:	dc15      	bgt.n	8002888 <update+0x5dc>
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <update+0x69c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b95      	cmp	r3, #149	; 0x95
 8002862:	dd11      	ble.n	8002888 <update+0x5dc>
 8002864:	4b38      	ldr	r3, [pc, #224]	; (8002948 <update+0x69c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2bc8      	cmp	r3, #200	; 0xc8
 800286a:	dc0d      	bgt.n	8002888 <update+0x5dc>
			if(measurements[1] < 200){
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <update+0x6b0>)
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	2bc7      	cmp	r3, #199	; 0xc7
 8002872:	d809      	bhi.n	8002888 <update+0x5dc>
				add_wall(exp_maze, Mouse.current_cell_x-1, Mouse.current_cell_y, WEST);
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <update+0x6a4>)
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	3b01      	subs	r3, #1
 800287a:	b2d9      	uxtb	r1, r3
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <update+0x6a4>)
 800287e:	789a      	ldrb	r2, [r3, #2]
 8002880:	2306      	movs	r3, #6
 8002882:	4834      	ldr	r0, [pc, #208]	; (8002954 <update+0x6a8>)
 8002884:	f000 f8be 	bl	8002a04 <add_wall>
			}
		}
		//set L and R walls
		if ((measurements[0] - prev_measurements[0]>50)&& measurements[0] > 180){
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <update+0x6b0>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <update+0x6bc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b32      	cmp	r3, #50	; 0x32
 8002896:	dd06      	ble.n	80028a6 <update+0x5fa>
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <update+0x6b0>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2bb4      	cmp	r3, #180	; 0xb4
 800289e:	d902      	bls.n	80028a6 <update+0x5fa>
			L_open_count = 1;
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <update+0x6a0>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		}
		if ((measurements[2] - prev_measurements[2]>50) && measurements[2] > 180){
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <update+0x6b0>)
 80028a8:	789b      	ldrb	r3, [r3, #2]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <update+0x6bc>)
 80028ae:	789b      	ldrb	r3, [r3, #2]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b32      	cmp	r3, #50	; 0x32
 80028b4:	dd40      	ble.n	8002938 <update+0x68c>
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <update+0x6b0>)
 80028b8:	789b      	ldrb	r3, [r3, #2]
 80028ba:	2bb4      	cmp	r3, #180	; 0xb4
 80028bc:	d93c      	bls.n	8002938 <update+0x68c>
			R_open_count = 1;
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <update+0x6ac>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80028c4:	e038      	b.n	8002938 <update+0x68c>
	case 7:
		if (L_acc >= 295 && R_acc >= 295){
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <update+0x698>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80028ce:	dd35      	ble.n	800293c <update+0x690>
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <update+0x69c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80028d8:	dd30      	ble.n	800293c <update+0x690>
			set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <update+0x6a4>)
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <update+0x6a4>)
 80028e0:	7892      	ldrb	r2, [r2, #2]
 80028e2:	4619      	mov	r1, r3
 80028e4:	481b      	ldr	r0, [pc, #108]	; (8002954 <update+0x6a8>)
 80028e6:	f000 f9cb 	bl	8002c80 <set_explored>
			Mouse.current_cell_x --;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <update+0x6a4>)
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <update+0x6a4>)
 80028f4:	705a      	strb	r2, [r3, #1]
			Mouse.current_cell_y ++;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <update+0x6a4>)
 80028f8:	789b      	ldrb	r3, [r3, #2]
 80028fa:	3301      	adds	r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <update+0x6a4>)
 8002900:	709a      	strb	r2, [r3, #2]

			L_acc -= 295;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <update+0x698>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 800290a:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <update+0x698>)
 800290c:	6013      	str	r3, [r2, #0]
			R_acc -= 295;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <update+0x69c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f2a3 1327 	subw	r3, r3, #295	; 0x127
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <update+0x69c>)
 8002918:	6013      	str	r3, [r2, #0]
//			flood(Mouse.target_x, Mouse.target_y);
		}
		break;
 800291a:	e00f      	b.n	800293c <update+0x690>
	default:
		break;
 800291c:	bf00      	nop
 800291e:	e00e      	b.n	800293e <update+0x692>
		break;
 8002920:	bf00      	nop
 8002922:	e00c      	b.n	800293e <update+0x692>
		break;
 8002924:	bf00      	nop
 8002926:	e00a      	b.n	800293e <update+0x692>
		break;
 8002928:	bf00      	nop
 800292a:	e008      	b.n	800293e <update+0x692>
		break;
 800292c:	bf00      	nop
 800292e:	e006      	b.n	800293e <update+0x692>
		break;
 8002930:	bf00      	nop
 8002932:	e004      	b.n	800293e <update+0x692>
		break;
 8002934:	bf00      	nop
 8002936:	e002      	b.n	800293e <update+0x692>
		break;
 8002938:	bf00      	nop
 800293a:	e000      	b.n	800293e <update+0x692>
		break;
 800293c:	bf00      	nop
	}
//	sprintf(send_buffer, "x:%d Y:%d LC:%d H:%d \n",(int)current_cell_x,(int)current_cell_y ,(int)L_acc, (int)heading);
//	uart_transmit(send_buffer, strlen(send_buffer));
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000120 	.word	0x20000120
 8002948:	20000124 	.word	0x20000124
 800294c:	20002520 	.word	0x20002520
 8002950:	200001c4 	.word	0x200001c4
 8002954:	20000134 	.word	0x20000134
 8002958:	20002521 	.word	0x20002521
 800295c:	2000012c 	.word	0x2000012c
 8002960:	20000000 	.word	0x20000000
 8002964:	20000133 	.word	0x20000133
 8002968:	20000130 	.word	0x20000130

0800296c <dlog>:
		//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
	}
	Laddress += MAZE_CELL_HEIGHT*0x10;
//	HAL_FLASH_Lock();
}
void dlog(){
 800296c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	af00      	add	r7, sp, #0
	static uint32_t address = 0x08030000;
	// Lacc, R_acc, heading, time
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, L_acc);
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <dlog+0x88>)
 8002974:	681e      	ldr	r6, [r3, #0]
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <dlog+0x8c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	17da      	asrs	r2, r3, #31
 800297c:	4618      	mov	r0, r3
 800297e:	4611      	mov	r1, r2
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4631      	mov	r1, r6
 8002986:	2002      	movs	r0, #2
 8002988:	f003 faf2 	bl	8005f70 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+4, R_acc);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <dlog+0x88>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1d19      	adds	r1, r3, #4
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <dlog+0x90>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	17da      	asrs	r2, r3, #31
 8002998:	469a      	mov	sl, r3
 800299a:	4693      	mov	fp, r2
 800299c:	4652      	mov	r2, sl
 800299e:	465b      	mov	r3, fp
 80029a0:	2002      	movs	r0, #2
 80029a2:	f003 fae5 	bl	8005f70 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+8, Mouse.heading);
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <dlog+0x88>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f103 0108 	add.w	r1, r3, #8
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <dlog+0x94>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	4698      	mov	r8, r3
 80029b8:	4691      	mov	r9, r2
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	2002      	movs	r0, #2
 80029c0:	f003 fad6 	bl	8005f70 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+12, HAL_GetTick());
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <dlog+0x88>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f103 060c 	add.w	r6, r3, #12
 80029cc:	f002 fe7c 	bl	80056c8 <HAL_GetTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2200      	movs	r2, #0
 80029d4:	461c      	mov	r4, r3
 80029d6:	4615      	mov	r5, r2
 80029d8:	4622      	mov	r2, r4
 80029da:	462b      	mov	r3, r5
 80029dc:	4631      	mov	r1, r6
 80029de:	2002      	movs	r0, #2
 80029e0:	f003 fac6 	bl	8005f70 <HAL_FLASH_Program>
	address += 0x10;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <dlog+0x88>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3310      	adds	r3, #16
 80029ea:	4a02      	ldr	r2, [pc, #8]	; (80029f4 <dlog+0x88>)
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bf00      	nop
 80029f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f4:	20000004 	.word	0x20000004
 80029f8:	20000120 	.word	0x20000120
 80029fc:	20000124 	.word	0x20000124
 8002a00:	200001c4 	.word	0x200001c4

08002a04 <add_wall>:
        } else if (dir == WEST && x > 0) {
            maze[x - 1][y].walls &= ~(1 << (EAST/2));
        }
    }
}
void add_wall(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t x, uint8_t y, uint8_t dir) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70bb      	strb	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	707b      	strb	r3, [r7, #1]
	if (y < MAZE_CELL_HEIGHT && y >= 0 && x < MAZE_CELL_WIDTH && x >= 0){
 8002a1e:	78bb      	ldrb	r3, [r7, #2]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	f200 80fc 	bhi.w	8002c1e <add_wall+0x21a>
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	f200 80f8 	bhi.w	8002c1e <add_wall+0x21a>
		if ((maze[x][y].walls & 0xF0) == 0) {
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	78ba      	ldrb	r2, [r7, #2]
 8002a40:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 80e8 	bne.w	8002c1e <add_wall+0x21a>
			maze[x][y].walls |= (0b01 << (dir)/2);
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	78ba      	ldrb	r2, [r7, #2]
 8002a60:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002a64:	b25a      	sxtb	r2, r3
 8002a66:	787b      	ldrb	r3, [r7, #1]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	2301      	movs	r3, #1
 8002a70:	408b      	lsls	r3, r1
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b259      	sxtb	r1, r3
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	461a      	mov	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	78ba      	ldrb	r2, [r7, #2]
 8002a8a:	b2c9      	uxtb	r1, r1
 8002a8c:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
			if (dir == NORTH) {
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d130      	bne.n	8002af8 <add_wall+0xf4>
				if (y + 1 < MAZE_CELL_HEIGHT) {
 8002a96:	78bb      	ldrb	r3, [r7, #2]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	f200 80c0 	bhi.w	8002c1e <add_wall+0x21a>
					if ((maze[x][y+1].walls & 0xF0) == 0) maze[x][y + 1].walls |= (0b01 << (SOUTH/2));
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	78ba      	ldrb	r2, [r7, #2]
 8002ab0:	3201      	adds	r2, #1
 8002ab2:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80af 	bne.w	8002c1e <add_wall+0x21a>
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	78ba      	ldrb	r2, [r7, #2]
 8002ad2:	3201      	adds	r2, #1
 8002ad4:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	78ba      	ldrb	r2, [r7, #2]
 8002aea:	3201      	adds	r2, #1
 8002aec:	f041 0104 	orr.w	r1, r1, #4
 8002af0:	b2c9      	uxtb	r1, r1
 8002af2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
					if ((maze[x-1][y].walls & 0xF0) == 0)maze[x - 1][y].walls |= (0b01 << (EAST/2));
				}
			}
		}
	}
}
 8002af6:	e092      	b.n	8002c1e <add_wall+0x21a>
			} else if (dir == EAST) {
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d12f      	bne.n	8002b5e <add_wall+0x15a>
				if (x + 1 < MAZE_CELL_WIDTH) {
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	f200 808c 	bhi.w	8002c1e <add_wall+0x21a>
					if ((maze[x+1][y].walls & 0xF0) == 0)maze[x + 1][y].walls |= (0b01 << (WEST/2));
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	78ba      	ldrb	r2, [r7, #2]
 8002b1a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d17b      	bne.n	8002c1e <add_wall+0x21a>
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	78ba      	ldrb	r2, [r7, #2]
 8002b3a:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	78ba      	ldrb	r2, [r7, #2]
 8002b52:	f041 0108 	orr.w	r1, r1, #8
 8002b56:	b2c9      	uxtb	r1, r1
 8002b58:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
}
 8002b5c:	e05f      	b.n	8002c1e <add_wall+0x21a>
			} else if (dir == SOUTH) {
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d12e      	bne.n	8002bc2 <add_wall+0x1be>
				if (y > 0) {
 8002b64:	78bb      	ldrb	r3, [r7, #2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d059      	beq.n	8002c1e <add_wall+0x21a>
					if ((maze[x][y-1].walls & 0xF0) == 0)maze[x][y - 1].walls |= (0b01 << (NORTH/2));
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	461a      	mov	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	78ba      	ldrb	r2, [r7, #2]
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d149      	bne.n	8002c1e <add_wall+0x21a>
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	78ba      	ldrb	r2, [r7, #2]
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	78ba      	ldrb	r2, [r7, #2]
 8002bb4:	3a01      	subs	r2, #1
 8002bb6:	f041 0101 	orr.w	r1, r1, #1
 8002bba:	b2c9      	uxtb	r1, r1
 8002bbc:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
}
 8002bc0:	e02d      	b.n	8002c1e <add_wall+0x21a>
			} else if (dir == WEST) {
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d12a      	bne.n	8002c1e <add_wall+0x21a>
				if (x > 0) {
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d027      	beq.n	8002c1e <add_wall+0x21a>
					if ((maze[x-1][y].walls & 0xF0) == 0)maze[x - 1][y].walls |= (0b01 << (EAST/2));
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3b0c      	subs	r3, #12
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	78ba      	ldrb	r2, [r7, #2]
 8002be0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d118      	bne.n	8002c1e <add_wall+0x21a>
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3b0c      	subs	r3, #12
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	78ba      	ldrb	r2, [r7, #2]
 8002bfe:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	3b0c      	subs	r3, #12
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	78ba      	ldrb	r2, [r7, #2]
 8002c14:	f041 0102 	orr.w	r1, r1, #2
 8002c18:	b2c9      	uxtb	r1, r1
 8002c1a:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <read_wall>:
uint8_t read_wall(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t x, uint8_t y, Direction dir){
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	4608      	mov	r0, r1
 8002c34:	4611      	mov	r1, r2
 8002c36:	461a      	mov	r2, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	70fb      	strb	r3, [r7, #3]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70bb      	strb	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
	if ((maze[x][y].walls & (0x01<<(dir/2)))==0){
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	fa42 f303 	asr.w	r3, r2, r3
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <read_wall+0x48>
		return 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <read_wall+0x4a>
	}
	else return 1;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <set_explored>:

void set_explored(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t x, uint8_t y) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	70bb      	strb	r3, [r7, #2]
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d81b      	bhi.n	8002cce <set_explored+0x4e>
 8002c96:	78bb      	ldrb	r3, [r7, #2]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d818      	bhi.n	8002cce <set_explored+0x4e>
        maze[x][y].walls |= 0xF0;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	78ba      	ldrb	r2, [r7, #2]
 8002cc4:	f061 010f 	orn	r1, r1, #15
 8002cc8:	b2c9      	uxtb	r1, r1
 8002cca:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
    }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <get_explored>:
uint8_t get_explored(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t x, uint8_t y) {
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	70bb      	strb	r3, [r7, #2]
    if (x >= 0 && x < MAZE_CELL_WIDTH && y >= 0 && y < MAZE_CELL_HEIGHT) {
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d815      	bhi.n	8002d1c <get_explored+0x42>
 8002cf0:	78bb      	ldrb	r3, [r7, #2]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d812      	bhi.n	8002d1c <get_explored+0x42>
        return (maze[x][y].walls & 0xF0) != 0;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	78ba      	ldrb	r2, [r7, #2]
 8002d08:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e000      	b.n	8002d1e <get_explored+0x44>
    }
    return 1;
 8002d1c:	2301      	movs	r3, #1
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <dir_of_lowest>:
uint8_t dir_of_lowest(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t x, uint8_t y) {
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
 8002d36:	4613      	mov	r3, r2
 8002d38:	70bb      	strb	r3, [r7, #2]
	uint8_t min = 255;
 8002d3a:	23ff      	movs	r3, #255	; 0xff
 8002d3c:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = NORTH;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73bb      	strb	r3, [r7, #14]
    if (read_wall(maze, x, y, NORTH) == 0) {
 8002d42:	78ba      	ldrb	r2, [r7, #2]
 8002d44:	78f9      	ldrb	r1, [r7, #3]
 8002d46:	2300      	movs	r3, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff6e 	bl	8002c2a <read_wall>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11f      	bne.n	8002d94 <dir_of_lowest+0x6a>
        if (maze[x][y + 1].dist < min) {
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	441a      	add	r2, r3
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d90f      	bls.n	8002d94 <dir_of_lowest+0x6a>
            min = maze[x][y + 1].dist;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	441a      	add	r2, r3
 8002d84:	78bb      	ldrb	r3, [r7, #2]
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	73fb      	strb	r3, [r7, #15]
            dir = NORTH;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(maze, x, y, EAST) == 0) {
 8002d94:	78ba      	ldrb	r2, [r7, #2]
 8002d96:	78f9      	ldrb	r1, [r7, #3]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff45 	bl	8002c2a <read_wall>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11f      	bne.n	8002de6 <dir_of_lowest+0xbc>
        if (maze[x + 1][y].dist < min) {
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	441a      	add	r2, r3
 8002db8:	78bb      	ldrb	r3, [r7, #2]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d90f      	bls.n	8002de6 <dir_of_lowest+0xbc>
            min = maze[x + 1][y].dist;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	78bb      	ldrb	r3, [r7, #2]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	73fb      	strb	r3, [r7, #15]
            dir = EAST;
 8002de2:	2302      	movs	r3, #2
 8002de4:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(maze, x, y, SOUTH) == 0) {
 8002de6:	78ba      	ldrb	r2, [r7, #2]
 8002de8:	78f9      	ldrb	r1, [r7, #3]
 8002dea:	2304      	movs	r3, #4
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff1c 	bl	8002c2a <read_wall>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11f      	bne.n	8002e38 <dir_of_lowest+0x10e>
        if (maze[x][y - 1].dist < min) {
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	441a      	add	r2, r3
 8002e08:	78bb      	ldrb	r3, [r7, #2]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d90f      	bls.n	8002e38 <dir_of_lowest+0x10e>
            min = maze[x][y - 1].dist;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	441a      	add	r2, r3
 8002e28:	78bb      	ldrb	r3, [r7, #2]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	73fb      	strb	r3, [r7, #15]
            dir = SOUTH;
 8002e34:	2304      	movs	r3, #4
 8002e36:	73bb      	strb	r3, [r7, #14]
        }
    }
    if (read_wall(maze, x, y, WEST) == 0) {
 8002e38:	78ba      	ldrb	r2, [r7, #2]
 8002e3a:	78f9      	ldrb	r1, [r7, #3]
 8002e3c:	2306      	movs	r3, #6
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fef3 	bl	8002c2a <read_wall>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11d      	bne.n	8002e86 <dir_of_lowest+0x15c>
        if (maze[x - 1][y].dist < min) {
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3b0c      	subs	r3, #12
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	441a      	add	r2, r3
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d90e      	bls.n	8002e86 <dir_of_lowest+0x15c>
            min = maze[x - 1][y].dist;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	3b0c      	subs	r3, #12
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	441a      	add	r2, r3
 8002e78:	78bb      	ldrb	r3, [r7, #2]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	73fb      	strb	r3, [r7, #15]
            dir = WEST;
 8002e82:	2306      	movs	r3, #6
 8002e84:	73bb      	strb	r3, [r7, #14]
        }
    }
    return dir;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <flood>:
void flood(Cell maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT], uint8_t ex, uint8_t ey) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	70bb      	strb	r3, [r7, #2]
	uint8_t nochange_flag = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
    maze[ex][ey].dist = 0;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	78bb      	ldrb	r3, [r7, #2]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	705a      	strb	r2, [r3, #1]

    while (nochange_flag == 0) {
 8002ebe:	e0e5      	b.n	800308c <flood+0x1fc>
    	uint8_t change_flag = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73bb      	strb	r3, [r7, #14]

        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	737b      	strb	r3, [r7, #13]
 8002ec8:	e0d7      	b.n	800307a <flood+0x1ea>
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8002eca:	2300      	movs	r3, #0
 8002ecc:	733b      	strb	r3, [r7, #12]
 8002ece:	e0cd      	b.n	800306c <flood+0x1dc>
                if (!(x == ex && y == ey)) {
 8002ed0:	7b7a      	ldrb	r2, [r7, #13]
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d104      	bne.n	8002ee2 <flood+0x52>
 8002ed8:	7b3a      	ldrb	r2, [r7, #12]
 8002eda:	78bb      	ldrb	r3, [r7, #2]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f000 80c2 	beq.w	8003066 <flood+0x1d6>
                	uint8_t min = MAZE_CELL_HEIGHT * MAZE_CELL_WIDTH -1;
 8002ee2:	2323      	movs	r3, #35	; 0x23
 8002ee4:	72fb      	strb	r3, [r7, #11]
                    if (read_wall(maze, x, y, NORTH) == 0) {
 8002ee6:	7b3a      	ldrb	r2, [r7, #12]
 8002ee8:	7b79      	ldrb	r1, [r7, #13]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff fe9c 	bl	8002c2a <read_wall>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11d      	bne.n	8002f34 <flood+0xa4>
                        if (maze[x][y + 1].dist < min) {
 8002ef8:	7b7a      	ldrb	r2, [r7, #13]
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	441a      	add	r2, r3
 8002f08:	7b3b      	ldrb	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	7afa      	ldrb	r2, [r7, #11]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d90d      	bls.n	8002f34 <flood+0xa4>
                            min = maze[x][y + 1].dist;
 8002f18:	7b7a      	ldrb	r2, [r7, #13]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	441a      	add	r2, r3
 8002f28:	7b3b      	ldrb	r3, [r7, #12]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(maze, x, y, EAST) == 0) {
 8002f34:	7b3a      	ldrb	r2, [r7, #12]
 8002f36:	7b79      	ldrb	r1, [r7, #13]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fe75 	bl	8002c2a <read_wall>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11d      	bne.n	8002f82 <flood+0xf2>
                        if (maze[x + 1][y].dist < min) {
 8002f46:	7b7b      	ldrb	r3, [r7, #13]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	441a      	add	r2, r3
 8002f58:	7b3b      	ldrb	r3, [r7, #12]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	7afa      	ldrb	r2, [r7, #11]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d90d      	bls.n	8002f82 <flood+0xf2>
                            min = maze[x + 1][y].dist;
 8002f66:	7b7b      	ldrb	r3, [r7, #13]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	441a      	add	r2, r3
 8002f78:	7b3b      	ldrb	r3, [r7, #12]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(maze, x, y, SOUTH) == 0) {
 8002f82:	7b3a      	ldrb	r2, [r7, #12]
 8002f84:	7b79      	ldrb	r1, [r7, #13]
 8002f86:	2304      	movs	r3, #4
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fe4e 	bl	8002c2a <read_wall>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <flood+0x140>
                        if (maze[x][y - 1].dist < min) {
 8002f94:	7b7a      	ldrb	r2, [r7, #13]
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	441a      	add	r2, r3
 8002fa4:	7b3b      	ldrb	r3, [r7, #12]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	7afa      	ldrb	r2, [r7, #11]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d90d      	bls.n	8002fd0 <flood+0x140>
                            min = maze[x][y - 1].dist;
 8002fb4:	7b7a      	ldrb	r2, [r7, #13]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	7b3b      	ldrb	r3, [r7, #12]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	72fb      	strb	r3, [r7, #11]
                        }
                    }
                    if (read_wall(maze, x, y, WEST) == 0) {
 8002fd0:	7b3a      	ldrb	r2, [r7, #12]
 8002fd2:	7b79      	ldrb	r1, [r7, #13]
 8002fd4:	2306      	movs	r3, #6
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe27 	bl	8002c2a <read_wall>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d11b      	bne.n	800301a <flood+0x18a>
                        if (maze[x - 1][y].dist < min) {
 8002fe2:	7b7a      	ldrb	r2, [r7, #13]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	3b0c      	subs	r3, #12
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	7b3b      	ldrb	r3, [r7, #12]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	7afa      	ldrb	r2, [r7, #11]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d90c      	bls.n	800301a <flood+0x18a>
                            min = maze[x - 1][y].dist;
 8003000:	7b7a      	ldrb	r2, [r7, #13]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	3b0c      	subs	r3, #12
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	441a      	add	r2, r3
 8003010:	7b3b      	ldrb	r3, [r7, #12]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	72fb      	strb	r3, [r7, #11]
                        }
                    }

                    if ((min != MAZE_CELL_HEIGHT * MAZE_CELL_WIDTH -1) && (maze[x][y].dist != min + 1)) {
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	2b23      	cmp	r3, #35	; 0x23
 800301e:	d022      	beq.n	8003066 <flood+0x1d6>
 8003020:	7b7a      	ldrb	r2, [r7, #13]
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	441a      	add	r2, r3
 8003030:	7b3b      	ldrb	r3, [r7, #12]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	461a      	mov	r2, r3
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	3301      	adds	r3, #1
 800303e:	429a      	cmp	r2, r3
 8003040:	d011      	beq.n	8003066 <flood+0x1d6>
                        change_flag = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	73bb      	strb	r3, [r7, #14]
                        maze[x][y].dist = min + 1;
 8003046:	7b7a      	ldrb	r2, [r7, #13]
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	441a      	add	r2, r3
 8003056:	7b3b      	ldrb	r3, [r7, #12]
 8003058:	7af9      	ldrb	r1, [r7, #11]
 800305a:	3101      	adds	r1, #1
 800305c:	b2c9      	uxtb	r1, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	460a      	mov	r2, r1
 8003064:	705a      	strb	r2, [r3, #1]
            for (uint8_t y = 0; y < MAZE_CELL_HEIGHT; y++) {
 8003066:	7b3b      	ldrb	r3, [r7, #12]
 8003068:	3301      	adds	r3, #1
 800306a:	733b      	strb	r3, [r7, #12]
 800306c:	7b3b      	ldrb	r3, [r7, #12]
 800306e:	2b05      	cmp	r3, #5
 8003070:	f67f af2e 	bls.w	8002ed0 <flood+0x40>
        for (uint8_t x = 0; x < MAZE_CELL_WIDTH; x++) {
 8003074:	7b7b      	ldrb	r3, [r7, #13]
 8003076:	3301      	adds	r3, #1
 8003078:	737b      	strb	r3, [r7, #13]
 800307a:	7b7b      	ldrb	r3, [r7, #13]
 800307c:	2b05      	cmp	r3, #5
 800307e:	f67f af24 	bls.w	8002eca <flood+0x3a>
                    }
                }
            }
        }
        // Check if there were no changes in this iteration
        if (change_flag == 0) {
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <flood+0x1fc>
            nochange_flag = 1;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
    while (nochange_flag == 0) {
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f43f af16 	beq.w	8002ec0 <flood+0x30>
        }
//        print_maze();
    }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <get_mid_direction>:
uint8_t get_mid_direction(uint8_t a , uint8_t b){
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	460a      	mov	r2, r1
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71bb      	strb	r3, [r7, #6]
    if ((a==0 && b ==2) || (a==2 && b ==0)) return 1;
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <get_mid_direction+0x1c>
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d005      	beq.n	80030c6 <get_mid_direction+0x28>
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d104      	bne.n	80030ca <get_mid_direction+0x2c>
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <get_mid_direction+0x2c>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e02a      	b.n	8003120 <get_mid_direction+0x82>
    else if ((a==2 && b ==4) || (a==4 && b ==2)) return 3;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d102      	bne.n	80030d6 <get_mid_direction+0x38>
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d005      	beq.n	80030e2 <get_mid_direction+0x44>
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <get_mid_direction+0x48>
 80030dc:	79bb      	ldrb	r3, [r7, #6]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d101      	bne.n	80030e6 <get_mid_direction+0x48>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e01c      	b.n	8003120 <get_mid_direction+0x82>
    else if ((a==4 && b ==6) || (a==6 && b ==4)) return 5;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d102      	bne.n	80030f2 <get_mid_direction+0x54>
 80030ec:	79bb      	ldrb	r3, [r7, #6]
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d005      	beq.n	80030fe <get_mid_direction+0x60>
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d104      	bne.n	8003102 <get_mid_direction+0x64>
 80030f8:	79bb      	ldrb	r3, [r7, #6]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d101      	bne.n	8003102 <get_mid_direction+0x64>
 80030fe:	2305      	movs	r3, #5
 8003100:	e00e      	b.n	8003120 <get_mid_direction+0x82>
    else if ((a==6 && b ==0) || (a==0 && b ==6)) return 7;
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d102      	bne.n	800310e <get_mid_direction+0x70>
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <get_mid_direction+0x7c>
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <get_mid_direction+0x80>
 8003114:	79bb      	ldrb	r3, [r7, #6]
 8003116:	2b06      	cmp	r3, #6
 8003118:	d101      	bne.n	800311e <get_mid_direction+0x80>
 800311a:	2307      	movs	r3, #7
 800311c:	e000      	b.n	8003120 <get_mid_direction+0x82>
    return 0;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <init_race_maze>:
void init_race_maze(){ //copy across to race maze, blocking off unexplored cells
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	e04e      	b.n	80031d6 <init_race_maze+0xaa>
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 8003138:	2300      	movs	r3, #0
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	e045      	b.n	80031ca <init_race_maze+0x9e>
			if (get_explored(exp_maze, i, j)==0){
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	4619      	mov	r1, r3
 8003148:	4829      	ldr	r0, [pc, #164]	; (80031f0 <init_race_maze+0xc4>)
 800314a:	f7ff fdc6 	bl	8002cda <get_explored>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <init_race_maze+0x40>
				race_maze[i][j].walls = 0xF;
 8003154:	4927      	ldr	r1, [pc, #156]	; (80031f4 <init_race_maze+0xc8>)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	4413      	add	r3, r2
 8003164:	220f      	movs	r2, #15
 8003166:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 800316a:	e014      	b.n	8003196 <init_race_maze+0x6a>
			}
			else{
				race_maze[i][j].walls = exp_maze[i][j].walls;
 800316c:	4920      	ldr	r1, [pc, #128]	; (80031f0 <init_race_maze+0xc4>)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8003180:	491c      	ldr	r1, [pc, #112]	; (80031f4 <init_race_maze+0xc8>)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4413      	add	r3, r2
 8003190:	4602      	mov	r2, r0
 8003192:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
			}
			race_maze[i][j].dist = exp_maze[i][j].dist;
 8003196:	4916      	ldr	r1, [pc, #88]	; (80031f0 <init_race_maze+0xc4>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	440b      	add	r3, r1
 80031aa:	7858      	ldrb	r0, [r3, #1]
 80031ac:	4911      	ldr	r1, [pc, #68]	; (80031f4 <init_race_maze+0xc8>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	440b      	add	r3, r1
 80031c0:	4602      	mov	r2, r0
 80031c2:	705a      	strb	r2, [r3, #1]
		for (int j = 0; j < MAZE_CELL_HEIGHT; j++){
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	ddb6      	ble.n	800313e <init_race_maze+0x12>
	for (int i = 0; i < MAZE_CELL_WIDTH; i++){
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	ddad      	ble.n	8003138 <init_race_maze+0xc>
		}
	}
	flood(race_maze, END_CELL_X, END_CELL_Y);
 80031dc:	2200      	movs	r2, #0
 80031de:	2105      	movs	r1, #5
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <init_race_maze+0xc8>)
 80031e2:	f7ff fe55 	bl	8002e90 <flood>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000134 	.word	0x20000134
 80031f4:	2000017c 	.word	0x2000017c

080031f8 <get_shortest_path>:
Path get_shortest_path(){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80031fe:	af00      	add	r7, sp, #0
 8003200:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003204:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003208:	6018      	str	r0, [r3, #0]
	uint8_t x = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t y = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Path temp;
	temp.len = 0;
 8003216:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800321a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

	while (!(x==END_CELL_X && y == END_CELL_Y)){
 8003224:	e05c      	b.n	80032e0 <get_shortest_path+0xe8>
		uint8_t p = dir_of_lowest(race_maze, x, y);
 8003226:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800322a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800322e:	4619      	mov	r1, r3
 8003230:	483c      	ldr	r0, [pc, #240]	; (8003324 <get_shortest_path+0x12c>)
 8003232:	f7ff fd7a 	bl	8002d2a <dir_of_lowest>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		temp.direction[temp.len] = p;
 800323c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003240:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003244:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003248:	4619      	mov	r1, r3
 800324a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800324e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003252:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8003256:	545a      	strb	r2, [r3, r1]
		temp.distance[temp.len] = 1;
 8003258:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800325c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003260:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003264:	461a      	mov	r2, r3
 8003266:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800326a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800326e:	4413      	add	r3, r2
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		temp.len++;
 8003276:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800327a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800327e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003282:	3301      	adds	r3, #1
 8003284:	b2da      	uxtb	r2, r3
 8003286:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800328a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800328e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		if (p == NORTH) y++;
 8003292:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <get_shortest_path+0xae>
 800329a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800329e:	3301      	adds	r3, #1
 80032a0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80032a4:	e01c      	b.n	80032e0 <get_shortest_path+0xe8>
		else if (p == EAST) x++;
 80032a6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d105      	bne.n	80032ba <get_shortest_path+0xc2>
 80032ae:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80032b2:	3301      	adds	r3, #1
 80032b4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80032b8:	e012      	b.n	80032e0 <get_shortest_path+0xe8>
		else if (p == SOUTH) y--;
 80032ba:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d105      	bne.n	80032ce <get_shortest_path+0xd6>
 80032c2:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80032cc:	e008      	b.n	80032e0 <get_shortest_path+0xe8>
		else if (p == WEST) x--;
 80032ce:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d104      	bne.n	80032e0 <get_shortest_path+0xe8>
 80032d6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80032da:	3b01      	subs	r3, #1
 80032dc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (!(x==END_CELL_X && y == END_CELL_Y)){
 80032e0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d19e      	bne.n	8003226 <get_shortest_path+0x2e>
 80032e8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d19a      	bne.n	8003226 <get_shortest_path+0x2e>
	}
	return temp;
 80032f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80032f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80032fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f240 2301 	movw	r3, #513	; 0x201
 800330a:	461a      	mov	r2, r3
 800330c:	f008 fa62 	bl	800b7d4 <memcpy>
}
 8003310:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003314:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000017c 	.word	0x2000017c

08003328 <detect_diagonals>:
Path detect_diagonals(Path p){
 8003328:	b084      	sub	sp, #16
 800332a:	b590      	push	{r4, r7, lr}
 800332c:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 8003330:	af00      	add	r7, sp, #0
 8003332:	f507 7444 	add.w	r4, r7, #784	; 0x310
 8003336:	f5a4 7443 	sub.w	r4, r4, #780	; 0x30c
 800333a:	6020      	str	r0, [r4, #0]
 800333c:	f507 7049 	add.w	r0, r7, #804	; 0x324
 8003340:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Path temp;
	temp.len = 0;
 8003344:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003348:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	uint8_t j = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	while(j < p.len){
 8003358:	e186      	b.n	8003668 <detect_diagonals+0x340>
		uint8_t diag[MAX_PATH_LENGTH] = {0};
 800335a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800335e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	3304      	adds	r3, #4
 8003368:	22fc      	movs	r2, #252	; 0xfc
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f008 fa3f 	bl	800b7f0 <memset>
		uint8_t diag_len = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e
		uint8_t diag_flag = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
		uint8_t hcounts = 2;
 800337e:	2302      	movs	r3, #2
 8003380:	f887 330c 	strb.w	r3, [r7, #780]	; 0x30c
		diag[diag_len] = p.direction[j];
 8003384:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8003388:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 800338c:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8003390:	443a      	add	r2, r7
 8003392:	7911      	ldrb	r1, [r2, #4]
 8003394:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8003398:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 800339c:	54d1      	strb	r1, [r2, r3]
		diag_len++;
 800339e:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 80033a2:	3301      	adds	r3, #1
 80033a4:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e

		if (j < p.len-2){
 80033a8:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 80033ac:	f897 3524 	ldrb.w	r3, [r7, #1316]	; 0x524
 80033b0:	3b02      	subs	r3, #2
 80033b2:	429a      	cmp	r2, r3
 80033b4:	da7f      	bge.n	80034b6 <detect_diagonals+0x18e>
			if ((p.direction[j] == p.direction[j+2])&& !(p.direction[j] == p.direction[j+1])){
 80033b6:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80033ba:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80033be:	443b      	add	r3, r7
 80033c0:	791a      	ldrb	r2, [r3, #4]
 80033c2:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80033c6:	3302      	adds	r3, #2
 80033c8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80033cc:	443b      	add	r3, r7
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d170      	bne.n	80034b6 <detect_diagonals+0x18e>
 80033d4:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80033d8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80033dc:	443b      	add	r3, r7
 80033de:	791a      	ldrb	r2, [r3, #4]
 80033e0:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80033e4:	3301      	adds	r3, #1
 80033e6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80033ea:	443b      	add	r3, r7
 80033ec:	791b      	ldrb	r3, [r3, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d061      	beq.n	80034b6 <detect_diagonals+0x18e>
				diag_flag = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
				diag[diag_len] = p.direction[j+1];
 80033f8:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 8003402:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8003406:	443a      	add	r2, r7
 8003408:	7911      	ldrb	r1, [r2, #4]
 800340a:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800340e:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8003412:	54d1      	strb	r1, [r2, r3]
				diag_len++;
 8003414:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 8003418:	3301      	adds	r3, #1
 800341a:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e
				diag[diag_len] = p.direction[j+2];
 800341e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 8003428:	f502 7248 	add.w	r2, r2, #800	; 0x320
 800342c:	443a      	add	r2, r7
 800342e:	7911      	ldrb	r1, [r2, #4]
 8003430:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8003434:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8003438:	54d1      	strb	r1, [r2, r3]
				diag_len++;
 800343a:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 800343e:	3301      	adds	r3, #1
 8003440:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e

				uint8_t i = j+3;
 8003444:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8003448:	3303      	adds	r3, #3
 800344a:	f887 330b 	strb.w	r3, [r7, #779]	; 0x30b
				while(i < p.len){
 800344e:	e02a      	b.n	80034a6 <detect_diagonals+0x17e>
					if ((p.direction[i] == p.direction[i-2])){
 8003450:	f897 330b 	ldrb.w	r3, [r7, #779]	; 0x30b
 8003454:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8003458:	443b      	add	r3, r7
 800345a:	791a      	ldrb	r2, [r3, #4]
 800345c:	f897 330b 	ldrb.w	r3, [r7, #779]	; 0x30b
 8003460:	3b02      	subs	r3, #2
 8003462:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8003466:	443b      	add	r3, r7
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d122      	bne.n	80034b4 <detect_diagonals+0x18c>
						hcounts++;
 800346e:	f897 330c 	ldrb.w	r3, [r7, #780]	; 0x30c
 8003472:	3301      	adds	r3, #1
 8003474:	f887 330c 	strb.w	r3, [r7, #780]	; 0x30c
						diag[diag_len] = p.direction[i];
 8003478:	f897 230b 	ldrb.w	r2, [r7, #779]	; 0x30b
 800347c:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 8003480:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8003484:	443a      	add	r2, r7
 8003486:	7911      	ldrb	r1, [r2, #4]
 8003488:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800348c:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8003490:	54d1      	strb	r1, [r2, r3]
						diag_len++;
 8003492:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 8003496:	3301      	adds	r3, #1
 8003498:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e
						i++;
 800349c:	f897 330b 	ldrb.w	r3, [r7, #779]	; 0x30b
 80034a0:	3301      	adds	r3, #1
 80034a2:	f887 330b 	strb.w	r3, [r7, #779]	; 0x30b
				while(i < p.len){
 80034a6:	f897 3524 	ldrb.w	r3, [r7, #1316]	; 0x524
 80034aa:	f897 230b 	ldrb.w	r2, [r7, #779]	; 0x30b
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3ce      	bcc.n	8003450 <detect_diagonals+0x128>
 80034b2:	e000      	b.n	80034b6 <detect_diagonals+0x18e>
					}
					else break;
 80034b4:	bf00      	nop
				}
			}
		}
		if (diag_flag == 0){
 80034b6:	f897 330d 	ldrb.w	r3, [r7, #781]	; 0x30d
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d133      	bne.n	8003526 <detect_diagonals+0x1fe>
			temp.direction[temp.len] = p.direction[j];
 80034be:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80034c2:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80034c6:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80034ca:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 80034ce:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80034d2:	443b      	add	r3, r7
 80034d4:	7919      	ldrb	r1, [r3, #4]
 80034d6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034da:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80034de:	5499      	strb	r1, [r3, r2]
			temp.distance[temp.len] = 2;
 80034e0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034e4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80034e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80034ec:	461a      	mov	r2, r3
 80034ee:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80034f2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80034f6:	4413      	add	r3, r2
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			temp.len++;
 80034fe:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003502:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800350a:	3301      	adds	r3, #1
 800350c:	b2da      	uxtb	r2, r3
 800350e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003512:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
			j++;
 800351a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800351e:	3301      	adds	r3, #1
 8003520:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
 8003524:	e0a0      	b.n	8003668 <detect_diagonals+0x340>
		}
		else{
			temp.direction[temp.len] = diag[0];
 8003526:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800352a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800352e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003532:	461a      	mov	r2, r3
 8003534:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003538:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800353c:	7819      	ldrb	r1, [r3, #0]
 800353e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003542:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003546:	5499      	strb	r1, [r3, r2]
			temp.distance[temp.len] = 1;
 8003548:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800354c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003550:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003554:	461a      	mov	r2, r3
 8003556:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800355a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800355e:	4413      	add	r3, r2
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			temp.len++;
 8003566:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800356a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800356e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003572:	3301      	adds	r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800357a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800357e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

			temp.direction[temp.len] = get_mid_direction(diag[0], diag[1]);
 8003582:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003586:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003590:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003594:	7859      	ldrb	r1, [r3, #1]
 8003596:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800359a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800359e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80035a2:	461c      	mov	r4, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7ff fd7a 	bl	800309e <get_mid_direction>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035b2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80035b6:	551a      	strb	r2, [r3, r4]
			temp.distance[temp.len] = hcounts;
 80035b8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035bc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80035c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80035c4:	461a      	mov	r2, r3
 80035c6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035ca:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80035ce:	4413      	add	r3, r2
 80035d0:	f897 230c 	ldrb.w	r2, [r7, #780]	; 0x30c
 80035d4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			temp.len++;
 80035d8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035dc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80035e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80035e4:	3301      	adds	r3, #1
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80035ec:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80035f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

			temp.direction[temp.len] = diag[diag_len-1];
 80035f4:	f897 330e 	ldrb.w	r3, [r7, #782]	; 0x30e
 80035f8:	3b01      	subs	r3, #1
 80035fa:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80035fe:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8003602:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 8003606:	4611      	mov	r1, r2
 8003608:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800360c:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8003610:	5cd2      	ldrb	r2, [r2, r3]
 8003612:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003616:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800361a:	545a      	strb	r2, [r3, r1]
			temp.distance[temp.len] = 1;
 800361c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003620:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003624:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003628:	461a      	mov	r2, r3
 800362a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800362e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003632:	4413      	add	r3, r2
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			temp.len++;
 800363a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800363e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003642:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800364e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

			j+= hcounts + 1;
 8003656:	f897 230c 	ldrb.w	r2, [r7, #780]	; 0x30c
 800365a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800365e:	4413      	add	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	while(j < p.len){
 8003668:	f897 3524 	ldrb.w	r3, [r7, #1316]	; 0x524
 800366c:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8003670:	429a      	cmp	r2, r3
 8003672:	f4ff ae72 	bcc.w	800335a <detect_diagonals+0x32>
		}
	}

	return temp;
 8003676:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800367a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003684:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f240 2301 	movw	r3, #513	; 0x201
 8003690:	461a      	mov	r2, r3
 8003692:	f008 f89f 	bl	800b7d4 <memcpy>
}
 8003696:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800369a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	f507 7745 	add.w	r7, r7, #788	; 0x314
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80036aa:	b004      	add	sp, #16
 80036ac:	4770      	bx	lr

080036ae <compress_path>:
Path compress_path(Path p){
 80036ae:	b084      	sub	sp, #16
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80036bc:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 80036c0:	6020      	str	r0, [r4, #0]
 80036c2:	f507 7009 	add.w	r0, r7, #548	; 0x224
 80036c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Path temp;
	temp.len = 0;
 80036ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80036ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	uint8_t i = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t sum = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	while (i < p.len){
 80036e4:	e069      	b.n	80037ba <compress_path+0x10c>
		sum = p.distance[i];
 80036e6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80036ea:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80036ee:	443b      	add	r3, r7
 80036f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80036f4:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		uint8_t j = i+1;
 80036f8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80036fc:	3301      	adds	r3, #1
 80036fe:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		while (j< p.len){
 8003702:	e01f      	b.n	8003744 <compress_path+0x96>
			if (p.direction[j] == p.direction[j - 1]){
 8003704:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8003708:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800370c:	443b      	add	r3, r7
 800370e:	791a      	ldrb	r2, [r3, #4]
 8003710:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8003714:	3b01      	subs	r3, #1
 8003716:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800371a:	443b      	add	r3, r7
 800371c:	791b      	ldrb	r3, [r3, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d117      	bne.n	8003752 <compress_path+0xa4>
				sum += p.distance[j];
 8003722:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8003726:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800372a:	443b      	add	r3, r7
 800372c:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8003730:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8003734:	4413      	add	r3, r2
 8003736:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j++;
 800373a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800373e:	3301      	adds	r3, #1
 8003740:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
		while (j< p.len){
 8003744:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8003748:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 800374c:	429a      	cmp	r2, r3
 800374e:	d3d9      	bcc.n	8003704 <compress_path+0x56>
 8003750:	e000      	b.n	8003754 <compress_path+0xa6>
			}
			else break;
 8003752:	bf00      	nop
		}
		temp.direction[temp.len] = p.direction[i];
 8003754:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003758:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800375c:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8003760:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 8003764:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003768:	443b      	add	r3, r7
 800376a:	7919      	ldrb	r1, [r3, #4]
 800376c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003774:	5499      	strb	r1, [r3, r2]
		temp.distance[temp.len] = sum;
 8003776:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800377a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800377e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003782:	461a      	mov	r2, r3
 8003784:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003788:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800378c:	4413      	add	r3, r2
 800378e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8003792:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		temp.len++;
 8003796:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800379a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800379e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80037aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		i=j;
 80037b2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80037b6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (i < p.len){
 80037ba:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 80037be:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d38f      	bcc.n	80036e6 <compress_path+0x38>
	}
	return temp;
 80037c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80037ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80037d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f240 2301 	movw	r3, #513	; 0x201
 80037e0:	461a      	mov	r2, r3
 80037e2:	f007 fff7 	bl	800b7d4 <memcpy>
}
 80037e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80037ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80037fa:	b004      	add	sp, #16
 80037fc:	4770      	bx	lr

080037fe <score_path>:
uint16_t score_path(Path p){
 80037fe:	b084      	sub	sp, #16
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	f107 0c10 	add.w	ip, r7, #16
 800380a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t score = 5*p.len;
 800380e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	4413      	add	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < p.len; i++) {
 800381c:	2300      	movs	r3, #0
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	e00b      	b.n	800383a <score_path+0x3c>
		score += p.distance[i];
 8003822:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b29a      	uxth	r2, r3
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	4413      	add	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < p.len; i++) {
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 800383e:	461a      	mov	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4293      	cmp	r3, r2
 8003844:	dbed      	blt.n	8003822 <score_path+0x24>
	}
	return score;
 8003846:	88fb      	ldrh	r3, [r7, #6]
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	b004      	add	sp, #16
 8003854:	4770      	bx	lr
	...

08003858 <race>:
void race(){
 8003858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385c:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8003860:	af7e      	add	r7, sp, #504	; 0x1f8
	init_race_maze();
 8003862:	f7ff fc63 	bl	800312c <init_race_maze>
	print_maze(race_maze);
 8003866:	48b0      	ldr	r0, [pc, #704]	; (8003b28 <race+0x2d0>)
 8003868:	f7fe fc24 	bl	80020b4 <print_maze>
	paths[0] = get_shortest_path();
 800386c:	4caf      	ldr	r4, [pc, #700]	; (8003b2c <race+0x2d4>)
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fcc0 	bl	80031f8 <get_shortest_path>
 8003878:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800387c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8003880:	4620      	mov	r0, r4
 8003882:	4619      	mov	r1, r3
 8003884:	f240 2301 	movw	r3, #513	; 0x201
 8003888:	461a      	mov	r2, r3
 800388a:	f007 ffa3 	bl	800b7d4 <memcpy>
	printpath(paths[0]);
 800388e:	4ba7      	ldr	r3, [pc, #668]	; (8003b2c <race+0x2d4>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4690      	mov	r8, r2
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4616      	mov	r6, r2
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4615      	mov	r5, r2
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4614      	mov	r4, r2
 80038a0:	4668      	mov	r0, sp
 80038a2:	3310      	adds	r3, #16
 80038a4:	f240 12f1 	movw	r2, #497	; 0x1f1
 80038a8:	4619      	mov	r1, r3
 80038aa:	f007 ff93 	bl	800b7d4 <memcpy>
 80038ae:	4640      	mov	r0, r8
 80038b0:	4631      	mov	r1, r6
 80038b2:	462a      	mov	r2, r5
 80038b4:	4623      	mov	r3, r4
 80038b6:	f7fe fb87 	bl	8001fc8 <printpath>
	paths[0] = detect_diagonals(paths[0]);
 80038ba:	4b9c      	ldr	r3, [pc, #624]	; (8003b2c <race+0x2d4>)
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f107 0408 	add.w	r4, r7, #8
 80038c2:	4b9a      	ldr	r3, [pc, #616]	; (8003b2c <race+0x2d4>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4690      	mov	r8, r2
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4616      	mov	r6, r2
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	4615      	mov	r5, r2
 80038d0:	4668      	mov	r0, sp
 80038d2:	330c      	adds	r3, #12
 80038d4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80038d8:	4619      	mov	r1, r3
 80038da:	f007 ff7b 	bl	800b7d4 <memcpy>
 80038de:	4641      	mov	r1, r8
 80038e0:	4632      	mov	r2, r6
 80038e2:	462b      	mov	r3, r5
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff fd1f 	bl	8003328 <detect_diagonals>
 80038ea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80038ee:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f240 2301 	movw	r3, #513	; 0x201
 80038fa:	461a      	mov	r2, r3
 80038fc:	f007 ff6a 	bl	800b7d4 <memcpy>
	printpath(paths[0]);
 8003900:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <race+0x2d4>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4690      	mov	r8, r2
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	4616      	mov	r6, r2
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4615      	mov	r5, r2
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	4614      	mov	r4, r2
 8003912:	4668      	mov	r0, sp
 8003914:	3310      	adds	r3, #16
 8003916:	f240 12f1 	movw	r2, #497	; 0x1f1
 800391a:	4619      	mov	r1, r3
 800391c:	f007 ff5a 	bl	800b7d4 <memcpy>
 8003920:	4640      	mov	r0, r8
 8003922:	4631      	mov	r1, r6
 8003924:	462a      	mov	r2, r5
 8003926:	4623      	mov	r3, r4
 8003928:	f7fe fb4e 	bl	8001fc8 <printpath>
	paths[0] = compress_path(paths[0]);
 800392c:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <race+0x2d4>)
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	f107 0408 	add.w	r4, r7, #8
 8003934:	4b7d      	ldr	r3, [pc, #500]	; (8003b2c <race+0x2d4>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4690      	mov	r8, r2
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4616      	mov	r6, r2
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4615      	mov	r5, r2
 8003942:	4668      	mov	r0, sp
 8003944:	330c      	adds	r3, #12
 8003946:	f240 12f5 	movw	r2, #501	; 0x1f5
 800394a:	4619      	mov	r1, r3
 800394c:	f007 ff42 	bl	800b7d4 <memcpy>
 8003950:	4641      	mov	r1, r8
 8003952:	4632      	mov	r2, r6
 8003954:	462b      	mov	r3, r5
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff fea9 	bl	80036ae <compress_path>
 800395c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003960:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	f240 2301 	movw	r3, #513	; 0x201
 800396c:	461a      	mov	r2, r3
 800396e:	f007 ff31 	bl	800b7d4 <memcpy>
	printpath(paths[0]);
 8003972:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <race+0x2d4>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4690      	mov	r8, r2
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4616      	mov	r6, r2
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4615      	mov	r5, r2
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	4614      	mov	r4, r2
 8003984:	4668      	mov	r0, sp
 8003986:	3310      	adds	r3, #16
 8003988:	f240 12f1 	movw	r2, #497	; 0x1f1
 800398c:	4619      	mov	r1, r3
 800398e:	f007 ff21 	bl	800b7d4 <memcpy>
 8003992:	4640      	mov	r0, r8
 8003994:	4631      	mov	r1, r6
 8003996:	462a      	mov	r2, r5
 8003998:	4623      	mov	r3, r4
 800399a:	f7fe fb15 	bl	8001fc8 <printpath>
	sprintf(send_buffer, "%d\n\n", score_path(paths[0]));
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <race+0x2d4>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4690      	mov	r8, r2
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4616      	mov	r6, r2
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4615      	mov	r5, r2
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4614      	mov	r4, r2
 80039b0:	4668      	mov	r0, sp
 80039b2:	3310      	adds	r3, #16
 80039b4:	f240 12f1 	movw	r2, #497	; 0x1f1
 80039b8:	4619      	mov	r1, r3
 80039ba:	f007 ff0b 	bl	800b7d4 <memcpy>
 80039be:	4640      	mov	r0, r8
 80039c0:	4631      	mov	r1, r6
 80039c2:	462a      	mov	r2, r5
 80039c4:	4623      	mov	r3, r4
 80039c6:	f7ff ff1a 	bl	80037fe <score_path>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	4958      	ldr	r1, [pc, #352]	; (8003b30 <race+0x2d8>)
 80039d0:	4858      	ldr	r0, [pc, #352]	; (8003b34 <race+0x2dc>)
 80039d2:	f007 ff15 	bl	800b800 <siprintf>
	uart_transmit(send_buffer, strlen(send_buffer));
 80039d6:	4857      	ldr	r0, [pc, #348]	; (8003b34 <race+0x2dc>)
 80039d8:	f7fc fc02 	bl	80001e0 <strlen>
 80039dc:	4603      	mov	r3, r0
 80039de:	4619      	mov	r1, r3
 80039e0:	4854      	ldr	r0, [pc, #336]	; (8003b34 <race+0x2dc>)
 80039e2:	f001 fd97 	bl	8005514 <uart_transmit>
	HAL_Delay(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f001 fe7a 	bl	80056e0 <HAL_Delay>
	for (int i = 0; i<paths[0].len; i++){
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80039f2:	e084      	b.n	8003afe <race+0x2a6>
		uint8_t dir = paths[0].direction[i];
 80039f4:	4a4d      	ldr	r2, [pc, #308]	; (8003b2c <race+0x2d4>)
 80039f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
		turn_to_direction(dir);
 8003a02:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fc00 	bl	800220c <turn_to_direction>
		HAL_Delay(100);
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	f001 fe67 	bl	80056e0 <HAL_Delay>
		uint16_t mm = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		if ((dir == 1)||(dir == 3)||(dir == 5)||(dir == 7)){
 8003a18:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00b      	beq.n	8003a38 <race+0x1e0>
 8003a20:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d007      	beq.n	8003a38 <race+0x1e0>
 8003a28:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d003      	beq.n	8003a38 <race+0x1e0>
 8003a30:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d11e      	bne.n	8003a76 <race+0x21e>
			mm = (int)(((paths[0].distance[i])*104*1.4142))-20;
 8003a38:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <race+0x2d4>)
 8003a3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	2368      	movs	r3, #104	; 0x68
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fd70 	bl	8000534 <__aeabi_i2d>
 8003a54:	a332      	add	r3, pc, #200	; (adr r3, 8003b20 <race+0x2c8>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fdd5 	bl	8000608 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f7fc ffe1 	bl	8000a2c <__aeabi_d2iz>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b14      	subs	r3, #20
 8003a70:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8003a74:	e00f      	b.n	8003a96 <race+0x23e>
		}
		else {
			mm = (int)((paths[0].distance[i]*104));
 8003a76:	4a2d      	ldr	r2, [pc, #180]	; (8003b2c <race+0x2d4>)
 8003a78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	0052      	lsls	r2, r2, #1
 8003a8a:	441a      	add	r2, r3
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
		}
		if (i==0) mm-=10;
 8003a96:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <race+0x252>
 8003a9e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8003aa2:	3b0a      	subs	r3, #10
 8003aa4:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
 8003aa8:	e00d      	b.n	8003ac6 <race+0x26e>
		else if (paths[0].distance[i] != 1) mm-= 60;
 8003aaa:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <race+0x2d4>)
 8003aac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d004      	beq.n	8003ac6 <race+0x26e>
 8003abc:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8003ac0:	3b3c      	subs	r3, #60	; 0x3c
 8003ac2:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212

		sprintf(send_buffer, "%d\n\n", mm);
 8003ac6:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8003aca:	461a      	mov	r2, r3
 8003acc:	4918      	ldr	r1, [pc, #96]	; (8003b30 <race+0x2d8>)
 8003ace:	4819      	ldr	r0, [pc, #100]	; (8003b34 <race+0x2dc>)
 8003ad0:	f007 fe96 	bl	800b800 <siprintf>
		uart_transmit(send_buffer, strlen(send_buffer));
 8003ad4:	4817      	ldr	r0, [pc, #92]	; (8003b34 <race+0x2dc>)
 8003ad6:	f7fc fb83 	bl	80001e0 <strlen>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4619      	mov	r1, r3
 8003ade:	4815      	ldr	r0, [pc, #84]	; (8003b34 <race+0x2dc>)
 8003ae0:	f001 fd18 	bl	8005514 <uart_transmit>
		race_forward(mm);
 8003ae4:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd31 	bl	8004550 <race_forward>
		HAL_Delay(100);
 8003aee:	2064      	movs	r0, #100	; 0x64
 8003af0:	f001 fdf6 	bl	80056e0 <HAL_Delay>
	for (int i = 0; i<paths[0].len; i++){
 8003af4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003af8:	3301      	adds	r3, #1
 8003afa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <race+0x2d4>)
 8003b00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003b04:	461a      	mov	r2, r3
 8003b06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f6ff af72 	blt.w	80039f4 <race+0x19c>
	}
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b1e:	bf00      	nop
 8003b20:	2de00d1b 	.word	0x2de00d1b
 8003b24:	3ff6a090 	.word	0x3ff6a090
 8003b28:	2000017c 	.word	0x2000017c
 8003b2c:	200001c8 	.word	0x200001c8
 8003b30:	0800c27c 	.word	0x0800c27c
 8003b34:	2000009c 	.word	0x2000009c

08003b38 <motorsInit>:

extern Cell exp_maze[MAZE_CELL_WIDTH][MAZE_CELL_HEIGHT];
extern MouseStruct Mouse;
extern uint8_t measurements[3]; //L:M:R
extern char send_buffer[64];
void motorsInit(){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4818      	ldr	r0, [pc, #96]	; (8003ba0 <motorsInit+0x68>)
 8003b40:	f005 fe16 	bl	8009770 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003b44:	2108      	movs	r1, #8
 8003b46:	4816      	ldr	r0, [pc, #88]	; (8003ba0 <motorsInit+0x68>)
 8003b48:	f005 fe12 	bl	8009770 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <motorsInit+0x68>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <motorsInit+0x68>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <motorsInit+0x6c>)
 8003b60:	f005 fe06 	bl	8009770 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003b64:	2104      	movs	r1, #4
 8003b66:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <motorsInit+0x6c>)
 8003b68:	f005 fe02 	bl	8009770 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <motorsInit+0x6c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <motorsInit+0x6c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003b7c:	213c      	movs	r1, #60	; 0x3c
 8003b7e:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <motorsInit+0x70>)
 8003b80:	f005 ff4c 	bl	8009a1c <HAL_TIM_Encoder_Start>
	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003b84:	213c      	movs	r1, #60	; 0x3c
 8003b86:	4809      	ldr	r0, [pc, #36]	; (8003bac <motorsInit+0x74>)
 8003b88:	f005 ff48 	bl	8009a1c <HAL_TIM_Encoder_Start>
	  htim3.Instance->CNT = 0;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <motorsInit+0x70>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <motorsInit+0x74>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20002374 	.word	0x20002374
 8003ba4:	200023bc 	.word	0x200023bc
 8003ba8:	20002404 	.word	0x20002404
 8003bac:	2000244c 	.word	0x2000244c

08003bb0 <reset_counts>:
void reset_counts(){
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
	  htim3.Instance->CNT = 0;
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <reset_counts+0x80>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <reset_counts+0x84>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
//	  L_speed_setpoint = 0; //mm/s
//	  R_speed_setpoint = 0;//mm/s
	  L_prev_enc_count = 0;
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <reset_counts+0x88>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	801a      	strh	r2, [r3, #0]
	  R_prev_enc_count = 0;
 8003bca:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <reset_counts+0x8c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	801a      	strh	r2, [r3, #0]
	  L_ctrl_signal = 0;
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <reset_counts+0x90>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	  R_ctrl_signal = 0;
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <reset_counts+0x94>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
	  L_error = 0;
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <reset_counts+0x98>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
	  R_error = 0;
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <reset_counts+0x9c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
	  L_acc_error = 0;
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <reset_counts+0xa0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
	  R_acc_error = 0;
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <reset_counts+0xa4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
	  L_acc = 0;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <reset_counts+0xa8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
	  R_acc = 0;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <reset_counts+0xac>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
	  Dist_error_acc = 0;
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <reset_counts+0xb0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
	  //Motor 1
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <reset_counts+0xb4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <reset_counts+0xb4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c
	  //Motor 2
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <reset_counts+0xb8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <reset_counts+0xb8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20002404 	.word	0x20002404
 8003c34:	2000244c 	.word	0x2000244c
 8003c38:	20000102 	.word	0x20000102
 8003c3c:	20000104 	.word	0x20000104
 8003c40:	20000108 	.word	0x20000108
 8003c44:	2000010c 	.word	0x2000010c
 8003c48:	20000110 	.word	0x20000110
 8003c4c:	20000114 	.word	0x20000114
 8003c50:	20000118 	.word	0x20000118
 8003c54:	2000011c 	.word	0x2000011c
 8003c58:	20000120 	.word	0x20000120
 8003c5c:	20000124 	.word	0x20000124
 8003c60:	20000128 	.word	0x20000128
 8003c64:	20002374 	.word	0x20002374
 8003c68:	200023bc 	.word	0x200023bc

08003c6c <reverse>:
	}
	smooth_stop(40);

	reset_counts();
}
void reverse(int16_t velocity){ // velocity in mm/s, omega in deg/s
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	80fb      	strh	r3, [r7, #6]
	L_speed_setpoint = velocity; //mm/s
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <reverse+0x64>)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	8013      	strh	r3, [r2, #0]
	R_speed_setpoint = velocity;//mm/s
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <reverse+0x68>)
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	8013      	strh	r3, [r2, #0]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8003c82:	f001 fd21 	bl	80056c8 <HAL_GetTick>
 8003c86:	60f8      	str	r0, [r7, #12]
	uint8_t count = 30;
 8003c88:	231e      	movs	r3, #30
 8003c8a:	72fb      	strb	r3, [r7, #11]
	while(count>0){
 8003c8c:	e016      	b.n	8003cbc <reverse+0x50>
		if (HAL_GetTick() - prev_ctr_loop_time > STR_CONTROL_LOOP_PERIOD_MS-1){
 8003c8e:	f001 fd1b 	bl	80056c8 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b13      	cmp	r3, #19
 8003c9a:	d90f      	bls.n	8003cbc <reverse+0x50>
			prev_ctr_loop_time = HAL_GetTick();
 8003c9c:	f001 fd14 	bl	80056c8 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

			R_motor_feedback_control(0);
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f000 fa5c 	bl	8004160 <R_motor_feedback_control>
			L_motor_feedback_control(0);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f000 fb55 	bl	8004358 <L_motor_feedback_control>
			update();
 8003cae:	f7fe fafd 	bl	80022ac <update>
			dlog();
 8003cb2:	f7fe fe5b 	bl	800296c <dlog>
			count--;
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	72fb      	strb	r3, [r7, #11]
	while(count>0){
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <reverse+0x22>
		}
	}
	reset_counts();
 8003cc2:	f7ff ff75 	bl	8003bb0 <reset_counts>
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200000fe 	.word	0x200000fe
 8003cd4:	20000100 	.word	0x20000100

08003cd8 <turn>:
void turn(int16_t deg){
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
	reset_counts();
 8003ce2:	f7ff ff65 	bl	8003bb0 <reset_counts>
	int16_t L_count_target = (int)(( (WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360.0))+ abs(deg)/deg);
 8003ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cea:	f242 52f8 	movw	r2, #9720	; 0x25f8
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fc1e 	bl	8000534 <__aeabi_i2d>
 8003cf8:	a3b3      	add	r3, pc, #716	; (adr r3, 8003fc8 <turn+0x2f0>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fdad 	bl	800085c <__aeabi_ddiv>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4614      	mov	r4, r2
 8003d08:	461d      	mov	r5, r3
 8003d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	425b      	neglt	r3, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fc07 	bl	8000534 <__aeabi_i2d>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fab5 	bl	800029c <__adddf3>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc fe77 	bl	8000a2c <__aeabi_d2iz>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
	int16_t R_count_target = (int)((-(WHEEL_SPACING_MM*deg*COUNTS_PER_ROTATION)/(WHEEL_DIAMETER_MM*360.0))+ abs(deg)/deg);
 8003d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d46:	4aa2      	ldr	r2, [pc, #648]	; (8003fd0 <turn+0x2f8>)
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fbf1 	bl	8000534 <__aeabi_i2d>
 8003d52:	a39d      	add	r3, pc, #628	; (adr r3, 8003fc8 <turn+0x2f0>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f7fc fd80 	bl	800085c <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4614      	mov	r4, r2
 8003d62:	461d      	mov	r5, r3
 8003d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bfb8      	it	lt
 8003d6c:	425b      	neglt	r3, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d76:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fbda 	bl	8000534 <__aeabi_i2d>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4620      	mov	r0, r4
 8003d86:	4629      	mov	r1, r5
 8003d88:	f7fc fa88 	bl	800029c <__adddf3>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7fc fe4a 	bl	8000a2c <__aeabi_d2iz>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	813b      	strh	r3, [r7, #8]
	int16_t L_prev_error = L_count_target;
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	82fb      	strh	r3, [r7, #22]
	int16_t R_prev_error = R_count_target;
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	82bb      	strh	r3, [r7, #20]

	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8003da4:	f001 fc90 	bl	80056c8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]
	uint8_t turn_cmplt = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
	uint16_t max_loops = 65; //max time before stop
 8003dae:	2341      	movs	r3, #65	; 0x41
 8003db0:	81bb      	strh	r3, [r7, #12]
	while(turn_cmplt == 0){
 8003db2:	e173      	b.n	800409c <turn+0x3c4>
		if (HAL_GetTick() - prev_ctr_loop_time > TURN_CONTROL_LOOP_PERIOD_MS-1){
 8003db4:	f001 fc88 	bl	80056c8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	f240 816c 	bls.w	800409c <turn+0x3c4>
			prev_ctr_loop_time = HAL_GetTick();
 8003dc4:	f001 fc80 	bl	80056c8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]
			R_prev_enc_count = htim3.Instance->CNT;
 8003dca:	4b82      	ldr	r3, [pc, #520]	; (8003fd4 <turn+0x2fc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b21a      	sxth	r2, r3
 8003dd2:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <turn+0x300>)
 8003dd4:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 8003dd6:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <turn+0x304>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b21a      	sxth	r2, r3
 8003dde:	4b80      	ldr	r3, [pc, #512]	; (8003fe0 <turn+0x308>)
 8003de0:	801a      	strh	r2, [r3, #0]
			R_acc = htim3.Instance->CNT;
 8003de2:	4b7c      	ldr	r3, [pc, #496]	; (8003fd4 <turn+0x2fc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b7e      	ldr	r3, [pc, #504]	; (8003fe4 <turn+0x30c>)
 8003dec:	601a      	str	r2, [r3, #0]
			L_acc = htim5.Instance->CNT;
 8003dee:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <turn+0x304>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <turn+0x310>)
 8003df8:	601a      	str	r2, [r3, #0]
//			Right;
			R_error = R_count_target - R_prev_enc_count;
 8003dfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003dfe:	4a76      	ldr	r2, [pc, #472]	; (8003fd8 <turn+0x300>)
 8003e00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	4a79      	ldr	r2, [pc, #484]	; (8003fec <turn+0x314>)
 8003e08:	6013      	str	r3, [r2, #0]
			//if (abs(R_error)<5) R_acc_error += R_error;
			R_ctrl_signal = R_Kpt*R_error + R_Kdt*(R_error-R_prev_error)*100;// + R_Kit*R_acc_error;
 8003e0a:	4b78      	ldr	r3, [pc, #480]	; (8003fec <turn+0x314>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb8f 	bl	8000534 <__aeabi_i2d>
 8003e16:	4604      	mov	r4, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4b74      	ldr	r3, [pc, #464]	; (8003fec <turn+0x314>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fb85 	bl	8000534 <__aeabi_i2d>
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <turn+0x318>)
 8003e30:	f7fc fbea 	bl	8000608 <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <turn+0x31c>)
 8003e42:	f7fc fbe1 	bl	8000608 <__aeabi_dmul>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f7fc fa25 	bl	800029c <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fde7 	bl	8000a2c <__aeabi_d2iz>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <turn+0x320>)
 8003e62:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal > 0) R_ctrl_signal += R_ff_offset_t;
 8003e64:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <turn+0x320>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dd04      	ble.n	8003e76 <turn+0x19e>
 8003e6c:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <turn+0x320>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	337d      	adds	r3, #125	; 0x7d
 8003e72:	4a61      	ldr	r2, [pc, #388]	; (8003ff8 <turn+0x320>)
 8003e74:	6013      	str	r3, [r2, #0]
			if (R_ctrl_signal < 0) R_ctrl_signal -= R_ff_offset_t;
 8003e76:	4b60      	ldr	r3, [pc, #384]	; (8003ff8 <turn+0x320>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da04      	bge.n	8003e88 <turn+0x1b0>
 8003e7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <turn+0x320>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3b7d      	subs	r3, #125	; 0x7d
 8003e84:	4a5c      	ldr	r2, [pc, #368]	; (8003ff8 <turn+0x320>)
 8003e86:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= 300) R_ctrl_signal = 300;
 8003e88:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <turn+0x320>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003e90:	db03      	blt.n	8003e9a <turn+0x1c2>
 8003e92:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <turn+0x320>)
 8003e94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e98:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -300) R_ctrl_signal = -300;
 8003e9a:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <turn+0x320>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8003ea2:	dc02      	bgt.n	8003eaa <turn+0x1d2>
 8003ea4:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <turn+0x320>)
 8003ea6:	4a55      	ldr	r2, [pc, #340]	; (8003ffc <turn+0x324>)
 8003ea8:	601a      	str	r2, [r3, #0]

			if (R_ctrl_signal == 0){
 8003eaa:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <turn+0x320>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <turn+0x1ec>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003eb2:	4b53      	ldr	r3, [pc, #332]	; (8004000 <turn+0x328>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <turn+0x328>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ec2:	e017      	b.n	8003ef4 <turn+0x21c>
			}
			else if (R_ctrl_signal > 0){
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <turn+0x320>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	dd09      	ble.n	8003ee0 <turn+0x208>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <turn+0x320>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <turn+0x328>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <turn+0x328>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ede:	e009      	b.n	8003ef4 <turn+0x21c>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003ee0:	4b47      	ldr	r3, [pc, #284]	; (8004000 <turn+0x328>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8003ee8:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <turn+0x320>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	425a      	negs	r2, r3
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <turn+0x328>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
			}
//			Left
			L_error = L_count_target - L_prev_enc_count;
 8003ef4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ef8:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <turn+0x308>)
 8003efa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	4a40      	ldr	r2, [pc, #256]	; (8004004 <turn+0x32c>)
 8003f02:	6013      	str	r3, [r2, #0]
			//if (abs(L_error)<5)L_acc_error += L_error;
			L_ctrl_signal = L_Kpt*L_error + L_Kdt*(L_error-L_prev_error)*100;// + L_Kit*L_acc_error;
 8003f04:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <turn+0x32c>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fb10 	bl	8000534 <__aeabi_i2d>
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <turn+0x32c>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fb06 	bl	8000534 <__aeabi_i2d>
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <turn+0x318>)
 8003f2e:	f7fc fb6b 	bl	8000608 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <turn+0x31c>)
 8003f40:	f7fc fb62 	bl	8000608 <__aeabi_dmul>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4620      	mov	r0, r4
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	f7fc f9a6 	bl	800029c <__adddf3>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7fc fd68 	bl	8000a2c <__aeabi_d2iz>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <turn+0x330>)
 8003f60:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal > 0) L_ctrl_signal += L_ff_offset_t;
 8003f62:	4b29      	ldr	r3, [pc, #164]	; (8004008 <turn+0x330>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dd04      	ble.n	8003f74 <turn+0x29c>
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <turn+0x330>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	337d      	adds	r3, #125	; 0x7d
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <turn+0x330>)
 8003f72:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal < 0) L_ctrl_signal -= L_ff_offset_t;
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <turn+0x330>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da04      	bge.n	8003f86 <turn+0x2ae>
 8003f7c:	4b22      	ldr	r3, [pc, #136]	; (8004008 <turn+0x330>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3b7d      	subs	r3, #125	; 0x7d
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <turn+0x330>)
 8003f84:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=300) L_ctrl_signal = 300;
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <turn+0x330>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f8e:	db03      	blt.n	8003f98 <turn+0x2c0>
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <turn+0x330>)
 8003f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f96:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-300) L_ctrl_signal = -300;
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <turn+0x330>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8003fa0:	dc02      	bgt.n	8003fa8 <turn+0x2d0>
 8003fa2:	4b19      	ldr	r3, [pc, #100]	; (8004008 <turn+0x330>)
 8003fa4:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <turn+0x324>)
 8003fa6:	601a      	str	r2, [r3, #0]

			if (L_ctrl_signal == 0){
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <turn+0x330>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d12f      	bne.n	8004010 <turn+0x338>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <turn+0x334>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <turn+0x334>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8003fc0:	e03e      	b.n	8004040 <turn+0x368>
 8003fc2:	bf00      	nop
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	40c73400 	.word	0x40c73400
 8003fd0:	ffffda08 	.word	0xffffda08
 8003fd4:	20002404 	.word	0x20002404
 8003fd8:	20000104 	.word	0x20000104
 8003fdc:	2000244c 	.word	0x2000244c
 8003fe0:	20000102 	.word	0x20000102
 8003fe4:	20000124 	.word	0x20000124
 8003fe8:	20000120 	.word	0x20000120
 8003fec:	20000114 	.word	0x20000114
 8003ff0:	3fe00000 	.word	0x3fe00000
 8003ff4:	40590000 	.word	0x40590000
 8003ff8:	2000010c 	.word	0x2000010c
 8003ffc:	fffffed4 	.word	0xfffffed4
 8004000:	20002374 	.word	0x20002374
 8004004:	20000110 	.word	0x20000110
 8004008:	20000108 	.word	0x20000108
 800400c:	200023bc 	.word	0x200023bc
			}
			else if (L_ctrl_signal > 0){
 8004010:	4b4a      	ldr	r3, [pc, #296]	; (800413c <turn+0x464>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	dd09      	ble.n	800402c <turn+0x354>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8004018:	4b48      	ldr	r3, [pc, #288]	; (800413c <turn+0x464>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b48      	ldr	r3, [pc, #288]	; (8004140 <turn+0x468>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <turn+0x468>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
 800402a:	e009      	b.n	8004040 <turn+0x368>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800402c:	4b44      	ldr	r3, [pc, #272]	; (8004140 <turn+0x468>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8004034:	4b41      	ldr	r3, [pc, #260]	; (800413c <turn+0x464>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	425a      	negs	r2, r3
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <turn+0x468>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (L_error <= Enc_Turn_Error && L_error >= -Enc_Turn_Error  && L_error == L_prev_error) {
 8004040:	4b40      	ldr	r3, [pc, #256]	; (8004144 <turn+0x46c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	dc1b      	bgt.n	8004080 <turn+0x3a8>
 8004048:	4b3e      	ldr	r3, [pc, #248]	; (8004144 <turn+0x46c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	db16      	blt.n	8004080 <turn+0x3a8>
 8004052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <turn+0x46c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d110      	bne.n	8004080 <turn+0x3a8>
				if (R_error <= Enc_Turn_Error && R_error >= -Enc_Turn_Error  && R_error == R_prev_error) {
 800405e:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <turn+0x470>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	dc0c      	bgt.n	8004080 <turn+0x3a8>
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <turn+0x470>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	db07      	blt.n	8004080 <turn+0x3a8>
 8004070:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <turn+0x470>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d101      	bne.n	8004080 <turn+0x3a8>
					turn_cmplt=1;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
				}
			}

			L_prev_error = L_error;
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <turn+0x46c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	82fb      	strh	r3, [r7, #22]
			R_prev_error = R_error;
 8004086:	4b30      	ldr	r3, [pc, #192]	; (8004148 <turn+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	82bb      	strh	r3, [r7, #20]
			dlog();
 800408c:	f7fe fc6e 	bl	800296c <dlog>
			max_loops--;
 8004090:	89bb      	ldrh	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	81bb      	strh	r3, [r7, #12]
			if (max_loops == 0) break;
 8004096:	89bb      	ldrh	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <turn+0x3ce>
	while(turn_cmplt == 0){
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f43f ae88 	beq.w	8003db4 <turn+0xdc>
 80040a4:	e000      	b.n	80040a8 <turn+0x3d0>
			if (max_loops == 0) break;
 80040a6:	bf00      	nop
//			sprintf(send_buffer, "L:%d R:%d LT:%d RT:%d\n",(int)L_prev_enc_count,(int)R_prev_enc_count, (int)L_count_target , (int)R_count_target);
//			uart_transmit(send_buffer, strlen(send_buffer));
		}
	}
	Mouse.heading = (8 + Mouse.heading + (8+(8*deg)/360)%8)%8;
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <turn+0x474>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f103 0208 	add.w	r2, r3, #8
 80040b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b4:	4926      	ldr	r1, [pc, #152]	; (8004150 <turn+0x478>)
 80040b6:	fb81 0103 	smull	r0, r1, r1, r3
 80040ba:	4419      	add	r1, r3
 80040bc:	1149      	asrs	r1, r1, #5
 80040be:	17db      	asrs	r3, r3, #31
 80040c0:	1acb      	subs	r3, r1, r3
 80040c2:	3308      	adds	r3, #8
 80040c4:	4259      	negs	r1, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	f001 0107 	and.w	r1, r1, #7
 80040ce:	bf58      	it	pl
 80040d0:	424b      	negpl	r3, r1
 80040d2:	4413      	add	r3, r2
 80040d4:	425a      	negs	r2, r3
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	f002 0207 	and.w	r2, r2, #7
 80040de:	bf58      	it	pl
 80040e0:	4253      	negpl	r3, r2
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <turn+0x474>)
 80040e6:	701a      	strb	r2, [r3, #0]
	reset_counts();
 80040e8:	f7ff fd62 	bl	8003bb0 <reset_counts>
	set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
 80040ec:	4b17      	ldr	r3, [pc, #92]	; (800414c <turn+0x474>)
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	4a16      	ldr	r2, [pc, #88]	; (800414c <turn+0x474>)
 80040f2:	7892      	ldrb	r2, [r2, #2]
 80040f4:	4619      	mov	r1, r3
 80040f6:	4817      	ldr	r0, [pc, #92]	; (8004154 <turn+0x47c>)
 80040f8:	f7fe fdc2 	bl	8002c80 <set_explored>
	//need to take into account that after turn, mouse is in middle of cell
	if (abs(deg) == 90){
 80040fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfb8      	it	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b5a      	cmp	r3, #90	; 0x5a
 800410a:	d105      	bne.n	8004118 <turn+0x440>
		R_acc = 50;
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <turn+0x480>)
 800410e:	2232      	movs	r2, #50	; 0x32
 8004110:	601a      	str	r2, [r3, #0]
		L_acc = 50;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <turn+0x484>)
 8004114:	2232      	movs	r2, #50	; 0x32
 8004116:	601a      	str	r2, [r3, #0]
	}
	if (abs(deg) == 180){
 8004118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	bfb8      	it	lt
 8004120:	425b      	neglt	r3, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	2bb4      	cmp	r3, #180	; 0xb4
 8004126:	d105      	bne.n	8004134 <turn+0x45c>
		R_acc = 70;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <turn+0x480>)
 800412a:	2246      	movs	r2, #70	; 0x46
 800412c:	601a      	str	r2, [r3, #0]
		L_acc = 70;
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <turn+0x484>)
 8004130:	2246      	movs	r2, #70	; 0x46
 8004132:	601a      	str	r2, [r3, #0]
	}
}
 8004134:	bf00      	nop
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}
 800413c:	20000108 	.word	0x20000108
 8004140:	200023bc 	.word	0x200023bc
 8004144:	20000110 	.word	0x20000110
 8004148:	20000114 	.word	0x20000114
 800414c:	200001c4 	.word	0x200001c4
 8004150:	b60b60b7 	.word	0xb60b60b7
 8004154:	20000134 	.word	0x20000134
 8004158:	20000124 	.word	0x20000124
 800415c:	20000120 	.word	0x20000120

08004160 <R_motor_feedback_control>:
	set_explored(exp_maze, Mouse.current_cell_x, Mouse.current_cell_y);
	//need to take into account that after turn, mouse is in middle of cell
	R_acc = 50;
	L_acc = 50;
}
void R_motor_feedback_control(int8_t kick){//speed in mm/s
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
	R_prev_enc_count = htim3.Instance->CNT;
 800416a:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <R_motor_feedback_control+0x1c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	b21a      	sxth	r2, r3
 8004172:	4b6e      	ldr	r3, [pc, #440]	; (800432c <R_motor_feedback_control+0x1cc>)
 8004174:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <R_motor_feedback_control+0x1cc>)
 8004178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800417c:	461a      	mov	r2, r3
 800417e:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <R_motor_feedback_control+0x1d0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4413      	add	r3, r2
 8004184:	4a6a      	ldr	r2, [pc, #424]	; (8004330 <R_motor_feedback_control+0x1d0>)
 8004186:	6013      	str	r3, [r2, #0]

	//error in encoder count for that ctrl period
	R_error = (int)((R_speed_setpoint*COUNTS_PER_ROTATION*STR_CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - R_prev_enc_count;
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <R_motor_feedback_control+0x1d4>)
 800418a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418e:	461a      	mov	r2, r3
 8004190:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f9cb 	bl	8000534 <__aeabi_i2d>
 800419e:	a360      	add	r3, pc, #384	; (adr r3, 8004320 <R_motor_feedback_control+0x1c0>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f7fc fb5a 	bl	800085c <__aeabi_ddiv>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f7fc fc3c 	bl	8000a2c <__aeabi_d2iz>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4a5d      	ldr	r2, [pc, #372]	; (800432c <R_motor_feedback_control+0x1cc>)
 80041b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <R_motor_feedback_control+0x1d8>)
 80041c0:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error *(1-abs(kick));
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfb8      	it	lt
 80041ca:	425b      	neglt	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f1c3 0301 	rsb	r3, r3, #1
 80041d2:	4a59      	ldr	r2, [pc, #356]	; (8004338 <R_motor_feedback_control+0x1d8>)
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	fb03 f202 	mul.w	r2, r3, r2
 80041da:	4b58      	ldr	r3, [pc, #352]	; (800433c <R_motor_feedback_control+0x1dc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	4a56      	ldr	r2, [pc, #344]	; (800433c <R_motor_feedback_control+0x1dc>)
 80041e2:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 80041e4:	4b55      	ldr	r3, [pc, #340]	; (800433c <R_motor_feedback_control+0x1dc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ec:	dd03      	ble.n	80041f6 <R_motor_feedback_control+0x96>
 80041ee:	4b53      	ldr	r3, [pc, #332]	; (800433c <R_motor_feedback_control+0x1dc>)
 80041f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041f4:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 80041f6:	4b51      	ldr	r3, [pc, #324]	; (800433c <R_motor_feedback_control+0x1dc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80041fe:	da02      	bge.n	8004206 <R_motor_feedback_control+0xa6>
 8004200:	4b4e      	ldr	r3, [pc, #312]	; (800433c <R_motor_feedback_control+0x1dc>)
 8004202:	4a4f      	ldr	r2, [pc, #316]	; (8004340 <R_motor_feedback_control+0x1e0>)
 8004204:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward 				proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint + K_kick*kick;// + K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <R_motor_feedback_control+0x1d8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2232      	movs	r2, #50	; 0x32
 800420c:	fb03 f202 	mul.w	r2, r3, r2
 8004210:	4b4a      	ldr	r3, [pc, #296]	; (800433c <R_motor_feedback_control+0x1dc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4413      	add	r3, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc f98c 	bl	8000534 <__aeabi_i2d>
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	4b44      	ldr	r3, [pc, #272]	; (8004334 <R_motor_feedback_control+0x1d4>)
 8004222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc f984 	bl	8000534 <__aeabi_i2d>
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	4b44      	ldr	r3, [pc, #272]	; (8004344 <R_motor_feedback_control+0x1e4>)
 8004232:	f7fc f9e9 	bl	8000608 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	f7fc f82d 	bl	800029c <__adddf3>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4614      	mov	r4, r2
 8004248:	461d      	mov	r5, r3
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	2216      	movs	r2, #22
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc f96d 	bl	8000534 <__aeabi_i2d>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f7fc f81b 	bl	800029c <__adddf3>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f7fc fbdd 	bl	8000a2c <__aeabi_d2iz>
 8004272:	4603      	mov	r3, r0
 8004274:	4a34      	ldr	r2, [pc, #208]	; (8004348 <R_motor_feedback_control+0x1e8>)
 8004276:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint > 0) R_ctrl_signal += R_ff_offset;
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <R_motor_feedback_control+0x1d4>)
 800427a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800427e:	2b00      	cmp	r3, #0
 8004280:	dd04      	ble.n	800428c <R_motor_feedback_control+0x12c>
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <R_motor_feedback_control+0x1e8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	337d      	adds	r3, #125	; 0x7d
 8004288:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <R_motor_feedback_control+0x1e8>)
 800428a:	6013      	str	r3, [r2, #0]
	if (R_speed_setpoint < 0) R_ctrl_signal -= R_ff_offset;
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <R_motor_feedback_control+0x1d4>)
 800428e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da04      	bge.n	80042a0 <R_motor_feedback_control+0x140>
 8004296:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <R_motor_feedback_control+0x1e8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b7d      	subs	r3, #125	; 0x7d
 800429c:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <R_motor_feedback_control+0x1e8>)
 800429e:	6013      	str	r3, [r2, #0]

	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 80042a0:	4b29      	ldr	r3, [pc, #164]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a8:	db03      	blt.n	80042b2 <R_motor_feedback_control+0x152>
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042b0:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80042ba:	dc02      	bgt.n	80042c2 <R_motor_feedback_control+0x162>
 80042bc:	4b22      	ldr	r3, [pc, #136]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <R_motor_feedback_control+0x1ec>)
 80042c0:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <R_motor_feedback_control+0x17c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <R_motor_feedback_control+0x1f0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <R_motor_feedback_control+0x1f0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80042da:	e017      	b.n	800430c <R_motor_feedback_control+0x1ac>
	}
	else if (R_ctrl_signal > 0){
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dd09      	ble.n	80042f8 <R_motor_feedback_control+0x198>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <R_motor_feedback_control+0x1e8>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <R_motor_feedback_control+0x1f0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <R_motor_feedback_control+0x1f0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80042f6:	e009      	b.n	800430c <R_motor_feedback_control+0x1ac>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <R_motor_feedback_control+0x1f0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <R_motor_feedback_control+0x1e8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	425a      	negs	r2, r3
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <R_motor_feedback_control+0x1f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	htim3.Instance->CNT = 0;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <R_motor_feedback_control+0x1c8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}
 800431c:	f3af 8000 	nop.w
 8004320:	851eb851 	.word	0x851eb851
 8004324:	40f94f87 	.word	0x40f94f87
 8004328:	20002404 	.word	0x20002404
 800432c:	20000104 	.word	0x20000104
 8004330:	20000124 	.word	0x20000124
 8004334:	20000100 	.word	0x20000100
 8004338:	20000114 	.word	0x20000114
 800433c:	2000011c 	.word	0x2000011c
 8004340:	fffffc18 	.word	0xfffffc18
 8004344:	3fe00000 	.word	0x3fe00000
 8004348:	2000010c 	.word	0x2000010c
 800434c:	fffffc19 	.word	0xfffffc19
 8004350:	20002374 	.word	0x20002374
 8004354:	00000000 	.word	0x00000000

08004358 <L_motor_feedback_control>:

void L_motor_feedback_control(int8_t kick){//speed in mm/s
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
	L_prev_enc_count = htim5.Instance->CNT;
 8004362:	4b71      	ldr	r3, [pc, #452]	; (8004528 <L_motor_feedback_control+0x1d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b21a      	sxth	r2, r3
 800436a:	4b70      	ldr	r3, [pc, #448]	; (800452c <L_motor_feedback_control+0x1d4>)
 800436c:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 800436e:	4b6f      	ldr	r3, [pc, #444]	; (800452c <L_motor_feedback_control+0x1d4>)
 8004370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004374:	461a      	mov	r2, r3
 8004376:	4b6e      	ldr	r3, [pc, #440]	; (8004530 <L_motor_feedback_control+0x1d8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4413      	add	r3, r2
 800437c:	4a6c      	ldr	r2, [pc, #432]	; (8004530 <L_motor_feedback_control+0x1d8>)
 800437e:	6013      	str	r3, [r2, #0]
	//error in encoder count for that ctrl period
	L_error = (int)((L_speed_setpoint*COUNTS_PER_ROTATION*STR_CONTROL_LOOP_PERIOD_MS)/(WHEEL_DIAMETER_MM*PI*1000)) - L_prev_enc_count;
 8004380:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <L_motor_feedback_control+0x1dc>)
 8004382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004386:	461a      	mov	r2, r3
 8004388:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f8cf 	bl	8000534 <__aeabi_i2d>
 8004396:	a360      	add	r3, pc, #384	; (adr r3, 8004518 <L_motor_feedback_control+0x1c0>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc fa5e 	bl	800085c <__aeabi_ddiv>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fb40 	bl	8000a2c <__aeabi_d2iz>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4a5f      	ldr	r2, [pc, #380]	; (800452c <L_motor_feedback_control+0x1d4>)
 80043b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	4a60      	ldr	r2, [pc, #384]	; (8004538 <L_motor_feedback_control+0x1e0>)
 80043b8:	6013      	str	r3, [r2, #0]

	L_acc_error += L_error * (1-abs(kick));
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bfb8      	it	lt
 80043c2:	425b      	neglt	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f1c3 0301 	rsb	r3, r3, #1
 80043ca:	4a5b      	ldr	r2, [pc, #364]	; (8004538 <L_motor_feedback_control+0x1e0>)
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	fb03 f202 	mul.w	r2, r3, r2
 80043d2:	4b5a      	ldr	r3, [pc, #360]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043da:	6013      	str	r3, [r2, #0]
	if(L_acc_error > 1000) L_acc_error = 1000;
 80043dc:	4b57      	ldr	r3, [pc, #348]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e4:	dd03      	ble.n	80043ee <L_motor_feedback_control+0x96>
 80043e6:	4b55      	ldr	r3, [pc, #340]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ec:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;  //limits integral term
 80043ee:	4b53      	ldr	r3, [pc, #332]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80043f6:	da02      	bge.n	80043fe <L_motor_feedback_control+0xa6>
 80043f8:	4b50      	ldr	r3, [pc, #320]	; (800453c <L_motor_feedback_control+0x1e4>)
 80043fa:	4a51      	ldr	r2, [pc, #324]	; (8004540 <L_motor_feedback_control+0x1e8>)
 80043fc:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint + K_kick*kick;//K_pdisterror*(R_acc-L_acc) - K_idisterror*Dist_error_acc;
 80043fe:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <L_motor_feedback_control+0x1e0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2232      	movs	r2, #50	; 0x32
 8004404:	fb03 f202 	mul.w	r2, r3, r2
 8004408:	4b4c      	ldr	r3, [pc, #304]	; (800453c <L_motor_feedback_control+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4413      	add	r3, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc f890 	bl	8000534 <__aeabi_i2d>
 8004414:	4604      	mov	r4, r0
 8004416:	460d      	mov	r5, r1
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <L_motor_feedback_control+0x1dc>)
 800441a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f888 	bl	8000534 <__aeabi_i2d>
 8004424:	a33e      	add	r3, pc, #248	; (adr r3, 8004520 <L_motor_feedback_control+0x1c8>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fc f8ed 	bl	8000608 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fb ff31 	bl	800029c <__adddf3>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4614      	mov	r4, r2
 8004440:	461d      	mov	r5, r3
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2216      	movs	r2, #22
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc f871 	bl	8000534 <__aeabi_i2d>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4620      	mov	r0, r4
 8004458:	4629      	mov	r1, r5
 800445a:	f7fb ff1f 	bl	800029c <__adddf3>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	f7fc fae1 	bl	8000a2c <__aeabi_d2iz>
 800446a:	4603      	mov	r3, r0
 800446c:	4a35      	ldr	r2, [pc, #212]	; (8004544 <L_motor_feedback_control+0x1ec>)
 800446e:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint > 0) L_ctrl_signal += L_ff_offset;
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <L_motor_feedback_control+0x1dc>)
 8004472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	dd04      	ble.n	8004484 <L_motor_feedback_control+0x12c>
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <L_motor_feedback_control+0x1ec>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	337d      	adds	r3, #125	; 0x7d
 8004480:	4a30      	ldr	r2, [pc, #192]	; (8004544 <L_motor_feedback_control+0x1ec>)
 8004482:	6013      	str	r3, [r2, #0]
	if (L_speed_setpoint < 0) L_ctrl_signal -= L_ff_offset;
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <L_motor_feedback_control+0x1dc>)
 8004486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da04      	bge.n	8004498 <L_motor_feedback_control+0x140>
 800448e:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <L_motor_feedback_control+0x1ec>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b7d      	subs	r3, #125	; 0x7d
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <L_motor_feedback_control+0x1ec>)
 8004496:	6013      	str	r3, [r2, #0]


	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <L_motor_feedback_control+0x1ec>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a0:	dd03      	ble.n	80044aa <L_motor_feedback_control+0x152>
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044a8:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80044b2:	da02      	bge.n	80044ba <L_motor_feedback_control+0x162>
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044b6:	4a24      	ldr	r2, [pc, #144]	; (8004548 <L_motor_feedback_control+0x1f0>)
 80044b8:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <L_motor_feedback_control+0x17c>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <L_motor_feedback_control+0x1f4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <L_motor_feedback_control+0x1f4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
 80044d2:	e017      	b.n	8004504 <L_motor_feedback_control+0x1ac>
	}
	else if (L_ctrl_signal > 0){
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dd09      	ble.n	80044f0 <L_motor_feedback_control+0x198>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <L_motor_feedback_control+0x1f4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <L_motor_feedback_control+0x1f4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
 80044ee:	e009      	b.n	8004504 <L_motor_feedback_control+0x1ac>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <L_motor_feedback_control+0x1f4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <L_motor_feedback_control+0x1ec>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	425a      	negs	r2, r3
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <L_motor_feedback_control+0x1f4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
	}
	htim5.Instance->CNT = 0;
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <L_motor_feedback_control+0x1d0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bdb0      	pop	{r4, r5, r7, pc}
 8004514:	f3af 8000 	nop.w
 8004518:	851eb851 	.word	0x851eb851
 800451c:	40f94f87 	.word	0x40f94f87
 8004520:	66666666 	.word	0x66666666
 8004524:	3fde6666 	.word	0x3fde6666
 8004528:	2000244c 	.word	0x2000244c
 800452c:	20000102 	.word	0x20000102
 8004530:	20000120 	.word	0x20000120
 8004534:	200000fe 	.word	0x200000fe
 8004538:	20000110 	.word	0x20000110
 800453c:	20000118 	.word	0x20000118
 8004540:	fffffc18 	.word	0xfffffc18
 8004544:	20000108 	.word	0x20000108
 8004548:	fffffc19 	.word	0xfffffc19
 800454c:	200023bc 	.word	0x200023bc

08004550 <race_forward>:
			max_loops--;
			if (max_loops == 0) break;
		}
	}
}
void race_forward(uint16_t mm){
 8004550:	b5b0      	push	{r4, r5, r7, lr}
 8004552:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8004556:	af00      	add	r7, sp, #0
 8004558:	4602      	mov	r2, r0
 800455a:	f107 0320 	add.w	r3, r7, #32
 800455e:	f823 2c1a 	strh.w	r2, [r3, #-26]
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8004562:	f001 f8b1 	bl	80056c8 <HAL_GetTick>
 8004566:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800456a:	f103 031c 	add.w	r3, r3, #28
 800456e:	6018      	str	r0, [r3, #0]
//	int16_t diff = R_acc - L_acc;
	int16_t L_count_target = (int)mm*1.15749;
 8004570:	f107 0320 	add.w	r3, r7, #32
 8004574:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fb ffdb 	bl	8000534 <__aeabi_i2d>
 800457e:	a3d7      	add	r3, pc, #860	; (adr r3, 80048dc <race_forward+0x38c>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f7fc f840 	bl	8000608 <__aeabi_dmul>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	f7fc fa4c 	bl	8000a2c <__aeabi_d2iz>
 8004594:	4603      	mov	r3, r0
 8004596:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800459a:	f102 020c 	add.w	r2, r2, #12
 800459e:	8013      	strh	r3, [r2, #0]
	int16_t R_count_target = (int)mm*1.15749;
 80045a0:	f107 0320 	add.w	r3, r7, #32
 80045a4:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ffc3 	bl	8000534 <__aeabi_i2d>
 80045ae:	a3cb      	add	r3, pc, #812	; (adr r3, 80048dc <race_forward+0x38c>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f828 	bl	8000608 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f7fc fa34 	bl	8000a2c <__aeabi_d2iz>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80045ca:	f102 020a 	add.w	r2, r2, #10
 80045ce:	8013      	strh	r3, [r2, #0]
	int16_t L_prev_error = L_count_target;
 80045d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80045d4:	f103 030c 	add.w	r3, r3, #12
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80045de:	f102 021a 	add.w	r2, r2, #26
 80045e2:	8013      	strh	r3, [r2, #0]
	int16_t R_prev_error = R_count_target;
 80045e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80045e8:	f103 030a 	add.w	r3, r3, #10
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80045f2:	f102 0218 	add.w	r2, r2, #24
 80045f6:	8013      	strh	r3, [r2, #0]

	int16_t R_counts[1024];
	int16_t L_counts[1024];
	for (int i = 0; i < 1024; i++) {
 80045f8:	2300      	movs	r3, #0
 80045fa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80045fe:	f102 0214 	add.w	r2, r2, #20
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e023      	b.n	800464e <race_forward+0xfe>
		R_counts[i]=0;
 8004606:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800460a:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800460e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004612:	f102 0214 	add.w	r2, r2, #20
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	2100      	movs	r1, #0
 800461a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		L_counts[i]=0;
 800461e:	f107 0320 	add.w	r3, r7, #32
 8004622:	461a      	mov	r2, r3
 8004624:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004628:	f103 0314 	add.w	r3, r3, #20
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4413      	add	r3, r2
 8004632:	2200      	movs	r2, #0
 8004634:	f823 2c18 	strh.w	r2, [r3, #-24]
	for (int i = 0; i < 1024; i++) {
 8004638:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800463c:	f103 0314 	add.w	r3, r3, #20
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004648:	f102 0214 	add.w	r2, r2, #20
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004652:	f103 0314 	add.w	r3, r3, #20
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	dbd3      	blt.n	8004606 <race_forward+0xb6>
	}
	int8_t kickL = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004664:	f102 0213 	add.w	r2, r2, #19
 8004668:	7013      	strb	r3, [r2, #0]
	int8_t kickR = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004670:	f102 0212 	add.w	r2, r2, #18
 8004674:	7013      	strb	r3, [r2, #0]
	reset_counts();
 8004676:	f7ff fa9b 	bl	8003bb0 <reset_counts>
	uint8_t stp_cmplt = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004680:	f102 0211 	add.w	r2, r2, #17
 8004684:	7013      	strb	r3, [r2, #0]
	uint8_t wall_dist = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800468c:	f102 0210 	add.w	r2, r2, #16
 8004690:	7013      	strb	r3, [r2, #0]
	if ((Mouse.heading == 1)||(Mouse.heading == 3)||(Mouse.heading == 5)||(Mouse.heading == 7)){
 8004692:	4b85      	ldr	r3, [pc, #532]	; (80048a8 <race_forward+0x358>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d00b      	beq.n	80046b2 <race_forward+0x162>
 800469a:	4b83      	ldr	r3, [pc, #524]	; (80048a8 <race_forward+0x358>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d007      	beq.n	80046b2 <race_forward+0x162>
 80046a2:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <race_forward+0x358>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d003      	beq.n	80046b2 <race_forward+0x162>
 80046aa:	4b7f      	ldr	r3, [pc, #508]	; (80048a8 <race_forward+0x358>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d106      	bne.n	80046c0 <race_forward+0x170>
		wall_dist = 35;
 80046b2:	2323      	movs	r3, #35	; 0x23
 80046b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80046b8:	f102 0210 	add.w	r2, r2, #16
 80046bc:	7013      	strb	r3, [r2, #0]
 80046be:	e005      	b.n	80046cc <race_forward+0x17c>
	}
	else wall_dist = 50;
 80046c0:	2332      	movs	r3, #50	; 0x32
 80046c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80046c6:	f102 0210 	add.w	r2, r2, #16
 80046ca:	7013      	strb	r3, [r2, #0]
	int16_t j = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80046d2:	f102 020e 	add.w	r2, r2, #14
 80046d6:	8013      	strh	r3, [r2, #0]
	while(stp_cmplt == 0){
 80046d8:	e221      	b.n	8004b1e <race_forward+0x5ce>
		if (HAL_GetTick() - prev_ctr_loop_time > RACE_CONTROL_LOOP_PERIOD_MS-1){
 80046da:	f000 fff5 	bl	80056c8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80046e4:	f103 031c 	add.w	r3, r3, #28
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	f240 8216 	bls.w	8004b1e <race_forward+0x5ce>
			prev_ctr_loop_time = HAL_GetTick();
 80046f2:	f000 ffe9 	bl	80056c8 <HAL_GetTick>
 80046f6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80046fa:	f103 031c 	add.w	r3, r3, #28
 80046fe:	6018      	str	r0, [r3, #0]
			if (measurements[0]<wall_dist) {
 8004700:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <race_forward+0x35c>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004708:	f102 0210 	add.w	r2, r2, #16
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d90c      	bls.n	800472c <race_forward+0x1dc>
				kickR = -1;
 8004712:	23ff      	movs	r3, #255	; 0xff
 8004714:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004718:	f102 0212 	add.w	r2, r2, #18
 800471c:	7013      	strb	r3, [r2, #0]
				kickL = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004724:	f102 0213 	add.w	r2, r2, #19
 8004728:	7013      	strb	r3, [r2, #0]
 800472a:	e014      	b.n	8004756 <race_forward+0x206>
			}
			else if (measurements[2]<wall_dist){
 800472c:	4b5f      	ldr	r3, [pc, #380]	; (80048ac <race_forward+0x35c>)
 800472e:	789b      	ldrb	r3, [r3, #2]
 8004730:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004734:	f102 0210 	add.w	r2, r2, #16
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d90b      	bls.n	8004756 <race_forward+0x206>
				kickR = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004744:	f102 0212 	add.w	r2, r2, #18
 8004748:	7013      	strb	r3, [r2, #0]
				kickL = -1;
 800474a:	23ff      	movs	r3, #255	; 0xff
 800474c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004750:	f102 0213 	add.w	r2, r2, #19
 8004754:	7013      	strb	r3, [r2, #0]
			}
			R_prev_enc_count = htim3.Instance->CNT;
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <race_forward+0x360>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b21a      	sxth	r2, r3
 800475e:	4b55      	ldr	r3, [pc, #340]	; (80048b4 <race_forward+0x364>)
 8004760:	801a      	strh	r2, [r3, #0]
			L_prev_enc_count = htim5.Instance->CNT;
 8004762:	4b55      	ldr	r3, [pc, #340]	; (80048b8 <race_forward+0x368>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b21a      	sxth	r2, r3
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <race_forward+0x36c>)
 800476c:	801a      	strh	r2, [r3, #0]
//			Right
			R_error = R_count_target - R_prev_enc_count;
 800476e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004772:	f103 030a 	add.w	r3, r3, #10
 8004776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <race_forward+0x364>)
 800477c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	4a4f      	ldr	r2, [pc, #316]	; (80048c0 <race_forward+0x370>)
 8004784:	6013      	str	r3, [r2, #0]
			R_ctrl_signal = R_KpR*R_error + R_KdR*(R_error-R_prev_error)*(1000/RACE_CONTROL_LOOP_PERIOD_MS);
 8004786:	4b4e      	ldr	r3, [pc, #312]	; (80048c0 <race_forward+0x370>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fece 	bl	8000534 <__aeabi_i2d>
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	4b48      	ldr	r3, [pc, #288]	; (80048c0 <race_forward+0x370>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80047a4:	f103 0318 	add.w	r3, r3, #24
 80047a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fec0 	bl	8000534 <__aeabi_i2d>
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <race_forward+0x374>)
 80047ba:	f7fb ff25 	bl	8000608 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <race_forward+0x378>)
 80047cc:	f7fb ff1c 	bl	8000608 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	f7fb fd60 	bl	800029c <__adddf3>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7fc f922 	bl	8000a2c <__aeabi_d2iz>
 80047e8:	4603      	mov	r3, r0
 80047ea:	4a38      	ldr	r2, [pc, #224]	; (80048cc <race_forward+0x37c>)
 80047ec:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal > 0) R_ctrl_signal += R_ff_offset_R;
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <race_forward+0x37c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dd04      	ble.n	8004800 <race_forward+0x2b0>
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <race_forward+0x37c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	337d      	adds	r3, #125	; 0x7d
 80047fc:	4a33      	ldr	r2, [pc, #204]	; (80048cc <race_forward+0x37c>)
 80047fe:	6013      	str	r3, [r2, #0]
			if (R_ctrl_signal < 0) R_ctrl_signal -= R_ff_offset_R;
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <race_forward+0x37c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	da04      	bge.n	8004812 <race_forward+0x2c2>
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <race_forward+0x37c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b7d      	subs	r3, #125	; 0x7d
 800480e:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <race_forward+0x37c>)
 8004810:	6013      	str	r3, [r2, #0]

			if (R_ctrl_signal >= MAX_POWER) R_ctrl_signal = MAX_POWER;
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <race_forward+0x37c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800481a:	db03      	blt.n	8004824 <race_forward+0x2d4>
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <race_forward+0x37c>)
 800481e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004822:	601a      	str	r2, [r3, #0]
			if (R_ctrl_signal <= -MAX_POWER) R_ctrl_signal = -MAX_POWER;
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <race_forward+0x37c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800482c:	dc02      	bgt.n	8004834 <race_forward+0x2e4>
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <race_forward+0x37c>)
 8004830:	4a27      	ldr	r2, [pc, #156]	; (80048d0 <race_forward+0x380>)
 8004832:	601a      	str	r2, [r3, #0]
			L_ctrl_signal += K_kickR*kickR + Ke*(L_prev_enc_count-R_prev_enc_count);
 8004834:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004838:	f103 0312 	add.w	r3, r3, #18
 800483c:	f993 2000 	ldrsb.w	r2, [r3]
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4619      	mov	r1, r3
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <race_forward+0x36c>)
 800484c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004850:	461a      	mov	r2, r3
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <race_forward+0x364>)
 8004854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004858:	1ad2      	subs	r2, r2, r3
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	18ca      	adds	r2, r1, r3
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <race_forward+0x384>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4413      	add	r3, r2
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <race_forward+0x384>)
 800486a:	6013      	str	r3, [r2, #0]
			if (R_ctrl_signal == 0){
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <race_forward+0x37c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <race_forward+0x336>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8004874:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <race_forward+0x388>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800487c:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <race_forward+0x388>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c
 8004884:	e038      	b.n	80048f8 <race_forward+0x3a8>
			}
			else if (R_ctrl_signal > 0){
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <race_forward+0x37c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	dd2a      	ble.n	80048e4 <race_forward+0x394>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <race_forward+0x37c>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <race_forward+0x388>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <race_forward+0x388>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c
 80048a0:	e02a      	b.n	80048f8 <race_forward+0x3a8>
 80048a2:	bf00      	nop
 80048a4:	f3af 8000 	nop.w
 80048a8:	200001c4 	.word	0x200001c4
 80048ac:	2000012c 	.word	0x2000012c
 80048b0:	20002404 	.word	0x20002404
 80048b4:	20000104 	.word	0x20000104
 80048b8:	2000244c 	.word	0x2000244c
 80048bc:	20000102 	.word	0x20000102
 80048c0:	20000114 	.word	0x20000114
 80048c4:	3ff80000 	.word	0x3ff80000
 80048c8:	40690000 	.word	0x40690000
 80048cc:	2000010c 	.word	0x2000010c
 80048d0:	fffffed4 	.word	0xfffffed4
 80048d4:	20000108 	.word	0x20000108
 80048d8:	20002374 	.word	0x20002374
 80048dc:	3bf72713 	.word	0x3bf72713
 80048e0:	3ff28514 	.word	0x3ff28514
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80048e4:	4b95      	ldr	r3, [pc, #596]	; (8004b3c <race_forward+0x5ec>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80048ec:	4b94      	ldr	r3, [pc, #592]	; (8004b40 <race_forward+0x5f0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	425a      	negs	r2, r3
 80048f2:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <race_forward+0x5ec>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
			}
//			Left
			L_error = L_count_target - L_prev_enc_count;
 80048f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80048fc:	f103 030c 	add.w	r3, r3, #12
 8004900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004904:	4a8f      	ldr	r2, [pc, #572]	; (8004b44 <race_forward+0x5f4>)
 8004906:	f9b2 2000 	ldrsh.w	r2, [r2]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	4a8e      	ldr	r2, [pc, #568]	; (8004b48 <race_forward+0x5f8>)
 800490e:	6013      	str	r3, [r2, #0]
			L_ctrl_signal = L_KpR*L_error + L_KdR*(L_error-L_prev_error)*(1000/RACE_CONTROL_LOOP_PERIOD_MS);
 8004910:	4b8d      	ldr	r3, [pc, #564]	; (8004b48 <race_forward+0x5f8>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fe09 	bl	8000534 <__aeabi_i2d>
 8004922:	4604      	mov	r4, r0
 8004924:	460d      	mov	r5, r1
 8004926:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <race_forward+0x5f8>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800492e:	f103 031a 	add.w	r3, r3, #26
 8004932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fdfb 	bl	8000534 <__aeabi_i2d>
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	4b82      	ldr	r3, [pc, #520]	; (8004b4c <race_forward+0x5fc>)
 8004944:	f7fb fe60 	bl	8000608 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	4b7e      	ldr	r3, [pc, #504]	; (8004b50 <race_forward+0x600>)
 8004956:	f7fb fe57 	bl	8000608 <__aeabi_dmul>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fb fc9b 	bl	800029c <__adddf3>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f7fc f85d 	bl	8000a2c <__aeabi_d2iz>
 8004972:	4603      	mov	r3, r0
 8004974:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <race_forward+0x604>)
 8004976:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal > 0) L_ctrl_signal += L_ff_offset_R;
 8004978:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <race_forward+0x604>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dd04      	ble.n	800498a <race_forward+0x43a>
 8004980:	4b74      	ldr	r3, [pc, #464]	; (8004b54 <race_forward+0x604>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	337d      	adds	r3, #125	; 0x7d
 8004986:	4a73      	ldr	r2, [pc, #460]	; (8004b54 <race_forward+0x604>)
 8004988:	6013      	str	r3, [r2, #0]
			if (L_ctrl_signal < 0) L_ctrl_signal -= L_ff_offset_R;
 800498a:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <race_forward+0x604>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da04      	bge.n	800499c <race_forward+0x44c>
 8004992:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <race_forward+0x604>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3b7d      	subs	r3, #125	; 0x7d
 8004998:	4a6e      	ldr	r2, [pc, #440]	; (8004b54 <race_forward+0x604>)
 800499a:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal>=MAX_POWER) L_ctrl_signal = MAX_POWER;
 800499c:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <race_forward+0x604>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80049a4:	db03      	blt.n	80049ae <race_forward+0x45e>
 80049a6:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <race_forward+0x604>)
 80049a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ac:	601a      	str	r2, [r3, #0]
			if (L_ctrl_signal<=-MAX_POWER) L_ctrl_signal = -MAX_POWER;
 80049ae:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <race_forward+0x604>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80049b6:	dc02      	bgt.n	80049be <race_forward+0x46e>
 80049b8:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <race_forward+0x604>)
 80049ba:	4a67      	ldr	r2, [pc, #412]	; (8004b58 <race_forward+0x608>)
 80049bc:	601a      	str	r2, [r3, #0]

			L_ctrl_signal += K_kickR*kickL + Ke*(R_prev_enc_count-L_prev_enc_count);
 80049be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80049c2:	f103 0313 	add.w	r3, r3, #19
 80049c6:	f993 2000 	ldrsb.w	r2, [r3]
 80049ca:	4613      	mov	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4619      	mov	r1, r3
 80049d4:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <race_forward+0x60c>)
 80049d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049da:	461a      	mov	r2, r3
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <race_forward+0x5f4>)
 80049de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	4613      	mov	r3, r2
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	18ca      	adds	r2, r1, r3
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <race_forward+0x604>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <race_forward+0x604>)
 80049f4:	6013      	str	r3, [r2, #0]

			if (L_ctrl_signal == 0){
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <race_forward+0x604>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <race_forward+0x4c0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80049fe:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <race_forward+0x610>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004a06:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <race_forward+0x610>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0e:	e017      	b.n	8004a40 <race_forward+0x4f0>
			}
			else if (L_ctrl_signal > 0){
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <race_forward+0x604>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dd09      	ble.n	8004a2c <race_forward+0x4dc>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8004a18:	4b4e      	ldr	r3, [pc, #312]	; (8004b54 <race_forward+0x604>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b50      	ldr	r3, [pc, #320]	; (8004b60 <race_forward+0x610>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004a22:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <race_forward+0x610>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
 8004a2a:	e009      	b.n	8004a40 <race_forward+0x4f0>
			}
			else{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004a2c:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <race_forward+0x610>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2200      	movs	r2, #0
 8004a32:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8004a34:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <race_forward+0x604>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	425a      	negs	r2, r3
 8004a3a:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <race_forward+0x610>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if (L_error <= Enc_Str_Error && L_error >= -Enc_Str_Error  && L_error == L_prev_error) {
 8004a40:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <race_forward+0x5f8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	dc27      	bgt.n	8004a98 <race_forward+0x548>
 8004a48:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <race_forward+0x5f8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f113 0f02 	cmn.w	r3, #2
 8004a50:	db22      	blt.n	8004a98 <race_forward+0x548>
 8004a52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004a56:	f103 031a 	add.w	r3, r3, #26
 8004a5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a5e:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <race_forward+0x5f8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d118      	bne.n	8004a98 <race_forward+0x548>
				if (R_error <= Enc_Str_Error && R_error >= -Enc_Str_Error  && R_error == R_prev_error) {
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <race_forward+0x614>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	dc14      	bgt.n	8004a98 <race_forward+0x548>
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <race_forward+0x614>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f113 0f02 	cmn.w	r3, #2
 8004a76:	db0f      	blt.n	8004a98 <race_forward+0x548>
 8004a78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004a7c:	f103 0318 	add.w	r3, r3, #24
 8004a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a84:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <race_forward+0x614>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d105      	bne.n	8004a98 <race_forward+0x548>
					stp_cmplt=1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004a92:	f102 0211 	add.w	r2, r2, #17
 8004a96:	7013      	strb	r3, [r2, #0]
				}
			}
			L_prev_error = L_error;
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <race_forward+0x5f8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004aa0:	f102 021a 	add.w	r2, r2, #26
 8004aa4:	8013      	strh	r3, [r2, #0]
			R_prev_error = R_error;
 8004aa6:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <race_forward+0x614>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004aae:	f102 0218 	add.w	r2, r2, #24
 8004ab2:	8013      	strh	r3, [r2, #0]
			R_counts[j] = R_prev_enc_count;
 8004ab4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004ab8:	f103 030e 	add.w	r3, r3, #14
 8004abc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ac0:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <race_forward+0x60c>)
 8004ac2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ac6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004aca:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8004ace:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			L_counts[j] = L_prev_enc_count;
 8004ad2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004ad6:	f103 030e 	add.w	r3, r3, #14
 8004ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ade:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <race_forward+0x5f4>)
 8004ae0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ae4:	f107 0120 	add.w	r1, r7, #32
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
 8004aec:	f823 2c18 	strh.w	r2, [r3, #-24]
			if (j<1024) j++;
 8004af0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004af4:	f103 030e 	add.w	r3, r3, #14
 8004af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	da0d      	bge.n	8004b1e <race_forward+0x5ce>
 8004b02:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004b06:	f103 030e 	add.w	r3, r3, #14
 8004b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004b18:	f102 020e 	add.w	r2, r2, #14
 8004b1c:	8013      	strh	r3, [r2, #0]
	while(stp_cmplt == 0){
 8004b1e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004b22:	f103 0311 	add.w	r3, r3, #17
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f43f add6 	beq.w	80046da <race_forward+0x18a>
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Laddress+2*i, L_counts[i]);
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_counts[i]);
//		HAL_Delay(1);
//	}
//	HAL_FLASH_Lock();
	reset_counts();
 8004b2e:	f7ff f83f 	bl	8003bb0 <reset_counts>
}
 8004b32:	bf00      	nop
 8004b34:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3c:	20002374 	.word	0x20002374
 8004b40:	2000010c 	.word	0x2000010c
 8004b44:	20000102 	.word	0x20000102
 8004b48:	20000110 	.word	0x20000110
 8004b4c:	3ff80000 	.word	0x3ff80000
 8004b50:	40690000 	.word	0x40690000
 8004b54:	20000108 	.word	0x20000108
 8004b58:	fffffed4 	.word	0xfffffed4
 8004b5c:	20000104 	.word	0x20000104
 8004b60:	200023bc 	.word	0x200023bc
 8004b64:	20000114 	.word	0x20000114

08004b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_MspInit+0x4c>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_ADC_MspInit+0x7c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d127      	bne.n	8004c2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_ADC_MspInit+0x80>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8004c12:	2310      	movs	r3, #16
 8004c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c16:	2303      	movs	r3, #3
 8004c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	4805      	ldr	r0, [pc, #20]	; (8004c3c <HAL_ADC_MspInit+0x84>)
 8004c26:	f001 fb59 	bl	80062dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c2a:	bf00      	nop
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40012000 	.word	0x40012000
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40020000 	.word	0x40020000

08004c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a83      	ldr	r2, [pc, #524]	; (8004e6c <HAL_I2C_MspInit+0x22c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d14c      	bne.n	8004cfc <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a81      	ldr	r2, [pc, #516]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b7f      	ldr	r3, [pc, #508]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c82:	2312      	movs	r3, #18
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c86:	2301      	movs	r3, #1
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c96:	4619      	mov	r1, r3
 8004c98:	4876      	ldr	r0, [pc, #472]	; (8004e74 <HAL_I2C_MspInit+0x234>)
 8004c9a:	f001 fb1f 	bl	80062dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca2:	2312      	movs	r3, #18
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cae:	2304      	movs	r3, #4
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	486e      	ldr	r0, [pc, #440]	; (8004e74 <HAL_I2C_MspInit+0x234>)
 8004cba:	f001 fb0f 	bl	80062dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	4b6b      	ldr	r3, [pc, #428]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a6a      	ldr	r2, [pc, #424]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cce:	4b68      	ldr	r3, [pc, #416]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	201f      	movs	r0, #31
 8004ce0:	f001 f86f 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004ce4:	201f      	movs	r0, #31
 8004ce6:	f001 f888 	bl	8005dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004cea:	2200      	movs	r2, #0
 8004cec:	2100      	movs	r1, #0
 8004cee:	2020      	movs	r0, #32
 8004cf0:	f001 f867 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004cf4:	2020      	movs	r0, #32
 8004cf6:	f001 f880 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004cfa:	e0b3      	b.n	8004e64 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5d      	ldr	r2, [pc, #372]	; (8004e78 <HAL_I2C_MspInit+0x238>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d14e      	bne.n	8004da4 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a58      	ldr	r2, [pc, #352]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d28:	2312      	movs	r3, #18
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d30:	2303      	movs	r3, #3
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d34:	2304      	movs	r3, #4
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	484d      	ldr	r0, [pc, #308]	; (8004e74 <HAL_I2C_MspInit+0x234>)
 8004d40:	f001 facc 	bl	80062dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d4a:	2312      	movs	r3, #18
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d52:	2303      	movs	r3, #3
 8004d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004d56:	2309      	movs	r3, #9
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4844      	ldr	r0, [pc, #272]	; (8004e74 <HAL_I2C_MspInit+0x234>)
 8004d62:	f001 fabb 	bl	80062dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	4b41      	ldr	r3, [pc, #260]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d74:	6413      	str	r3, [r2, #64]	; 0x40
 8004d76:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	2100      	movs	r1, #0
 8004d86:	2021      	movs	r0, #33	; 0x21
 8004d88:	f001 f81b 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004d8c:	2021      	movs	r0, #33	; 0x21
 8004d8e:	f001 f834 	bl	8005dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	2022      	movs	r0, #34	; 0x22
 8004d98:	f001 f813 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004d9c:	2022      	movs	r0, #34	; 0x22
 8004d9e:	f001 f82c 	bl	8005dfa <HAL_NVIC_EnableIRQ>
}
 8004da2:	e05f      	b.n	8004e64 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <HAL_I2C_MspInit+0x23c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d15a      	bne.n	8004e64 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	4a2e      	ldr	r2, [pc, #184]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbe:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dec:	2312      	movs	r3, #18
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df4:	2303      	movs	r3, #3
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e00:	4619      	mov	r1, r3
 8004e02:	481f      	ldr	r0, [pc, #124]	; (8004e80 <HAL_I2C_MspInit+0x240>)
 8004e04:	f001 fa6a 	bl	80062dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004e08:	2310      	movs	r3, #16
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e0c:	2312      	movs	r3, #18
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e14:	2303      	movs	r3, #3
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004e18:	2309      	movs	r3, #9
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	4619      	mov	r1, r3
 8004e22:	4814      	ldr	r0, [pc, #80]	; (8004e74 <HAL_I2C_MspInit+0x234>)
 8004e24:	f001 fa5a 	bl	80062dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004e32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e36:	6413      	str	r3, [r2, #64]	; 0x40
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <HAL_I2C_MspInit+0x230>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004e44:	2200      	movs	r2, #0
 8004e46:	2100      	movs	r1, #0
 8004e48:	2048      	movs	r0, #72	; 0x48
 8004e4a:	f000 ffba 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004e4e:	2048      	movs	r0, #72	; 0x48
 8004e50:	f000 ffd3 	bl	8005dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2100      	movs	r1, #0
 8004e58:	2049      	movs	r0, #73	; 0x49
 8004e5a:	f000 ffb2 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004e5e:	2049      	movs	r0, #73	; 0x49
 8004e60:	f000 ffcb 	bl	8005dfa <HAL_NVIC_EnableIRQ>
}
 8004e64:	bf00      	nop
 8004e66:	3738      	adds	r7, #56	; 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40005400 	.word	0x40005400
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40020400 	.word	0x40020400
 8004e78:	40005800 	.word	0x40005800
 8004e7c:	40005c00 	.word	0x40005c00
 8004e80:	40020000 	.word	0x40020000

08004e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_SPI_MspInit+0x84>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12c      	bne.n	8004f00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_SPI_MspInit+0x88>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ede:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ef0:	2305      	movs	r3, #5
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <HAL_SPI_MspInit+0x8c>)
 8004efc:	f001 f9ee 	bl	80062dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f00:	bf00      	nop
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40003800 	.word	0x40003800
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40020400 	.word	0x40020400

08004f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <HAL_TIM_Base_MspInit+0xa8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d116      	bne.n	8004f54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6453      	str	r3, [r2, #68]	; 0x44
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	201a      	movs	r0, #26
 8004f48:	f000 ff3b 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f4c:	201a      	movs	r0, #26
 8004f4e:	f000 ff54 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004f52:	e02e      	b.n	8004fb2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
}
 8004f7a:	e01a      	b.n	8004fb2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d115      	bne.n	8004fb2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f94:	6453      	str	r3, [r2, #68]	; 0x44
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HAL_TIM_Base_MspInit+0xac>)
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	201a      	movs	r0, #26
 8004fa8:	f000 ff0b 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004fac:	201a      	movs	r0, #26
 8004fae:	f000 ff24 	bl	8005dfa <HAL_NVIC_EnableIRQ>
}
 8004fb2:	bf00      	nop
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40014800 	.word	0x40014800

08004fc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd0:	f107 031c 	add.w	r3, r7, #28
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a41      	ldr	r2, [pc, #260]	; (80050ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d14a      	bne.n	8005080 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6313      	str	r3, [r2, #48]	; 0x30
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	4a31      	ldr	r2, [pc, #196]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	6313      	str	r3, [r2, #48]	; 0x30
 8005032:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504a:	2300      	movs	r3, #0
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800504e:	2302      	movs	r3, #2
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8005052:	f107 031c 	add.w	r3, r7, #28
 8005056:	4619      	mov	r1, r3
 8005058:	4826      	ldr	r0, [pc, #152]	; (80050f4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800505a:	f001 f93f 	bl	80062dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 800505e:	2320      	movs	r3, #32
 8005060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005062:	2302      	movs	r3, #2
 8005064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506a:	2300      	movs	r3, #0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800506e:	2302      	movs	r3, #2
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8005072:	f107 031c 	add.w	r3, r7, #28
 8005076:	4619      	mov	r1, r3
 8005078:	481f      	ldr	r0, [pc, #124]	; (80050f8 <HAL_TIM_Encoder_MspInit+0x130>)
 800507a:	f001 f92f 	bl	80062dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800507e:	e030      	b.n	80050e2 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <HAL_TIM_Encoder_MspInit+0x134>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12b      	bne.n	80050e2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a17      	ldr	r2, [pc, #92]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 8005094:	f043 0308 	orr.w	r3, r3, #8
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a10      	ldr	r2, [pc, #64]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x128>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 80050c2:	2303      	movs	r3, #3
 80050c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ce:	2300      	movs	r3, #0
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80050d2:	2302      	movs	r3, #2
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d6:	f107 031c 	add.w	r3, r7, #28
 80050da:	4619      	mov	r1, r3
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <HAL_TIM_Encoder_MspInit+0x12c>)
 80050de:	f001 f8fd 	bl	80062dc <HAL_GPIO_Init>
}
 80050e2:	bf00      	nop
 80050e4:	3730      	adds	r7, #48	; 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020000 	.word	0x40020000
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40000c00 	.word	0x40000c00

08005100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <HAL_TIM_MspPostInit+0xf0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d11f      	bne.n	8005162 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	6313      	str	r3, [r2, #48]	; 0x30
 8005132:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 800513e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005150:	2301      	movs	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4619      	mov	r1, r3
 800515a:	4827      	ldr	r0, [pc, #156]	; (80051f8 <HAL_TIM_MspPostInit+0xf8>)
 800515c:	f001 f8be 	bl	80062dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005160:	e041      	b.n	80051e6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d13c      	bne.n	80051e6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6313      	str	r3, [r2, #48]	; 0x30
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	6313      	str	r3, [r2, #48]	; 0x30
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_TIM_MspPostInit+0xf4>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 80051a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b2:	2300      	movs	r3, #0
 80051b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051b6:	2301      	movs	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 80051ba:	f107 0314 	add.w	r3, r7, #20
 80051be:	4619      	mov	r1, r3
 80051c0:	480d      	ldr	r0, [pc, #52]	; (80051f8 <HAL_TIM_MspPostInit+0xf8>)
 80051c2:	f001 f88b 	bl	80062dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 80051c6:	2308      	movs	r3, #8
 80051c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051d6:	2301      	movs	r3, #1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 80051da:	f107 0314 	add.w	r3, r7, #20
 80051de:	4619      	mov	r1, r3
 80051e0:	4806      	ldr	r0, [pc, #24]	; (80051fc <HAL_TIM_MspPostInit+0xfc>)
 80051e2:	f001 f87b 	bl	80062dc <HAL_GPIO_Init>
}
 80051e6:	bf00      	nop
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020000 	.word	0x40020000
 80051fc:	40020400 	.word	0x40020400

08005200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_UART_MspInit+0x94>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d133      	bne.n	800528a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <HAL_UART_MspInit+0x98>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_UART_MspInit+0x98>)
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <HAL_UART_MspInit+0x98>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <HAL_UART_MspInit+0x98>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <HAL_UART_MspInit+0x98>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6313      	str	r3, [r2, #48]	; 0x30
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_UART_MspInit+0x98>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800525a:	230c      	movs	r3, #12
 800525c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525e:	2302      	movs	r3, #2
 8005260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005266:	2303      	movs	r3, #3
 8005268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800526a:	2307      	movs	r3, #7
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526e:	f107 0314 	add.w	r3, r7, #20
 8005272:	4619      	mov	r1, r3
 8005274:	4809      	ldr	r0, [pc, #36]	; (800529c <HAL_UART_MspInit+0x9c>)
 8005276:	f001 f831 	bl	80062dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800527a:	2200      	movs	r2, #0
 800527c:	2100      	movs	r1, #0
 800527e:	2026      	movs	r0, #38	; 0x26
 8005280:	f000 fd9f 	bl	8005dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005284:	2026      	movs	r0, #38	; 0x26
 8005286:	f000 fdb8 	bl	8005dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800528a:	bf00      	nop
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40004400 	.word	0x40004400
 8005298:	40023800 	.word	0x40023800
 800529c:	40020000 	.word	0x40020000

080052a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052a4:	e7fe      	b.n	80052a4 <NMI_Handler+0x4>

080052a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052aa:	e7fe      	b.n	80052aa <HardFault_Handler+0x4>

080052ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052b0:	e7fe      	b.n	80052b0 <MemManage_Handler+0x4>

080052b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052b6:	e7fe      	b.n	80052b6 <BusFault_Handler+0x4>

080052b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052bc:	e7fe      	b.n	80052bc <UsageFault_Handler+0x4>

080052be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052ec:	f000 f9d8 	bl	80056a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052f0:	bf00      	nop
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	static uint8_t flag = 0;
	if (flag ==0){
 80052f8:	4b13      	ldr	r3, [pc, #76]	; (8005348 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d111      	bne.n	8005324 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>
		prev_measurements[0] = measurements[0];
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 8005306:	701a      	strb	r2, [r3, #0]
		prev_measurements[1] = measurements[1];
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 800530a:	785a      	ldrb	r2, [r3, #1]
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 800530e:	705a      	strb	r2, [r3, #1]
		prev_measurements[2] = measurements[2];
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <TIM1_TRG_COM_TIM11_IRQHandler+0x58>)
 8005312:	789a      	ldrb	r2, [r3, #2]
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>)
 8005316:	709a      	strb	r2, [r3, #2]
		TOF_get_measurement();
 8005318:	f7fc f884 	bl	8001424 <TOF_get_measurement>
		flag = 1;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e009      	b.n	8005338 <TIM1_TRG_COM_TIM11_IRQHandler+0x44>
	}
	else{
		TOF_start_measurement();
 8005324:	f7fc f84e 	bl	80013c4 <TOF_start_measurement>
		flag = 0;
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <TIM1_TRG_COM_TIM11_IRQHandler+0x54>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800532e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005332:	4808      	ldr	r0, [pc, #32]	; (8005354 <TIM1_TRG_COM_TIM11_IRQHandler+0x60>)
 8005334:	f001 f96f 	bl	8006616 <HAL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005338:	4807      	ldr	r0, [pc, #28]	; (8005358 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>)
 800533a:	f004 fbfd 	bl	8009b38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800533e:	4807      	ldr	r0, [pc, #28]	; (800535c <TIM1_TRG_COM_TIM11_IRQHandler+0x68>)
 8005340:	f004 fbfa 	bl	8009b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20002522 	.word	0x20002522
 800534c:	2000012c 	.word	0x2000012c
 8005350:	20000130 	.word	0x20000130
 8005354:	40020800 	.word	0x40020800
 8005358:	20002374 	.word	0x20002374
 800535c:	20002494 	.word	0x20002494

08005360 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <I2C1_EV_IRQHandler+0x10>)
 8005366:	f001 fd1f 	bl	8006da8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20002220 	.word	0x20002220

08005374 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005378:	4802      	ldr	r0, [pc, #8]	; (8005384 <I2C1_ER_IRQHandler+0x10>)
 800537a:	f001 fe86 	bl	800708a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20002220 	.word	0x20002220

08005388 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <I2C2_EV_IRQHandler+0x10>)
 800538e:	f001 fd0b 	bl	8006da8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20002274 	.word	0x20002274

0800539c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80053a0:	4802      	ldr	r0, [pc, #8]	; (80053ac <I2C2_ER_IRQHandler+0x10>)
 80053a2:	f001 fe72 	bl	800708a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20002274 	.word	0x20002274

080053b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053b4:	4802      	ldr	r0, [pc, #8]	; (80053c0 <USART2_IRQHandler+0x10>)
 80053b6:	f005 fae5 	bl	800a984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200024dc 	.word	0x200024dc

080053c4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80053c8:	4802      	ldr	r0, [pc, #8]	; (80053d4 <I2C3_EV_IRQHandler+0x10>)
 80053ca:	f001 fced 	bl	8006da8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200022c8 	.word	0x200022c8

080053d8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <I2C3_ER_IRQHandler+0x10>)
 80053de:	f001 fe54 	bl	800708a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200022c8 	.word	0x200022c8

080053ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <_sbrk+0x5c>)
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <_sbrk+0x60>)
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <_sbrk+0x64>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <_sbrk+0x64>)
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <_sbrk+0x68>)
 800540c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <_sbrk+0x64>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d207      	bcs.n	800542c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800541c:	f006 f9b0 	bl	800b780 <__errno>
 8005420:	4603      	mov	r3, r0
 8005422:	220c      	movs	r2, #12
 8005424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e009      	b.n	8005440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <_sbrk+0x64>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <_sbrk+0x64>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4413      	add	r3, r2
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <_sbrk+0x64>)
 800543c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20020000 	.word	0x20020000
 800544c:	00000400 	.word	0x00000400
 8005450:	20002524 	.word	0x20002524
 8005454:	20002560 	.word	0x20002560

08005458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <SystemInit+0x20>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <SystemInit+0x20>)
 8005464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8005482:	2005      	movs	r0, #5
 8005484:	f000 f92c 	bl	80056e0 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <uart_startup_transmit+0x40>)
 800548a:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	480c      	ldr	r0, [pc, #48]	; (80054c0 <uart_startup_transmit+0x44>)
 8005490:	f006 f9d6 	bl	800b840 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <uart_startup_transmit+0x44>)
 8005496:	f7fa fea3 	bl	80001e0 <strlen>
 800549a:	4603      	mov	r3, r0
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	4907      	ldr	r1, [pc, #28]	; (80054c0 <uart_startup_transmit+0x44>)
 80054a2:	4808      	ldr	r0, [pc, #32]	; (80054c4 <uart_startup_transmit+0x48>)
 80054a4:	f005 f9f9 	bl	800a89a <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 80054a8:	2201      	movs	r2, #1
 80054aa:	4907      	ldr	r1, [pc, #28]	; (80054c8 <uart_startup_transmit+0x4c>)
 80054ac:	4805      	ldr	r0, [pc, #20]	; (80054c4 <uart_startup_transmit+0x48>)
 80054ae:	f005 fa39 	bl	800a924 <HAL_UART_Receive_IT>
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	0800c284 	.word	0x0800c284
 80054c0:	2000009c 	.word	0x2000009c
 80054c4:	200024dc 	.word	0x200024dc
 80054c8:	200000dc 	.word	0x200000dc

080054cc <uart_task>:

void uart_task()
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <uart_task+0x3c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d014      	beq.n	8005502 <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 80054d8:	480c      	ldr	r0, [pc, #48]	; (800550c <uart_task+0x40>)
 80054da:	f7fa fe81 	bl	80001e0 <strlen>
 80054de:	4603      	mov	r3, r0
 80054e0:	4619      	mov	r1, r3
 80054e2:	480a      	ldr	r0, [pc, #40]	; (800550c <uart_task+0x40>)
 80054e4:	f000 f816 	bl	8005514 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 80054e8:	4808      	ldr	r0, [pc, #32]	; (800550c <uart_task+0x40>)
 80054ea:	f006 f945 	bl	800b778 <atoi>
 80054ee:	4603      	mov	r3, r0
 80054f0:	b21a      	sxth	r2, r3
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <uart_task+0x44>)
 80054f4:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <uart_task+0x3c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <uart_task+0x40>)
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
	}
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200000fc 	.word	0x200000fc
 800550c:	200000dc 	.word	0x200000dc
 8005510:	20000100 	.word	0x20000100

08005514 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4803      	ldr	r0, [pc, #12]	; (8005534 <uart_transmit+0x20>)
 8005528:	f005 f9b7 	bl	800a89a <HAL_UART_Transmit_IT>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200024dc 	.word	0x200024dc

08005538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <HAL_UART_RxCpltCallback+0x64>)
 8005548:	5c9b      	ldrb	r3, [r3, r2]
 800554a:	2b0a      	cmp	r3, #10
 800554c:	d10c      	bne.n	8005568 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a11      	ldr	r2, [pc, #68]	; (800559c <HAL_UART_RxCpltCallback+0x64>)
 8005556:	2100      	movs	r1, #0
 8005558:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_UART_RxCpltCallback+0x68>)
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
		index = 0;
 8005560:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e009      	b.n	800557c <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b1d      	cmp	r3, #29
 800556e:	d805      	bhi.n	800557c <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	3301      	adds	r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 800557a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_UART_RxCpltCallback+0x60>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_UART_RxCpltCallback+0x64>)
 8005584:	4413      	add	r3, r2
 8005586:	2201      	movs	r2, #1
 8005588:	4619      	mov	r1, r3
 800558a:	4806      	ldr	r0, [pc, #24]	; (80055a4 <HAL_UART_RxCpltCallback+0x6c>)
 800558c:	f005 f9ca 	bl	800a924 <HAL_UART_Receive_IT>

}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20002528 	.word	0x20002528
 800559c:	200000dc 	.word	0x200000dc
 80055a0:	200000fc 	.word	0x200000fc
 80055a4:	200024dc 	.word	0x200024dc

080055a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80055a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055ae:	490e      	ldr	r1, [pc, #56]	; (80055e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055b0:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b4:	e002      	b.n	80055bc <LoopCopyDataInit>

080055b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ba:	3304      	adds	r3, #4

080055bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c0:	d3f9      	bcc.n	80055b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c2:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055c4:	4c0b      	ldr	r4, [pc, #44]	; (80055f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c8:	e001      	b.n	80055ce <LoopFillZerobss>

080055ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055cc:	3204      	adds	r2, #4

080055ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d0:	d3fb      	bcc.n	80055ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055d2:	f7ff ff41 	bl	8005458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055d6:	f006 f8d9 	bl	800b78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055da:	f7fb ff53 	bl	8001484 <main>
  bx  lr    
 80055de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80055e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80055ec:	0800c3f0 	.word	0x0800c3f0
  ldr r2, =_sbss
 80055f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80055f4:	20002560 	.word	0x20002560

080055f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055f8:	e7fe      	b.n	80055f8 <ADC_IRQHandler>
	...

080055fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_Init+0x40>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0d      	ldr	r2, [pc, #52]	; (800563c <HAL_Init+0x40>)
 8005606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800560a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_Init+0x40>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <HAL_Init+0x40>)
 8005612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_Init+0x40>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a07      	ldr	r2, [pc, #28]	; (800563c <HAL_Init+0x40>)
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005624:	2003      	movs	r0, #3
 8005626:	f000 fbc1 	bl	8005dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800562a:	200f      	movs	r0, #15
 800562c:	f000 f808 	bl	8005640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005630:	f7ff fa9a 	bl	8004b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023c00 	.word	0x40023c00

08005640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005648:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_InitTick+0x54>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <HAL_InitTick+0x58>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	4619      	mov	r1, r3
 8005652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005656:	fbb3 f3f1 	udiv	r3, r3, r1
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fbd9 	bl	8005e16 <HAL_SYSTICK_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e00e      	b.n	800568c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d80a      	bhi.n	800568a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005674:	2200      	movs	r2, #0
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	f000 fba1 	bl	8005dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005680:	4a06      	ldr	r2, [pc, #24]	; (800569c <HAL_InitTick+0x5c>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000008 	.word	0x20000008
 8005698:	20000010 	.word	0x20000010
 800569c:	2000000c 	.word	0x2000000c

080056a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_IncTick+0x20>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_IncTick+0x24>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4413      	add	r3, r2
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_IncTick+0x24>)
 80056b2:	6013      	str	r3, [r2, #0]
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000010 	.word	0x20000010
 80056c4:	2000252c 	.word	0x2000252c

080056c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return uwTick;
 80056cc:	4b03      	ldr	r3, [pc, #12]	; (80056dc <HAL_GetTick+0x14>)
 80056ce:	681b      	ldr	r3, [r3, #0]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000252c 	.word	0x2000252c

080056e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056e8:	f7ff ffee 	bl	80056c8 <HAL_GetTick>
 80056ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d005      	beq.n	8005706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HAL_Delay+0x44>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005706:	bf00      	nop
 8005708:	f7ff ffde 	bl	80056c8 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d8f7      	bhi.n	8005708 <HAL_Delay+0x28>
  {
  }
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000010 	.word	0x20000010

08005728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e033      	b.n	80057a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fa36 	bl	8004bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800576e:	f023 0302 	bic.w	r3, r3, #2
 8005772:	f043 0202 	orr.w	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f94a 	bl	8005a14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
 8005796:	e001      	b.n	800579c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x1c>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e113      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x244>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b09      	cmp	r3, #9
 80057da:	d925      	bls.n	8005828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68d9      	ldr	r1, [r3, #12]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	3b1e      	subs	r3, #30
 80057f2:	2207      	movs	r2, #7
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43da      	mvns	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	400a      	ands	r2, r1
 8005800:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68d9      	ldr	r1, [r3, #12]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	4618      	mov	r0, r3
 8005814:	4603      	mov	r3, r0
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4403      	add	r3, r0
 800581a:	3b1e      	subs	r3, #30
 800581c:	409a      	lsls	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	e022      	b.n	800586e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6919      	ldr	r1, [r3, #16]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	2207      	movs	r2, #7
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43da      	mvns	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	400a      	ands	r2, r1
 800584a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6919      	ldr	r1, [r3, #16]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	4618      	mov	r0, r3
 800585e:	4603      	mov	r3, r0
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4403      	add	r3, r0
 8005864:	409a      	lsls	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b06      	cmp	r3, #6
 8005874:	d824      	bhi.n	80058c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	3b05      	subs	r3, #5
 8005888:	221f      	movs	r2, #31
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43da      	mvns	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	400a      	ands	r2, r1
 8005896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4618      	mov	r0, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	3b05      	subs	r3, #5
 80058b2:	fa00 f203 	lsl.w	r2, r0, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34
 80058be:	e04c      	b.n	800595a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	d824      	bhi.n	8005912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	3b23      	subs	r3, #35	; 0x23
 80058da:	221f      	movs	r2, #31
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43da      	mvns	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	400a      	ands	r2, r1
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	4618      	mov	r0, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	3b23      	subs	r3, #35	; 0x23
 8005904:	fa00 f203 	lsl.w	r2, r0, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
 8005910:	e023      	b.n	800595a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	3b41      	subs	r3, #65	; 0x41
 8005924:	221f      	movs	r2, #31
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43da      	mvns	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	400a      	ands	r2, r1
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	4618      	mov	r0, r3
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	3b41      	subs	r3, #65	; 0x41
 800594e:	fa00 f203 	lsl.w	r2, r0, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_ADC_ConfigChannel+0x250>)
 800595c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <HAL_ADC_ConfigChannel+0x254>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10f      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x1d8>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b12      	cmp	r3, #18
 800596e:	d10b      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_ADC_ConfigChannel+0x254>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d12b      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x23a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_ADC_ConfigChannel+0x258>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <HAL_ADC_ConfigChannel+0x1f4>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b11      	cmp	r3, #17
 80059a2:	d122      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <HAL_ADC_ConfigChannel+0x258>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d111      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059c6:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <HAL_ADC_ConfigChannel+0x25c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <HAL_ADC_ConfigChannel+0x260>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	0c9a      	lsrs	r2, r3, #18
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059dc:	e002      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f9      	bne.n	80059de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40012300 	.word	0x40012300
 8005a04:	40012000 	.word	0x40012000
 8005a08:	10000012 	.word	0x10000012
 8005a0c:	20000008 	.word	0x20000008
 8005a10:	431bde83 	.word	0x431bde83

08005a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a1c:	4b79      	ldr	r3, [pc, #484]	; (8005c04 <ADC_Init+0x1f0>)
 8005a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6859      	ldr	r1, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	4a58      	ldr	r2, [pc, #352]	; (8005c08 <ADC_Init+0x1f4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d022      	beq.n	8005af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	e00f      	b.n	8005b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0202 	bic.w	r2, r2, #2
 8005b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	7e1b      	ldrb	r3, [r3, #24]
 8005b2c:	005a      	lsls	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01b      	beq.n	8005b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	035a      	lsls	r2, r3, #13
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	e007      	b.n	8005b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	051a      	lsls	r2, r3, #20
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6899      	ldr	r1, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bca:	025a      	lsls	r2, r3, #9
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	029a      	lsls	r2, r3, #10
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40012300 	.word	0x40012300
 8005c08:	0f000001 	.word	0x0f000001

08005c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c3e:	4a04      	ldr	r2, [pc, #16]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	60d3      	str	r3, [r2, #12]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <__NVIC_GetPriorityGrouping+0x18>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 0307 	and.w	r3, r3, #7
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db0b      	blt.n	8005c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	f003 021f 	and.w	r2, r3, #31
 8005c88:	4907      	ldr	r1, [pc, #28]	; (8005ca8 <__NVIC_EnableIRQ+0x38>)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2001      	movs	r0, #1
 8005c92:	fa00 f202 	lsl.w	r2, r0, r2
 8005c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000e100 	.word	0xe000e100

08005cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	db0a      	blt.n	8005cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	490c      	ldr	r1, [pc, #48]	; (8005cf8 <__NVIC_SetPriority+0x4c>)
 8005cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cca:	0112      	lsls	r2, r2, #4
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	440b      	add	r3, r1
 8005cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cd4:	e00a      	b.n	8005cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <__NVIC_SetPriority+0x50>)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	0112      	lsls	r2, r2, #4
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	440b      	add	r3, r1
 8005cea:	761a      	strb	r2, [r3, #24]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	e000e100 	.word	0xe000e100
 8005cfc:	e000ed00 	.word	0xe000ed00

08005d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b089      	sub	sp, #36	; 0x24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f1c3 0307 	rsb	r3, r3, #7
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	bf28      	it	cs
 8005d1e:	2304      	movcs	r3, #4
 8005d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3304      	adds	r3, #4
 8005d26:	2b06      	cmp	r3, #6
 8005d28:	d902      	bls.n	8005d30 <NVIC_EncodePriority+0x30>
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3b03      	subs	r3, #3
 8005d2e:	e000      	b.n	8005d32 <NVIC_EncodePriority+0x32>
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	401a      	ands	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d48:	f04f 31ff 	mov.w	r1, #4294967295
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	43d9      	mvns	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d58:	4313      	orrs	r3, r2
         );
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d78:	d301      	bcc.n	8005d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e00f      	b.n	8005d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <SysTick_Config+0x40>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d86:	210f      	movs	r1, #15
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	f7ff ff8e 	bl	8005cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <SysTick_Config+0x40>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <SysTick_Config+0x40>)
 8005d98:	2207      	movs	r2, #7
 8005d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	e000e010 	.word	0xe000e010

08005dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff29 	bl	8005c0c <__NVIC_SetPriorityGrouping>
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dd4:	f7ff ff3e 	bl	8005c54 <__NVIC_GetPriorityGrouping>
 8005dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f7ff ff8e 	bl	8005d00 <NVIC_EncodePriority>
 8005de4:	4602      	mov	r2, r0
 8005de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff5d 	bl	8005cac <__NVIC_SetPriority>
}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ff31 	bl	8005c70 <__NVIC_EnableIRQ>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ffa2 	bl	8005d68 <SysTick_Config>
 8005e24:	4603      	mov	r3, r0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	f7ff fc44 	bl	80056c8 <HAL_GetTick>
 8005e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d008      	beq.n	8005e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2280      	movs	r2, #128	; 0x80
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e052      	b.n	8005f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0216 	bic.w	r2, r2, #22
 8005e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <HAL_DMA_Abort+0x62>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0208 	bic.w	r2, r2, #8
 8005e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eb0:	e013      	b.n	8005eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb2:	f7ff fc09 	bl	80056c8 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d90c      	bls.n	8005eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e015      	b.n	8005f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e4      	bne.n	8005eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	223f      	movs	r2, #63	; 0x3f
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d004      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2280      	movs	r2, #128	; 0x80
 8005f26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e00c      	b.n	8005f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2205      	movs	r2, #5
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f82:	4b23      	ldr	r3, [pc, #140]	; (8006010 <HAL_FLASH_Program+0xa0>)
 8005f84:	7e1b      	ldrb	r3, [r3, #24]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_FLASH_Program+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e03b      	b.n	8006006 <HAL_FLASH_Program+0x96>
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_FLASH_Program+0xa0>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f98:	f000 f860 	bl	800605c <FLASH_WaitForLastOperation>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d12b      	bne.n	8005ffe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d105      	bne.n	8005fb8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005fac:	783b      	ldrb	r3, [r7, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68b8      	ldr	r0, [r7, #8]
 8005fb2:	f000 f90b 	bl	80061cc <FLASH_Program_Byte>
 8005fb6:	e016      	b.n	8005fe6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005fbe:	883b      	ldrh	r3, [r7, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68b8      	ldr	r0, [r7, #8]
 8005fc4:	f000 f8de 	bl	8006184 <FLASH_Program_HalfWord>
 8005fc8:	e00d      	b.n	8005fe6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d105      	bne.n	8005fdc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68b8      	ldr	r0, [r7, #8]
 8005fd6:	f000 f8b3 	bl	8006140 <FLASH_Program_Word>
 8005fda:	e004      	b.n	8005fe6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	68b8      	ldr	r0, [r7, #8]
 8005fe2:	f000 f87b 	bl	80060dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fe6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fea:	f000 f837 	bl	800605c <FLASH_WaitForLastOperation>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <HAL_FLASH_Program+0xa4>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_FLASH_Program+0xa4>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ffe:	4b04      	ldr	r3, [pc, #16]	; (8006010 <HAL_FLASH_Program+0xa0>)
 8006000:	2200      	movs	r2, #0
 8006002:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20002530 	.word	0x20002530
 8006014:	40023c00 	.word	0x40023c00

08006018 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_FLASH_Unlock+0x38>)
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0b      	bge.n	8006042 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <HAL_FLASH_Unlock+0x38>)
 800602c:	4a09      	ldr	r2, [pc, #36]	; (8006054 <HAL_FLASH_Unlock+0x3c>)
 800602e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <HAL_FLASH_Unlock+0x38>)
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_FLASH_Unlock+0x40>)
 8006034:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_FLASH_Unlock+0x38>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	da01      	bge.n	8006042 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006042:	79fb      	ldrb	r3, [r7, #7]
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40023c00 	.word	0x40023c00
 8006054:	45670123 	.word	0x45670123
 8006058:	cdef89ab 	.word	0xcdef89ab

0800605c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <FLASH_WaitForLastOperation+0x78>)
 800606a:	2200      	movs	r2, #0
 800606c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800606e:	f7ff fb2b 	bl	80056c8 <HAL_GetTick>
 8006072:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006074:	e010      	b.n	8006098 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d00c      	beq.n	8006098 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <FLASH_WaitForLastOperation+0x38>
 8006084:	f7ff fb20 	bl	80056c8 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d201      	bcs.n	8006098 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e019      	b.n	80060cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <FLASH_WaitForLastOperation+0x7c>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e8      	bne.n	8006076 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <FLASH_WaitForLastOperation+0x7c>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <FLASH_WaitForLastOperation+0x7c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <FLASH_WaitForLastOperation+0x7c>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80060c2:	f000 f8a5 	bl	8006210 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
  
}  
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20002530 	.word	0x20002530
 80060d8:	40023c00 	.word	0x40023c00

080060dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 80060ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	4a10      	ldr	r2, [pc, #64]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 80060fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80060fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a0d      	ldr	r2, [pc, #52]	; (800613c <FLASH_Program_DoubleWord+0x60>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006112:	f3bf 8f6f 	isb	sy
}
 8006116:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	000a      	movs	r2, r1
 8006126:	2300      	movs	r3, #0
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	3104      	adds	r1, #4
 800612c:	4613      	mov	r3, r2
 800612e:	600b      	str	r3, [r1, #0]
}
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40023c00 	.word	0x40023c00

08006140 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <FLASH_Program_Word+0x40>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <FLASH_Program_Word+0x40>)
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006154:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <FLASH_Program_Word+0x40>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <FLASH_Program_Word+0x40>)
 800615c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006160:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <FLASH_Program_Word+0x40>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4a06      	ldr	r2, [pc, #24]	; (8006180 <FLASH_Program_Word+0x40>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40023c00 	.word	0x40023c00

08006184 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006190:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <FLASH_Program_HalfWord+0x44>)
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	801a      	strh	r2, [r3, #0]
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40023c00 	.word	0x40023c00

080061cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <FLASH_Program_Byte+0x40>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4a0b      	ldr	r2, [pc, #44]	; (800620c <FLASH_Program_Byte+0x40>)
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <FLASH_Program_Byte+0x40>)
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <FLASH_Program_Byte+0x40>)
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <FLASH_Program_Byte+0x40>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	4a06      	ldr	r2, [pc, #24]	; (800620c <FLASH_Program_Byte+0x40>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	701a      	strb	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40023c00 	.word	0x40023c00

08006210 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006214:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006220:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f043 0310 	orr.w	r3, r3, #16
 8006228:	4a2b      	ldr	r2, [pc, #172]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 800622a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 800622e:	2210      	movs	r2, #16
 8006230:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006232:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800623e:	4b26      	ldr	r3, [pc, #152]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f043 0308 	orr.w	r3, r3, #8
 8006246:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 8006248:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800624a:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 800624c:	2220      	movs	r2, #32
 800624e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800625c:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f043 0304 	orr.w	r3, r3, #4
 8006264:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 8006266:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 800626a:	2240      	movs	r2, #64	; 0x40
 800626c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 8006284:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 8006288:	2280      	movs	r2, #128	; 0x80
 800628a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 80062a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 80062a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d008      	beq.n	80062ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <FLASH_SetErrorCode+0xc8>)
 80062c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <FLASH_SetErrorCode+0xc4>)
 80062c6:	2202      	movs	r2, #2
 80062c8:	60da      	str	r2, [r3, #12]
  }
}
 80062ca:	bf00      	nop
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40023c00 	.word	0x40023c00
 80062d8:	20002530 	.word	0x20002530

080062dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	e159      	b.n	80065ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062f8:	2201      	movs	r2, #1
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	429a      	cmp	r2, r3
 8006312:	f040 8148 	bne.w	80065a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d005      	beq.n	800632e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800632a:	2b02      	cmp	r3, #2
 800632c:	d130      	bne.n	8006390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	2203      	movs	r2, #3
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006364:	2201      	movs	r2, #1
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 0201 	and.w	r2, r3, #1
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b03      	cmp	r3, #3
 800639a:	d017      	beq.n	80063cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	2203      	movs	r2, #3
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d123      	bne.n	8006420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	08da      	lsrs	r2, r3, #3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3208      	adds	r2, #8
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	220f      	movs	r2, #15
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	08da      	lsrs	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3208      	adds	r2, #8
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	2203      	movs	r2, #3
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 0203 	and.w	r2, r3, #3
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a2 	beq.w	80065a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4b57      	ldr	r3, [pc, #348]	; (80065c4 <HAL_GPIO_Init+0x2e8>)
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	4a56      	ldr	r2, [pc, #344]	; (80065c4 <HAL_GPIO_Init+0x2e8>)
 800646c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006470:	6453      	str	r3, [r2, #68]	; 0x44
 8006472:	4b54      	ldr	r3, [pc, #336]	; (80065c4 <HAL_GPIO_Init+0x2e8>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800647e:	4a52      	ldr	r2, [pc, #328]	; (80065c8 <HAL_GPIO_Init+0x2ec>)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3302      	adds	r3, #2
 8006486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	220f      	movs	r2, #15
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a49      	ldr	r2, [pc, #292]	; (80065cc <HAL_GPIO_Init+0x2f0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d019      	beq.n	80064de <HAL_GPIO_Init+0x202>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a48      	ldr	r2, [pc, #288]	; (80065d0 <HAL_GPIO_Init+0x2f4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <HAL_GPIO_Init+0x1fe>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a47      	ldr	r2, [pc, #284]	; (80065d4 <HAL_GPIO_Init+0x2f8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00d      	beq.n	80064d6 <HAL_GPIO_Init+0x1fa>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a46      	ldr	r2, [pc, #280]	; (80065d8 <HAL_GPIO_Init+0x2fc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <HAL_GPIO_Init+0x1f6>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a45      	ldr	r2, [pc, #276]	; (80065dc <HAL_GPIO_Init+0x300>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d101      	bne.n	80064ce <HAL_GPIO_Init+0x1f2>
 80064ca:	2304      	movs	r3, #4
 80064cc:	e008      	b.n	80064e0 <HAL_GPIO_Init+0x204>
 80064ce:	2307      	movs	r3, #7
 80064d0:	e006      	b.n	80064e0 <HAL_GPIO_Init+0x204>
 80064d2:	2303      	movs	r3, #3
 80064d4:	e004      	b.n	80064e0 <HAL_GPIO_Init+0x204>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e002      	b.n	80064e0 <HAL_GPIO_Init+0x204>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <HAL_GPIO_Init+0x204>
 80064de:	2300      	movs	r3, #0
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	f002 0203 	and.w	r2, r2, #3
 80064e6:	0092      	lsls	r2, r2, #2
 80064e8:	4093      	lsls	r3, r2
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064f0:	4935      	ldr	r1, [pc, #212]	; (80065c8 <HAL_GPIO_Init+0x2ec>)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	3302      	adds	r3, #2
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064fe:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <HAL_GPIO_Init+0x304>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	43db      	mvns	r3, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006522:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <HAL_GPIO_Init+0x304>)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006528:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <HAL_GPIO_Init+0x304>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	43db      	mvns	r3, r3
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4013      	ands	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800654c:	4a24      	ldr	r2, [pc, #144]	; (80065e0 <HAL_GPIO_Init+0x304>)
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006552:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <HAL_GPIO_Init+0x304>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	43db      	mvns	r3, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4013      	ands	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006576:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_GPIO_Init+0x304>)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800657c:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <HAL_GPIO_Init+0x304>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	43db      	mvns	r3, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4013      	ands	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065a0:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <HAL_GPIO_Init+0x304>)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3301      	adds	r3, #1
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	f67f aea2 	bls.w	80062f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	40013800 	.word	0x40013800
 80065cc:	40020000 	.word	0x40020000
 80065d0:	40020400 	.word	0x40020400
 80065d4:	40020800 	.word	0x40020800
 80065d8:	40020c00 	.word	0x40020c00
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40013c00 	.word	0x40013c00

080065e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
 80065f0:	4613      	mov	r3, r2
 80065f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065f4:	787b      	ldrb	r3, [r7, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006600:	e003      	b.n	800660a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	041a      	lsls	r2, r3, #16
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006628:	887a      	ldrh	r2, [r7, #2]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4013      	ands	r3, r2
 800662e:	041a      	lsls	r2, r3, #16
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	43d9      	mvns	r1, r3
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	400b      	ands	r3, r1
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	619a      	str	r2, [r3, #24]
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e12b      	b.n	80068b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fe fae4 	bl	8004c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2224      	movs	r2, #36	; 0x24
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800669e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066b0:	f002 fea2 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 80066b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4a81      	ldr	r2, [pc, #516]	; (80068c0 <HAL_I2C_Init+0x274>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d807      	bhi.n	80066d0 <HAL_I2C_Init+0x84>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a80      	ldr	r2, [pc, #512]	; (80068c4 <HAL_I2C_Init+0x278>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	bf94      	ite	ls
 80066c8:	2301      	movls	r3, #1
 80066ca:	2300      	movhi	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	e006      	b.n	80066de <HAL_I2C_Init+0x92>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a7d      	ldr	r2, [pc, #500]	; (80068c8 <HAL_I2C_Init+0x27c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bf94      	ite	ls
 80066d8:	2301      	movls	r3, #1
 80066da:	2300      	movhi	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0e7      	b.n	80068b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a78      	ldr	r2, [pc, #480]	; (80068cc <HAL_I2C_Init+0x280>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	0c9b      	lsrs	r3, r3, #18
 80066f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a6a      	ldr	r2, [pc, #424]	; (80068c0 <HAL_I2C_Init+0x274>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d802      	bhi.n	8006720 <HAL_I2C_Init+0xd4>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3301      	adds	r3, #1
 800671e:	e009      	b.n	8006734 <HAL_I2C_Init+0xe8>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	4a69      	ldr	r2, [pc, #420]	; (80068d0 <HAL_I2C_Init+0x284>)
 800672c:	fba2 2303 	umull	r2, r3, r2, r3
 8006730:	099b      	lsrs	r3, r3, #6
 8006732:	3301      	adds	r3, #1
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	430b      	orrs	r3, r1
 800673a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	495c      	ldr	r1, [pc, #368]	; (80068c0 <HAL_I2C_Init+0x274>)
 8006750:	428b      	cmp	r3, r1
 8006752:	d819      	bhi.n	8006788 <HAL_I2C_Init+0x13c>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1e59      	subs	r1, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006768:	400b      	ands	r3, r1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_I2C_Init+0x138>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1e59      	subs	r1, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	fbb1 f3f3 	udiv	r3, r1, r3
 800677c:	3301      	adds	r3, #1
 800677e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006782:	e051      	b.n	8006828 <HAL_I2C_Init+0x1dc>
 8006784:	2304      	movs	r3, #4
 8006786:	e04f      	b.n	8006828 <HAL_I2C_Init+0x1dc>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d111      	bne.n	80067b4 <HAL_I2C_Init+0x168>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	440b      	add	r3, r1
 800679e:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e012      	b.n	80067da <HAL_I2C_Init+0x18e>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	1e58      	subs	r0, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	0099      	lsls	r1, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ca:	3301      	adds	r3, #1
 80067cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf0c      	ite	eq
 80067d4:	2301      	moveq	r3, #1
 80067d6:	2300      	movne	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_I2C_Init+0x196>
 80067de:	2301      	movs	r3, #1
 80067e0:	e022      	b.n	8006828 <HAL_I2C_Init+0x1dc>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10e      	bne.n	8006808 <HAL_I2C_Init+0x1bc>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1e58      	subs	r0, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6859      	ldr	r1, [r3, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	440b      	add	r3, r1
 80067f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067fc:	3301      	adds	r3, #1
 80067fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006806:	e00f      	b.n	8006828 <HAL_I2C_Init+0x1dc>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1e58      	subs	r0, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	0099      	lsls	r1, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	fbb0 f3f3 	udiv	r3, r0, r3
 800681e:	3301      	adds	r3, #1
 8006820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	6809      	ldr	r1, [r1, #0]
 800682c:	4313      	orrs	r3, r2
 800682e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6911      	ldr	r1, [r2, #16]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68d2      	ldr	r2, [r2, #12]
 8006862:	4311      	orrs	r1, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	430b      	orrs	r3, r1
 800686a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695a      	ldr	r2, [r3, #20]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	000186a0 	.word	0x000186a0
 80068c4:	001e847f 	.word	0x001e847f
 80068c8:	003d08ff 	.word	0x003d08ff
 80068cc:	431bde83 	.word	0x431bde83
 80068d0:	10624dd3 	.word	0x10624dd3

080068d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	817b      	strh	r3, [r7, #10]
 80068e6:	460b      	mov	r3, r1
 80068e8:	813b      	strh	r3, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068ee:	f7fe feeb 	bl	80056c8 <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	f040 80d9 	bne.w	8006ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2319      	movs	r3, #25
 8006908:	2201      	movs	r2, #1
 800690a:	496d      	ldr	r1, [pc, #436]	; (8006ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 ff6f 	bl	80087f0 <I2C_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
 800691a:	e0cc      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_I2C_Mem_Write+0x56>
 8006926:	2302      	movs	r3, #2
 8006928:	e0c5      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d007      	beq.n	8006950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800695e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2221      	movs	r2, #33	; 0x21
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a4d      	ldr	r2, [pc, #308]	; (8006ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006992:	88f8      	ldrh	r0, [r7, #6]
 8006994:	893a      	ldrh	r2, [r7, #8]
 8006996:	8979      	ldrh	r1, [r7, #10]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4603      	mov	r3, r0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fde6 	bl	8008574 <I2C_RequestMemoryWrite>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d052      	beq.n	8006a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e081      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f001 fff0 	bl	800899c <I2C_WaitOnTXEFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d107      	bne.n	80069da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06b      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d11b      	bne.n	8006a54 <HAL_I2C_Mem_Write+0x180>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1aa      	bne.n	80069b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f001 ffdc 	bl	8008a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d107      	bne.n	8006a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e016      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e000      	b.n	8006ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ab4:	2302      	movs	r3, #2
  }
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	00100002 	.word	0x00100002
 8006ac4:	ffff0000 	.word	0xffff0000

08006ac8 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	817b      	strh	r3, [r7, #10]
 8006ada:	460b      	mov	r3, r1
 8006adc:	813b      	strh	r3, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	f040 808e 	bne.w	8006c10 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006af4:	4b4a      	ldr	r3, [pc, #296]	; (8006c20 <HAL_I2C_Mem_Write_IT+0x158>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	08db      	lsrs	r3, r3, #3
 8006afa:	4a4a      	ldr	r2, [pc, #296]	; (8006c24 <HAL_I2C_Mem_Write_IT+0x15c>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	0a1a      	lsrs	r2, r3, #8
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009a      	lsls	r2, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d116      	bne.n	8006b48 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e064      	b.n	8006c12 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d0db      	beq.n	8006b0e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_I2C_Mem_Write_IT+0x9c>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e056      	b.n	8006c12 <HAL_I2C_Mem_Write_IT+0x14a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d007      	beq.n	8006b8a <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b98:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2221      	movs	r2, #33	; 0x21
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2240      	movs	r2, #64	; 0x40
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <HAL_I2C_Mem_Write_IT+0x160>)
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006bcc:	897a      	ldrh	r2, [r7, #10]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006bd2:	893a      	ldrh	r2, [r7, #8]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bf2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006c0a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000008 	.word	0x20000008
 8006c24:	14f8b589 	.word	0x14f8b589
 8006c28:	ffff0000 	.word	0xffff0000

08006c2c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	f040 809a 	bne.w	8006d8c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c58:	4b50      	ldr	r3, [pc, #320]	; (8006d9c <HAL_I2C_Mem_Read_IT+0x170>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	08db      	lsrs	r3, r3, #3
 8006c5e:	4a50      	ldr	r2, [pc, #320]	; (8006da0 <HAL_I2C_Mem_Read_IT+0x174>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	0a1a      	lsrs	r2, r3, #8
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009a      	lsls	r2, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d116      	bne.n	8006cac <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e070      	b.n	8006d8e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d0db      	beq.n	8006c72 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_I2C_Mem_Read_IT+0x9c>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e062      	b.n	8006d8e <HAL_I2C_Mem_Read_IT+0x162>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d007      	beq.n	8006cee <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0201 	orr.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2222      	movs	r2, #34	; 0x22
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <HAL_I2C_Mem_Read_IT+0x178>)
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d30:	897a      	ldrh	r2, [r7, #10]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006d36:	893a      	ldrh	r2, [r7, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d56:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d66:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006d86:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e000      	b.n	8006d8e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8006d8c:	2302      	movs	r3, #2
  }
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000008 	.word	0x20000008
 8006da0:	14f8b589 	.word	0x14f8b589
 8006da4:	ffff0000 	.word	0xffff0000

08006da8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d003      	beq.n	8006de0 <HAL_I2C_EV_IRQHandler+0x38>
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	f040 80c1 	bne.w	8006f62 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <HAL_I2C_EV_IRQHandler+0x6e>
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e00:	d003      	beq.n	8006e0a <HAL_I2C_EV_IRQHandler+0x62>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e08:	d101      	bne.n	8006e0e <HAL_I2C_EV_IRQHandler+0x66>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_I2C_EV_IRQHandler+0x68>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f000 8132 	beq.w	800707a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00c      	beq.n	8006e3a <HAL_I2C_EV_IRQHandler+0x92>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	0a5b      	lsrs	r3, r3, #9
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fe98 	bl	8008b62 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fd83 	bl	800793e <I2C_Master_SB>
 8006e38:	e092      	b.n	8006f60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	08db      	lsrs	r3, r3, #3
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <HAL_I2C_EV_IRQHandler+0xb2>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	0a5b      	lsrs	r3, r3, #9
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fdf9 	bl	8007a4a <I2C_Master_ADD10>
 8006e58:	e082      	b.n	8006f60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_I2C_EV_IRQHandler+0xd2>
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	0a5b      	lsrs	r3, r3, #9
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fe13 	bl	8007a9e <I2C_Master_ADDR>
 8006e78:	e072      	b.n	8006f60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	089b      	lsrs	r3, r3, #2
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03b      	beq.n	8006efe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e94:	f000 80f3 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	09db      	lsrs	r3, r3, #7
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00f      	beq.n	8006ec4 <HAL_I2C_EV_IRQHandler+0x11c>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	0a9b      	lsrs	r3, r3, #10
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d009      	beq.n	8006ec4 <HAL_I2C_EV_IRQHandler+0x11c>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	089b      	lsrs	r3, r3, #2
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9f3 	bl	80072a8 <I2C_MasterTransmit_TXE>
 8006ec2:	e04d      	b.n	8006f60 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80d6 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	0a5b      	lsrs	r3, r3, #9
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80cf 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b21      	cmp	r3, #33	; 0x21
 8006ee4:	d103      	bne.n	8006eee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa7a 	bl	80073e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eec:	e0c7      	b.n	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	f040 80c4 	bne.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fae8 	bl	80074cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006efc:	e0bf      	b.n	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0c:	f000 80b7 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	099b      	lsrs	r3, r3, #6
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <HAL_I2C_EV_IRQHandler+0x194>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	0a9b      	lsrs	r3, r3, #10
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_I2C_EV_IRQHandler+0x194>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb5d 	bl	80075f4 <I2C_MasterReceive_RXNE>
 8006f3a:	e011      	b.n	8006f60 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	089b      	lsrs	r3, r3, #2
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 809a 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	0a5b      	lsrs	r3, r3, #9
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8093 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fc06 	bl	800776a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f5e:	e08e      	b.n	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f60:	e08d      	b.n	800707e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e007      	b.n	8006f84 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d012      	beq.n	8006fb6 <HAL_I2C_EV_IRQHandler+0x20e>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	0a5b      	lsrs	r3, r3, #9
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 ffc4 	bl	8007f3c <I2C_Slave_ADDR>
 8006fb4:	e066      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x22e>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	0a5b      	lsrs	r3, r3, #9
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fffe 	bl	8007fd0 <I2C_Slave_STOPF>
 8006fd4:	e056      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b21      	cmp	r3, #33	; 0x21
 8006fda:	d002      	beq.n	8006fe2 <HAL_I2C_EV_IRQHandler+0x23a>
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b29      	cmp	r3, #41	; 0x29
 8006fe0:	d125      	bne.n	800702e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	09db      	lsrs	r3, r3, #7
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00f      	beq.n	800700e <HAL_I2C_EV_IRQHandler+0x266>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	0a9b      	lsrs	r3, r3, #10
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_I2C_EV_IRQHandler+0x266>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	089b      	lsrs	r3, r3, #2
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 feda 	bl	8007dc0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800700c:	e039      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	089b      	lsrs	r3, r3, #2
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d033      	beq.n	8007082 <HAL_I2C_EV_IRQHandler+0x2da>
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	0a5b      	lsrs	r3, r3, #9
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02d      	beq.n	8007082 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 ff07 	bl	8007e3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800702c:	e029      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	099b      	lsrs	r3, r3, #6
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00f      	beq.n	800705a <HAL_I2C_EV_IRQHandler+0x2b2>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	0a9b      	lsrs	r3, r3, #10
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	089b      	lsrs	r3, r3, #2
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 ff12 	bl	8007e7c <I2C_SlaveReceive_RXNE>
 8007058:	e014      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0a5b      	lsrs	r3, r3, #9
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d008      	beq.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ff40 	bl	8007ef8 <I2C_SlaveReceive_BTF>
 8007078:	e004      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800707a:	bf00      	nop
 800707c:	e002      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007082:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08a      	sub	sp, #40	; 0x28
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	0a1b      	lsrs	r3, r3, #8
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <HAL_I2C_ER_IRQHandler+0x78>
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	f043 0302 	orr.w	r3, r3, #2
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007100:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	0a9b      	lsrs	r3, r3, #10
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03f      	beq.n	800718e <HAL_I2C_ER_IRQHandler+0x104>
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d039      	beq.n	800718e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800711a:	7efb      	ldrb	r3, [r7, #27]
 800711c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007134:	7ebb      	ldrb	r3, [r7, #26]
 8007136:	2b20      	cmp	r3, #32
 8007138:	d112      	bne.n	8007160 <HAL_I2C_ER_IRQHandler+0xd6>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_I2C_ER_IRQHandler+0xd6>
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b21      	cmp	r3, #33	; 0x21
 8007144:	d008      	beq.n	8007158 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007146:	7cfb      	ldrb	r3, [r7, #19]
 8007148:	2b29      	cmp	r3, #41	; 0x29
 800714a:	d005      	beq.n	8007158 <HAL_I2C_ER_IRQHandler+0xce>
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	2b28      	cmp	r3, #40	; 0x28
 8007150:	d106      	bne.n	8007160 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b21      	cmp	r3, #33	; 0x21
 8007156:	d103      	bne.n	8007160 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 f869 	bl	8008230 <I2C_Slave_AF>
 800715e:	e016      	b.n	800718e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007168:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	f043 0304 	orr.w	r3, r3, #4
 8007170:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007172:	7efb      	ldrb	r3, [r7, #27]
 8007174:	2b10      	cmp	r3, #16
 8007176:	d002      	beq.n	800717e <HAL_I2C_ER_IRQHandler+0xf4>
 8007178:	7efb      	ldrb	r3, [r7, #27]
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d107      	bne.n	800718e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	0adb      	lsrs	r3, r3, #11
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	f043 0308 	orr.w	r3, r3, #8
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80071b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f8a0 	bl	8008310 <I2C_ITError>
  }
}
 80071d0:	bf00      	nop
 80071d2:	3728      	adds	r7, #40	; 0x28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
 8007234:	4613      	mov	r3, r2
 8007236:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d150      	bne.n	8007370 <I2C_MasterTransmit_TXE+0xc8>
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b21      	cmp	r3, #33	; 0x21
 80072d2:	d14d      	bne.n	8007370 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d01d      	beq.n	8007316 <I2C_MasterTransmit_TXE+0x6e>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d01a      	beq.n	8007316 <I2C_MasterTransmit_TXE+0x6e>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072e6:	d016      	beq.n	8007316 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2211      	movs	r2, #17
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff ff62 	bl	80071d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007314:	e060      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007324:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007334:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d107      	bne.n	8007360 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff7d 	bl	8007258 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800735e:	e03b      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ff35 	bl	80071d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800736e:	e033      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b21      	cmp	r3, #33	; 0x21
 8007374:	d005      	beq.n	8007382 <I2C_MasterTransmit_TXE+0xda>
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d12d      	bne.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b22      	cmp	r3, #34	; 0x22
 8007380:	d12a      	bne.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800739c:	e01c      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d103      	bne.n	80073b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f88e 	bl	80074cc <I2C_MemoryTransmit_TXE_BTF>
}
 80073b0:	e012      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	781a      	ldrb	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073d6:	e7ff      	b.n	80073d8 <I2C_MasterTransmit_TXE+0x130>
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b21      	cmp	r3, #33	; 0x21
 80073f8:	d164      	bne.n	80074c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d012      	beq.n	800742a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007428:	e04c      	b.n	80074c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d01d      	beq.n	800746c <I2C_MasterTransmit_BTF+0x8c>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b20      	cmp	r3, #32
 8007434:	d01a      	beq.n	800746c <I2C_MasterTransmit_BTF+0x8c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800743c:	d016      	beq.n	800746c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800744c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2211      	movs	r2, #17
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff feb7 	bl	80071d8 <HAL_I2C_MasterTxCpltCallback>
}
 800746a:	e02b      	b.n	80074c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800747a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800748a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d107      	bne.n	80074b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fed2 	bl	8007258 <HAL_I2C_MemTxCpltCallback>
}
 80074b4:	e006      	b.n	80074c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fe8a 	bl	80071d8 <HAL_I2C_MasterTxCpltCallback>
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d11d      	bne.n	8007520 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10b      	bne.n	8007504 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007502:	e073      	b.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007508:	b29b      	uxth	r3, r3
 800750a:	121b      	asrs	r3, r3, #8
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800751e:	e065      	b.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10b      	bne.n	8007540 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752c:	b2da      	uxtb	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800753e:	e055      	b.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	2b02      	cmp	r3, #2
 8007546:	d151      	bne.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b22      	cmp	r3, #34	; 0x22
 800754c:	d10d      	bne.n	800756a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007568:	e040      	b.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d015      	beq.n	80075a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b21      	cmp	r3, #33	; 0x21
 8007578:	d112      	bne.n	80075a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800759e:	e025      	b.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d120      	bne.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b21      	cmp	r3, #33	; 0x21
 80075ae:	d11d      	bne.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fe36 	bl	8007258 <HAL_I2C_MemTxCpltCallback>
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b22      	cmp	r3, #34	; 0x22
 8007606:	f040 80ac 	bne.w	8007762 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d921      	bls.n	800765c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b03      	cmp	r3, #3
 8007646:	f040 808c 	bne.w	8007762 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007658:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800765a:	e082      	b.n	8007762 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	2b02      	cmp	r3, #2
 8007662:	d075      	beq.n	8007750 <I2C_MasterReceive_RXNE+0x15c>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d002      	beq.n	8007670 <I2C_MasterReceive_RXNE+0x7c>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d16f      	bne.n	8007750 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fa15 	bl	8008aa0 <I2C_WaitOnSTOPRequestThroughIT>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d142      	bne.n	8007702 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800769a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d10a      	bne.n	80076ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fdc1 	bl	800726c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076ea:	e03a      	b.n	8007762 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2212      	movs	r2, #18
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fd76 	bl	80071ec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007700:	e02f      	b.n	8007762 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007710:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fd99 	bl	8007280 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800774e:	e008      	b.n	8007762 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775e:	605a      	str	r2, [r3, #4]
}
 8007760:	e7ff      	b.n	8007762 <I2C_MasterReceive_RXNE+0x16e>
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b04      	cmp	r3, #4
 8007780:	d11b      	bne.n	80077ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007790:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80077b8:	e0bd      	b.n	8007936 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d129      	bne.n	8007818 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d00a      	beq.n	80077f0 <I2C_MasterReceive_BTF+0x86>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d007      	beq.n	80077f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007816:	e08e      	b.n	8007936 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d176      	bne.n	8007910 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d002      	beq.n	800782e <I2C_MasterReceive_BTF+0xc4>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b10      	cmp	r3, #16
 800782c:	d108      	bne.n	8007840 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e019      	b.n	8007874 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b04      	cmp	r3, #4
 8007844:	d002      	beq.n	800784c <I2C_MasterReceive_BTF+0xe2>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d108      	bne.n	800785e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e00a      	b.n	8007874 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b10      	cmp	r3, #16
 8007862:	d007      	beq.n	8007874 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007872:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d10a      	bne.n	80078fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fcba 	bl	800726c <HAL_I2C_MemRxCpltCallback>
}
 80078f8:	e01d      	b.n	8007936 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2212      	movs	r2, #18
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fc6f 	bl	80071ec <HAL_I2C_MasterRxCpltCallback>
}
 800790e:	e012      	b.n	8007936 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d117      	bne.n	8007982 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	b2db      	uxtb	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800796a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800796c:	e067      	b.n	8007a3e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	b2da      	uxtb	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	611a      	str	r2, [r3, #16]
}
 8007980:	e05d      	b.n	8007a3e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798a:	d133      	bne.n	80079f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b21      	cmp	r3, #33	; 0x21
 8007996:	d109      	bne.n	80079ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799c:	b2db      	uxtb	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079a8:	611a      	str	r2, [r3, #16]
 80079aa:	e008      	b.n	80079be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <I2C_Master_SB+0x92>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d032      	beq.n	8007a3e <I2C_Master_SB+0x100>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d02d      	beq.n	8007a3e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f0:	605a      	str	r2, [r3, #4]
}
 80079f2:	e024      	b.n	8007a3e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10e      	bne.n	8007a1a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	11db      	asrs	r3, r3, #7
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f003 0306 	and.w	r3, r3, #6
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f063 030f 	orn	r3, r3, #15
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	611a      	str	r2, [r3, #16]
}
 8007a18:	e011      	b.n	8007a3e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10d      	bne.n	8007a3e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	11db      	asrs	r3, r3, #7
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0306 	and.w	r3, r3, #6
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f063 030e 	orn	r3, r3, #14
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	611a      	str	r2, [r3, #16]
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <I2C_Master_ADD10+0x26>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d108      	bne.n	8007a82 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <I2C_Master_ADD10+0x48>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a90:	605a      	str	r2, [r3, #4]
  }
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b091      	sub	sp, #68	; 0x44
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b22      	cmp	r3, #34	; 0x22
 8007ac6:	f040 8169 	bne.w	8007d9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <I2C_Master_ADDR+0x54>
 8007ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d10b      	bne.n	8007af2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ada:	2300      	movs	r3, #0
 8007adc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	633b      	str	r3, [r7, #48]	; 0x30
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	e160      	b.n	8007db4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11d      	bne.n	8007b36 <I2C_Master_ADDR+0x98>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b02:	d118      	bne.n	8007b36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b04:	2300      	movs	r3, #0
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	651a      	str	r2, [r3, #80]	; 0x50
 8007b34:	e13e      	b.n	8007db4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d113      	bne.n	8007b68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b40:	2300      	movs	r3, #0
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e115      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	f040 808a 	bne.w	8007c88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b7a:	d137      	bne.n	8007bec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9a:	d113      	bne.n	8007bc4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007baa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	e0e7      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	623b      	str	r3, [r7, #32]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	623b      	str	r3, [r7, #32]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e0d3      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d02e      	beq.n	8007c50 <I2C_Master_ADDR+0x1b2>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d02b      	beq.n	8007c50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	2b12      	cmp	r3, #18
 8007bfc:	d102      	bne.n	8007c04 <I2C_Master_ADDR+0x166>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d125      	bne.n	8007c50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d00e      	beq.n	8007c28 <I2C_Master_ADDR+0x18a>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d00b      	beq.n	8007c28 <I2C_Master_ADDR+0x18a>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d008      	beq.n	8007c28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e007      	b.n	8007c38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	e0a1      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	61bb      	str	r3, [r7, #24]
 8007c74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	e085      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d14d      	bne.n	8007d2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d016      	beq.n	8007cc6 <I2C_Master_ADDR+0x228>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d013      	beq.n	8007cc6 <I2C_Master_ADDR+0x228>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d010      	beq.n	8007cc6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e007      	b.n	8007cd6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cd4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce4:	d117      	bne.n	8007d16 <I2C_Master_ADDR+0x278>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cec:	d00b      	beq.n	8007d06 <I2C_Master_ADDR+0x268>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d008      	beq.n	8007d06 <I2C_Master_ADDR+0x268>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d005      	beq.n	8007d06 <I2C_Master_ADDR+0x268>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d002      	beq.n	8007d06 <I2C_Master_ADDR+0x268>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d107      	bne.n	8007d16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	e032      	b.n	8007d94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d4c:	d117      	bne.n	8007d7e <I2C_Master_ADDR+0x2e0>
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d54:	d00b      	beq.n	8007d6e <I2C_Master_ADDR+0x2d0>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d008      	beq.n	8007d6e <I2C_Master_ADDR+0x2d0>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d005      	beq.n	8007d6e <I2C_Master_ADDR+0x2d0>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d002      	beq.n	8007d6e <I2C_Master_ADDR+0x2d0>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d107      	bne.n	8007d7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007d9a:	e00b      	b.n	8007db4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	e7ff      	b.n	8007db4 <I2C_Master_ADDR+0x316>
 8007db4:	bf00      	nop
 8007db6:	3744      	adds	r7, #68	; 0x44
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d02b      	beq.n	8007e32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d114      	bne.n	8007e32 <I2C_SlaveTransmit_TXE+0x72>
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b29      	cmp	r3, #41	; 0x29
 8007e0c:	d111      	bne.n	8007e32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2221      	movs	r2, #33	; 0x21
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2228      	movs	r2, #40	; 0x28
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff f9e7 	bl	8007200 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d011      	beq.n	8007e70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02c      	beq.n	8007ef0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d114      	bne.n	8007ef0 <I2C_SlaveReceive_RXNE+0x74>
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eca:	d111      	bne.n	8007ef0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2222      	movs	r2, #34	; 0x22
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2228      	movs	r2, #40	; 0x28
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff f992 	bl	8007214 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f56:	2b28      	cmp	r3, #40	; 0x28
 8007f58:	d127      	bne.n	8007faa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	089b      	lsrs	r3, r3, #2
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007f76:	2301      	movs	r3, #1
 8007f78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	09db      	lsrs	r3, r3, #7
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	81bb      	strh	r3, [r7, #12]
 8007f8c:	e002      	b.n	8007f94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007f9c:	89ba      	ldrh	r2, [r7, #12]
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff f940 	bl	8007228 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007fa8:	e00e      	b.n	8007fc8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fde:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800802c:	d172      	bne.n	8008114 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b22      	cmp	r3, #34	; 0x22
 8008032:	d002      	beq.n	800803a <I2C_Slave_STOPF+0x6a>
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	2b2a      	cmp	r3, #42	; 0x2a
 8008038:	d135      	bne.n	80080a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f043 0204 	orr.w	r2, r3, #4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800806c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	4618      	mov	r0, r3
 8008074:	f7fd ff6d 	bl	8005f52 <HAL_DMA_GetState>
 8008078:	4603      	mov	r3, r0
 800807a:	2b01      	cmp	r3, #1
 800807c:	d049      	beq.n	8008112 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	4a69      	ldr	r2, [pc, #420]	; (8008228 <I2C_Slave_STOPF+0x258>)
 8008084:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd ff3f 	bl	8005f0e <HAL_DMA_Abort_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d03d      	beq.n	8008112 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080a4:	e035      	b.n	8008112 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f043 0204 	orr.w	r2, r3, #4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd ff37 	bl	8005f52 <HAL_DMA_GetState>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d014      	beq.n	8008114 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	4a4e      	ldr	r2, [pc, #312]	; (8008228 <I2C_Slave_STOPF+0x258>)
 80080f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd ff09 	bl	8005f0e <HAL_DMA_Abort_IT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d008      	beq.n	8008114 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	e000      	b.n	8008114 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008112:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d03e      	beq.n	800819c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d112      	bne.n	8008152 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691a      	ldr	r2, [r3, #16]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d112      	bne.n	8008186 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691a      	ldr	r2, [r3, #16]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818a:	b29b      	uxth	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	f043 0204 	orr.w	r2, r3, #4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8b3 	bl	8008310 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80081aa:	e039      	b.n	8008220 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	2b2a      	cmp	r3, #42	; 0x2a
 80081b0:	d109      	bne.n	80081c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2228      	movs	r2, #40	; 0x28
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff f827 	bl	8007214 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b28      	cmp	r3, #40	; 0x28
 80081d0:	d111      	bne.n	80081f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a15      	ldr	r2, [pc, #84]	; (800822c <I2C_Slave_STOPF+0x25c>)
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7ff f828 	bl	8007244 <HAL_I2C_ListenCpltCallback>
}
 80081f4:	e014      	b.n	8008220 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	d002      	beq.n	8008204 <I2C_Slave_STOPF+0x234>
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	2b22      	cmp	r3, #34	; 0x22
 8008202:	d10d      	bne.n	8008220 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fe fffa 	bl	8007214 <HAL_I2C_SlaveRxCpltCallback>
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	080086a1 	.word	0x080086a1
 800822c:	ffff0000 	.word	0xffff0000

08008230 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d002      	beq.n	8008252 <I2C_Slave_AF+0x22>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b20      	cmp	r3, #32
 8008250:	d129      	bne.n	80082a6 <I2C_Slave_AF+0x76>
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	2b28      	cmp	r3, #40	; 0x28
 8008256:	d126      	bne.n	80082a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2c      	ldr	r2, [pc, #176]	; (800830c <I2C_Slave_AF+0xdc>)
 800825c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800826c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008276:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008286:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe ffd0 	bl	8007244 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80082a4:	e02e      	b.n	8008304 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b21      	cmp	r3, #33	; 0x21
 80082aa:	d126      	bne.n	80082fa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a17      	ldr	r2, [pc, #92]	; (800830c <I2C_Slave_AF+0xdc>)
 80082b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2221      	movs	r2, #33	; 0x21
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe ff84 	bl	8007200 <HAL_I2C_SlaveTxCpltCallback>
}
 80082f8:	e004      	b.n	8008304 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008302:	615a      	str	r2, [r3, #20]
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	ffff0000 	.word	0xffff0000

08008310 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008326:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b10      	cmp	r3, #16
 800832c:	d002      	beq.n	8008334 <I2C_ITError+0x24>
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d10a      	bne.n	800834a <I2C_ITError+0x3a>
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b22      	cmp	r3, #34	; 0x22
 8008338:	d107      	bne.n	800834a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008348:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008350:	2b28      	cmp	r3, #40	; 0x28
 8008352:	d107      	bne.n	8008364 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2228      	movs	r2, #40	; 0x28
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008362:	e015      	b.n	8008390 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800836e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008372:	d00a      	beq.n	800838a <I2C_ITError+0x7a>
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b60      	cmp	r3, #96	; 0x60
 8008378:	d007      	beq.n	800838a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800839e:	d162      	bne.n	8008466 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d020      	beq.n	8008400 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	4a6a      	ldr	r2, [pc, #424]	; (800856c <I2C_ITError+0x25c>)
 80083c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fd9f 	bl	8005f0e <HAL_DMA_Abort_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8089 	beq.w	80084ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083fa:	4610      	mov	r0, r2
 80083fc:	4798      	blx	r3
 80083fe:	e074      	b.n	80084ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	4a59      	ldr	r2, [pc, #356]	; (800856c <I2C_ITError+0x25c>)
 8008406:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4618      	mov	r0, r3
 800840e:	f7fd fd7e 	bl	8005f0e <HAL_DMA_Abort_IT>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d068      	beq.n	80084ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d10b      	bne.n	800843e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	b2d2      	uxtb	r2, r2
 8008432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	e041      	b.n	80084ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b60      	cmp	r3, #96	; 0x60
 8008470:	d125      	bne.n	80084be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d10b      	bne.n	80084a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe feec 	bl	8007294 <HAL_I2C_AbortCpltCallback>
 80084bc:	e015      	b.n	80084ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	d10b      	bne.n	80084e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe fecb 	bl	8007280 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10e      	bne.n	8008518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008526:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d113      	bne.n	8008564 <I2C_ITError+0x254>
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b28      	cmp	r3, #40	; 0x28
 8008540:	d110      	bne.n	8008564 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a0a      	ldr	r2, [pc, #40]	; (8008570 <I2C_ITError+0x260>)
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fe fe70 	bl	8007244 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	080086a1 	.word	0x080086a1
 8008570:	ffff0000 	.word	0xffff0000

08008574 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	4603      	mov	r3, r0
 8008584:	817b      	strh	r3, [r7, #10]
 8008586:	460b      	mov	r3, r1
 8008588:	813b      	strh	r3, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800859c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f920 	bl	80087f0 <I2C_WaitOnFlagUntilTimeout>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d103      	bne.n	80085ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e05f      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085d2:	897b      	ldrh	r3, [r7, #10]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	492d      	ldr	r1, [pc, #180]	; (800869c <I2C_RequestMemoryWrite+0x128>)
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f958 	bl	800889e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e04c      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	6a39      	ldr	r1, [r7, #32]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f9c2 	bl	800899c <I2C_WaitOnTXEFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	2b04      	cmp	r3, #4
 8008624:	d107      	bne.n	8008636 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e02b      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008640:	893b      	ldrh	r3, [r7, #8]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	611a      	str	r2, [r3, #16]
 800864a:	e021      	b.n	8008690 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	0a1b      	lsrs	r3, r3, #8
 8008650:	b29b      	uxth	r3, r3
 8008652:	b2da      	uxtb	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800865a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865c:	6a39      	ldr	r1, [r7, #32]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f99c 	bl	800899c <I2C_WaitOnTXEFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b04      	cmp	r3, #4
 8008670:	d107      	bne.n	8008682 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e005      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008686:	893b      	ldrh	r3, [r7, #8]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	00010002 	.word	0x00010002

080086a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086ba:	4b4b      	ldr	r3, [pc, #300]	; (80087e8 <I2C_DMAAbort+0x148>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	08db      	lsrs	r3, r3, #3
 80086c0:	4a4a      	ldr	r2, [pc, #296]	; (80087ec <I2C_DMAAbort+0x14c>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	0a1a      	lsrs	r2, r3, #8
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	00da      	lsls	r2, r3, #3
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f043 0220 	orr.w	r2, r3, #32
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086e6:	e00a      	b.n	80086fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086fc:	d0ea      	beq.n	80086d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	2200      	movs	r2, #0
 800870c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	2200      	movs	r2, #0
 800871c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2200      	movs	r2, #0
 8008732:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	2200      	movs	r2, #0
 8008742:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	2200      	movs	r2, #0
 8008752:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b60      	cmp	r3, #96	; 0x60
 800876e:	d10e      	bne.n	800878e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2200      	movs	r2, #0
 8008784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f7fe fd84 	bl	8007294 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800878c:	e027      	b.n	80087de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800878e:	7cfb      	ldrb	r3, [r7, #19]
 8008790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008794:	2b28      	cmp	r3, #40	; 0x28
 8008796:	d117      	bne.n	80087c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2228      	movs	r2, #40	; 0x28
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087c6:	e007      	b.n	80087d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087d8:	6978      	ldr	r0, [r7, #20]
 80087da:	f7fe fd51 	bl	8007280 <HAL_I2C_ErrorCallback>
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000008 	.word	0x20000008
 80087ec:	14f8b589 	.word	0x14f8b589

080087f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	4613      	mov	r3, r2
 80087fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008800:	e025      	b.n	800884e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d021      	beq.n	800884e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800880a:	f7fc ff5d 	bl	80056c8 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d302      	bcc.n	8008820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d116      	bne.n	800884e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0220 	orr.w	r2, r3, #32
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e023      	b.n	8008896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	0c1b      	lsrs	r3, r3, #16
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b01      	cmp	r3, #1
 8008856:	d10d      	bne.n	8008874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	43da      	mvns	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	e00c      	b.n	800888e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	43da      	mvns	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4013      	ands	r3, r2
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	bf0c      	ite	eq
 8008886:	2301      	moveq	r3, #1
 8008888:	2300      	movne	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	429a      	cmp	r2, r3
 8008892:	d0b6      	beq.n	8008802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088ac:	e051      	b.n	8008952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088bc:	d123      	bne.n	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	f043 0204 	orr.w	r2, r3, #4
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e046      	b.n	8008994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d021      	beq.n	8008952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890e:	f7fc fedb 	bl	80056c8 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d116      	bne.n	8008952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2220      	movs	r2, #32
 800892e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f043 0220 	orr.w	r2, r3, #32
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e020      	b.n	8008994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10c      	bne.n	8008976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	43da      	mvns	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4013      	ands	r3, r2
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e00b      	b.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	43da      	mvns	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4013      	ands	r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d18d      	bne.n	80088ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089a8:	e02d      	b.n	8008a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 f8aa 	bl	8008b04 <I2C_IsAcknowledgeFailed>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e02d      	b.n	8008a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d021      	beq.n	8008a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c2:	f7fc fe81 	bl	80056c8 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d302      	bcc.n	80089d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d116      	bne.n	8008a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f043 0220 	orr.w	r2, r3, #32
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e007      	b.n	8008a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d1ca      	bne.n	80089aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a2a:	e02d      	b.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f869 	bl	8008b04 <I2C_IsAcknowledgeFailed>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e02d      	b.n	8008a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a42:	d021      	beq.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a44:	f7fc fe40 	bl	80056c8 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d302      	bcc.n	8008a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d116      	bne.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a74:	f043 0220 	orr.w	r2, r3, #32
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e007      	b.n	8008a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d1ca      	bne.n	8008a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008aac:	4b13      	ldr	r3, [pc, #76]	; (8008afc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	08db      	lsrs	r3, r3, #3
 8008ab2:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab8:	0a1a      	lsrs	r2, r3, #8
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d107      	bne.n	8008ade <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0220 	orr.w	r2, r3, #32
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e008      	b.n	8008af0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aec:	d0e9      	beq.n	8008ac2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20000008 	.word	0x20000008
 8008b00:	14f8b589 	.word	0x14f8b589

08008b04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1a:	d11b      	bne.n	8008b54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	f043 0204 	orr.w	r2, r3, #4
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b72:	d103      	bne.n	8008b7c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b7a:	e007      	b.n	8008b8c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b84:	d102      	bne.n	8008b8c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2208      	movs	r2, #8
 8008b8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e267      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d075      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bb6:	4b88      	ldr	r3, [pc, #544]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 030c 	and.w	r3, r3, #12
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d00c      	beq.n	8008bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bc2:	4b85      	ldr	r3, [pc, #532]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d112      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bce:	4b82      	ldr	r3, [pc, #520]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bda:	d10b      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bdc:	4b7e      	ldr	r3, [pc, #504]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d05b      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x108>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d157      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e242      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfc:	d106      	bne.n	8008c0c <HAL_RCC_OscConfig+0x74>
 8008bfe:	4b76      	ldr	r3, [pc, #472]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a75      	ldr	r2, [pc, #468]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e01d      	b.n	8008c48 <HAL_RCC_OscConfig+0xb0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c14:	d10c      	bne.n	8008c30 <HAL_RCC_OscConfig+0x98>
 8008c16:	4b70      	ldr	r3, [pc, #448]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a6f      	ldr	r2, [pc, #444]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	4b6d      	ldr	r3, [pc, #436]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a6c      	ldr	r2, [pc, #432]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e00b      	b.n	8008c48 <HAL_RCC_OscConfig+0xb0>
 8008c30:	4b69      	ldr	r3, [pc, #420]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a68      	ldr	r2, [pc, #416]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a65      	ldr	r2, [pc, #404]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d013      	beq.n	8008c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c50:	f7fc fd3a 	bl	80056c8 <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c58:	f7fc fd36 	bl	80056c8 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b64      	cmp	r3, #100	; 0x64
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e207      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6a:	4b5b      	ldr	r3, [pc, #364]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f0      	beq.n	8008c58 <HAL_RCC_OscConfig+0xc0>
 8008c76:	e014      	b.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7fc fd26 	bl	80056c8 <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fc fd22 	bl	80056c8 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e1f3      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c92:	4b51      	ldr	r3, [pc, #324]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f0      	bne.n	8008c80 <HAL_RCC_OscConfig+0xe8>
 8008c9e:	e000      	b.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d063      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cae:	4b4a      	ldr	r3, [pc, #296]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cba:	4b47      	ldr	r3, [pc, #284]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d11c      	bne.n	8008d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cc6:	4b44      	ldr	r3, [pc, #272]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d116      	bne.n	8008d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cd2:	4b41      	ldr	r3, [pc, #260]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <HAL_RCC_OscConfig+0x152>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d001      	beq.n	8008cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e1c7      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cea:	4b3b      	ldr	r3, [pc, #236]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4937      	ldr	r1, [pc, #220]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfe:	e03a      	b.n	8008d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d020      	beq.n	8008d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d08:	4b34      	ldr	r3, [pc, #208]	; (8008ddc <HAL_RCC_OscConfig+0x244>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0e:	f7fc fcdb 	bl	80056c8 <HAL_GetTick>
 8008d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d14:	e008      	b.n	8008d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d16:	f7fc fcd7 	bl	80056c8 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e1a8      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d28:	4b2b      	ldr	r3, [pc, #172]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0f0      	beq.n	8008d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	4925      	ldr	r1, [pc, #148]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	600b      	str	r3, [r1, #0]
 8008d48:	e015      	b.n	8008d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d4a:	4b24      	ldr	r3, [pc, #144]	; (8008ddc <HAL_RCC_OscConfig+0x244>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fc fcba 	bl	80056c8 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d58:	f7fc fcb6 	bl	80056c8 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e187      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f0      	bne.n	8008d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d036      	beq.n	8008df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d8a:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <HAL_RCC_OscConfig+0x248>)
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d90:	f7fc fc9a 	bl	80056c8 <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d98:	f7fc fc96 	bl	80056c8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e167      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <HAL_RCC_OscConfig+0x240>)
 8008dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0x200>
 8008db6:	e01b      	b.n	8008df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <HAL_RCC_OscConfig+0x248>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dbe:	f7fc fc83 	bl	80056c8 <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dc4:	e00e      	b.n	8008de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc6:	f7fc fc7f 	bl	80056c8 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d907      	bls.n	8008de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e150      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
 8008dd8:	40023800 	.word	0x40023800
 8008ddc:	42470000 	.word	0x42470000
 8008de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008de4:	4b88      	ldr	r3, [pc, #544]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1ea      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 8097 	beq.w	8008f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e02:	4b81      	ldr	r3, [pc, #516]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10f      	bne.n	8008e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	4b7d      	ldr	r3, [pc, #500]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	4a7c      	ldr	r2, [pc, #496]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e1e:	4b7a      	ldr	r3, [pc, #488]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e26:	60bb      	str	r3, [r7, #8]
 8008e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e2e:	4b77      	ldr	r3, [pc, #476]	; (800900c <HAL_RCC_OscConfig+0x474>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d118      	bne.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e3a:	4b74      	ldr	r3, [pc, #464]	; (800900c <HAL_RCC_OscConfig+0x474>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a73      	ldr	r2, [pc, #460]	; (800900c <HAL_RCC_OscConfig+0x474>)
 8008e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e46:	f7fc fc3f 	bl	80056c8 <HAL_GetTick>
 8008e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e4c:	e008      	b.n	8008e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e4e:	f7fc fc3b 	bl	80056c8 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e10c      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e60:	4b6a      	ldr	r3, [pc, #424]	; (800900c <HAL_RCC_OscConfig+0x474>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0f0      	beq.n	8008e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d106      	bne.n	8008e82 <HAL_RCC_OscConfig+0x2ea>
 8008e74:	4b64      	ldr	r3, [pc, #400]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	4a63      	ldr	r2, [pc, #396]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e7a:	f043 0301 	orr.w	r3, r3, #1
 8008e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e80:	e01c      	b.n	8008ebc <HAL_RCC_OscConfig+0x324>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d10c      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x30c>
 8008e8a:	4b5f      	ldr	r3, [pc, #380]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	4a5e      	ldr	r2, [pc, #376]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e90:	f043 0304 	orr.w	r3, r3, #4
 8008e94:	6713      	str	r3, [r2, #112]	; 0x70
 8008e96:	4b5c      	ldr	r3, [pc, #368]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	4a5b      	ldr	r2, [pc, #364]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008e9c:	f043 0301 	orr.w	r3, r3, #1
 8008ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea2:	e00b      	b.n	8008ebc <HAL_RCC_OscConfig+0x324>
 8008ea4:	4b58      	ldr	r3, [pc, #352]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea8:	4a57      	ldr	r2, [pc, #348]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	6713      	str	r3, [r2, #112]	; 0x70
 8008eb0:	4b55      	ldr	r3, [pc, #340]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb4:	4a54      	ldr	r2, [pc, #336]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008eb6:	f023 0304 	bic.w	r3, r3, #4
 8008eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d015      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ec4:	f7fc fc00 	bl	80056c8 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eca:	e00a      	b.n	8008ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ecc:	f7fc fbfc 	bl	80056c8 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e0cb      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee2:	4b49      	ldr	r3, [pc, #292]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0ee      	beq.n	8008ecc <HAL_RCC_OscConfig+0x334>
 8008eee:	e014      	b.n	8008f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ef0:	f7fc fbea 	bl	80056c8 <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef8:	f7fc fbe6 	bl	80056c8 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e0b5      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f0e:	4b3e      	ldr	r3, [pc, #248]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1ee      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d105      	bne.n	8008f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f20:	4b39      	ldr	r3, [pc, #228]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	4a38      	ldr	r2, [pc, #224]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80a1 	beq.w	8009078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 030c 	and.w	r3, r3, #12
 8008f3e:	2b08      	cmp	r3, #8
 8008f40:	d05c      	beq.n	8008ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d141      	bne.n	8008fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f4a:	4b31      	ldr	r3, [pc, #196]	; (8009010 <HAL_RCC_OscConfig+0x478>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f50:	f7fc fbba 	bl	80056c8 <HAL_GetTick>
 8008f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f56:	e008      	b.n	8008f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f58:	f7fc fbb6 	bl	80056c8 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e087      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f6a:	4b27      	ldr	r3, [pc, #156]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1f0      	bne.n	8008f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69da      	ldr	r2, [r3, #28]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	019b      	lsls	r3, r3, #6
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	041b      	lsls	r3, r3, #16
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	061b      	lsls	r3, r3, #24
 8008f9a:	491b      	ldr	r1, [pc, #108]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fa0:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <HAL_RCC_OscConfig+0x478>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa6:	f7fc fb8f 	bl	80056c8 <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fac:	e008      	b.n	8008fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fae:	f7fc fb8b 	bl	80056c8 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e05c      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0f0      	beq.n	8008fae <HAL_RCC_OscConfig+0x416>
 8008fcc:	e054      	b.n	8009078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fce:	4b10      	ldr	r3, [pc, #64]	; (8009010 <HAL_RCC_OscConfig+0x478>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd4:	f7fc fb78 	bl	80056c8 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7fc fb74 	bl	80056c8 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e045      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fee:	4b06      	ldr	r3, [pc, #24]	; (8009008 <HAL_RCC_OscConfig+0x470>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f0      	bne.n	8008fdc <HAL_RCC_OscConfig+0x444>
 8008ffa:	e03d      	b.n	8009078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d107      	bne.n	8009014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e038      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
 8009008:	40023800 	.word	0x40023800
 800900c:	40007000 	.word	0x40007000
 8009010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009014:	4b1b      	ldr	r3, [pc, #108]	; (8009084 <HAL_RCC_OscConfig+0x4ec>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d028      	beq.n	8009074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800902c:	429a      	cmp	r2, r3
 800902e:	d121      	bne.n	8009074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800903a:	429a      	cmp	r2, r3
 800903c:	d11a      	bne.n	8009074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009044:	4013      	ands	r3, r2
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800904a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800904c:	4293      	cmp	r3, r2
 800904e:	d111      	bne.n	8009074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	3b01      	subs	r3, #1
 800905e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d107      	bne.n	8009074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009070:	429a      	cmp	r2, r3
 8009072:	d001      	beq.n	8009078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40023800 	.word	0x40023800

08009088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0cc      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d90c      	bls.n	80090c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090aa:	4b65      	ldr	r3, [pc, #404]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090b2:	4b63      	ldr	r3, [pc, #396]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d001      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0b8      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d020      	beq.n	8009112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090dc:	4b59      	ldr	r3, [pc, #356]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4a58      	ldr	r2, [pc, #352]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090f4:	4b53      	ldr	r3, [pc, #332]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4a52      	ldr	r2, [pc, #328]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009100:	4b50      	ldr	r3, [pc, #320]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	494d      	ldr	r1, [pc, #308]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d044      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d107      	bne.n	8009136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009126:	4b47      	ldr	r3, [pc, #284]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d119      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e07f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d003      	beq.n	8009146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009142:	2b03      	cmp	r3, #3
 8009144:	d107      	bne.n	8009156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009146:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e06f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009156:	4b3b      	ldr	r3, [pc, #236]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e067      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009166:	4b37      	ldr	r3, [pc, #220]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f023 0203 	bic.w	r2, r3, #3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4934      	ldr	r1, [pc, #208]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	4313      	orrs	r3, r2
 8009176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009178:	f7fc faa6 	bl	80056c8 <HAL_GetTick>
 800917c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800917e:	e00a      	b.n	8009196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009180:	f7fc faa2 	bl	80056c8 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	f241 3288 	movw	r2, #5000	; 0x1388
 800918e:	4293      	cmp	r3, r2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e04f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 020c 	and.w	r2, r3, #12
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d1eb      	bne.n	8009180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091a8:	4b25      	ldr	r3, [pc, #148]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0307 	and.w	r3, r3, #7
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d20c      	bcs.n	80091d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091b6:	4b22      	ldr	r3, [pc, #136]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091be:	4b20      	ldr	r3, [pc, #128]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d001      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e032      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d008      	beq.n	80091ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091dc:	4b19      	ldr	r3, [pc, #100]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	4916      	ldr	r1, [pc, #88]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	490e      	ldr	r1, [pc, #56]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	4313      	orrs	r3, r2
 800920c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800920e:	f000 f821 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 8009212:	4602      	mov	r2, r0
 8009214:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	091b      	lsrs	r3, r3, #4
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	490a      	ldr	r1, [pc, #40]	; (8009248 <HAL_RCC_ClockConfig+0x1c0>)
 8009220:	5ccb      	ldrb	r3, [r1, r3]
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	4a09      	ldr	r2, [pc, #36]	; (800924c <HAL_RCC_ClockConfig+0x1c4>)
 8009228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <HAL_RCC_ClockConfig+0x1c8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f7fc fa06 	bl	8005640 <HAL_InitTick>

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	40023c00 	.word	0x40023c00
 8009244:	40023800 	.word	0x40023800
 8009248:	0800c294 	.word	0x0800c294
 800924c:	20000008 	.word	0x20000008
 8009250:	2000000c 	.word	0x2000000c

08009254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009258:	b090      	sub	sp, #64	; 0x40
 800925a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	637b      	str	r3, [r7, #52]	; 0x34
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009264:	2300      	movs	r3, #0
 8009266:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800926c:	4b59      	ldr	r3, [pc, #356]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 030c 	and.w	r3, r3, #12
 8009274:	2b08      	cmp	r3, #8
 8009276:	d00d      	beq.n	8009294 <HAL_RCC_GetSysClockFreq+0x40>
 8009278:	2b08      	cmp	r3, #8
 800927a:	f200 80a1 	bhi.w	80093c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0x34>
 8009282:	2b04      	cmp	r3, #4
 8009284:	d003      	beq.n	800928e <HAL_RCC_GetSysClockFreq+0x3a>
 8009286:	e09b      	b.n	80093c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009288:	4b53      	ldr	r3, [pc, #332]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800928c:	e09b      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800928e:	4b53      	ldr	r3, [pc, #332]	; (80093dc <HAL_RCC_GetSysClockFreq+0x188>)
 8009290:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009292:	e098      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009294:	4b4f      	ldr	r3, [pc, #316]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800929e:	4b4d      	ldr	r3, [pc, #308]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d028      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092aa:	4b4a      	ldr	r3, [pc, #296]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	099b      	lsrs	r3, r3, #6
 80092b0:	2200      	movs	r2, #0
 80092b2:	623b      	str	r3, [r7, #32]
 80092b4:	627a      	str	r2, [r7, #36]	; 0x24
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80092bc:	2100      	movs	r1, #0
 80092be:	4b47      	ldr	r3, [pc, #284]	; (80093dc <HAL_RCC_GetSysClockFreq+0x188>)
 80092c0:	fb03 f201 	mul.w	r2, r3, r1
 80092c4:	2300      	movs	r3, #0
 80092c6:	fb00 f303 	mul.w	r3, r0, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	4a43      	ldr	r2, [pc, #268]	; (80093dc <HAL_RCC_GetSysClockFreq+0x188>)
 80092ce:	fba0 1202 	umull	r1, r2, r0, r2
 80092d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d4:	460a      	mov	r2, r1
 80092d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	4413      	add	r3, r2
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e0:	2200      	movs	r2, #0
 80092e2:	61bb      	str	r3, [r7, #24]
 80092e4:	61fa      	str	r2, [r7, #28]
 80092e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092ee:	f7f7 fbc5 	bl	8000a7c <__aeabi_uldivmod>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4613      	mov	r3, r2
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fa:	e053      	b.n	80093a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092fc:	4b35      	ldr	r3, [pc, #212]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	099b      	lsrs	r3, r3, #6
 8009302:	2200      	movs	r2, #0
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	617a      	str	r2, [r7, #20]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800930e:	f04f 0b00 	mov.w	fp, #0
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	f04f 0000 	mov.w	r0, #0
 800931a:	f04f 0100 	mov.w	r1, #0
 800931e:	0159      	lsls	r1, r3, #5
 8009320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009324:	0150      	lsls	r0, r2, #5
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	ebb2 080a 	subs.w	r8, r2, sl
 800932e:	eb63 090b 	sbc.w	r9, r3, fp
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800933e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009346:	ebb2 0408 	subs.w	r4, r2, r8
 800934a:	eb63 0509 	sbc.w	r5, r3, r9
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	f04f 0300 	mov.w	r3, #0
 8009356:	00eb      	lsls	r3, r5, #3
 8009358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800935c:	00e2      	lsls	r2, r4, #3
 800935e:	4614      	mov	r4, r2
 8009360:	461d      	mov	r5, r3
 8009362:	eb14 030a 	adds.w	r3, r4, sl
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	eb45 030b 	adc.w	r3, r5, fp
 800936c:	607b      	str	r3, [r7, #4]
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	f04f 0300 	mov.w	r3, #0
 8009376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800937a:	4629      	mov	r1, r5
 800937c:	028b      	lsls	r3, r1, #10
 800937e:	4621      	mov	r1, r4
 8009380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009384:	4621      	mov	r1, r4
 8009386:	028a      	lsls	r2, r1, #10
 8009388:	4610      	mov	r0, r2
 800938a:	4619      	mov	r1, r3
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	2200      	movs	r2, #0
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	60fa      	str	r2, [r7, #12]
 8009394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009398:	f7f7 fb70 	bl	8000a7c <__aeabi_uldivmod>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4613      	mov	r3, r2
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	0c1b      	lsrs	r3, r3, #16
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	3301      	adds	r3, #1
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80093b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80093be:	e002      	b.n	80093c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80093c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80093c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3740      	adds	r7, #64	; 0x40
 80093cc:	46bd      	mov	sp, r7
 80093ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800
 80093d8:	00f42400 	.word	0x00f42400
 80093dc:	017d7840 	.word	0x017d7840

080093e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093e4:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80093e6:	681b      	ldr	r3, [r3, #0]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000008 	.word	0x20000008

080093f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093fc:	f7ff fff0 	bl	80093e0 <HAL_RCC_GetHCLKFreq>
 8009400:	4602      	mov	r2, r0
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	0a9b      	lsrs	r3, r3, #10
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	4903      	ldr	r1, [pc, #12]	; (800941c <HAL_RCC_GetPCLK1Freq+0x24>)
 800940e:	5ccb      	ldrb	r3, [r1, r3]
 8009410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009414:	4618      	mov	r0, r3
 8009416:	bd80      	pop	{r7, pc}
 8009418:	40023800 	.word	0x40023800
 800941c:	0800c2a4 	.word	0x0800c2a4

08009420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009424:	f7ff ffdc 	bl	80093e0 <HAL_RCC_GetHCLKFreq>
 8009428:	4602      	mov	r2, r0
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	0b5b      	lsrs	r3, r3, #13
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	4903      	ldr	r1, [pc, #12]	; (8009444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009436:	5ccb      	ldrb	r3, [r1, r3]
 8009438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800943c:	4618      	mov	r0, r3
 800943e:	bd80      	pop	{r7, pc}
 8009440:	40023800 	.word	0x40023800
 8009444:	0800c2a4 	.word	0x0800c2a4

08009448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e07b      	b.n	8009552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800946a:	d009      	beq.n	8009480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	61da      	str	r2, [r3, #28]
 8009472:	e005      	b.n	8009480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7fb fcf2 	bl	8004e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009504:	ea42 0103 	orr.w	r1, r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	f003 0104 	and.w	r1, r3, #4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	f003 0210 	and.w	r2, r3, #16
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e041      	b.n	80095f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fb fcc7 	bl	8004f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f000 fd91 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d001      	beq.n	8009610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e044      	b.n	800969a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1e      	ldr	r2, [pc, #120]	; (80096a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d018      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x6c>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963a:	d013      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x6c>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1a      	ldr	r2, [pc, #104]	; (80096ac <HAL_TIM_Base_Start_IT+0xb4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00e      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x6c>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a19      	ldr	r2, [pc, #100]	; (80096b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x6c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d004      	beq.n	8009664 <HAL_TIM_Base_Start_IT+0x6c>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d111      	bne.n	8009688 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b06      	cmp	r3, #6
 8009674:	d010      	beq.n	8009698 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009686:	e007      	b.n	8009698 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40010000 	.word	0x40010000
 80096ac:	40000400 	.word	0x40000400
 80096b0:	40000800 	.word	0x40000800
 80096b4:	40000c00 	.word	0x40000c00
 80096b8:	40014000 	.word	0x40014000

080096bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e041      	b.n	8009752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f839 	bl	800975a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f000 fce0 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <HAL_TIM_PWM_Start+0x24>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	bf14      	ite	ne
 800978c:	2301      	movne	r3, #1
 800978e:	2300      	moveq	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	e022      	b.n	80097da <HAL_TIM_PWM_Start+0x6a>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b04      	cmp	r3, #4
 8009798:	d109      	bne.n	80097ae <HAL_TIM_PWM_Start+0x3e>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	bf14      	ite	ne
 80097a6:	2301      	movne	r3, #1
 80097a8:	2300      	moveq	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	e015      	b.n	80097da <HAL_TIM_PWM_Start+0x6a>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d109      	bne.n	80097c8 <HAL_TIM_PWM_Start+0x58>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	bf14      	ite	ne
 80097c0:	2301      	movne	r3, #1
 80097c2:	2300      	moveq	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	e008      	b.n	80097da <HAL_TIM_PWM_Start+0x6a>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	bf14      	ite	ne
 80097d4:	2301      	movne	r3, #1
 80097d6:	2300      	moveq	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e068      	b.n	80098b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d104      	bne.n	80097f2 <HAL_TIM_PWM_Start+0x82>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097f0:	e013      	b.n	800981a <HAL_TIM_PWM_Start+0xaa>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d104      	bne.n	8009802 <HAL_TIM_PWM_Start+0x92>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009800:	e00b      	b.n	800981a <HAL_TIM_PWM_Start+0xaa>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b08      	cmp	r3, #8
 8009806:	d104      	bne.n	8009812 <HAL_TIM_PWM_Start+0xa2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009810:	e003      	b.n	800981a <HAL_TIM_PWM_Start+0xaa>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2202      	movs	r2, #2
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2201      	movs	r2, #1
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fef2 	bl	800a60c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a23      	ldr	r2, [pc, #140]	; (80098bc <HAL_TIM_PWM_Start+0x14c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d107      	bne.n	8009842 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <HAL_TIM_PWM_Start+0x14c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d018      	beq.n	800987e <HAL_TIM_PWM_Start+0x10e>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009854:	d013      	beq.n	800987e <HAL_TIM_PWM_Start+0x10e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIM_PWM_Start+0x150>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00e      	beq.n	800987e <HAL_TIM_PWM_Start+0x10e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a17      	ldr	r2, [pc, #92]	; (80098c4 <HAL_TIM_PWM_Start+0x154>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d009      	beq.n	800987e <HAL_TIM_PWM_Start+0x10e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <HAL_TIM_PWM_Start+0x158>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d004      	beq.n	800987e <HAL_TIM_PWM_Start+0x10e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a14      	ldr	r2, [pc, #80]	; (80098cc <HAL_TIM_PWM_Start+0x15c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d111      	bne.n	80098a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b06      	cmp	r3, #6
 800988e:	d010      	beq.n	80098b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a0:	e007      	b.n	80098b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0201 	orr.w	r2, r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40014000 	.word	0x40014000

080098d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e097      	b.n	8009a14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fb fb65 	bl	8004fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009914:	f023 0307 	bic.w	r3, r3, #7
 8009918:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f000 fbcb 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	4313      	orrs	r3, r2
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	4313      	orrs	r3, r2
 8009968:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009970:	f023 030c 	bic.w	r3, r3, #12
 8009974:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800997c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	4313      	orrs	r3, r2
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	011a      	lsls	r2, r3, #4
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	031b      	lsls	r3, r3, #12
 80099a0:	4313      	orrs	r3, r2
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80099ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80099b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	4313      	orrs	r3, r2
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d110      	bne.n	8009a6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d102      	bne.n	8009a58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a52:	7b7b      	ldrb	r3, [r7, #13]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d001      	beq.n	8009a5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e069      	b.n	8009b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a6c:	e031      	b.n	8009ad2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d110      	bne.n	8009a96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d102      	bne.n	8009a80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a7a:	7b3b      	ldrb	r3, [r7, #12]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d001      	beq.n	8009a84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e055      	b.n	8009b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a94:	e01d      	b.n	8009ad2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d108      	bne.n	8009aae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d105      	bne.n	8009aae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009aa2:	7b7b      	ldrb	r3, [r7, #13]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d102      	bne.n	8009aae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009aa8:	7b3b      	ldrb	r3, [r7, #12]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d001      	beq.n	8009ab2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e03e      	b.n	8009b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_TIM_Encoder_Start+0xc4>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d008      	beq.n	8009af0 <HAL_TIM_Encoder_Start+0xd4>
 8009ade:	e00f      	b.n	8009b00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fd8f 	bl	800a60c <TIM_CCxChannelCmd>
      break;
 8009aee:	e016      	b.n	8009b1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2201      	movs	r2, #1
 8009af6:	2104      	movs	r1, #4
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fd87 	bl	800a60c <TIM_CCxChannelCmd>
      break;
 8009afe:	e00e      	b.n	8009b1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2201      	movs	r2, #1
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fd7f 	bl	800a60c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2201      	movs	r2, #1
 8009b14:	2104      	movs	r1, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fd78 	bl	800a60c <TIM_CCxChannelCmd>
      break;
 8009b1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d122      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d11b      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0202 	mvn.w	r2, #2
 8009b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa81 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009b80:	e005      	b.n	8009b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa73 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fa84 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d122      	bne.n	8009be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d11b      	bne.n	8009be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0204 	mvn.w	r2, #4
 8009bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa57 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa49 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa5a 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d122      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0308 	and.w	r3, r3, #8
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d11b      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0208 	mvn.w	r2, #8
 8009c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa2d 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009c28:	e005      	b.n	8009c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa1f 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa30 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b10      	cmp	r3, #16
 8009c48:	d122      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d11b      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0210 	mvn.w	r2, #16
 8009c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2208      	movs	r2, #8
 8009c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa03 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009c7c:	e005      	b.n	8009c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f9f5 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa06 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10e      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d107      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0201 	mvn.w	r2, #1
 8009cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9cf 	bl	800a05a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc6:	2b80      	cmp	r3, #128	; 0x80
 8009cc8:	d10e      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d107      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fd82 	bl	800a7ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d10e      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b40      	cmp	r3, #64	; 0x40
 8009d02:	d107      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9cb 	bl	800a0aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d10e      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d107      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f06f 0220 	mvn.w	r2, #32
 8009d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd4c 	bl	800a7d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e0ae      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b0c      	cmp	r3, #12
 8009d72:	f200 809f 	bhi.w	8009eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	08009eb5 	.word	0x08009eb5
 8009d84:	08009eb5 	.word	0x08009eb5
 8009d88:	08009eb5 	.word	0x08009eb5
 8009d8c:	08009df1 	.word	0x08009df1
 8009d90:	08009eb5 	.word	0x08009eb5
 8009d94:	08009eb5 	.word	0x08009eb5
 8009d98:	08009eb5 	.word	0x08009eb5
 8009d9c:	08009e33 	.word	0x08009e33
 8009da0:	08009eb5 	.word	0x08009eb5
 8009da4:	08009eb5 	.word	0x08009eb5
 8009da8:	08009eb5 	.word	0x08009eb5
 8009dac:	08009e73 	.word	0x08009e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fa02 	bl	800a1c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699a      	ldr	r2, [r3, #24]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0208 	orr.w	r2, r2, #8
 8009dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0204 	bic.w	r2, r2, #4
 8009dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6999      	ldr	r1, [r3, #24]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	691a      	ldr	r2, [r3, #16]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	619a      	str	r2, [r3, #24]
      break;
 8009dee:	e064      	b.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fa48 	bl	800a28c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699a      	ldr	r2, [r3, #24]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6999      	ldr	r1, [r3, #24]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	021a      	lsls	r2, r3, #8
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	619a      	str	r2, [r3, #24]
      break;
 8009e30:	e043      	b.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fa93 	bl	800a364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0208 	orr.w	r2, r2, #8
 8009e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69da      	ldr	r2, [r3, #28]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0204 	bic.w	r2, r2, #4
 8009e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69d9      	ldr	r1, [r3, #28]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	61da      	str	r2, [r3, #28]
      break;
 8009e70:	e023      	b.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 fadd 	bl	800a438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69d9      	ldr	r1, [r3, #28]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	021a      	lsls	r2, r3, #8
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	61da      	str	r2, [r3, #28]
      break;
 8009eb2:	e002      	b.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d101      	bne.n	8009ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e0b4      	b.n	800a052 <HAL_TIM_ConfigClockSource+0x186>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f20:	d03e      	beq.n	8009fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8009f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f26:	f200 8087 	bhi.w	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2e:	f000 8086 	beq.w	800a03e <HAL_TIM_ConfigClockSource+0x172>
 8009f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f36:	d87f      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f38:	2b70      	cmp	r3, #112	; 0x70
 8009f3a:	d01a      	beq.n	8009f72 <HAL_TIM_ConfigClockSource+0xa6>
 8009f3c:	2b70      	cmp	r3, #112	; 0x70
 8009f3e:	d87b      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f40:	2b60      	cmp	r3, #96	; 0x60
 8009f42:	d050      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8009f44:	2b60      	cmp	r3, #96	; 0x60
 8009f46:	d877      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f48:	2b50      	cmp	r3, #80	; 0x50
 8009f4a:	d03c      	beq.n	8009fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8009f4c:	2b50      	cmp	r3, #80	; 0x50
 8009f4e:	d873      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	d058      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x13a>
 8009f54:	2b40      	cmp	r3, #64	; 0x40
 8009f56:	d86f      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d064      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x15a>
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d86b      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d060      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x15a>
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d867      	bhi.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d05c      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x15a>
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d05a      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x15a>
 8009f70:	e062      	b.n	800a038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	6899      	ldr	r1, [r3, #8]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f000 fb23 	bl	800a5cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	609a      	str	r2, [r3, #8]
      break;
 8009f9e:	e04f      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6899      	ldr	r1, [r3, #8]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f000 fb0c 	bl	800a5cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fc2:	609a      	str	r2, [r3, #8]
      break;
 8009fc4:	e03c      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	6859      	ldr	r1, [r3, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f000 fa80 	bl	800a4d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2150      	movs	r1, #80	; 0x50
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fad9 	bl	800a596 <TIM_ITRx_SetConfig>
      break;
 8009fe4:	e02c      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6859      	ldr	r1, [r3, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f000 fa9f 	bl	800a536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2160      	movs	r1, #96	; 0x60
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fac9 	bl	800a596 <TIM_ITRx_SetConfig>
      break;
 800a004:	e01c      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	6859      	ldr	r1, [r3, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	461a      	mov	r2, r3
 800a014:	f000 fa60 	bl	800a4d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2140      	movs	r1, #64	; 0x40
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fab9 	bl	800a596 <TIM_ITRx_SetConfig>
      break;
 800a024:	e00c      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4619      	mov	r1, r3
 800a030:	4610      	mov	r0, r2
 800a032:	f000 fab0 	bl	800a596 <TIM_ITRx_SetConfig>
      break;
 800a036:	e003      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
      break;
 800a03c:	e000      	b.n	800a040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a03e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a34      	ldr	r2, [pc, #208]	; (800a1a4 <TIM_Base_SetConfig+0xe4>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00f      	beq.n	800a0f8 <TIM_Base_SetConfig+0x38>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d00b      	beq.n	800a0f8 <TIM_Base_SetConfig+0x38>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a31      	ldr	r2, [pc, #196]	; (800a1a8 <TIM_Base_SetConfig+0xe8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d007      	beq.n	800a0f8 <TIM_Base_SetConfig+0x38>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a30      	ldr	r2, [pc, #192]	; (800a1ac <TIM_Base_SetConfig+0xec>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_Base_SetConfig+0x38>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a2f      	ldr	r2, [pc, #188]	; (800a1b0 <TIM_Base_SetConfig+0xf0>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d108      	bne.n	800a10a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a25      	ldr	r2, [pc, #148]	; (800a1a4 <TIM_Base_SetConfig+0xe4>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d01b      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a118:	d017      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a22      	ldr	r2, [pc, #136]	; (800a1a8 <TIM_Base_SetConfig+0xe8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d013      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a21      	ldr	r2, [pc, #132]	; (800a1ac <TIM_Base_SetConfig+0xec>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00f      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a20      	ldr	r2, [pc, #128]	; (800a1b0 <TIM_Base_SetConfig+0xf0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00b      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <TIM_Base_SetConfig+0xf4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d007      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <TIM_Base_SetConfig+0xf8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d003      	beq.n	800a14a <TIM_Base_SetConfig+0x8a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1d      	ldr	r2, [pc, #116]	; (800a1bc <TIM_Base_SetConfig+0xfc>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d108      	bne.n	800a15c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	4313      	orrs	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <TIM_Base_SetConfig+0xe4>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d103      	bne.n	800a190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	691a      	ldr	r2, [r3, #16]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	615a      	str	r2, [r3, #20]
}
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40000400 	.word	0x40000400
 800a1ac:	40000800 	.word	0x40000800
 800a1b0:	40000c00 	.word	0x40000c00
 800a1b4:	40014000 	.word	0x40014000
 800a1b8:	40014400 	.word	0x40014400
 800a1bc:	40014800 	.word	0x40014800

0800a1c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f023 0201 	bic.w	r2, r3, #1
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f023 0302 	bic.w	r3, r3, #2
 800a208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a1c      	ldr	r2, [pc, #112]	; (800a288 <TIM_OC1_SetConfig+0xc8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d10c      	bne.n	800a236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f023 0308 	bic.w	r3, r3, #8
 800a222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 0304 	bic.w	r3, r3, #4
 800a234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a13      	ldr	r2, [pc, #76]	; (800a288 <TIM_OC1_SetConfig+0xc8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d111      	bne.n	800a262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a24c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4313      	orrs	r3, r2
 800a256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	621a      	str	r2, [r3, #32]
}
 800a27c:	bf00      	nop
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40010000 	.word	0x40010000

0800a28c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	f023 0210 	bic.w	r2, r3, #16
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f023 0320 	bic.w	r3, r3, #32
 800a2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <TIM_OC2_SetConfig+0xd4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d10d      	bne.n	800a308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a15      	ldr	r2, [pc, #84]	; (800a360 <TIM_OC2_SetConfig+0xd4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d113      	bne.n	800a338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a31e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	4313      	orrs	r3, r2
 800a336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	621a      	str	r2, [r3, #32]
}
 800a352:	bf00      	nop
 800a354:	371c      	adds	r7, #28
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40010000 	.word	0x40010000

0800a364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0303 	bic.w	r3, r3, #3
 800a39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <TIM_OC3_SetConfig+0xd0>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d10d      	bne.n	800a3de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a14      	ldr	r2, [pc, #80]	; (800a434 <TIM_OC3_SetConfig+0xd0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d113      	bne.n	800a40e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	621a      	str	r2, [r3, #32]
}
 800a428:	bf00      	nop
 800a42a:	371c      	adds	r7, #28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	40010000 	.word	0x40010000

0800a438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	031b      	lsls	r3, r3, #12
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <TIM_OC4_SetConfig+0x9c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d109      	bne.n	800a4ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a49e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	019b      	lsls	r3, r3, #6
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	621a      	str	r2, [r3, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40010000 	.word	0x40010000

0800a4d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	f023 0201 	bic.w	r2, r3, #1
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f023 030a 	bic.w	r3, r3, #10
 800a514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	621a      	str	r2, [r3, #32]
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a536:	b480      	push	{r7}
 800a538:	b087      	sub	sp, #28
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	f023 0210 	bic.w	r2, r3, #16
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	031b      	lsls	r3, r3, #12
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	4313      	orrs	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	621a      	str	r2, [r3, #32]
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f043 0307 	orr.w	r3, r3, #7
 800a5b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	609a      	str	r2, [r3, #8]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	021a      	lsls	r2, r3, #8
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	609a      	str	r2, [r3, #8]
}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 031f 	and.w	r3, r3, #31
 800a61e:	2201      	movs	r2, #1
 800a620:	fa02 f303 	lsl.w	r3, r2, r3
 800a624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	43db      	mvns	r3, r3
 800a62e:	401a      	ands	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a1a      	ldr	r2, [r3, #32]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	fa01 f303 	lsl.w	r3, r1, r3
 800a644:	431a      	orrs	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	621a      	str	r2, [r3, #32]
}
 800a64a:	bf00      	nop
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
	...

0800a658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e050      	b.n	800a712 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a1c      	ldr	r2, [pc, #112]	; (800a720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d018      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6bc:	d013      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a18      	ldr	r2, [pc, #96]	; (800a724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00e      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a16      	ldr	r2, [pc, #88]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a15      	ldr	r2, [pc, #84]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d004      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a13      	ldr	r2, [pc, #76]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d10c      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40010000 	.word	0x40010000
 800a724:	40000400 	.word	0x40000400
 800a728:	40000800 	.word	0x40000800
 800a72c:	40000c00 	.word	0x40000c00
 800a730:	40014000 	.word	0x40014000

0800a734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e03d      	b.n	800a7cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e03f      	b.n	800a892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d106      	bne.n	800a82c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7fa fcea 	bl	8005200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2224      	movs	r2, #36	; 0x24
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fd23 	bl	800b290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	695a      	ldr	r2, [r3, #20]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2220      	movs	r2, #32
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d130      	bne.n	800a916 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <HAL_UART_Transmit_IT+0x26>
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e029      	b.n	800a918 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d101      	bne.n	800a8d2 <HAL_UART_Transmit_IT+0x38>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e022      	b.n	800a918 <HAL_UART_Transmit_IT+0x7e>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	88fa      	ldrh	r2, [r7, #6]
 800a8e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	88fa      	ldrh	r2, [r7, #6]
 800a8ea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2221      	movs	r2, #33	; 0x21
 800a8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a910:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e000      	b.n	800a918 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a916:	2302      	movs	r3, #2
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b20      	cmp	r3, #32
 800a93c:	d11d      	bne.n	800a97a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <HAL_UART_Receive_IT+0x26>
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e016      	b.n	800a97c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_UART_Receive_IT+0x38>
 800a958:	2302      	movs	r3, #2
 800a95a:	e00f      	b.n	800a97c <HAL_UART_Receive_IT+0x58>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	461a      	mov	r2, r3
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 fab5 	bl	800aee0 <UART_Start_Receive_IT>
 800a976:	4603      	mov	r3, r0
 800a978:	e000      	b.n	800a97c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a97a:	2302      	movs	r3, #2
  }
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b0ba      	sub	sp, #232	; 0xe8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a9c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10f      	bne.n	800a9ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ce:	f003 0320 	and.w	r3, r3, #32
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <HAL_UART_IRQHandler+0x66>
 800a9d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fb99 	bl	800b11a <UART_Receive_IT>
      return;
 800a9e8:	e256      	b.n	800ae98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a9ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 80de 	beq.w	800abb0 <HAL_UART_IRQHandler+0x22c>
 800a9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80d1 	beq.w	800abb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00b      	beq.n	800aa32 <HAL_UART_IRQHandler+0xae>
 800aa1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d005      	beq.n	800aa32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	f043 0201 	orr.w	r2, r3, #1
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa36:	f003 0304 	and.w	r3, r3, #4
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <HAL_UART_IRQHandler+0xd2>
 800aa3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	f043 0202 	orr.w	r2, r3, #2
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <HAL_UART_IRQHandler+0xf6>
 800aa62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa72:	f043 0204 	orr.w	r2, r3, #4
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa7e:	f003 0308 	and.w	r3, r3, #8
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d011      	beq.n	800aaaa <HAL_UART_IRQHandler+0x126>
 800aa86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d105      	bne.n	800aa9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d005      	beq.n	800aaaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	f043 0208 	orr.w	r2, r3, #8
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f000 81ed 	beq.w	800ae8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab8:	f003 0320 	and.w	r3, r3, #32
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d008      	beq.n	800aad2 <HAL_UART_IRQHandler+0x14e>
 800aac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fb24 	bl	800b11a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aadc:	2b40      	cmp	r3, #64	; 0x40
 800aade:	bf0c      	ite	eq
 800aae0:	2301      	moveq	r3, #1
 800aae2:	2300      	movne	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaee:	f003 0308 	and.w	r3, r3, #8
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <HAL_UART_IRQHandler+0x17a>
 800aaf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d04f      	beq.n	800ab9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa2c 	bl	800af5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	d141      	bne.n	800ab96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3314      	adds	r3, #20
 800ab18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3314      	adds	r3, #20
 800ab3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1d9      	bne.n	800ab12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d013      	beq.n	800ab8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	4a7d      	ldr	r2, [pc, #500]	; (800ad60 <HAL_UART_IRQHandler+0x3dc>)
 800ab6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fb f9cb 	bl	8005f0e <HAL_DMA_Abort_IT>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d016      	beq.n	800abac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab8c:	e00e      	b.n	800abac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f990 	bl	800aeb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab94:	e00a      	b.n	800abac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f98c 	bl	800aeb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab9c:	e006      	b.n	800abac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f988 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800abaa:	e170      	b.n	800ae8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abac:	bf00      	nop
    return;
 800abae:	e16e      	b.n	800ae8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	f040 814a 	bne.w	800ae4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800abba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abbe:	f003 0310 	and.w	r3, r3, #16
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 8143 	beq.w	800ae4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800abc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 813c 	beq.w	800ae4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abd6:	2300      	movs	r3, #0
 800abd8:	60bb      	str	r3, [r7, #8]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	60bb      	str	r3, [r7, #8]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	60bb      	str	r3, [r7, #8]
 800abea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf6:	2b40      	cmp	r3, #64	; 0x40
 800abf8:	f040 80b4 	bne.w	800ad64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 8140 	beq.w	800ae92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	f080 8139 	bcs.w	800ae92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac32:	f000 8088 	beq.w	800ad46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	330c      	adds	r3, #12
 800ac3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	330c      	adds	r3, #12
 800ac5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac72:	e841 2300 	strex	r3, r2, [r1]
 800ac76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1d9      	bne.n	800ac36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3314      	adds	r3, #20
 800ac88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3314      	adds	r3, #20
 800aca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aca6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e1      	bne.n	800ac82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3314      	adds	r3, #20
 800acc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3314      	adds	r3, #20
 800acde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ace2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ace4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ace8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e3      	bne.n	800acbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	330c      	adds	r3, #12
 800ad0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad16:	f023 0310 	bic.w	r3, r3, #16
 800ad1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	330c      	adds	r3, #12
 800ad24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad28:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e3      	bne.n	800ad04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fb f874 	bl	8005e2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f8b6 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad5c:	e099      	b.n	800ae92 <HAL_UART_IRQHandler+0x50e>
 800ad5e:	bf00      	nop
 800ad60:	0800b023 	.word	0x0800b023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 808b 	beq.w	800ae96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ad80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8086 	beq.w	800ae96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	330c      	adds	r3, #12
 800ad90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ada0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	330c      	adds	r3, #12
 800adaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800adae:	647a      	str	r2, [r7, #68]	; 0x44
 800adb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adb6:	e841 2300 	strex	r3, r2, [r1]
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e3      	bne.n	800ad8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3314      	adds	r3, #20
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	623b      	str	r3, [r7, #32]
   return(result);
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	f023 0301 	bic.w	r3, r3, #1
 800add8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3314      	adds	r3, #20
 800ade2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ade6:	633a      	str	r2, [r7, #48]	; 0x30
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e3      	bne.n	800adc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0310 	bic.w	r3, r3, #16
 800ae1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	330c      	adds	r3, #12
 800ae28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae2c:	61fa      	str	r2, [r7, #28]
 800ae2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	69b9      	ldr	r1, [r7, #24]
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	617b      	str	r3, [r7, #20]
   return(result);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e3      	bne.n	800ae08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f83e 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae4c:	e023      	b.n	800ae96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <HAL_UART_IRQHandler+0x4ea>
 800ae5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f8ef 	bl	800b04a <UART_Transmit_IT>
    return;
 800ae6c:	e014      	b.n	800ae98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00e      	beq.n	800ae98 <HAL_UART_IRQHandler+0x514>
 800ae7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d008      	beq.n	800ae98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f92f 	bl	800b0ea <UART_EndTransmit_IT>
    return;
 800ae8c:	e004      	b.n	800ae98 <HAL_UART_IRQHandler+0x514>
    return;
 800ae8e:	bf00      	nop
 800ae90:	e002      	b.n	800ae98 <HAL_UART_IRQHandler+0x514>
      return;
 800ae92:	bf00      	nop
 800ae94:	e000      	b.n	800ae98 <HAL_UART_IRQHandler+0x514>
      return;
 800ae96:	bf00      	nop
  }
}
 800ae98:	37e8      	adds	r7, #232	; 0xe8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop

0800aea0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	4613      	mov	r3, r2
 800aeec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	88fa      	ldrh	r2, [r7, #6]
 800aef8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	88fa      	ldrh	r2, [r7, #6]
 800aefe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2222      	movs	r2, #34	; 0x22
 800af0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f042 0201 	orr.w	r2, r2, #1
 800af3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f042 0220 	orr.w	r2, r2, #32
 800af4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b095      	sub	sp, #84	; 0x54
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	330c      	adds	r3, #12
 800af6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	330c      	adds	r3, #12
 800af82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af84:	643a      	str	r2, [r7, #64]	; 0x40
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e5      	bne.n	800af64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3314      	adds	r3, #20
 800af9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	61fb      	str	r3, [r7, #28]
   return(result);
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f023 0301 	bic.w	r3, r3, #1
 800afae:	64bb      	str	r3, [r7, #72]	; 0x48
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3314      	adds	r3, #20
 800afb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e5      	bne.n	800af98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d119      	bne.n	800b008 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	330c      	adds	r3, #12
 800afda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f023 0310 	bic.w	r3, r3, #16
 800afea:	647b      	str	r3, [r7, #68]	; 0x44
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	330c      	adds	r3, #12
 800aff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aff4:	61ba      	str	r2, [r7, #24]
 800aff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6979      	ldr	r1, [r7, #20]
 800affa:	69ba      	ldr	r2, [r7, #24]
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	613b      	str	r3, [r7, #16]
   return(result);
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e5      	bne.n	800afd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b016:	bf00      	nop
 800b018:	3754      	adds	r7, #84	; 0x54
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff ff39 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b042:	bf00      	nop
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b21      	cmp	r3, #33	; 0x21
 800b05c:	d13e      	bne.n	800b0dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b066:	d114      	bne.n	800b092 <UART_Transmit_IT+0x48>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d110      	bne.n	800b092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	1c9a      	adds	r2, r3, #2
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	621a      	str	r2, [r3, #32]
 800b090:	e008      	b.n	800b0a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	1c59      	adds	r1, r3, #1
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6211      	str	r1, [r2, #32]
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10f      	bne.n	800b0d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e000      	b.n	800b0de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b0dc:	2302      	movs	r3, #2
  }
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2220      	movs	r2, #32
 800b106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff fec8 	bl	800aea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b08c      	sub	sp, #48	; 0x30
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b22      	cmp	r3, #34	; 0x22
 800b12c:	f040 80ab 	bne.w	800b286 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b138:	d117      	bne.n	800b16a <UART_Receive_IT+0x50>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d113      	bne.n	800b16a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	b29b      	uxth	r3, r3
 800b154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b158:	b29a      	uxth	r2, r3
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	629a      	str	r2, [r3, #40]	; 0x28
 800b168:	e026      	b.n	800b1b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b17c:	d007      	beq.n	800b18e <UART_Receive_IT+0x74>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10a      	bne.n	800b19c <UART_Receive_IT+0x82>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	b2da      	uxtb	r2, r3
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	e008      	b.n	800b1ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d15a      	bne.n	800b282 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f022 0220 	bic.w	r2, r2, #32
 800b1da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	695a      	ldr	r2, [r3, #20]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f022 0201 	bic.w	r2, r2, #1
 800b1fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d135      	bne.n	800b278 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	330c      	adds	r3, #12
 800b218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	e853 3f00 	ldrex	r3, [r3]
 800b220:	613b      	str	r3, [r7, #16]
   return(result);
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f023 0310 	bic.w	r3, r3, #16
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	330c      	adds	r3, #12
 800b230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b232:	623a      	str	r2, [r7, #32]
 800b234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	69f9      	ldr	r1, [r7, #28]
 800b238:	6a3a      	ldr	r2, [r7, #32]
 800b23a:	e841 2300 	strex	r3, r2, [r1]
 800b23e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e5      	bne.n	800b212 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b10      	cmp	r3, #16
 800b252:	d10a      	bne.n	800b26a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fe29 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
 800b276:	e002      	b.n	800b27e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7fa f95d 	bl	8005538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	e002      	b.n	800b288 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	e000      	b.n	800b288 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b286:	2302      	movs	r3, #2
  }
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3730      	adds	r7, #48	; 0x30
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b294:	b0c0      	sub	sp, #256	; 0x100
 800b296:	af00      	add	r7, sp, #0
 800b298:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ac:	68d9      	ldr	r1, [r3, #12]
 800b2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	ea40 0301 	orr.w	r3, r0, r1
 800b2b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b2e8:	f021 010c 	bic.w	r1, r1, #12
 800b2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2f6:	430b      	orrs	r3, r1
 800b2f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30a:	6999      	ldr	r1, [r3, #24]
 800b30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	ea40 0301 	orr.w	r3, r0, r1
 800b316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	4b8f      	ldr	r3, [pc, #572]	; (800b55c <UART_SetConfig+0x2cc>)
 800b320:	429a      	cmp	r2, r3
 800b322:	d005      	beq.n	800b330 <UART_SetConfig+0xa0>
 800b324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	4b8d      	ldr	r3, [pc, #564]	; (800b560 <UART_SetConfig+0x2d0>)
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d104      	bne.n	800b33a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b330:	f7fe f876 	bl	8009420 <HAL_RCC_GetPCLK2Freq>
 800b334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b338:	e003      	b.n	800b342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b33a:	f7fe f85d 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b33e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b34c:	f040 810c 	bne.w	800b568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b354:	2200      	movs	r2, #0
 800b356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b35a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b35e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b362:	4622      	mov	r2, r4
 800b364:	462b      	mov	r3, r5
 800b366:	1891      	adds	r1, r2, r2
 800b368:	65b9      	str	r1, [r7, #88]	; 0x58
 800b36a:	415b      	adcs	r3, r3
 800b36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b36e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b372:	4621      	mov	r1, r4
 800b374:	eb12 0801 	adds.w	r8, r2, r1
 800b378:	4629      	mov	r1, r5
 800b37a:	eb43 0901 	adc.w	r9, r3, r1
 800b37e:	f04f 0200 	mov.w	r2, #0
 800b382:	f04f 0300 	mov.w	r3, #0
 800b386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b38a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b38e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b392:	4690      	mov	r8, r2
 800b394:	4699      	mov	r9, r3
 800b396:	4623      	mov	r3, r4
 800b398:	eb18 0303 	adds.w	r3, r8, r3
 800b39c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	eb49 0303 	adc.w	r3, r9, r3
 800b3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b3ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b3be:	460b      	mov	r3, r1
 800b3c0:	18db      	adds	r3, r3, r3
 800b3c2:	653b      	str	r3, [r7, #80]	; 0x50
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	eb42 0303 	adc.w	r3, r2, r3
 800b3ca:	657b      	str	r3, [r7, #84]	; 0x54
 800b3cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b3d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b3d4:	f7f5 fb52 	bl	8000a7c <__aeabi_uldivmod>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4b61      	ldr	r3, [pc, #388]	; (800b564 <UART_SetConfig+0x2d4>)
 800b3de:	fba3 2302 	umull	r2, r3, r3, r2
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	011c      	lsls	r4, r3, #4
 800b3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	1891      	adds	r1, r2, r2
 800b3fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800b400:	415b      	adcs	r3, r3
 800b402:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b408:	4641      	mov	r1, r8
 800b40a:	eb12 0a01 	adds.w	sl, r2, r1
 800b40e:	4649      	mov	r1, r9
 800b410:	eb43 0b01 	adc.w	fp, r3, r1
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b428:	4692      	mov	sl, r2
 800b42a:	469b      	mov	fp, r3
 800b42c:	4643      	mov	r3, r8
 800b42e:	eb1a 0303 	adds.w	r3, sl, r3
 800b432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b436:	464b      	mov	r3, r9
 800b438:	eb4b 0303 	adc.w	r3, fp, r3
 800b43c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b44c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b454:	460b      	mov	r3, r1
 800b456:	18db      	adds	r3, r3, r3
 800b458:	643b      	str	r3, [r7, #64]	; 0x40
 800b45a:	4613      	mov	r3, r2
 800b45c:	eb42 0303 	adc.w	r3, r2, r3
 800b460:	647b      	str	r3, [r7, #68]	; 0x44
 800b462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b46a:	f7f5 fb07 	bl	8000a7c <__aeabi_uldivmod>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4611      	mov	r1, r2
 800b474:	4b3b      	ldr	r3, [pc, #236]	; (800b564 <UART_SetConfig+0x2d4>)
 800b476:	fba3 2301 	umull	r2, r3, r3, r1
 800b47a:	095b      	lsrs	r3, r3, #5
 800b47c:	2264      	movs	r2, #100	; 0x64
 800b47e:	fb02 f303 	mul.w	r3, r2, r3
 800b482:	1acb      	subs	r3, r1, r3
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b48a:	4b36      	ldr	r3, [pc, #216]	; (800b564 <UART_SetConfig+0x2d4>)
 800b48c:	fba3 2302 	umull	r2, r3, r3, r2
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b498:	441c      	add	r4, r3
 800b49a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b4a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	1891      	adds	r1, r2, r2
 800b4b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b4b4:	415b      	adcs	r3, r3
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b4bc:	4641      	mov	r1, r8
 800b4be:	1851      	adds	r1, r2, r1
 800b4c0:	6339      	str	r1, [r7, #48]	; 0x30
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	414b      	adcs	r3, r1
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	f04f 0300 	mov.w	r3, #0
 800b4d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b4d4:	4659      	mov	r1, fp
 800b4d6:	00cb      	lsls	r3, r1, #3
 800b4d8:	4651      	mov	r1, sl
 800b4da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4de:	4651      	mov	r1, sl
 800b4e0:	00ca      	lsls	r2, r1, #3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	189b      	adds	r3, r3, r2
 800b4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4f0:	464b      	mov	r3, r9
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	eb42 0303 	adc.w	r3, r2, r3
 800b4f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b508:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b50c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b510:	460b      	mov	r3, r1
 800b512:	18db      	adds	r3, r3, r3
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
 800b516:	4613      	mov	r3, r2
 800b518:	eb42 0303 	adc.w	r3, r2, r3
 800b51c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b51e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b526:	f7f5 faa9 	bl	8000a7c <__aeabi_uldivmod>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <UART_SetConfig+0x2d4>)
 800b530:	fba3 1302 	umull	r1, r3, r3, r2
 800b534:	095b      	lsrs	r3, r3, #5
 800b536:	2164      	movs	r1, #100	; 0x64
 800b538:	fb01 f303 	mul.w	r3, r1, r3
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	3332      	adds	r3, #50	; 0x32
 800b542:	4a08      	ldr	r2, [pc, #32]	; (800b564 <UART_SetConfig+0x2d4>)
 800b544:	fba2 2303 	umull	r2, r3, r2, r3
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	f003 0207 	and.w	r2, r3, #7
 800b54e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4422      	add	r2, r4
 800b556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b558:	e105      	b.n	800b766 <UART_SetConfig+0x4d6>
 800b55a:	bf00      	nop
 800b55c:	40011000 	.word	0x40011000
 800b560:	40011400 	.word	0x40011400
 800b564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b56c:	2200      	movs	r2, #0
 800b56e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b572:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b57a:	4642      	mov	r2, r8
 800b57c:	464b      	mov	r3, r9
 800b57e:	1891      	adds	r1, r2, r2
 800b580:	6239      	str	r1, [r7, #32]
 800b582:	415b      	adcs	r3, r3
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
 800b586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b58a:	4641      	mov	r1, r8
 800b58c:	1854      	adds	r4, r2, r1
 800b58e:	4649      	mov	r1, r9
 800b590:	eb43 0501 	adc.w	r5, r3, r1
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	00eb      	lsls	r3, r5, #3
 800b59e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5a2:	00e2      	lsls	r2, r4, #3
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	461d      	mov	r5, r3
 800b5a8:	4643      	mov	r3, r8
 800b5aa:	18e3      	adds	r3, r4, r3
 800b5ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5b0:	464b      	mov	r3, r9
 800b5b2:	eb45 0303 	adc.w	r3, r5, r3
 800b5b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5ca:	f04f 0200 	mov.w	r2, #0
 800b5ce:	f04f 0300 	mov.w	r3, #0
 800b5d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	008b      	lsls	r3, r1, #2
 800b5da:	4621      	mov	r1, r4
 800b5dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	008a      	lsls	r2, r1, #2
 800b5e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b5e8:	f7f5 fa48 	bl	8000a7c <__aeabi_uldivmod>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4b60      	ldr	r3, [pc, #384]	; (800b774 <UART_SetConfig+0x4e4>)
 800b5f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b5f6:	095b      	lsrs	r3, r3, #5
 800b5f8:	011c      	lsls	r4, r3, #4
 800b5fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b60c:	4642      	mov	r2, r8
 800b60e:	464b      	mov	r3, r9
 800b610:	1891      	adds	r1, r2, r2
 800b612:	61b9      	str	r1, [r7, #24]
 800b614:	415b      	adcs	r3, r3
 800b616:	61fb      	str	r3, [r7, #28]
 800b618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b61c:	4641      	mov	r1, r8
 800b61e:	1851      	adds	r1, r2, r1
 800b620:	6139      	str	r1, [r7, #16]
 800b622:	4649      	mov	r1, r9
 800b624:	414b      	adcs	r3, r1
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b634:	4659      	mov	r1, fp
 800b636:	00cb      	lsls	r3, r1, #3
 800b638:	4651      	mov	r1, sl
 800b63a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b63e:	4651      	mov	r1, sl
 800b640:	00ca      	lsls	r2, r1, #3
 800b642:	4610      	mov	r0, r2
 800b644:	4619      	mov	r1, r3
 800b646:	4603      	mov	r3, r0
 800b648:	4642      	mov	r2, r8
 800b64a:	189b      	adds	r3, r3, r2
 800b64c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b650:	464b      	mov	r3, r9
 800b652:	460a      	mov	r2, r1
 800b654:	eb42 0303 	adc.w	r3, r2, r3
 800b658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	67bb      	str	r3, [r7, #120]	; 0x78
 800b666:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b674:	4649      	mov	r1, r9
 800b676:	008b      	lsls	r3, r1, #2
 800b678:	4641      	mov	r1, r8
 800b67a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b67e:	4641      	mov	r1, r8
 800b680:	008a      	lsls	r2, r1, #2
 800b682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b686:	f7f5 f9f9 	bl	8000a7c <__aeabi_uldivmod>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4b39      	ldr	r3, [pc, #228]	; (800b774 <UART_SetConfig+0x4e4>)
 800b690:	fba3 1302 	umull	r1, r3, r3, r2
 800b694:	095b      	lsrs	r3, r3, #5
 800b696:	2164      	movs	r1, #100	; 0x64
 800b698:	fb01 f303 	mul.w	r3, r1, r3
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	3332      	adds	r3, #50	; 0x32
 800b6a2:	4a34      	ldr	r2, [pc, #208]	; (800b774 <UART_SetConfig+0x4e4>)
 800b6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a8:	095b      	lsrs	r3, r3, #5
 800b6aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6ae:	441c      	add	r4, r3
 800b6b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	673b      	str	r3, [r7, #112]	; 0x70
 800b6b8:	677a      	str	r2, [r7, #116]	; 0x74
 800b6ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b6be:	4642      	mov	r2, r8
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	1891      	adds	r1, r2, r2
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	415b      	adcs	r3, r3
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	1851      	adds	r1, r2, r1
 800b6d2:	6039      	str	r1, [r7, #0]
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	414b      	adcs	r3, r1
 800b6d8:	607b      	str	r3, [r7, #4]
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6e6:	4659      	mov	r1, fp
 800b6e8:	00cb      	lsls	r3, r1, #3
 800b6ea:	4651      	mov	r1, sl
 800b6ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6f0:	4651      	mov	r1, sl
 800b6f2:	00ca      	lsls	r2, r1, #3
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	4642      	mov	r2, r8
 800b6fc:	189b      	adds	r3, r3, r2
 800b6fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800b700:	464b      	mov	r3, r9
 800b702:	460a      	mov	r2, r1
 800b704:	eb42 0303 	adc.w	r3, r2, r3
 800b708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	663b      	str	r3, [r7, #96]	; 0x60
 800b714:	667a      	str	r2, [r7, #100]	; 0x64
 800b716:	f04f 0200 	mov.w	r2, #0
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b722:	4649      	mov	r1, r9
 800b724:	008b      	lsls	r3, r1, #2
 800b726:	4641      	mov	r1, r8
 800b728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b72c:	4641      	mov	r1, r8
 800b72e:	008a      	lsls	r2, r1, #2
 800b730:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b734:	f7f5 f9a2 	bl	8000a7c <__aeabi_uldivmod>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <UART_SetConfig+0x4e4>)
 800b73e:	fba3 1302 	umull	r1, r3, r3, r2
 800b742:	095b      	lsrs	r3, r3, #5
 800b744:	2164      	movs	r1, #100	; 0x64
 800b746:	fb01 f303 	mul.w	r3, r1, r3
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	011b      	lsls	r3, r3, #4
 800b74e:	3332      	adds	r3, #50	; 0x32
 800b750:	4a08      	ldr	r2, [pc, #32]	; (800b774 <UART_SetConfig+0x4e4>)
 800b752:	fba2 2303 	umull	r2, r3, r2, r3
 800b756:	095b      	lsrs	r3, r3, #5
 800b758:	f003 020f 	and.w	r2, r3, #15
 800b75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4422      	add	r2, r4
 800b764:	609a      	str	r2, [r3, #8]
}
 800b766:	bf00      	nop
 800b768:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b76c:	46bd      	mov	sp, r7
 800b76e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b772:	bf00      	nop
 800b774:	51eb851f 	.word	0x51eb851f

0800b778 <atoi>:
 800b778:	220a      	movs	r2, #10
 800b77a:	2100      	movs	r1, #0
 800b77c:	f000 b8ea 	b.w	800b954 <strtol>

0800b780 <__errno>:
 800b780:	4b01      	ldr	r3, [pc, #4]	; (800b788 <__errno+0x8>)
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	20000014 	.word	0x20000014

0800b78c <__libc_init_array>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	4d0d      	ldr	r5, [pc, #52]	; (800b7c4 <__libc_init_array+0x38>)
 800b790:	4c0d      	ldr	r4, [pc, #52]	; (800b7c8 <__libc_init_array+0x3c>)
 800b792:	1b64      	subs	r4, r4, r5
 800b794:	10a4      	asrs	r4, r4, #2
 800b796:	2600      	movs	r6, #0
 800b798:	42a6      	cmp	r6, r4
 800b79a:	d109      	bne.n	800b7b0 <__libc_init_array+0x24>
 800b79c:	4d0b      	ldr	r5, [pc, #44]	; (800b7cc <__libc_init_array+0x40>)
 800b79e:	4c0c      	ldr	r4, [pc, #48]	; (800b7d0 <__libc_init_array+0x44>)
 800b7a0:	f000 fd22 	bl	800c1e8 <_init>
 800b7a4:	1b64      	subs	r4, r4, r5
 800b7a6:	10a4      	asrs	r4, r4, #2
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	42a6      	cmp	r6, r4
 800b7ac:	d105      	bne.n	800b7ba <__libc_init_array+0x2e>
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}
 800b7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b4:	4798      	blx	r3
 800b7b6:	3601      	adds	r6, #1
 800b7b8:	e7ee      	b.n	800b798 <__libc_init_array+0xc>
 800b7ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7be:	4798      	blx	r3
 800b7c0:	3601      	adds	r6, #1
 800b7c2:	e7f2      	b.n	800b7aa <__libc_init_array+0x1e>
 800b7c4:	0800c3e8 	.word	0x0800c3e8
 800b7c8:	0800c3e8 	.word	0x0800c3e8
 800b7cc:	0800c3e8 	.word	0x0800c3e8
 800b7d0:	0800c3ec 	.word	0x0800c3ec

0800b7d4 <memcpy>:
 800b7d4:	440a      	add	r2, r1
 800b7d6:	4291      	cmp	r1, r2
 800b7d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7dc:	d100      	bne.n	800b7e0 <memcpy+0xc>
 800b7de:	4770      	bx	lr
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7ea:	4291      	cmp	r1, r2
 800b7ec:	d1f9      	bne.n	800b7e2 <memcpy+0xe>
 800b7ee:	bd10      	pop	{r4, pc}

0800b7f0 <memset>:
 800b7f0:	4402      	add	r2, r0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d100      	bne.n	800b7fa <memset+0xa>
 800b7f8:	4770      	bx	lr
 800b7fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b7fe:	e7f9      	b.n	800b7f4 <memset+0x4>

0800b800 <siprintf>:
 800b800:	b40e      	push	{r1, r2, r3}
 800b802:	b500      	push	{lr}
 800b804:	b09c      	sub	sp, #112	; 0x70
 800b806:	ab1d      	add	r3, sp, #116	; 0x74
 800b808:	9002      	str	r0, [sp, #8]
 800b80a:	9006      	str	r0, [sp, #24]
 800b80c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b810:	4809      	ldr	r0, [pc, #36]	; (800b838 <siprintf+0x38>)
 800b812:	9107      	str	r1, [sp, #28]
 800b814:	9104      	str	r1, [sp, #16]
 800b816:	4909      	ldr	r1, [pc, #36]	; (800b83c <siprintf+0x3c>)
 800b818:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81c:	9105      	str	r1, [sp, #20]
 800b81e:	6800      	ldr	r0, [r0, #0]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	a902      	add	r1, sp, #8
 800b824:	f000 f8fc 	bl	800ba20 <_svfiprintf_r>
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	b01c      	add	sp, #112	; 0x70
 800b830:	f85d eb04 	ldr.w	lr, [sp], #4
 800b834:	b003      	add	sp, #12
 800b836:	4770      	bx	lr
 800b838:	20000014 	.word	0x20000014
 800b83c:	ffff0208 	.word	0xffff0208

0800b840 <strcpy>:
 800b840:	4603      	mov	r3, r0
 800b842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b846:	f803 2b01 	strb.w	r2, [r3], #1
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1f9      	bne.n	800b842 <strcpy+0x2>
 800b84e:	4770      	bx	lr

0800b850 <_strtol_l.constprop.0>:
 800b850:	2b01      	cmp	r3, #1
 800b852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b856:	d001      	beq.n	800b85c <_strtol_l.constprop.0+0xc>
 800b858:	2b24      	cmp	r3, #36	; 0x24
 800b85a:	d906      	bls.n	800b86a <_strtol_l.constprop.0+0x1a>
 800b85c:	f7ff ff90 	bl	800b780 <__errno>
 800b860:	2316      	movs	r3, #22
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b950 <_strtol_l.constprop.0+0x100>
 800b86e:	460d      	mov	r5, r1
 800b870:	462e      	mov	r6, r5
 800b872:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b876:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b87a:	f017 0708 	ands.w	r7, r7, #8
 800b87e:	d1f7      	bne.n	800b870 <_strtol_l.constprop.0+0x20>
 800b880:	2c2d      	cmp	r4, #45	; 0x2d
 800b882:	d132      	bne.n	800b8ea <_strtol_l.constprop.0+0x9a>
 800b884:	782c      	ldrb	r4, [r5, #0]
 800b886:	2701      	movs	r7, #1
 800b888:	1cb5      	adds	r5, r6, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d05b      	beq.n	800b946 <_strtol_l.constprop.0+0xf6>
 800b88e:	2b10      	cmp	r3, #16
 800b890:	d109      	bne.n	800b8a6 <_strtol_l.constprop.0+0x56>
 800b892:	2c30      	cmp	r4, #48	; 0x30
 800b894:	d107      	bne.n	800b8a6 <_strtol_l.constprop.0+0x56>
 800b896:	782c      	ldrb	r4, [r5, #0]
 800b898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b89c:	2c58      	cmp	r4, #88	; 0x58
 800b89e:	d14d      	bne.n	800b93c <_strtol_l.constprop.0+0xec>
 800b8a0:	786c      	ldrb	r4, [r5, #1]
 800b8a2:	2310      	movs	r3, #16
 800b8a4:	3502      	adds	r5, #2
 800b8a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b8aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8ae:	f04f 0c00 	mov.w	ip, #0
 800b8b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b8b6:	4666      	mov	r6, ip
 800b8b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b8bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b8c0:	f1be 0f09 	cmp.w	lr, #9
 800b8c4:	d816      	bhi.n	800b8f4 <_strtol_l.constprop.0+0xa4>
 800b8c6:	4674      	mov	r4, lr
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	dd24      	ble.n	800b916 <_strtol_l.constprop.0+0xc6>
 800b8cc:	f1bc 0f00 	cmp.w	ip, #0
 800b8d0:	db1e      	blt.n	800b910 <_strtol_l.constprop.0+0xc0>
 800b8d2:	45b1      	cmp	r9, r6
 800b8d4:	d31c      	bcc.n	800b910 <_strtol_l.constprop.0+0xc0>
 800b8d6:	d101      	bne.n	800b8dc <_strtol_l.constprop.0+0x8c>
 800b8d8:	45a2      	cmp	sl, r4
 800b8da:	db19      	blt.n	800b910 <_strtol_l.constprop.0+0xc0>
 800b8dc:	fb06 4603 	mla	r6, r6, r3, r4
 800b8e0:	f04f 0c01 	mov.w	ip, #1
 800b8e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8e8:	e7e8      	b.n	800b8bc <_strtol_l.constprop.0+0x6c>
 800b8ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b8ec:	bf04      	itt	eq
 800b8ee:	782c      	ldrbeq	r4, [r5, #0]
 800b8f0:	1cb5      	addeq	r5, r6, #2
 800b8f2:	e7ca      	b.n	800b88a <_strtol_l.constprop.0+0x3a>
 800b8f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b8f8:	f1be 0f19 	cmp.w	lr, #25
 800b8fc:	d801      	bhi.n	800b902 <_strtol_l.constprop.0+0xb2>
 800b8fe:	3c37      	subs	r4, #55	; 0x37
 800b900:	e7e2      	b.n	800b8c8 <_strtol_l.constprop.0+0x78>
 800b902:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b906:	f1be 0f19 	cmp.w	lr, #25
 800b90a:	d804      	bhi.n	800b916 <_strtol_l.constprop.0+0xc6>
 800b90c:	3c57      	subs	r4, #87	; 0x57
 800b90e:	e7db      	b.n	800b8c8 <_strtol_l.constprop.0+0x78>
 800b910:	f04f 3cff 	mov.w	ip, #4294967295
 800b914:	e7e6      	b.n	800b8e4 <_strtol_l.constprop.0+0x94>
 800b916:	f1bc 0f00 	cmp.w	ip, #0
 800b91a:	da05      	bge.n	800b928 <_strtol_l.constprop.0+0xd8>
 800b91c:	2322      	movs	r3, #34	; 0x22
 800b91e:	6003      	str	r3, [r0, #0]
 800b920:	4646      	mov	r6, r8
 800b922:	b942      	cbnz	r2, 800b936 <_strtol_l.constprop.0+0xe6>
 800b924:	4630      	mov	r0, r6
 800b926:	e79e      	b.n	800b866 <_strtol_l.constprop.0+0x16>
 800b928:	b107      	cbz	r7, 800b92c <_strtol_l.constprop.0+0xdc>
 800b92a:	4276      	negs	r6, r6
 800b92c:	2a00      	cmp	r2, #0
 800b92e:	d0f9      	beq.n	800b924 <_strtol_l.constprop.0+0xd4>
 800b930:	f1bc 0f00 	cmp.w	ip, #0
 800b934:	d000      	beq.n	800b938 <_strtol_l.constprop.0+0xe8>
 800b936:	1e69      	subs	r1, r5, #1
 800b938:	6011      	str	r1, [r2, #0]
 800b93a:	e7f3      	b.n	800b924 <_strtol_l.constprop.0+0xd4>
 800b93c:	2430      	movs	r4, #48	; 0x30
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1b1      	bne.n	800b8a6 <_strtol_l.constprop.0+0x56>
 800b942:	2308      	movs	r3, #8
 800b944:	e7af      	b.n	800b8a6 <_strtol_l.constprop.0+0x56>
 800b946:	2c30      	cmp	r4, #48	; 0x30
 800b948:	d0a5      	beq.n	800b896 <_strtol_l.constprop.0+0x46>
 800b94a:	230a      	movs	r3, #10
 800b94c:	e7ab      	b.n	800b8a6 <_strtol_l.constprop.0+0x56>
 800b94e:	bf00      	nop
 800b950:	0800c2ad 	.word	0x0800c2ad

0800b954 <strtol>:
 800b954:	4613      	mov	r3, r2
 800b956:	460a      	mov	r2, r1
 800b958:	4601      	mov	r1, r0
 800b95a:	4802      	ldr	r0, [pc, #8]	; (800b964 <strtol+0x10>)
 800b95c:	6800      	ldr	r0, [r0, #0]
 800b95e:	f7ff bf77 	b.w	800b850 <_strtol_l.constprop.0>
 800b962:	bf00      	nop
 800b964:	20000014 	.word	0x20000014

0800b968 <__ssputs_r>:
 800b968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b96c:	688e      	ldr	r6, [r1, #8]
 800b96e:	429e      	cmp	r6, r3
 800b970:	4682      	mov	sl, r0
 800b972:	460c      	mov	r4, r1
 800b974:	4690      	mov	r8, r2
 800b976:	461f      	mov	r7, r3
 800b978:	d838      	bhi.n	800b9ec <__ssputs_r+0x84>
 800b97a:	898a      	ldrh	r2, [r1, #12]
 800b97c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b980:	d032      	beq.n	800b9e8 <__ssputs_r+0x80>
 800b982:	6825      	ldr	r5, [r4, #0]
 800b984:	6909      	ldr	r1, [r1, #16]
 800b986:	eba5 0901 	sub.w	r9, r5, r1
 800b98a:	6965      	ldr	r5, [r4, #20]
 800b98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b994:	3301      	adds	r3, #1
 800b996:	444b      	add	r3, r9
 800b998:	106d      	asrs	r5, r5, #1
 800b99a:	429d      	cmp	r5, r3
 800b99c:	bf38      	it	cc
 800b99e:	461d      	movcc	r5, r3
 800b9a0:	0553      	lsls	r3, r2, #21
 800b9a2:	d531      	bpl.n	800ba08 <__ssputs_r+0xa0>
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f000 fb55 	bl	800c054 <_malloc_r>
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	b950      	cbnz	r0, 800b9c4 <__ssputs_r+0x5c>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	f8ca 3000 	str.w	r3, [sl]
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c4:	6921      	ldr	r1, [r4, #16]
 800b9c6:	464a      	mov	r2, r9
 800b9c8:	f7ff ff04 	bl	800b7d4 <memcpy>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	6126      	str	r6, [r4, #16]
 800b9da:	6165      	str	r5, [r4, #20]
 800b9dc:	444e      	add	r6, r9
 800b9de:	eba5 0509 	sub.w	r5, r5, r9
 800b9e2:	6026      	str	r6, [r4, #0]
 800b9e4:	60a5      	str	r5, [r4, #8]
 800b9e6:	463e      	mov	r6, r7
 800b9e8:	42be      	cmp	r6, r7
 800b9ea:	d900      	bls.n	800b9ee <__ssputs_r+0x86>
 800b9ec:	463e      	mov	r6, r7
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	4641      	mov	r1, r8
 800b9f4:	f000 faa8 	bl	800bf48 <memmove>
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	1b9b      	subs	r3, r3, r6
 800b9fc:	60a3      	str	r3, [r4, #8]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	4433      	add	r3, r6
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	2000      	movs	r0, #0
 800ba06:	e7db      	b.n	800b9c0 <__ssputs_r+0x58>
 800ba08:	462a      	mov	r2, r5
 800ba0a:	f000 fb97 	bl	800c13c <_realloc_r>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d1e1      	bne.n	800b9d8 <__ssputs_r+0x70>
 800ba14:	6921      	ldr	r1, [r4, #16]
 800ba16:	4650      	mov	r0, sl
 800ba18:	f000 fab0 	bl	800bf7c <_free_r>
 800ba1c:	e7c7      	b.n	800b9ae <__ssputs_r+0x46>
	...

0800ba20 <_svfiprintf_r>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	4698      	mov	r8, r3
 800ba26:	898b      	ldrh	r3, [r1, #12]
 800ba28:	061b      	lsls	r3, r3, #24
 800ba2a:	b09d      	sub	sp, #116	; 0x74
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	4614      	mov	r4, r2
 800ba32:	d50e      	bpl.n	800ba52 <_svfiprintf_r+0x32>
 800ba34:	690b      	ldr	r3, [r1, #16]
 800ba36:	b963      	cbnz	r3, 800ba52 <_svfiprintf_r+0x32>
 800ba38:	2140      	movs	r1, #64	; 0x40
 800ba3a:	f000 fb0b 	bl	800c054 <_malloc_r>
 800ba3e:	6028      	str	r0, [r5, #0]
 800ba40:	6128      	str	r0, [r5, #16]
 800ba42:	b920      	cbnz	r0, 800ba4e <_svfiprintf_r+0x2e>
 800ba44:	230c      	movs	r3, #12
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	e0d1      	b.n	800bbf2 <_svfiprintf_r+0x1d2>
 800ba4e:	2340      	movs	r3, #64	; 0x40
 800ba50:	616b      	str	r3, [r5, #20]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9309      	str	r3, [sp, #36]	; 0x24
 800ba56:	2320      	movs	r3, #32
 800ba58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba60:	2330      	movs	r3, #48	; 0x30
 800ba62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc0c <_svfiprintf_r+0x1ec>
 800ba66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba6a:	f04f 0901 	mov.w	r9, #1
 800ba6e:	4623      	mov	r3, r4
 800ba70:	469a      	mov	sl, r3
 800ba72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba76:	b10a      	cbz	r2, 800ba7c <_svfiprintf_r+0x5c>
 800ba78:	2a25      	cmp	r2, #37	; 0x25
 800ba7a:	d1f9      	bne.n	800ba70 <_svfiprintf_r+0x50>
 800ba7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba80:	d00b      	beq.n	800ba9a <_svfiprintf_r+0x7a>
 800ba82:	465b      	mov	r3, fp
 800ba84:	4622      	mov	r2, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff ff6d 	bl	800b968 <__ssputs_r>
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f000 80aa 	beq.w	800bbe8 <_svfiprintf_r+0x1c8>
 800ba94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba96:	445a      	add	r2, fp
 800ba98:	9209      	str	r2, [sp, #36]	; 0x24
 800ba9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80a2 	beq.w	800bbe8 <_svfiprintf_r+0x1c8>
 800baa4:	2300      	movs	r3, #0
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baae:	f10a 0a01 	add.w	sl, sl, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	9307      	str	r3, [sp, #28]
 800bab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baba:	931a      	str	r3, [sp, #104]	; 0x68
 800babc:	4654      	mov	r4, sl
 800babe:	2205      	movs	r2, #5
 800bac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac4:	4851      	ldr	r0, [pc, #324]	; (800bc0c <_svfiprintf_r+0x1ec>)
 800bac6:	f7f4 fb93 	bl	80001f0 <memchr>
 800baca:	9a04      	ldr	r2, [sp, #16]
 800bacc:	b9d8      	cbnz	r0, 800bb06 <_svfiprintf_r+0xe6>
 800bace:	06d0      	lsls	r0, r2, #27
 800bad0:	bf44      	itt	mi
 800bad2:	2320      	movmi	r3, #32
 800bad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad8:	0711      	lsls	r1, r2, #28
 800bada:	bf44      	itt	mi
 800badc:	232b      	movmi	r3, #43	; 0x2b
 800bade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae2:	f89a 3000 	ldrb.w	r3, [sl]
 800bae6:	2b2a      	cmp	r3, #42	; 0x2a
 800bae8:	d015      	beq.n	800bb16 <_svfiprintf_r+0xf6>
 800baea:	9a07      	ldr	r2, [sp, #28]
 800baec:	4654      	mov	r4, sl
 800baee:	2000      	movs	r0, #0
 800baf0:	f04f 0c0a 	mov.w	ip, #10
 800baf4:	4621      	mov	r1, r4
 800baf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafa:	3b30      	subs	r3, #48	; 0x30
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	d94e      	bls.n	800bb9e <_svfiprintf_r+0x17e>
 800bb00:	b1b0      	cbz	r0, 800bb30 <_svfiprintf_r+0x110>
 800bb02:	9207      	str	r2, [sp, #28]
 800bb04:	e014      	b.n	800bb30 <_svfiprintf_r+0x110>
 800bb06:	eba0 0308 	sub.w	r3, r0, r8
 800bb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	46a2      	mov	sl, r4
 800bb14:	e7d2      	b.n	800babc <_svfiprintf_r+0x9c>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	1d19      	adds	r1, r3, #4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	9103      	str	r1, [sp, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bfbb      	ittet	lt
 800bb22:	425b      	neglt	r3, r3
 800bb24:	f042 0202 	orrlt.w	r2, r2, #2
 800bb28:	9307      	strge	r3, [sp, #28]
 800bb2a:	9307      	strlt	r3, [sp, #28]
 800bb2c:	bfb8      	it	lt
 800bb2e:	9204      	strlt	r2, [sp, #16]
 800bb30:	7823      	ldrb	r3, [r4, #0]
 800bb32:	2b2e      	cmp	r3, #46	; 0x2e
 800bb34:	d10c      	bne.n	800bb50 <_svfiprintf_r+0x130>
 800bb36:	7863      	ldrb	r3, [r4, #1]
 800bb38:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3a:	d135      	bne.n	800bba8 <_svfiprintf_r+0x188>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	9203      	str	r2, [sp, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	bfb8      	it	lt
 800bb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb4c:	3402      	adds	r4, #2
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc1c <_svfiprintf_r+0x1fc>
 800bb54:	7821      	ldrb	r1, [r4, #0]
 800bb56:	2203      	movs	r2, #3
 800bb58:	4650      	mov	r0, sl
 800bb5a:	f7f4 fb49 	bl	80001f0 <memchr>
 800bb5e:	b140      	cbz	r0, 800bb72 <_svfiprintf_r+0x152>
 800bb60:	2340      	movs	r3, #64	; 0x40
 800bb62:	eba0 000a 	sub.w	r0, r0, sl
 800bb66:	fa03 f000 	lsl.w	r0, r3, r0
 800bb6a:	9b04      	ldr	r3, [sp, #16]
 800bb6c:	4303      	orrs	r3, r0
 800bb6e:	3401      	adds	r4, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	4826      	ldr	r0, [pc, #152]	; (800bc10 <_svfiprintf_r+0x1f0>)
 800bb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb7c:	2206      	movs	r2, #6
 800bb7e:	f7f4 fb37 	bl	80001f0 <memchr>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d038      	beq.n	800bbf8 <_svfiprintf_r+0x1d8>
 800bb86:	4b23      	ldr	r3, [pc, #140]	; (800bc14 <_svfiprintf_r+0x1f4>)
 800bb88:	bb1b      	cbnz	r3, 800bbd2 <_svfiprintf_r+0x1b2>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	3307      	adds	r3, #7
 800bb8e:	f023 0307 	bic.w	r3, r3, #7
 800bb92:	3308      	adds	r3, #8
 800bb94:	9303      	str	r3, [sp, #12]
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	4433      	add	r3, r6
 800bb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9c:	e767      	b.n	800ba6e <_svfiprintf_r+0x4e>
 800bb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba2:	460c      	mov	r4, r1
 800bba4:	2001      	movs	r0, #1
 800bba6:	e7a5      	b.n	800baf4 <_svfiprintf_r+0xd4>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	3401      	adds	r4, #1
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	f04f 0c0a 	mov.w	ip, #10
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbba:	3a30      	subs	r2, #48	; 0x30
 800bbbc:	2a09      	cmp	r2, #9
 800bbbe:	d903      	bls.n	800bbc8 <_svfiprintf_r+0x1a8>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0c5      	beq.n	800bb50 <_svfiprintf_r+0x130>
 800bbc4:	9105      	str	r1, [sp, #20]
 800bbc6:	e7c3      	b.n	800bb50 <_svfiprintf_r+0x130>
 800bbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbcc:	4604      	mov	r4, r0
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7f0      	b.n	800bbb4 <_svfiprintf_r+0x194>
 800bbd2:	ab03      	add	r3, sp, #12
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	462a      	mov	r2, r5
 800bbd8:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <_svfiprintf_r+0x1f8>)
 800bbda:	a904      	add	r1, sp, #16
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f3af 8000 	nop.w
 800bbe2:	1c42      	adds	r2, r0, #1
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	d1d6      	bne.n	800bb96 <_svfiprintf_r+0x176>
 800bbe8:	89ab      	ldrh	r3, [r5, #12]
 800bbea:	065b      	lsls	r3, r3, #25
 800bbec:	f53f af2c 	bmi.w	800ba48 <_svfiprintf_r+0x28>
 800bbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf2:	b01d      	add	sp, #116	; 0x74
 800bbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf8:	ab03      	add	r3, sp, #12
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	462a      	mov	r2, r5
 800bbfe:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <_svfiprintf_r+0x1f8>)
 800bc00:	a904      	add	r1, sp, #16
 800bc02:	4638      	mov	r0, r7
 800bc04:	f000 f87a 	bl	800bcfc <_printf_i>
 800bc08:	e7eb      	b.n	800bbe2 <_svfiprintf_r+0x1c2>
 800bc0a:	bf00      	nop
 800bc0c:	0800c3ad 	.word	0x0800c3ad
 800bc10:	0800c3b7 	.word	0x0800c3b7
 800bc14:	00000000 	.word	0x00000000
 800bc18:	0800b969 	.word	0x0800b969
 800bc1c:	0800c3b3 	.word	0x0800c3b3

0800bc20 <_printf_common>:
 800bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	4616      	mov	r6, r2
 800bc26:	4699      	mov	r9, r3
 800bc28:	688a      	ldr	r2, [r1, #8]
 800bc2a:	690b      	ldr	r3, [r1, #16]
 800bc2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc30:	4293      	cmp	r3, r2
 800bc32:	bfb8      	it	lt
 800bc34:	4613      	movlt	r3, r2
 800bc36:	6033      	str	r3, [r6, #0]
 800bc38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	b10a      	cbz	r2, 800bc46 <_printf_common+0x26>
 800bc42:	3301      	adds	r3, #1
 800bc44:	6033      	str	r3, [r6, #0]
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	0699      	lsls	r1, r3, #26
 800bc4a:	bf42      	ittt	mi
 800bc4c:	6833      	ldrmi	r3, [r6, #0]
 800bc4e:	3302      	addmi	r3, #2
 800bc50:	6033      	strmi	r3, [r6, #0]
 800bc52:	6825      	ldr	r5, [r4, #0]
 800bc54:	f015 0506 	ands.w	r5, r5, #6
 800bc58:	d106      	bne.n	800bc68 <_printf_common+0x48>
 800bc5a:	f104 0a19 	add.w	sl, r4, #25
 800bc5e:	68e3      	ldr	r3, [r4, #12]
 800bc60:	6832      	ldr	r2, [r6, #0]
 800bc62:	1a9b      	subs	r3, r3, r2
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	dc26      	bgt.n	800bcb6 <_printf_common+0x96>
 800bc68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc6c:	1e13      	subs	r3, r2, #0
 800bc6e:	6822      	ldr	r2, [r4, #0]
 800bc70:	bf18      	it	ne
 800bc72:	2301      	movne	r3, #1
 800bc74:	0692      	lsls	r2, r2, #26
 800bc76:	d42b      	bmi.n	800bcd0 <_printf_common+0xb0>
 800bc78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	4638      	mov	r0, r7
 800bc80:	47c0      	blx	r8
 800bc82:	3001      	adds	r0, #1
 800bc84:	d01e      	beq.n	800bcc4 <_printf_common+0xa4>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	68e5      	ldr	r5, [r4, #12]
 800bc8a:	6832      	ldr	r2, [r6, #0]
 800bc8c:	f003 0306 	and.w	r3, r3, #6
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	bf08      	it	eq
 800bc94:	1aad      	subeq	r5, r5, r2
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	6922      	ldr	r2, [r4, #16]
 800bc9a:	bf0c      	ite	eq
 800bc9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bca0:	2500      	movne	r5, #0
 800bca2:	4293      	cmp	r3, r2
 800bca4:	bfc4      	itt	gt
 800bca6:	1a9b      	subgt	r3, r3, r2
 800bca8:	18ed      	addgt	r5, r5, r3
 800bcaa:	2600      	movs	r6, #0
 800bcac:	341a      	adds	r4, #26
 800bcae:	42b5      	cmp	r5, r6
 800bcb0:	d11a      	bne.n	800bce8 <_printf_common+0xc8>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e008      	b.n	800bcc8 <_printf_common+0xa8>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4652      	mov	r2, sl
 800bcba:	4649      	mov	r1, r9
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	47c0      	blx	r8
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d103      	bne.n	800bccc <_printf_common+0xac>
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bccc:	3501      	adds	r5, #1
 800bcce:	e7c6      	b.n	800bc5e <_printf_common+0x3e>
 800bcd0:	18e1      	adds	r1, r4, r3
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	2030      	movs	r0, #48	; 0x30
 800bcd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcda:	4422      	add	r2, r4
 800bcdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bce4:	3302      	adds	r3, #2
 800bce6:	e7c7      	b.n	800bc78 <_printf_common+0x58>
 800bce8:	2301      	movs	r3, #1
 800bcea:	4622      	mov	r2, r4
 800bcec:	4649      	mov	r1, r9
 800bcee:	4638      	mov	r0, r7
 800bcf0:	47c0      	blx	r8
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d0e6      	beq.n	800bcc4 <_printf_common+0xa4>
 800bcf6:	3601      	adds	r6, #1
 800bcf8:	e7d9      	b.n	800bcae <_printf_common+0x8e>
	...

0800bcfc <_printf_i>:
 800bcfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	7e0f      	ldrb	r7, [r1, #24]
 800bd02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd04:	2f78      	cmp	r7, #120	; 0x78
 800bd06:	4691      	mov	r9, r2
 800bd08:	4680      	mov	r8, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	469a      	mov	sl, r3
 800bd0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd12:	d807      	bhi.n	800bd24 <_printf_i+0x28>
 800bd14:	2f62      	cmp	r7, #98	; 0x62
 800bd16:	d80a      	bhi.n	800bd2e <_printf_i+0x32>
 800bd18:	2f00      	cmp	r7, #0
 800bd1a:	f000 80d8 	beq.w	800bece <_printf_i+0x1d2>
 800bd1e:	2f58      	cmp	r7, #88	; 0x58
 800bd20:	f000 80a3 	beq.w	800be6a <_printf_i+0x16e>
 800bd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd2c:	e03a      	b.n	800bda4 <_printf_i+0xa8>
 800bd2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd32:	2b15      	cmp	r3, #21
 800bd34:	d8f6      	bhi.n	800bd24 <_printf_i+0x28>
 800bd36:	a101      	add	r1, pc, #4	; (adr r1, 800bd3c <_printf_i+0x40>)
 800bd38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd3c:	0800bd95 	.word	0x0800bd95
 800bd40:	0800bda9 	.word	0x0800bda9
 800bd44:	0800bd25 	.word	0x0800bd25
 800bd48:	0800bd25 	.word	0x0800bd25
 800bd4c:	0800bd25 	.word	0x0800bd25
 800bd50:	0800bd25 	.word	0x0800bd25
 800bd54:	0800bda9 	.word	0x0800bda9
 800bd58:	0800bd25 	.word	0x0800bd25
 800bd5c:	0800bd25 	.word	0x0800bd25
 800bd60:	0800bd25 	.word	0x0800bd25
 800bd64:	0800bd25 	.word	0x0800bd25
 800bd68:	0800beb5 	.word	0x0800beb5
 800bd6c:	0800bdd9 	.word	0x0800bdd9
 800bd70:	0800be97 	.word	0x0800be97
 800bd74:	0800bd25 	.word	0x0800bd25
 800bd78:	0800bd25 	.word	0x0800bd25
 800bd7c:	0800bed7 	.word	0x0800bed7
 800bd80:	0800bd25 	.word	0x0800bd25
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bd25 	.word	0x0800bd25
 800bd8c:	0800bd25 	.word	0x0800bd25
 800bd90:	0800be9f 	.word	0x0800be9f
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	1d1a      	adds	r2, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	602a      	str	r2, [r5, #0]
 800bd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bda4:	2301      	movs	r3, #1
 800bda6:	e0a3      	b.n	800bef0 <_printf_i+0x1f4>
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	6829      	ldr	r1, [r5, #0]
 800bdac:	0606      	lsls	r6, r0, #24
 800bdae:	f101 0304 	add.w	r3, r1, #4
 800bdb2:	d50a      	bpl.n	800bdca <_printf_i+0xce>
 800bdb4:	680e      	ldr	r6, [r1, #0]
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	2e00      	cmp	r6, #0
 800bdba:	da03      	bge.n	800bdc4 <_printf_i+0xc8>
 800bdbc:	232d      	movs	r3, #45	; 0x2d
 800bdbe:	4276      	negs	r6, r6
 800bdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc4:	485e      	ldr	r0, [pc, #376]	; (800bf40 <_printf_i+0x244>)
 800bdc6:	230a      	movs	r3, #10
 800bdc8:	e019      	b.n	800bdfe <_printf_i+0x102>
 800bdca:	680e      	ldr	r6, [r1, #0]
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdd2:	bf18      	it	ne
 800bdd4:	b236      	sxthne	r6, r6
 800bdd6:	e7ef      	b.n	800bdb8 <_printf_i+0xbc>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	6820      	ldr	r0, [r4, #0]
 800bddc:	1d19      	adds	r1, r3, #4
 800bdde:	6029      	str	r1, [r5, #0]
 800bde0:	0601      	lsls	r1, r0, #24
 800bde2:	d501      	bpl.n	800bde8 <_printf_i+0xec>
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	e002      	b.n	800bdee <_printf_i+0xf2>
 800bde8:	0646      	lsls	r6, r0, #25
 800bdea:	d5fb      	bpl.n	800bde4 <_printf_i+0xe8>
 800bdec:	881e      	ldrh	r6, [r3, #0]
 800bdee:	4854      	ldr	r0, [pc, #336]	; (800bf40 <_printf_i+0x244>)
 800bdf0:	2f6f      	cmp	r7, #111	; 0x6f
 800bdf2:	bf0c      	ite	eq
 800bdf4:	2308      	moveq	r3, #8
 800bdf6:	230a      	movne	r3, #10
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdfe:	6865      	ldr	r5, [r4, #4]
 800be00:	60a5      	str	r5, [r4, #8]
 800be02:	2d00      	cmp	r5, #0
 800be04:	bfa2      	ittt	ge
 800be06:	6821      	ldrge	r1, [r4, #0]
 800be08:	f021 0104 	bicge.w	r1, r1, #4
 800be0c:	6021      	strge	r1, [r4, #0]
 800be0e:	b90e      	cbnz	r6, 800be14 <_printf_i+0x118>
 800be10:	2d00      	cmp	r5, #0
 800be12:	d04d      	beq.n	800beb0 <_printf_i+0x1b4>
 800be14:	4615      	mov	r5, r2
 800be16:	fbb6 f1f3 	udiv	r1, r6, r3
 800be1a:	fb03 6711 	mls	r7, r3, r1, r6
 800be1e:	5dc7      	ldrb	r7, [r0, r7]
 800be20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be24:	4637      	mov	r7, r6
 800be26:	42bb      	cmp	r3, r7
 800be28:	460e      	mov	r6, r1
 800be2a:	d9f4      	bls.n	800be16 <_printf_i+0x11a>
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d10b      	bne.n	800be48 <_printf_i+0x14c>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	07de      	lsls	r6, r3, #31
 800be34:	d508      	bpl.n	800be48 <_printf_i+0x14c>
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	4299      	cmp	r1, r3
 800be3c:	bfde      	ittt	le
 800be3e:	2330      	movle	r3, #48	; 0x30
 800be40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be48:	1b52      	subs	r2, r2, r5
 800be4a:	6122      	str	r2, [r4, #16]
 800be4c:	f8cd a000 	str.w	sl, [sp]
 800be50:	464b      	mov	r3, r9
 800be52:	aa03      	add	r2, sp, #12
 800be54:	4621      	mov	r1, r4
 800be56:	4640      	mov	r0, r8
 800be58:	f7ff fee2 	bl	800bc20 <_printf_common>
 800be5c:	3001      	adds	r0, #1
 800be5e:	d14c      	bne.n	800befa <_printf_i+0x1fe>
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	b004      	add	sp, #16
 800be66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6a:	4835      	ldr	r0, [pc, #212]	; (800bf40 <_printf_i+0x244>)
 800be6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be70:	6829      	ldr	r1, [r5, #0]
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	f851 6b04 	ldr.w	r6, [r1], #4
 800be78:	6029      	str	r1, [r5, #0]
 800be7a:	061d      	lsls	r5, r3, #24
 800be7c:	d514      	bpl.n	800bea8 <_printf_i+0x1ac>
 800be7e:	07df      	lsls	r7, r3, #31
 800be80:	bf44      	itt	mi
 800be82:	f043 0320 	orrmi.w	r3, r3, #32
 800be86:	6023      	strmi	r3, [r4, #0]
 800be88:	b91e      	cbnz	r6, 800be92 <_printf_i+0x196>
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	f023 0320 	bic.w	r3, r3, #32
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	2310      	movs	r3, #16
 800be94:	e7b0      	b.n	800bdf8 <_printf_i+0xfc>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	f043 0320 	orr.w	r3, r3, #32
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	2378      	movs	r3, #120	; 0x78
 800bea0:	4828      	ldr	r0, [pc, #160]	; (800bf44 <_printf_i+0x248>)
 800bea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bea6:	e7e3      	b.n	800be70 <_printf_i+0x174>
 800bea8:	0659      	lsls	r1, r3, #25
 800beaa:	bf48      	it	mi
 800beac:	b2b6      	uxthmi	r6, r6
 800beae:	e7e6      	b.n	800be7e <_printf_i+0x182>
 800beb0:	4615      	mov	r5, r2
 800beb2:	e7bb      	b.n	800be2c <_printf_i+0x130>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	6826      	ldr	r6, [r4, #0]
 800beb8:	6961      	ldr	r1, [r4, #20]
 800beba:	1d18      	adds	r0, r3, #4
 800bebc:	6028      	str	r0, [r5, #0]
 800bebe:	0635      	lsls	r5, r6, #24
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	d501      	bpl.n	800bec8 <_printf_i+0x1cc>
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	e002      	b.n	800bece <_printf_i+0x1d2>
 800bec8:	0670      	lsls	r0, r6, #25
 800beca:	d5fb      	bpl.n	800bec4 <_printf_i+0x1c8>
 800becc:	8019      	strh	r1, [r3, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	4615      	mov	r5, r2
 800bed4:	e7ba      	b.n	800be4c <_printf_i+0x150>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	1d1a      	adds	r2, r3, #4
 800beda:	602a      	str	r2, [r5, #0]
 800bedc:	681d      	ldr	r5, [r3, #0]
 800bede:	6862      	ldr	r2, [r4, #4]
 800bee0:	2100      	movs	r1, #0
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7f4 f984 	bl	80001f0 <memchr>
 800bee8:	b108      	cbz	r0, 800beee <_printf_i+0x1f2>
 800beea:	1b40      	subs	r0, r0, r5
 800beec:	6060      	str	r0, [r4, #4]
 800beee:	6863      	ldr	r3, [r4, #4]
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	2300      	movs	r3, #0
 800bef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bef8:	e7a8      	b.n	800be4c <_printf_i+0x150>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	462a      	mov	r2, r5
 800befe:	4649      	mov	r1, r9
 800bf00:	4640      	mov	r0, r8
 800bf02:	47d0      	blx	sl
 800bf04:	3001      	adds	r0, #1
 800bf06:	d0ab      	beq.n	800be60 <_printf_i+0x164>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	079b      	lsls	r3, r3, #30
 800bf0c:	d413      	bmi.n	800bf36 <_printf_i+0x23a>
 800bf0e:	68e0      	ldr	r0, [r4, #12]
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	4298      	cmp	r0, r3
 800bf14:	bfb8      	it	lt
 800bf16:	4618      	movlt	r0, r3
 800bf18:	e7a4      	b.n	800be64 <_printf_i+0x168>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4649      	mov	r1, r9
 800bf20:	4640      	mov	r0, r8
 800bf22:	47d0      	blx	sl
 800bf24:	3001      	adds	r0, #1
 800bf26:	d09b      	beq.n	800be60 <_printf_i+0x164>
 800bf28:	3501      	adds	r5, #1
 800bf2a:	68e3      	ldr	r3, [r4, #12]
 800bf2c:	9903      	ldr	r1, [sp, #12]
 800bf2e:	1a5b      	subs	r3, r3, r1
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dcf2      	bgt.n	800bf1a <_printf_i+0x21e>
 800bf34:	e7eb      	b.n	800bf0e <_printf_i+0x212>
 800bf36:	2500      	movs	r5, #0
 800bf38:	f104 0619 	add.w	r6, r4, #25
 800bf3c:	e7f5      	b.n	800bf2a <_printf_i+0x22e>
 800bf3e:	bf00      	nop
 800bf40:	0800c3be 	.word	0x0800c3be
 800bf44:	0800c3cf 	.word	0x0800c3cf

0800bf48 <memmove>:
 800bf48:	4288      	cmp	r0, r1
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	eb01 0402 	add.w	r4, r1, r2
 800bf50:	d902      	bls.n	800bf58 <memmove+0x10>
 800bf52:	4284      	cmp	r4, r0
 800bf54:	4623      	mov	r3, r4
 800bf56:	d807      	bhi.n	800bf68 <memmove+0x20>
 800bf58:	1e43      	subs	r3, r0, #1
 800bf5a:	42a1      	cmp	r1, r4
 800bf5c:	d008      	beq.n	800bf70 <memmove+0x28>
 800bf5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf66:	e7f8      	b.n	800bf5a <memmove+0x12>
 800bf68:	4402      	add	r2, r0
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	428a      	cmp	r2, r1
 800bf6e:	d100      	bne.n	800bf72 <memmove+0x2a>
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf7a:	e7f7      	b.n	800bf6c <memmove+0x24>

0800bf7c <_free_r>:
 800bf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d044      	beq.n	800c00c <_free_r+0x90>
 800bf82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf86:	9001      	str	r0, [sp, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf8e:	bfb8      	it	lt
 800bf90:	18e4      	addlt	r4, r4, r3
 800bf92:	f000 f913 	bl	800c1bc <__malloc_lock>
 800bf96:	4a1e      	ldr	r2, [pc, #120]	; (800c010 <_free_r+0x94>)
 800bf98:	9801      	ldr	r0, [sp, #4]
 800bf9a:	6813      	ldr	r3, [r2, #0]
 800bf9c:	b933      	cbnz	r3, 800bfac <_free_r+0x30>
 800bf9e:	6063      	str	r3, [r4, #4]
 800bfa0:	6014      	str	r4, [r2, #0]
 800bfa2:	b003      	add	sp, #12
 800bfa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfa8:	f000 b90e 	b.w	800c1c8 <__malloc_unlock>
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	d908      	bls.n	800bfc2 <_free_r+0x46>
 800bfb0:	6825      	ldr	r5, [r4, #0]
 800bfb2:	1961      	adds	r1, r4, r5
 800bfb4:	428b      	cmp	r3, r1
 800bfb6:	bf01      	itttt	eq
 800bfb8:	6819      	ldreq	r1, [r3, #0]
 800bfba:	685b      	ldreq	r3, [r3, #4]
 800bfbc:	1949      	addeq	r1, r1, r5
 800bfbe:	6021      	streq	r1, [r4, #0]
 800bfc0:	e7ed      	b.n	800bf9e <_free_r+0x22>
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b10b      	cbz	r3, 800bfcc <_free_r+0x50>
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	d9fa      	bls.n	800bfc2 <_free_r+0x46>
 800bfcc:	6811      	ldr	r1, [r2, #0]
 800bfce:	1855      	adds	r5, r2, r1
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	d10b      	bne.n	800bfec <_free_r+0x70>
 800bfd4:	6824      	ldr	r4, [r4, #0]
 800bfd6:	4421      	add	r1, r4
 800bfd8:	1854      	adds	r4, r2, r1
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	6011      	str	r1, [r2, #0]
 800bfde:	d1e0      	bne.n	800bfa2 <_free_r+0x26>
 800bfe0:	681c      	ldr	r4, [r3, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	6053      	str	r3, [r2, #4]
 800bfe6:	4421      	add	r1, r4
 800bfe8:	6011      	str	r1, [r2, #0]
 800bfea:	e7da      	b.n	800bfa2 <_free_r+0x26>
 800bfec:	d902      	bls.n	800bff4 <_free_r+0x78>
 800bfee:	230c      	movs	r3, #12
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	e7d6      	b.n	800bfa2 <_free_r+0x26>
 800bff4:	6825      	ldr	r5, [r4, #0]
 800bff6:	1961      	adds	r1, r4, r5
 800bff8:	428b      	cmp	r3, r1
 800bffa:	bf04      	itt	eq
 800bffc:	6819      	ldreq	r1, [r3, #0]
 800bffe:	685b      	ldreq	r3, [r3, #4]
 800c000:	6063      	str	r3, [r4, #4]
 800c002:	bf04      	itt	eq
 800c004:	1949      	addeq	r1, r1, r5
 800c006:	6021      	streq	r1, [r4, #0]
 800c008:	6054      	str	r4, [r2, #4]
 800c00a:	e7ca      	b.n	800bfa2 <_free_r+0x26>
 800c00c:	b003      	add	sp, #12
 800c00e:	bd30      	pop	{r4, r5, pc}
 800c010:	20002550 	.word	0x20002550

0800c014 <sbrk_aligned>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	4e0e      	ldr	r6, [pc, #56]	; (800c050 <sbrk_aligned+0x3c>)
 800c018:	460c      	mov	r4, r1
 800c01a:	6831      	ldr	r1, [r6, #0]
 800c01c:	4605      	mov	r5, r0
 800c01e:	b911      	cbnz	r1, 800c026 <sbrk_aligned+0x12>
 800c020:	f000 f8bc 	bl	800c19c <_sbrk_r>
 800c024:	6030      	str	r0, [r6, #0]
 800c026:	4621      	mov	r1, r4
 800c028:	4628      	mov	r0, r5
 800c02a:	f000 f8b7 	bl	800c19c <_sbrk_r>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	d00a      	beq.n	800c048 <sbrk_aligned+0x34>
 800c032:	1cc4      	adds	r4, r0, #3
 800c034:	f024 0403 	bic.w	r4, r4, #3
 800c038:	42a0      	cmp	r0, r4
 800c03a:	d007      	beq.n	800c04c <sbrk_aligned+0x38>
 800c03c:	1a21      	subs	r1, r4, r0
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 f8ac 	bl	800c19c <_sbrk_r>
 800c044:	3001      	adds	r0, #1
 800c046:	d101      	bne.n	800c04c <sbrk_aligned+0x38>
 800c048:	f04f 34ff 	mov.w	r4, #4294967295
 800c04c:	4620      	mov	r0, r4
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	20002554 	.word	0x20002554

0800c054 <_malloc_r>:
 800c054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c058:	1ccd      	adds	r5, r1, #3
 800c05a:	f025 0503 	bic.w	r5, r5, #3
 800c05e:	3508      	adds	r5, #8
 800c060:	2d0c      	cmp	r5, #12
 800c062:	bf38      	it	cc
 800c064:	250c      	movcc	r5, #12
 800c066:	2d00      	cmp	r5, #0
 800c068:	4607      	mov	r7, r0
 800c06a:	db01      	blt.n	800c070 <_malloc_r+0x1c>
 800c06c:	42a9      	cmp	r1, r5
 800c06e:	d905      	bls.n	800c07c <_malloc_r+0x28>
 800c070:	230c      	movs	r3, #12
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	2600      	movs	r6, #0
 800c076:	4630      	mov	r0, r6
 800c078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07c:	4e2e      	ldr	r6, [pc, #184]	; (800c138 <_malloc_r+0xe4>)
 800c07e:	f000 f89d 	bl	800c1bc <__malloc_lock>
 800c082:	6833      	ldr	r3, [r6, #0]
 800c084:	461c      	mov	r4, r3
 800c086:	bb34      	cbnz	r4, 800c0d6 <_malloc_r+0x82>
 800c088:	4629      	mov	r1, r5
 800c08a:	4638      	mov	r0, r7
 800c08c:	f7ff ffc2 	bl	800c014 <sbrk_aligned>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	4604      	mov	r4, r0
 800c094:	d14d      	bne.n	800c132 <_malloc_r+0xde>
 800c096:	6834      	ldr	r4, [r6, #0]
 800c098:	4626      	mov	r6, r4
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	d140      	bne.n	800c120 <_malloc_r+0xcc>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	eb04 0803 	add.w	r8, r4, r3
 800c0a8:	f000 f878 	bl	800c19c <_sbrk_r>
 800c0ac:	4580      	cmp	r8, r0
 800c0ae:	d13a      	bne.n	800c126 <_malloc_r+0xd2>
 800c0b0:	6821      	ldr	r1, [r4, #0]
 800c0b2:	3503      	adds	r5, #3
 800c0b4:	1a6d      	subs	r5, r5, r1
 800c0b6:	f025 0503 	bic.w	r5, r5, #3
 800c0ba:	3508      	adds	r5, #8
 800c0bc:	2d0c      	cmp	r5, #12
 800c0be:	bf38      	it	cc
 800c0c0:	250c      	movcc	r5, #12
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f7ff ffa5 	bl	800c014 <sbrk_aligned>
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d02b      	beq.n	800c126 <_malloc_r+0xd2>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	442b      	add	r3, r5
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	e00e      	b.n	800c0f4 <_malloc_r+0xa0>
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	1b52      	subs	r2, r2, r5
 800c0da:	d41e      	bmi.n	800c11a <_malloc_r+0xc6>
 800c0dc:	2a0b      	cmp	r2, #11
 800c0de:	d916      	bls.n	800c10e <_malloc_r+0xba>
 800c0e0:	1961      	adds	r1, r4, r5
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	6025      	str	r5, [r4, #0]
 800c0e6:	bf18      	it	ne
 800c0e8:	6059      	strne	r1, [r3, #4]
 800c0ea:	6863      	ldr	r3, [r4, #4]
 800c0ec:	bf08      	it	eq
 800c0ee:	6031      	streq	r1, [r6, #0]
 800c0f0:	5162      	str	r2, [r4, r5]
 800c0f2:	604b      	str	r3, [r1, #4]
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f104 060b 	add.w	r6, r4, #11
 800c0fa:	f000 f865 	bl	800c1c8 <__malloc_unlock>
 800c0fe:	f026 0607 	bic.w	r6, r6, #7
 800c102:	1d23      	adds	r3, r4, #4
 800c104:	1af2      	subs	r2, r6, r3
 800c106:	d0b6      	beq.n	800c076 <_malloc_r+0x22>
 800c108:	1b9b      	subs	r3, r3, r6
 800c10a:	50a3      	str	r3, [r4, r2]
 800c10c:	e7b3      	b.n	800c076 <_malloc_r+0x22>
 800c10e:	6862      	ldr	r2, [r4, #4]
 800c110:	42a3      	cmp	r3, r4
 800c112:	bf0c      	ite	eq
 800c114:	6032      	streq	r2, [r6, #0]
 800c116:	605a      	strne	r2, [r3, #4]
 800c118:	e7ec      	b.n	800c0f4 <_malloc_r+0xa0>
 800c11a:	4623      	mov	r3, r4
 800c11c:	6864      	ldr	r4, [r4, #4]
 800c11e:	e7b2      	b.n	800c086 <_malloc_r+0x32>
 800c120:	4634      	mov	r4, r6
 800c122:	6876      	ldr	r6, [r6, #4]
 800c124:	e7b9      	b.n	800c09a <_malloc_r+0x46>
 800c126:	230c      	movs	r3, #12
 800c128:	603b      	str	r3, [r7, #0]
 800c12a:	4638      	mov	r0, r7
 800c12c:	f000 f84c 	bl	800c1c8 <__malloc_unlock>
 800c130:	e7a1      	b.n	800c076 <_malloc_r+0x22>
 800c132:	6025      	str	r5, [r4, #0]
 800c134:	e7de      	b.n	800c0f4 <_malloc_r+0xa0>
 800c136:	bf00      	nop
 800c138:	20002550 	.word	0x20002550

0800c13c <_realloc_r>:
 800c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	4680      	mov	r8, r0
 800c142:	4614      	mov	r4, r2
 800c144:	460e      	mov	r6, r1
 800c146:	b921      	cbnz	r1, 800c152 <_realloc_r+0x16>
 800c148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	4611      	mov	r1, r2
 800c14e:	f7ff bf81 	b.w	800c054 <_malloc_r>
 800c152:	b92a      	cbnz	r2, 800c160 <_realloc_r+0x24>
 800c154:	f7ff ff12 	bl	800bf7c <_free_r>
 800c158:	4625      	mov	r5, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	f000 f838 	bl	800c1d4 <_malloc_usable_size_r>
 800c164:	4284      	cmp	r4, r0
 800c166:	4607      	mov	r7, r0
 800c168:	d802      	bhi.n	800c170 <_realloc_r+0x34>
 800c16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c16e:	d812      	bhi.n	800c196 <_realloc_r+0x5a>
 800c170:	4621      	mov	r1, r4
 800c172:	4640      	mov	r0, r8
 800c174:	f7ff ff6e 	bl	800c054 <_malloc_r>
 800c178:	4605      	mov	r5, r0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d0ed      	beq.n	800c15a <_realloc_r+0x1e>
 800c17e:	42bc      	cmp	r4, r7
 800c180:	4622      	mov	r2, r4
 800c182:	4631      	mov	r1, r6
 800c184:	bf28      	it	cs
 800c186:	463a      	movcs	r2, r7
 800c188:	f7ff fb24 	bl	800b7d4 <memcpy>
 800c18c:	4631      	mov	r1, r6
 800c18e:	4640      	mov	r0, r8
 800c190:	f7ff fef4 	bl	800bf7c <_free_r>
 800c194:	e7e1      	b.n	800c15a <_realloc_r+0x1e>
 800c196:	4635      	mov	r5, r6
 800c198:	e7df      	b.n	800c15a <_realloc_r+0x1e>
	...

0800c19c <_sbrk_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d06      	ldr	r5, [pc, #24]	; (800c1b8 <_sbrk_r+0x1c>)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	602b      	str	r3, [r5, #0]
 800c1a8:	f7f9 f920 	bl	80053ec <_sbrk>
 800c1ac:	1c43      	adds	r3, r0, #1
 800c1ae:	d102      	bne.n	800c1b6 <_sbrk_r+0x1a>
 800c1b0:	682b      	ldr	r3, [r5, #0]
 800c1b2:	b103      	cbz	r3, 800c1b6 <_sbrk_r+0x1a>
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	20002558 	.word	0x20002558

0800c1bc <__malloc_lock>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__malloc_lock+0x8>)
 800c1be:	f000 b811 	b.w	800c1e4 <__retarget_lock_acquire_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	2000255c 	.word	0x2000255c

0800c1c8 <__malloc_unlock>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__malloc_unlock+0x8>)
 800c1ca:	f000 b80c 	b.w	800c1e6 <__retarget_lock_release_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	2000255c 	.word	0x2000255c

0800c1d4 <_malloc_usable_size_r>:
 800c1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d8:	1f18      	subs	r0, r3, #4
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	bfbc      	itt	lt
 800c1de:	580b      	ldrlt	r3, [r1, r0]
 800c1e0:	18c0      	addlt	r0, r0, r3
 800c1e2:	4770      	bx	lr

0800c1e4 <__retarget_lock_acquire_recursive>:
 800c1e4:	4770      	bx	lr

0800c1e6 <__retarget_lock_release_recursive>:
 800c1e6:	4770      	bx	lr

0800c1e8 <_init>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	bf00      	nop
 800c1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ee:	bc08      	pop	{r3}
 800c1f0:	469e      	mov	lr, r3
 800c1f2:	4770      	bx	lr

0800c1f4 <_fini>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr
