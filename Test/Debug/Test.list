
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d0  080093d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d8  080093d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080093e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000070  08009450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08009450  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015337  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b6  00000000  00000000  000353d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00037c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00038f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001993b  00000000  00000000  0003a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001863e  00000000  00000000  00053aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04d1  00000000  00000000  0006c0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c5b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  0010c604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009244 	.word	0x08009244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009244 	.word	0x08009244

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TOF_init>:
extern I2C_HandleTypeDef hi2c3;
char i2c_buff[8];
extern uint8_t measurements[3]; //L:M:R


void TOF_init(){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	; 0x4c
 8000d84:	af12      	add	r7, sp, #72	; 0x48
	//default settings
	writeMM(hi2c1);
 8000d86:	4c2a      	ldr	r4, [pc, #168]	; (8000e30 <TOF_init+0xb0>)
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f104 0310 	add.w	r3, r4, #16
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	4619      	mov	r1, r3
 8000d92:	f007 fd4d 	bl	8008830 <memcpy>
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	f000 f851 	bl	8000e40 <writeMM>
	writeMM(hi2c2);
 8000d9e:	4c25      	ldr	r4, [pc, #148]	; (8000e34 <TOF_init+0xb4>)
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	4619      	mov	r1, r3
 8000daa:	f007 fd41 	bl	8008830 <memcpy>
 8000dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db2:	f000 f845 	bl	8000e40 <writeMM>
	writeMM(hi2c3);
 8000db6:	4c20      	ldr	r4, [pc, #128]	; (8000e38 <TOF_init+0xb8>)
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f007 fd35 	bl	8008830 <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f000 f839 	bl	8000e40 <writeMM>
	//begin continuous ranging 0x03, single 0x01
	i2c_buff[0] = 0x01;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <TOF_init+0xbc>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f002 f817 	bl	8002e08 <HAL_Delay>
	//Left
	HAL_I2C_Mem_Write(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <TOF_init+0xbc>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2218      	movs	r2, #24
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <TOF_init+0xb4>)
 8000df0:	f002 ff4e 	bl	8003c90 <HAL_I2C_Mem_Write>
	//middle
	HAL_I2C_Mem_Write(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <TOF_init+0xbc>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	2218      	movs	r2, #24
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <TOF_init+0xb0>)
 8000e0a:	f002 ff41 	bl	8003c90 <HAL_I2C_Mem_Write>
	//right
	HAL_I2C_Mem_Write(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <TOF_init+0xbc>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	2218      	movs	r2, #24
 8000e20:	2152      	movs	r1, #82	; 0x52
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <TOF_init+0xb8>)
 8000e24:	f002 ff34 	bl	8003c90 <HAL_I2C_Mem_Write>
}
 8000e28:	bf00      	nop
 8000e2a:	3704      	adds	r7, #4
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000170 	.word	0x20000170
 8000e34:	200001c4 	.word	0x200001c4
 8000e38:	20000218 	.word	0x20000218
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <writeMM>:
void writeMM(I2C_HandleTypeDef a){ //default settings
 8000e40:	b084      	sub	sp, #16
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af04      	add	r7, sp, #16
 8000e48:	f107 0c08 	add.w	ip, r7, #8
 8000e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_buff[0] = 0x01;
 8000e50:	4bcb      	ldr	r3, [pc, #812]	; (8001180 <writeMM+0x340>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0207, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4bc7      	ldr	r3, [pc, #796]	; (8001180 <writeMM+0x340>)
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2310      	movs	r3, #16
 8000e66:	f240 2207 	movw	r2, #519	; 0x207
 8000e6a:	2152      	movs	r1, #82	; 0x52
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	f002 ff0e 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 ffc7 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000e7a:	4bc1      	ldr	r3, [pc, #772]	; (8001180 <writeMM+0x340>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0208, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	4bbd      	ldr	r3, [pc, #756]	; (8001180 <writeMM+0x340>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2310      	movs	r3, #16
 8000e90:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000e94:	2152      	movs	r1, #82	; 0x52
 8000e96:	f107 0008 	add.w	r0, r7, #8
 8000e9a:	f002 fef9 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f001 ffb2 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000ea4:	4bb6      	ldr	r3, [pc, #728]	; (8001180 <writeMM+0x340>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0096, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	4bb2      	ldr	r3, [pc, #712]	; (8001180 <writeMM+0x340>)
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2310      	movs	r3, #16
 8000eba:	2296      	movs	r2, #150	; 0x96
 8000ebc:	2152      	movs	r1, #82	; 0x52
 8000ebe:	f107 0008 	add.w	r0, r7, #8
 8000ec2:	f002 fee5 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f001 ff9e 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0xfd;
 8000ecc:	4bac      	ldr	r3, [pc, #688]	; (8001180 <writeMM+0x340>)
 8000ece:	22fd      	movs	r2, #253	; 0xfd
 8000ed0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0097, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	4ba8      	ldr	r3, [pc, #672]	; (8001180 <writeMM+0x340>)
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	2297      	movs	r2, #151	; 0x97
 8000ee4:	2152      	movs	r1, #82	; 0x52
 8000ee6:	f107 0008 	add.w	r0, r7, #8
 8000eea:	f002 fed1 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 ff8a 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8000ef4:	4ba2      	ldr	r3, [pc, #648]	; (8001180 <writeMM+0x340>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4b9e      	ldr	r3, [pc, #632]	; (8001180 <writeMM+0x340>)
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2310      	movs	r3, #16
 8000f0a:	22e3      	movs	r2, #227	; 0xe3
 8000f0c:	2152      	movs	r1, #82	; 0x52
 8000f0e:	f107 0008 	add.w	r0, r7, #8
 8000f12:	f002 febd 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f001 ff76 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x04;
 8000f1c:	4b98      	ldr	r3, [pc, #608]	; (8001180 <writeMM+0x340>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e4, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b94      	ldr	r3, [pc, #592]	; (8001180 <writeMM+0x340>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	22e4      	movs	r2, #228	; 0xe4
 8000f34:	2152      	movs	r1, #82	; 0x52
 8000f36:	f107 0008 	add.w	r0, r7, #8
 8000f3a:	f002 fea9 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f001 ff62 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000f44:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <writeMM+0x340>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <writeMM+0x340>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2310      	movs	r3, #16
 8000f5a:	22e5      	movs	r2, #229	; 0xe5
 8000f5c:	2152      	movs	r1, #82	; 0x52
 8000f5e:	f107 0008 	add.w	r0, r7, #8
 8000f62:	f002 fe95 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 ff4e 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8000f6c:	4b84      	ldr	r3, [pc, #528]	; (8001180 <writeMM+0x340>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <writeMM+0x340>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2310      	movs	r3, #16
 8000f82:	22e6      	movs	r2, #230	; 0xe6
 8000f84:	2152      	movs	r1, #82	; 0x52
 8000f86:	f107 0008 	add.w	r0, r7, #8
 8000f8a:	f002 fe81 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f001 ff3a 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8000f94:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <writeMM+0x340>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00e7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	4b76      	ldr	r3, [pc, #472]	; (8001180 <writeMM+0x340>)
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2310      	movs	r3, #16
 8000faa:	22e7      	movs	r2, #231	; 0xe7
 8000fac:	2152      	movs	r1, #82	; 0x52
 8000fae:	f107 0008 	add.w	r0, r7, #8
 8000fb2:	f002 fe6d 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f001 ff26 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x02;
 8000fbc:	4b70      	ldr	r3, [pc, #448]	; (8001180 <writeMM+0x340>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00f5, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <writeMM+0x340>)
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	22f5      	movs	r2, #245	; 0xf5
 8000fd4:	2152      	movs	r1, #82	; 0x52
 8000fd6:	f107 0008 	add.w	r0, r7, #8
 8000fda:	f002 fe59 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 ff12 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8000fe4:	4b66      	ldr	r3, [pc, #408]	; (8001180 <writeMM+0x340>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00d9, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <writeMM+0x340>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	22d9      	movs	r2, #217	; 0xd9
 8000ffc:	2152      	movs	r1, #82	; 0x52
 8000ffe:	f107 0008 	add.w	r0, r7, #8
 8001002:	f002 fe45 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f001 fefe 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0xce;
 800100c:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <writeMM+0x340>)
 800100e:	22ce      	movs	r2, #206	; 0xce
 8001010:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00db, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <writeMM+0x340>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2310      	movs	r3, #16
 8001022:	22db      	movs	r2, #219	; 0xdb
 8001024:	2152      	movs	r1, #82	; 0x52
 8001026:	f107 0008 	add.w	r0, r7, #8
 800102a:	f002 fe31 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f001 feea 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x03;
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <writeMM+0x340>)
 8001036:	2203      	movs	r2, #3
 8001038:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dc, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <writeMM+0x340>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2310      	movs	r3, #16
 800104a:	22dc      	movs	r2, #220	; 0xdc
 800104c:	2152      	movs	r1, #82	; 0x52
 800104e:	f107 0008 	add.w	r0, r7, #8
 8001052:	f002 fe1d 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 fed6 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0xf8;
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <writeMM+0x340>)
 800105e:	22f8      	movs	r2, #248	; 0xf8
 8001060:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00dd, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <writeMM+0x340>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2310      	movs	r3, #16
 8001072:	22dd      	movs	r2, #221	; 0xdd
 8001074:	2152      	movs	r1, #82	; 0x52
 8001076:	f107 0008 	add.w	r0, r7, #8
 800107a:	f002 fe09 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f001 fec2 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <writeMM+0x340>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x009f, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <writeMM+0x340>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2310      	movs	r3, #16
 800109a:	229f      	movs	r2, #159	; 0x9f
 800109c:	2152      	movs	r1, #82	; 0x52
 800109e:	f107 0008 	add.w	r0, r7, #8
 80010a2:	f002 fdf5 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 feae 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <writeMM+0x340>)
 80010ae:	223c      	movs	r2, #60	; 0x3c
 80010b0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00a3, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <writeMM+0x340>)
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2310      	movs	r3, #16
 80010c2:	22a3      	movs	r2, #163	; 0xa3
 80010c4:	2152      	movs	r1, #82	; 0x52
 80010c6:	f107 0008 	add.w	r0, r7, #8
 80010ca:	f002 fde1 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 fe9a 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <writeMM+0x340>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <writeMM+0x340>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2310      	movs	r3, #16
 80010ea:	22b7      	movs	r2, #183	; 0xb7
 80010ec:	2152      	movs	r1, #82	; 0x52
 80010ee:	f107 0008 	add.w	r0, r7, #8
 80010f2:	f002 fdcd 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f001 fe86 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x3c;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <writeMM+0x340>)
 80010fe:	223c      	movs	r2, #60	; 0x3c
 8001100:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00bb, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <writeMM+0x340>)
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2310      	movs	r3, #16
 8001112:	22bb      	movs	r2, #187	; 0xbb
 8001114:	2152      	movs	r1, #82	; 0x52
 8001116:	f107 0008 	add.w	r0, r7, #8
 800111a:	f002 fdb9 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f001 fe72 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x09;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <writeMM+0x340>)
 8001126:	2209      	movs	r2, #9
 8001128:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00b2, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <writeMM+0x340>)
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2310      	movs	r3, #16
 800113a:	22b2      	movs	r2, #178	; 0xb2
 800113c:	2152      	movs	r1, #82	; 0x52
 800113e:	f107 0008 	add.w	r0, r7, #8
 8001142:	f002 fda5 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fe5e 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x09;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <writeMM+0x340>)
 800114e:	2209      	movs	r2, #9
 8001150:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ca, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <writeMM+0x340>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2310      	movs	r3, #16
 8001162:	22ca      	movs	r2, #202	; 0xca
 8001164:	2152      	movs	r1, #82	; 0x52
 8001166:	f107 0008 	add.w	r0, r7, #8
 800116a:	f002 fd91 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f001 fe4a 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x01;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <writeMM+0x340>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0198, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	e001      	b.n	8001184 <writeMM+0x344>
 8001180:	2000008c 	.word	0x2000008c
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <writeMM+0x574>)
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2310      	movs	r3, #16
 8001190:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8001194:	2152      	movs	r1, #82	; 0x52
 8001196:	f107 0008 	add.w	r0, r7, #8
 800119a:	f002 fd79 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f001 fe32 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x17;
 80011a4:	4b83      	ldr	r3, [pc, #524]	; (80013b4 <writeMM+0x574>)
 80011a6:	2217      	movs	r2, #23
 80011a8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01b0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <writeMM+0x574>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2310      	movs	r3, #16
 80011ba:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80011be:	2152      	movs	r1, #82	; 0x52
 80011c0:	f107 0008 	add.w	r0, r7, #8
 80011c4:	f002 fd64 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 fe1d 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80011ce:	4b79      	ldr	r3, [pc, #484]	; (80013b4 <writeMM+0x574>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ad, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <writeMM+0x574>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2310      	movs	r3, #16
 80011e4:	f240 12ad 	movw	r2, #429	; 0x1ad
 80011e8:	2152      	movs	r1, #82	; 0x52
 80011ea:	f107 0008 	add.w	r0, r7, #8
 80011ee:	f002 fd4f 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f001 fe08 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x05;
 80011f8:	4b6e      	ldr	r3, [pc, #440]	; (80013b4 <writeMM+0x574>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x00ff, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <writeMM+0x574>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2310      	movs	r3, #16
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	2152      	movs	r1, #82	; 0x52
 8001212:	f107 0008 	add.w	r0, r7, #8
 8001216:	f002 fd3b 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f001 fdf4 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x05;
 8001220:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <writeMM+0x574>)
 8001222:	2205      	movs	r2, #5
 8001224:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0100, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <writeMM+0x574>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2310      	movs	r3, #16
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	2152      	movs	r1, #82	; 0x52
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	f002 fd26 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f001 fddf 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x05;
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <writeMM+0x574>)
 800124c:	2205      	movs	r2, #5
 800124e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0199, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <writeMM+0x574>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2310      	movs	r3, #16
 8001260:	f240 1299 	movw	r2, #409	; 0x199
 8001264:	2152      	movs	r1, #82	; 0x52
 8001266:	f107 0008 	add.w	r0, r7, #8
 800126a:	f002 fd11 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 fdca 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x1b;
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <writeMM+0x574>)
 8001276:	221b      	movs	r2, #27
 8001278:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a6, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <writeMM+0x574>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2310      	movs	r3, #16
 800128a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800128e:	2152      	movs	r1, #82	; 0x52
 8001290:	f107 0008 	add.w	r0, r7, #8
 8001294:	f002 fcfc 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fdb5 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x3e;
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <writeMM+0x574>)
 80012a0:	223e      	movs	r2, #62	; 0x3e
 80012a2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01ac, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <writeMM+0x574>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2310      	movs	r3, #16
 80012b4:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80012b8:	2152      	movs	r1, #82	; 0x52
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	f002 fce7 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f001 fda0 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x1f;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <writeMM+0x574>)
 80012ca:	221f      	movs	r2, #31
 80012cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x01a7, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <writeMM+0x574>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2310      	movs	r3, #16
 80012de:	f240 12a7 	movw	r2, #423	; 0x1a7
 80012e2:	2152      	movs	r1, #82	; 0x52
 80012e4:	f107 0008 	add.w	r0, r7, #8
 80012e8:	f002 fcd2 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 fd8b 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x00;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <writeMM+0x574>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0030, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <writeMM+0x574>)
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2310      	movs	r3, #16
 8001308:	2230      	movs	r2, #48	; 0x30
 800130a:	2152      	movs	r1, #82	; 0x52
 800130c:	f107 0008 	add.w	r0, r7, #8
 8001310:	f002 fcbe 	bl	8003c90 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f001 fd77 	bl	8002e08 <HAL_Delay>
	//custom settings
	i2c_buff[0] = 0x10;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <writeMM+0x574>)
 800131c:	2210      	movs	r2, #16
 800131e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0011, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000); // Enables polling for ‘New Sample ready’
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <writeMM+0x574>)
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2310      	movs	r3, #16
 8001330:	2211      	movs	r2, #17
 8001332:	2152      	movs	r1, #82	; 0x52
 8001334:	f107 0008 	add.w	r0, r7, #8
 8001338:	f002 fcaa 	bl	8003c90 <HAL_I2C_Mem_Write>
//	// when measurement completes
	HAL_Delay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f001 fd63 	bl	8002e08 <HAL_Delay>
	i2c_buff[0] = 0x01;// Set default ranging inter-measurement
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <writeMM+0x574>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
//	// period to 100ms
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001b, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <writeMM+0x574>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2310      	movs	r3, #16
 8001358:	221b      	movs	r2, #27
 800135a:	2152      	movs	r1, #82	; 0x52
 800135c:	f107 0008 	add.w	r0, r7, #8
 8001360:	f002 fc96 	bl	8003c90 <HAL_I2C_Mem_Write>
//	HAL_Delay(1);
	i2c_buff[0] = 0xA;// Set max convergence time to 10ms
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <writeMM+0x574>)
 8001366:	220a      	movs	r2, #10
 8001368:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x001c, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <writeMM+0x574>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2310      	movs	r3, #16
 800137a:	221c      	movs	r2, #28
 800137c:	2152      	movs	r1, #82	; 0x52
 800137e:	f107 0008 	add.w	r0, r7, #8
 8001382:	f002 fc85 	bl	8003c90 <HAL_I2C_Mem_Write>

	i2c_buff[0] = 0x24;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <writeMM+0x574>)
 8001388:	2224      	movs	r2, #36	; 0x24
 800138a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&a, TOF_ADDRESS, 0x0014, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1, 1000);
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <writeMM+0x574>)
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2310      	movs	r3, #16
 800139c:	2214      	movs	r2, #20
 800139e:	2152      	movs	r1, #82	; 0x52
 80013a0:	f107 0008 	add.w	r0, r7, #8
 80013a4:	f002 fc74 	bl	8003c90 <HAL_I2C_Mem_Write>
// Configures interrupt on ‘New Sample
	//// Ready threshold event’
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b0:	b004      	add	sp, #16
 80013b2:	4770      	bx	lr
 80013b4:	2000008c 	.word	0x2000008c

080013b8 <TOF_start_measurement>:

void TOF_task(){

}
void TOF_start_measurement(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af02      	add	r7, sp, #8
	i2c_buff[0] = 0x01;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <TOF_start_measurement+0x50>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
	//left
	HAL_I2C_Mem_Write_IT(&hi2c2, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <TOF_start_measurement+0x50>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2310      	movs	r3, #16
 80013ce:	2218      	movs	r2, #24
 80013d0:	2152      	movs	r1, #82	; 0x52
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <TOF_start_measurement+0x54>)
 80013d4:	f002 fd56 	bl	8003e84 <HAL_I2C_Mem_Write_IT>
	//middle
	HAL_I2C_Mem_Write_IT(&hi2c1, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <TOF_start_measurement+0x50>)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2310      	movs	r3, #16
 80013e2:	2218      	movs	r2, #24
 80013e4:	2152      	movs	r1, #82	; 0x52
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <TOF_start_measurement+0x58>)
 80013e8:	f002 fd4c 	bl	8003e84 <HAL_I2C_Mem_Write_IT>
	//right
	HAL_I2C_Mem_Write_IT(&hi2c3, TOF_ADDRESS, 0x018, I2C_MEMADD_SIZE_16BIT, (uint8_t*)i2c_buff, 1);
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <TOF_start_measurement+0x50>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2310      	movs	r3, #16
 80013f6:	2218      	movs	r2, #24
 80013f8:	2152      	movs	r1, #82	; 0x52
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <TOF_start_measurement+0x5c>)
 80013fc:	f002 fd42 	bl	8003e84 <HAL_I2C_Mem_Write_IT>
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000008c 	.word	0x2000008c
 800140c:	200001c4 	.word	0x200001c4
 8001410:	20000170 	.word	0x20000170
 8001414:	20000218 	.word	0x20000218

08001418 <TOF_get_measurement>:
void TOF_get_measurement(){ //single shot
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af02      	add	r7, sp, #8

	//Left
	HAL_I2C_Mem_Read_IT(&hi2c2, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, measurements, 1);
 800141e:	2301      	movs	r3, #1
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <TOF_get_measurement+0x48>)
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2310      	movs	r3, #16
 8001428:	2262      	movs	r2, #98	; 0x62
 800142a:	2152      	movs	r1, #82	; 0x52
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <TOF_get_measurement+0x4c>)
 800142e:	f002 fddb 	bl	8003fe8 <HAL_I2C_Mem_Read_IT>
	//middle
	HAL_I2C_Mem_Read_IT(&hi2c1, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[1], 1);
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <TOF_get_measurement+0x50>)
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2310      	movs	r3, #16
 800143c:	2262      	movs	r2, #98	; 0x62
 800143e:	2152      	movs	r1, #82	; 0x52
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <TOF_get_measurement+0x54>)
 8001442:	f002 fdd1 	bl	8003fe8 <HAL_I2C_Mem_Read_IT>
	//right
	HAL_I2C_Mem_Read_IT(&hi2c3, TOF_ADDRESS, 0x062, I2C_MEMADD_SIZE_16BIT, &measurements[2], 1);
 8001446:	2301      	movs	r3, #1
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <TOF_get_measurement+0x58>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2310      	movs	r3, #16
 8001450:	2262      	movs	r2, #98	; 0x62
 8001452:	2152      	movs	r1, #82	; 0x52
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <TOF_get_measurement+0x5c>)
 8001456:	f002 fdc7 	bl	8003fe8 <HAL_I2C_Mem_Read_IT>
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000124 	.word	0x20000124
 8001464:	200001c4 	.word	0x200001c4
 8001468:	20000125 	.word	0x20000125
 800146c:	20000170 	.word	0x20000170
 8001470:	20000126 	.word	0x20000126
 8001474:	20000218 	.word	0x20000218

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f001 fc51 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f89f 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 fc17 	bl	8001cb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800148a:	f000 f957 	bl	800173c <MX_I2C1_Init>
  MX_I2C2_Init();
 800148e:	f000 f983 	bl	8001798 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001492:	f000 f901 	bl	8001698 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001496:	f000 f9ad 	bl	80017f4 <MX_I2C3_Init>
  MX_TIM3_Init();
 800149a:	f000 fb3b 	bl	8001b14 <MX_TIM3_Init>
  MX_TIM5_Init();
 800149e:	f000 fb8d 	bl	8001bbc <MX_TIM5_Init>
  MX_TIM1_Init();
 80014a2:	f000 fa0b 	bl	80018bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80014a6:	f000 fab5 	bl	8001a14 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80014aa:	f000 fbdb 	bl	8001c64 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014ae:	f000 f9cf 	bl	8001850 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 80014b2:	f000 fc7f 	bl	8001db4 <motorsInit>
	TOF_init();
 80014b6:	f7ff fc63 	bl	8000d80 <TOF_init>
	uart_startup_transmit();
 80014ba:	f001 fb73 	bl	8002ba4 <uart_startup_transmit>
//	HAL_ADC_Start(&hadc1);

//	uint16_t L_vals[512];
//	uint16_t R_vals[512];

	forward(0);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 fcb4 	bl	8001e2c <forward>
	HAL_Delay(3000);
 80014c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014c8:	f001 fc9e 	bl	8002e08 <HAL_Delay>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 80014cc:	f001 fc90 	bl	8002df0 <HAL_GetTick>
 80014d0:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 80014d2:	f001 fc8d 	bl	8002df0 <HAL_GetTick>
 80014d6:	6038      	str	r0, [r7, #0]
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Laddress+2*i, L_vals[i]);
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
//		HAL_Delay(1);
//	}
//	HAL_FLASH_Lock();
	R_speed_setpoint = 600;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <main+0x120>)
 80014da:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014de:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 600;
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <main+0x124>)
 80014e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014e6:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		//	  sprintf(buff, "L:%d R:%d V:%d\n",(int)htim5.Instance->CNT,(int)htim3.Instance->CNT, (int)HAL_ADC_GetValue(&hadc1));

		//	  sprintf(buff, "%d",(int)HAL_I2C_GetError(&hi2c1));
		uart_task();
 80014e8:	f001 fb84 	bl	8002bf4 <uart_task>
		if (HAL_GetTick() - prev_main_loop_time > 101){
 80014ec:	f001 fc80 	bl	8002df0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b65      	cmp	r3, #101	; 0x65
 80014f8:	d902      	bls.n	8001500 <main+0x88>
			prev_main_loop_time = HAL_GetTick();
 80014fa:	f001 fc79 	bl	8002df0 <HAL_GetTick>
 80014fe:	6038      	str	r0, [r7, #0]
//			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		// main control loop: CONTROL_LOOP_PERIOD_MS
		if (HAL_GetTick() - prev_ctr_loop_time >= CONTROL_LOOP_PERIOD_MS){
 8001500:	f001 fc76 	bl	8002df0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b13      	cmp	r3, #19
 800150c:	d9ec      	bls.n	80014e8 <main+0x70>

			TOF_get_measurement();
 800150e:	f7ff ff83 	bl	8001418 <TOF_get_measurement>
			prev_ctr_loop_time = HAL_GetTick();
 8001512:	f001 fc6d 	bl	8002df0 <HAL_GetTick>
 8001516:	6078      	str	r0, [r7, #4]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <main+0x128>)
 800151e:	f002 fa58 	bl	80039d2 <HAL_GPIO_TogglePin>
//			sprintf(send_buffer, "R:%d C: %d E:%d\n", (int)measurements[0], (int)measurements[1], (int)measurements[2]);
			sprintf(send_buffer, "L:%d > %d R:%d > %d\n",(int)L_prev_enc_count,(int)L_ctrl_signal,(int)R_prev_enc_count, (int)R_ctrl_signal);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <main+0x12c>)
 8001524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001528:	4618      	mov	r0, r3
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <main+0x130>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <main+0x134>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	4619      	mov	r1, r3
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <main+0x138>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	9100      	str	r1, [sp, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	4602      	mov	r2, r0
 8001542:	491c      	ldr	r1, [pc, #112]	; (80015b4 <main+0x13c>)
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <main+0x140>)
 8001546:	f007 f989 	bl	800885c <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 800154a:	481b      	ldr	r0, [pc, #108]	; (80015b8 <main+0x140>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4918      	ldr	r1, [pc, #96]	; (80015b8 <main+0x140>)
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <main+0x144>)
 800155a:	f006 f9cc 	bl	80078f6 <HAL_UART_Transmit_IT>
			if(measurements[1]>190){
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <main+0x148>)
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	2bbe      	cmp	r3, #190	; 0xbe
 8001564:	d90c      	bls.n	8001580 <main+0x108>
				R_motor_feedback_control();
 8001566:	f000 fcc3 	bl	8001ef0 <R_motor_feedback_control>
				L_motor_feedback_control();
 800156a:	f000 fde5 	bl	8002138 <L_motor_feedback_control>
				R_speed_setpoint = 600;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <main+0x120>)
 8001570:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001574:	801a      	strh	r2, [r3, #0]
				L_speed_setpoint = 600;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <main+0x124>)
 8001578:	f44f 7216 	mov.w	r2, #600	; 0x258
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	e008      	b.n	8001592 <main+0x11a>
			}
			else{
				R_speed_setpoint = 0;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <main+0x120>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
				L_speed_setpoint = 0;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <main+0x124>)
 8001588:	2200      	movs	r2, #0
 800158a:	801a      	strh	r2, [r3, #0]
				forward(0);
 800158c:	2000      	movs	r0, #0
 800158e:	f000 fc4d 	bl	8001e2c <forward>
			}
			TOF_start_measurement();
 8001592:	f7ff ff11 	bl	80013b8 <TOF_start_measurement>
		uart_task();
 8001596:	e7a7      	b.n	80014e8 <main+0x70>
 8001598:	200000f8 	.word	0x200000f8
 800159c:	200000f6 	.word	0x200000f6
 80015a0:	40020800 	.word	0x40020800
 80015a4:	200000fa 	.word	0x200000fa
 80015a8:	20000100 	.word	0x20000100
 80015ac:	200000fc 	.word	0x200000fc
 80015b0:	20000104 	.word	0x20000104
 80015b4:	0800925c 	.word	0x0800925c
 80015b8:	20000094 	.word	0x20000094
 80015bc:	200003e4 	.word	0x200003e4
 80015c0:	20000124 	.word	0x20000124

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	; 0x50
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	2230      	movs	r2, #48	; 0x30
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 f93a 	bl	800884c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <SystemClock_Config+0xcc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <SystemClock_Config+0xcc>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <SystemClock_Config+0xcc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SystemClock_Config+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <SystemClock_Config+0xd0>)
 800160e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001628:	2310      	movs	r3, #16
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162c:	2302      	movs	r3, #2
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001634:	2308      	movs	r3, #8
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001640:	2304      	movs	r3, #4
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fc83 	bl	8005f54 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001654:	f000 fba8 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001664:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800166a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2103      	movs	r1, #3
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fee4 	bl	8006444 <HAL_RCC_ClockConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001682:	f000 fb91 	bl	8001da8 <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3750      	adds	r7, #80	; 0x50
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800169e:	463b      	mov	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_ADC1_Init+0x98>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <MX_ADC1_Init+0x9c>)
 80016ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_ADC1_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_ADC1_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_ADC1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_ADC1_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_ADC1_Init+0x98>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <MX_ADC1_Init+0xa0>)
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_ADC1_Init+0x98>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_ADC1_Init+0x98>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_ADC1_Init+0x98>)
 80016f8:	f001 fbaa 	bl	8002e50 <HAL_ADC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001702:	f000 fb51 	bl	8001da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001706:	2304      	movs	r3, #4
 8001708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_ADC1_Init+0x98>)
 8001718:	f001 fbde 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001722:	f000 fb41 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000128 	.word	0x20000128
 8001734:	40012000 	.word	0x40012000
 8001738:	0f000001 	.word	0x0f000001

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C1_Init+0x50>)
 800177a:	f002 f945 	bl	8003a08 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 fb10 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000170 	.word	0x20000170
 8001790:	40005400 	.word	0x40005400
 8001794:	00061a80 	.word	0x00061a80

08001798 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C2_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C2_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C2_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d6:	f002 f917 	bl	8003a08 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fae2 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200001c4 	.word	0x200001c4
 80017ec:	40005800 	.word	0x40005800
 80017f0:	00061a80 	.word	0x00061a80

080017f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C3_Init+0x50>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <MX_I2C3_Init+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C3_Init+0x50>)
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_I2C3_Init+0x58>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C3_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_I2C3_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_I2C3_Init+0x50>)
 8001812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_I2C3_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_I2C3_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_I2C3_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_I2C3_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_I2C3_Init+0x50>)
 8001832:	f002 f8e9 	bl	8003a08 <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 fab4 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000218 	.word	0x20000218
 8001848:	40005c00 	.word	0x40005c00
 800184c:	00061a80 	.word	0x00061a80

08001850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <MX_SPI2_Init+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_SPI2_Init+0x64>)
 800185c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_SPI2_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_SPI2_Init+0x64>)
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001884:	2230      	movs	r2, #48	; 0x30
 8001886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SPI2_Init+0x64>)
 800189c:	220a      	movs	r2, #10
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_SPI2_Init+0x64>)
 80018a2:	f004 ffaf 	bl	8006804 <HAL_SPI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018ac:	f000 fa7c 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000026c 	.word	0x2000026c
 80018b8:	40003800 	.word	0x40003800

080018bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b096      	sub	sp, #88	; 0x58
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 ffa9 	bl	800884c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018fa:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x150>)
 80018fc:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <MX_TIM1_Init+0x154>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001902:	2263      	movs	r2, #99	; 0x63
 8001904:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <MX_TIM1_Init+0x150>)
 800190e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001912:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <MX_TIM1_Init+0x150>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001926:	4839      	ldr	r0, [pc, #228]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001928:	f004 fff5 	bl	8006916 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001932:	f000 fa39 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001940:	4619      	mov	r1, r3
 8001942:	4832      	ldr	r0, [pc, #200]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001944:	f005 fb36 	bl	8006fb4 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800194e:	f000 fa2b 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001952:	482e      	ldr	r0, [pc, #184]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001954:	f005 f82e 	bl	80069b4 <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800195e:	f000 fa23 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196e:	4619      	mov	r1, r3
 8001970:	4826      	ldr	r0, [pc, #152]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001972:	f005 feb3 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800197c:	f000 fa14 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	2204      	movs	r2, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <MX_TIM1_Init+0x150>)
 80019a6:	f005 fa43 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019b0:	f000 f9fa 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2208      	movs	r2, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <MX_TIM1_Init+0x150>)
 80019be:	f005 fa37 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019c8:	f000 f9ee 	bl	8001da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM1_Init+0x150>)
 80019f0:	f005 fee2 	bl	80077b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019fa:	f000 f9d5 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM1_Init+0x150>)
 8001a00:	f000 ff48 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8001a04:	bf00      	nop
 8001a06:	3758      	adds	r7, #88	; 0x58
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200002c4 	.word	0x200002c4
 8001a10:	40010000 	.word	0x40010000

08001a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a4e:	2263      	movs	r2, #99	; 0x63
 8001a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6c:	4828      	ldr	r0, [pc, #160]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a6e:	f004 ff52 	bl	8006916 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a78:	f000 f996 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4821      	ldr	r0, [pc, #132]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a8a:	f005 fa93 	bl	8006fb4 <HAL_TIM_ConfigClockSource>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a94:	f000 f988 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a98:	481d      	ldr	r0, [pc, #116]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001a9a:	f004 ff8b 	bl	80069b4 <HAL_TIM_PWM_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001aa4:	f000 f980 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001ab8:	f005 fe10 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ac2:	f000 f971 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac6:	2360      	movs	r3, #96	; 0x60
 8001ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001ade:	f005 f9a7 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ae8:	f000 f95e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2204      	movs	r2, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001af4:	f005 f99c 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001afe:	f000 f953 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <MX_TIM2_Init+0xfc>)
 8001b04:	f000 fec6 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8001b08:	bf00      	nop
 8001b0a:	3738      	adds	r7, #56	; 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000030c 	.word	0x2000030c

08001b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f006 fe92 	bl	800884c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <MX_TIM3_Init+0xa4>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b56:	2303      	movs	r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b82:	f005 f821 	bl	8006bc8 <HAL_TIM_Encoder_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f000 f90c 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b9e:	f005 fd9d 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba8:	f000 f8fe 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000354 	.word	0x20000354
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f006 fe3e 	bl	800884c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <MX_TIM5_Init+0xa4>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c02:	2302      	movs	r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c16:	2301      	movs	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001c2a:	f004 ffcd 	bl	8006bc8 <HAL_TIM_Encoder_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c34:	f000 f8b8 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_TIM5_Init+0xa0>)
 8001c46:	f005 fd49 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c50:	f000 f8aa 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3730      	adds	r7, #48	; 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000039c 	.word	0x2000039c
 8001c60:	40000c00 	.word	0x40000c00

08001c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART2_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f005 fdde 	bl	800785c <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f000 f87f 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003e4 	.word	0x200003e4
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_GPIO_Init+0xe4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d28:	481d      	ldr	r0, [pc, #116]	; (8001da0 <MX_GPIO_Init+0xe8>)
 8001d2a:	f001 fe39 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d34:	481b      	ldr	r0, [pc, #108]	; (8001da4 <MX_GPIO_Init+0xec>)
 8001d36:	f001 fe33 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4619      	mov	r1, r3
 8001d52:	4813      	ldr	r0, [pc, #76]	; (8001da0 <MX_GPIO_Init+0xe8>)
 8001d54:	f001 fca0 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480b      	ldr	r0, [pc, #44]	; (8001da0 <MX_GPIO_Init+0xe8>)
 8001d72:	f001 fc91 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_GPIO_Init+0xec>)
 8001d90:	f001 fc82 	bl	8003698 <HAL_GPIO_Init>

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020400 	.word	0x40020400

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <motorsInit>:
extern int32_t R_acc_error;
extern int32_t L_acc;
extern int32_t R_acc;
extern int32_t Dist_error_acc;

void motorsInit(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001db8:	2104      	movs	r1, #4
 8001dba:	4818      	ldr	r0, [pc, #96]	; (8001e1c <motorsInit+0x68>)
 8001dbc:	f004 fe54 	bl	8006a68 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4816      	ldr	r0, [pc, #88]	; (8001e1c <motorsInit+0x68>)
 8001dc4:	f004 fe50 	bl	8006a68 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <motorsInit+0x68>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <motorsInit+0x68>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c

	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4811      	ldr	r0, [pc, #68]	; (8001e20 <motorsInit+0x6c>)
 8001ddc:	f004 fe44 	bl	8006a68 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <motorsInit+0x6c>)
 8001de4:	f004 fe40 	bl	8006a68 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <motorsInit+0x6c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <motorsInit+0x6c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38

	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001df8:	213c      	movs	r1, #60	; 0x3c
 8001dfa:	480a      	ldr	r0, [pc, #40]	; (8001e24 <motorsInit+0x70>)
 8001dfc:	f004 ff8a 	bl	8006d14 <HAL_TIM_Encoder_Start>

	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001e00:	213c      	movs	r1, #60	; 0x3c
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <motorsInit+0x74>)
 8001e04:	f004 ff86 	bl	8006d14 <HAL_TIM_Encoder_Start>

	  htim3.Instance->CNT = 0;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <motorsInit+0x70>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
	  htim5.Instance->CNT = 0;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <motorsInit+0x74>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200002c4 	.word	0x200002c4
 8001e20:	2000030c 	.word	0x2000030c
 8001e24:	20000354 	.word	0x20000354
 8001e28:	2000039c 	.word	0x2000039c

08001e2c <forward>:
void forward(int16_t power){ // -1000 < power < 1000
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
	if (power>1000) power = 1000;
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3e:	dd02      	ble.n	8001e46 <forward+0x1a>
 8001e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e44:	80fb      	strh	r3, [r7, #6]
	if (power<-1000) power = -1000;
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001e4e:	da02      	bge.n	8001e56 <forward+0x2a>
 8001e50:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8001e54:	80fb      	strh	r3, [r7, #6]

	if (power == 0){
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d110      	bne.n	8001e80 <forward+0x54>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <forward+0xb8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <forward+0xb8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
		//motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <forward+0xbc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <forward+0xbc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
//		motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
	}
}
 8001e7e:	e02a      	b.n	8001ed6 <forward+0xaa>
	else if (power > 0){
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dd12      	ble.n	8001eae <forward+0x82>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, power);
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <forward+0xb8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <forward+0xb8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, power);
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <forward+0xbc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ea2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <forward+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eac:	e013      	b.n	8001ed6 <forward+0xaa>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <forward+0xb8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
 8001eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eba:	425a      	negs	r2, r3
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <forward+0xb8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <forward+0xbc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	425a      	negs	r2, r3
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <forward+0xbc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200002c4 	.word	0x200002c4
 8001ee8:	2000030c 	.word	0x2000030c
 8001eec:	00000000 	.word	0x00000000

08001ef0 <R_motor_feedback_control>:
void dist(int16_t maxpower, uint16_t dist){

}
void R_motor_feedback_control(){//speed in mm/s
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	Dist_error_acc += L_acc - R_acc;
 8001ef4:	4b80      	ldr	r3, [pc, #512]	; (80020f8 <R_motor_feedback_control+0x208>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b80      	ldr	r3, [pc, #512]	; (80020fc <R_motor_feedback_control+0x20c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	4b80      	ldr	r3, [pc, #512]	; (8002100 <R_motor_feedback_control+0x210>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a7e      	ldr	r2, [pc, #504]	; (8002100 <R_motor_feedback_control+0x210>)
 8001f06:	6013      	str	r3, [r2, #0]
	R_prev_enc_count = htim3.Instance->CNT;
 8001f08:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <R_motor_feedback_control+0x214>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <R_motor_feedback_control+0x218>)
 8001f12:	801a      	strh	r2, [r3, #0]
	R_acc += R_prev_enc_count;
 8001f14:	4b7c      	ldr	r3, [pc, #496]	; (8002108 <R_motor_feedback_control+0x218>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <R_motor_feedback_control+0x20c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a76      	ldr	r2, [pc, #472]	; (80020fc <R_motor_feedback_control+0x20c>)
 8001f24:	6013      	str	r3, [r2, #0]
	R_error = (int)(R_speed_setpoint - (WHEEL_DIAMETER_MM*PI*R_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 8001f26:	4b79      	ldr	r3, [pc, #484]	; (800210c <R_motor_feedback_control+0x21c>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb01 	bl	8000534 <__aeabi_i2d>
 8001f32:	4604      	mov	r4, r0
 8001f34:	460d      	mov	r5, r1
 8001f36:	4b74      	ldr	r3, [pc, #464]	; (8002108 <R_motor_feedback_control+0x218>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe faf9 	bl	8000534 <__aeabi_i2d>
 8001f42:	a369      	add	r3, pc, #420	; (adr r3, 80020e8 <R_motor_feedback_control+0x1f8>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb5e 	bl	8000608 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <R_motor_feedback_control+0x220>)
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <R_motor_feedback_control+0x224>)
 8001f6c:	f7fe fc76 	bl	800085c <__aeabi_ddiv>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe f98e 	bl	8000298 <__aeabi_dsub>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fd52 	bl	8000a2c <__aeabi_d2iz>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a63      	ldr	r2, [pc, #396]	; (8002118 <R_motor_feedback_control+0x228>)
 8001f8c:	6013      	str	r3, [r2, #0]

	R_acc_error += R_error;
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <R_motor_feedback_control+0x22c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <R_motor_feedback_control+0x228>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a60      	ldr	r2, [pc, #384]	; (800211c <R_motor_feedback_control+0x22c>)
 8001f9a:	6013      	str	r3, [r2, #0]
	if(R_acc_error > 1000) R_acc_error = 1000;
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	; (800211c <R_motor_feedback_control+0x22c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa4:	dd03      	ble.n	8001fae <R_motor_feedback_control+0xbe>
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <R_motor_feedback_control+0x22c>)
 8001fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fac:	601a      	str	r2, [r3, #0]
	if(R_acc_error < -1000) R_acc_error = -1000;  //limits integral term
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <R_motor_feedback_control+0x22c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001fb6:	da02      	bge.n	8001fbe <R_motor_feedback_control+0xce>
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <R_motor_feedback_control+0x22c>)
 8001fba:	4a59      	ldr	r2, [pc, #356]	; (8002120 <R_motor_feedback_control+0x230>)
 8001fbc:	601a      	str	r2, [r3, #0]

	if(Dist_error_acc > 3000) Dist_error_acc = 3000;
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <R_motor_feedback_control+0x210>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	dd03      	ble.n	8001fd2 <R_motor_feedback_control+0xe2>
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <R_motor_feedback_control+0x210>)
 8001fcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fd0:	601a      	str	r2, [r3, #0]
	if(Dist_error_acc < -3000) Dist_error_acc = -3000;  //limits integral term
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <R_motor_feedback_control+0x210>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a53      	ldr	r2, [pc, #332]	; (8002124 <R_motor_feedback_control+0x234>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	da02      	bge.n	8001fe2 <R_motor_feedback_control+0xf2>
 8001fdc:	4b48      	ldr	r3, [pc, #288]	; (8002100 <R_motor_feedback_control+0x210>)
 8001fde:	4a51      	ldr	r2, [pc, #324]	; (8002124 <R_motor_feedback_control+0x234>)
 8001fe0:	601a      	str	r2, [r3, #0]

//					Proportional  		Integral		  FeedForward						proportional distance error   integral distance error
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error +/* R_Kff*R_speed_setpoint + R_ff_offset + */K_pdisterror*(L_acc-R_acc) + K_idisterror*Dist_error_acc;
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <R_motor_feedback_control+0x228>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe faa4 	bl	8000534 <__aeabi_i2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <R_motor_feedback_control+0x238>)
 8001ff2:	f7fe fb09 	bl	8000608 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f7fe f949 	bl	800029c <__adddf3>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <R_motor_feedback_control+0x208>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <R_motor_feedback_control+0x20c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa88 	bl	8000534 <__aeabi_i2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe f936 	bl	800029c <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	461d      	mov	r5, r3
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <R_motor_feedback_control+0x210>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa79 	bl	8000534 <__aeabi_i2d>
 8002042:	a32b      	add	r3, pc, #172	; (adr r3, 80020f0 <R_motor_feedback_control+0x200>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fade 	bl	8000608 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f922 	bl	800029c <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fce4 	bl	8000a2c <__aeabi_d2iz>
 8002064:	4603      	mov	r3, r0
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <R_motor_feedback_control+0x23c>)
 8002068:	6013      	str	r3, [r2, #0]



	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <R_motor_feedback_control+0x23c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002072:	db03      	blt.n	800207c <R_motor_feedback_control+0x18c>
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <R_motor_feedback_control+0x23c>)
 8002076:	f240 32e7 	movw	r2, #999	; 0x3e7
 800207a:	601a      	str	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <R_motor_feedback_control+0x23c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002084:	dc02      	bgt.n	800208c <R_motor_feedback_control+0x19c>
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <R_motor_feedback_control+0x23c>)
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <R_motor_feedback_control+0x240>)
 800208a:	601a      	str	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <R_motor_feedback_control+0x23c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <R_motor_feedback_control+0x1b6>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <R_motor_feedback_control+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <R_motor_feedback_control+0x244>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020a4:	e017      	b.n	80020d6 <R_motor_feedback_control+0x1e6>
	}
	else if (R_ctrl_signal > 0){
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <R_motor_feedback_control+0x23c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	dd09      	ble.n	80020c2 <R_motor_feedback_control+0x1d2>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <R_motor_feedback_control+0x23c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <R_motor_feedback_control+0x244>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <R_motor_feedback_control+0x244>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
 80020c0:	e009      	b.n	80020d6 <R_motor_feedback_control+0x1e6>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <R_motor_feedback_control+0x244>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <R_motor_feedback_control+0x23c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	425a      	negs	r2, r3
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <R_motor_feedback_control+0x244>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
//	prev_control_signal = R_ctrl_signal;
	htim3.Instance->CNT = 0;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <R_motor_feedback_control+0x214>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80020de:	bf00      	nop
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	bf9c62a1 	.word	0xbf9c62a1
 80020ec:	4059eb09 	.word	0x4059eb09
 80020f0:	9999999a 	.word	0x9999999a
 80020f4:	3fb99999 	.word	0x3fb99999
 80020f8:	20000118 	.word	0x20000118
 80020fc:	2000011c 	.word	0x2000011c
 8002100:	20000120 	.word	0x20000120
 8002104:	20000354 	.word	0x20000354
 8002108:	200000fc 	.word	0x200000fc
 800210c:	200000f8 	.word	0x200000f8
 8002110:	408f4000 	.word	0x408f4000
 8002114:	40a2c000 	.word	0x40a2c000
 8002118:	2000010c 	.word	0x2000010c
 800211c:	20000114 	.word	0x20000114
 8002120:	fffffc18 	.word	0xfffffc18
 8002124:	fffff448 	.word	0xfffff448
 8002128:	3fe00000 	.word	0x3fe00000
 800212c:	20000104 	.word	0x20000104
 8002130:	fffffc19 	.word	0xfffffc19
 8002134:	200002c4 	.word	0x200002c4

08002138 <L_motor_feedback_control>:
void L_motor_feedback_control(){//speed in mm/s
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	af00      	add	r7, sp, #0
	L_prev_enc_count = htim5.Instance->CNT;
 800213c:	4b72      	ldr	r3, [pc, #456]	; (8002308 <L_motor_feedback_control+0x1d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b21a      	sxth	r2, r3
 8002144:	4b71      	ldr	r3, [pc, #452]	; (800230c <L_motor_feedback_control+0x1d4>)
 8002146:	801a      	strh	r2, [r3, #0]
	L_acc += L_prev_enc_count;
 8002148:	4b70      	ldr	r3, [pc, #448]	; (800230c <L_motor_feedback_control+0x1d4>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	461a      	mov	r2, r3
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <L_motor_feedback_control+0x1d8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4413      	add	r3, r2
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <L_motor_feedback_control+0x1d8>)
 8002158:	6013      	str	r3, [r2, #0]
	L_error = (int)(L_speed_setpoint - (WHEEL_DIAMETER_MM*PI*L_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 800215a:	4b6e      	ldr	r3, [pc, #440]	; (8002314 <L_motor_feedback_control+0x1dc>)
 800215c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9e7 	bl	8000534 <__aeabi_i2d>
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	4b68      	ldr	r3, [pc, #416]	; (800230c <L_motor_feedback_control+0x1d4>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9df 	bl	8000534 <__aeabi_i2d>
 8002176:	a360      	add	r3, pc, #384	; (adr r3, 80022f8 <L_motor_feedback_control+0x1c0>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa44 	bl	8000608 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <L_motor_feedback_control+0x1e0>)
 800218e:	f7fe fa3b 	bl	8000608 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b5f      	ldr	r3, [pc, #380]	; (800231c <L_motor_feedback_control+0x1e4>)
 80021a0:	f7fe fb5c 	bl	800085c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f7fe f874 	bl	8000298 <__aeabi_dsub>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc38 	bl	8000a2c <__aeabi_d2iz>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <L_motor_feedback_control+0x1e8>)
 80021c0:	6013      	str	r3, [r2, #0]
	L_acc_error += L_error;
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <L_motor_feedback_control+0x1e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021ce:	6013      	str	r3, [r2, #0]
	//limit integral term:
	if(L_acc_error > 1000) L_acc_error = 1000;
 80021d0:	4b54      	ldr	r3, [pc, #336]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d8:	dd03      	ble.n	80021e2 <L_motor_feedback_control+0xaa>
 80021da:	4b52      	ldr	r3, [pc, #328]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e0:	601a      	str	r2, [r3, #0]
	if(L_acc_error < -1000) L_acc_error = -1000;
 80021e2:	4b50      	ldr	r3, [pc, #320]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80021ea:	da02      	bge.n	80021f2 <L_motor_feedback_control+0xba>
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <L_motor_feedback_control+0x1ec>)
 80021ee:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <L_motor_feedback_control+0x1f0>)
 80021f0:	601a      	str	r2, [r3, #0]
	//				Proportional  		Integral		  FeedForward					proportional distance error  integral distance error
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + /*L_Kff*L_speed_setpoint+L_ff_offset + */K_pdisterror*(R_acc-L_acc) -  K_idisterror*Dist_error_acc;
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <L_motor_feedback_control+0x1e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f99c 	bl	8000534 <__aeabi_i2d>
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b4a      	ldr	r3, [pc, #296]	; (800232c <L_motor_feedback_control+0x1f4>)
 8002202:	f7fe fa01 	bl	8000608 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f7fe f841 	bl	800029c <__adddf3>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4614      	mov	r4, r2
 8002220:	461d      	mov	r5, r3
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <L_motor_feedback_control+0x1f8>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <L_motor_feedback_control+0x1d8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f980 	bl	8000534 <__aeabi_i2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fe f82e 	bl	800029c <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <L_motor_feedback_control+0x1fc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f971 	bl	8000534 <__aeabi_i2d>
 8002252:	a32b      	add	r3, pc, #172	; (adr r3, 8002300 <L_motor_feedback_control+0x1c8>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f9d6 	bl	8000608 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f818 	bl	8000298 <__aeabi_dsub>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fbdc 	bl	8000a2c <__aeabi_d2iz>
 8002274:	4603      	mov	r3, r0
 8002276:	4a30      	ldr	r2, [pc, #192]	; (8002338 <L_motor_feedback_control+0x200>)
 8002278:	6013      	str	r3, [r2, #0]

	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <L_motor_feedback_control+0x200>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002282:	dd03      	ble.n	800228c <L_motor_feedback_control+0x154>
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <L_motor_feedback_control+0x200>)
 8002286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800228a:	601a      	str	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <L_motor_feedback_control+0x200>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002294:	da02      	bge.n	800229c <L_motor_feedback_control+0x164>
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <L_motor_feedback_control+0x200>)
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <L_motor_feedback_control+0x204>)
 800229a:	601a      	str	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <L_motor_feedback_control+0x200>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <L_motor_feedback_control+0x17e>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <L_motor_feedback_control+0x208>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <L_motor_feedback_control+0x208>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
 80022b4:	e017      	b.n	80022e6 <L_motor_feedback_control+0x1ae>
	}
	else if (L_ctrl_signal > 0){
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <L_motor_feedback_control+0x200>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	dd09      	ble.n	80022d2 <L_motor_feedback_control+0x19a>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <L_motor_feedback_control+0x200>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <L_motor_feedback_control+0x208>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <L_motor_feedback_control+0x208>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
 80022d0:	e009      	b.n	80022e6 <L_motor_feedback_control+0x1ae>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <L_motor_feedback_control+0x208>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <L_motor_feedback_control+0x200>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	425a      	negs	r2, r3
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <L_motor_feedback_control+0x208>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
	}
//	prev_control_signal = L_ctrl_signal;
	htim5.Instance->CNT = 0;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <L_motor_feedback_control+0x1d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

}
 80022ee:	bf00      	nop
 80022f0:	bdb0      	pop	{r4, r5, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	bf9c62a1 	.word	0xbf9c62a1
 80022fc:	4059eb09 	.word	0x4059eb09
 8002300:	9999999a 	.word	0x9999999a
 8002304:	3fb99999 	.word	0x3fb99999
 8002308:	2000039c 	.word	0x2000039c
 800230c:	200000fa 	.word	0x200000fa
 8002310:	20000118 	.word	0x20000118
 8002314:	200000f6 	.word	0x200000f6
 8002318:	408f4000 	.word	0x408f4000
 800231c:	40a2c000 	.word	0x40a2c000
 8002320:	20000108 	.word	0x20000108
 8002324:	20000110 	.word	0x20000110
 8002328:	fffffc18 	.word	0xfffffc18
 800232c:	3fe00000 	.word	0x3fe00000
 8002330:	2000011c 	.word	0x2000011c
 8002334:	20000120 	.word	0x20000120
 8002338:	20000100 	.word	0x20000100
 800233c:	fffffc19 	.word	0xfffffc19
 8002340:	2000030c 	.word	0x2000030c

08002344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_MspInit+0x4c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x4c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_ADC_MspInit+0x7c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d127      	bne.n	8002406 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_ADC_MspInit+0x80>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 80023ee:	2310      	movs	r3, #16
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f2:	2303      	movs	r3, #3
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_ADC_MspInit+0x84>)
 8002402:	f001 f949 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40012000 	.word	0x40012000
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	; (8002648 <HAL_I2C_MspInit+0x22c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d14c      	bne.n	80024d8 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a81      	ldr	r2, [pc, #516]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800245a:	2340      	movs	r3, #64	; 0x40
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002462:	2301      	movs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800246a:	2304      	movs	r3, #4
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	4876      	ldr	r0, [pc, #472]	; (8002650 <HAL_I2C_MspInit+0x234>)
 8002476:	f001 f90f 	bl	8003698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	2312      	movs	r3, #18
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800248a:	2304      	movs	r3, #4
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002492:	4619      	mov	r1, r3
 8002494:	486e      	ldr	r0, [pc, #440]	; (8002650 <HAL_I2C_MspInit+0x234>)
 8002496:	f001 f8ff 	bl	8003698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a6a      	ldr	r2, [pc, #424]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	201f      	movs	r0, #31
 80024bc:	f001 f815 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024c0:	201f      	movs	r0, #31
 80024c2:	f001 f82e 	bl	8003522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	2020      	movs	r0, #32
 80024cc:	f001 f80d 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024d0:	2020      	movs	r0, #32
 80024d2:	f001 f826 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024d6:	e0b3      	b.n	8002640 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_I2C_MspInit+0x238>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d14e      	bne.n	8002580 <HAL_I2C_MspInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_I2C_MspInit+0x230>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002510:	2304      	movs	r3, #4
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	484d      	ldr	r0, [pc, #308]	; (8002650 <HAL_I2C_MspInit+0x234>)
 800251c:	f001 f8bc 	bl	8003698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002526:	2312      	movs	r3, #18
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002532:	2309      	movs	r3, #9
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	4844      	ldr	r0, [pc, #272]	; (8002650 <HAL_I2C_MspInit+0x234>)
 800253e:	f001 f8ab 	bl	8003698 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_I2C_MspInit+0x230>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	2021      	movs	r0, #33	; 0x21
 8002564:	f000 ffc1 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002568:	2021      	movs	r0, #33	; 0x21
 800256a:	f000 ffda 	bl	8003522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2022      	movs	r0, #34	; 0x22
 8002574:	f000 ffb9 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002578:	2022      	movs	r0, #34	; 0x22
 800257a:	f000 ffd2 	bl	8003522 <HAL_NVIC_EnableIRQ>
}
 800257e:	e05f      	b.n	8002640 <HAL_I2C_MspInit+0x224>
  else if(hi2c->Instance==I2C3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_I2C_MspInit+0x23c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d15a      	bne.n	8002640 <HAL_I2C_MspInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_I2C_MspInit+0x230>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_I2C_MspInit+0x230>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_I2C_MspInit+0x230>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_I2C_MspInit+0x230>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	2312      	movs	r3, #18
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025d4:	2304      	movs	r3, #4
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	481f      	ldr	r0, [pc, #124]	; (800265c <HAL_I2C_MspInit+0x240>)
 80025e0:	f001 f85a 	bl	8003698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025e4:	2310      	movs	r3, #16
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80025f4:	2309      	movs	r3, #9
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fc:	4619      	mov	r1, r3
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <HAL_I2C_MspInit+0x234>)
 8002600:	f001 f84a 	bl	8003698 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_I2C_MspInit+0x230>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_I2C_MspInit+0x230>)
 800260e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_I2C_MspInit+0x230>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2048      	movs	r0, #72	; 0x48
 8002626:	f000 ff60 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800262a:	2048      	movs	r0, #72	; 0x48
 800262c:	f000 ff79 	bl	8003522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2049      	movs	r0, #73	; 0x49
 8002636:	f000 ff58 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800263a:	2049      	movs	r0, #73	; 0x49
 800263c:	f000 ff71 	bl	8003522 <HAL_NVIC_EnableIRQ>
}
 8002640:	bf00      	nop
 8002642:	3738      	adds	r7, #56	; 0x38
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40005400 	.word	0x40005400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400
 8002654:	40005800 	.word	0x40005800
 8002658:	40005c00 	.word	0x40005c00
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_SPI_MspInit+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12c      	bne.n	80026dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026cc:	2305      	movs	r3, #5
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_SPI_MspInit+0x8c>)
 80026d8:	f000 ffde 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40003800 	.word	0x40003800
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_TIM_Base_MspInit+0x64>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800271e:	e012      	b.n	8002746 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d10d      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a41      	ldr	r2, [pc, #260]	; (8002880 <HAL_TIM_Encoder_MspInit+0x124>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d14a      	bne.n	8002814 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a3f      	ldr	r2, [pc, #252]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a38      	ldr	r2, [pc, #224]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 80027d2:	2340      	movs	r3, #64	; 0x40
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e2:	2302      	movs	r3, #2
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	4826      	ldr	r0, [pc, #152]	; (8002888 <HAL_TIM_Encoder_MspInit+0x12c>)
 80027ee:	f000 ff53 	bl	8003698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 80027f2:	2320      	movs	r3, #32
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002802:	2302      	movs	r3, #2
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	481f      	ldr	r0, [pc, #124]	; (800288c <HAL_TIM_Encoder_MspInit+0x130>)
 800280e:	f000 ff43 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002812:	e030      	b.n	8002876 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_TIM_Encoder_MspInit+0x134>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12b      	bne.n	8002876 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_TIM_Encoder_MspInit+0x128>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8002856:	2303      	movs	r3, #3
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002866:	2302      	movs	r3, #2
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002872:	f000 ff11 	bl	8003698 <HAL_GPIO_Init>
}
 8002876:	bf00      	nop
 8002878:	3730      	adds	r7, #48	; 0x30
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40000400 	.word	0x40000400
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40000c00 	.word	0x40000c00

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a34      	ldr	r2, [pc, #208]	; (8002984 <HAL_TIM_MspPostInit+0xf0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11f      	bne.n	80028f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a32      	ldr	r2, [pc, #200]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 80028d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4827      	ldr	r0, [pc, #156]	; (800298c <HAL_TIM_MspPostInit+0xf8>)
 80028f0:	f000 fed2 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028f4:	e041      	b.n	800297a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d13c      	bne.n	800297a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_TIM_MspPostInit+0xf4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8002938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <HAL_TIM_MspPostInit+0xf8>)
 8002956:	f000 fe9f 	bl	8003698 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 800295a:	2308      	movs	r3, #8
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800296a:	2301      	movs	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4806      	ldr	r0, [pc, #24]	; (8002990 <HAL_TIM_MspPostInit+0xfc>)
 8002976:	f000 fe8f 	bl	8003698 <HAL_GPIO_Init>
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400

08002994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_UART_MspInit+0x94>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d133      	bne.n	8002a1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_UART_MspInit+0x98>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ee:	230c      	movs	r3, #12
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029fe:	2307      	movs	r3, #7
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <HAL_UART_MspInit+0x9c>)
 8002a0a:	f000 fe45 	bl	8003698 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2026      	movs	r0, #38	; 0x26
 8002a14:	f000 fd69 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a18:	2026      	movs	r0, #38	; 0x26
 8002a1a:	f000 fd82 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <NMI_Handler+0x4>

08002a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <MemManage_Handler+0x4>

08002a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f000 f9a2 	bl	8002dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <I2C1_EV_IRQHandler+0x10>)
 8002a8e:	f001 fb69 	bl	8004164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000170 	.word	0x20000170

08002a9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <I2C1_ER_IRQHandler+0x10>)
 8002aa2:	f001 fcd0 	bl	8004446 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000170 	.word	0x20000170

08002ab0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <I2C2_EV_IRQHandler+0x10>)
 8002ab6:	f001 fb55 	bl	8004164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200001c4 	.word	0x200001c4

08002ac4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <I2C2_ER_IRQHandler+0x10>)
 8002aca:	f001 fcbc 	bl	8004446 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200001c4 	.word	0x200001c4

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f004 ff7f 	bl	80079e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200003e4 	.word	0x200003e4

08002aec <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <I2C3_EV_IRQHandler+0x10>)
 8002af2:	f001 fb37 	bl	8004164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000218 	.word	0x20000218

08002b00 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <I2C3_ER_IRQHandler+0x10>)
 8002b06:	f001 fc9e 	bl	8004446 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000218 	.word	0x20000218

08002b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <_sbrk+0x5c>)
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <_sbrk+0x60>)
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <_sbrk+0x64>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <_sbrk+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d207      	bcs.n	8002b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b44:	f005 fe4a 	bl	80087dc <__errno>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e009      	b.n	8002b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <_sbrk+0x64>)
 8002b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20020000 	.word	0x20020000
 8002b74:	00000400 	.word	0x00000400
 8002b78:	20000428 	.word	0x20000428
 8002b7c:	20000448 	.word	0x20000448

08002b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <SystemInit+0x20>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <SystemInit+0x20>)
 8002b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8002baa:	2005      	movs	r0, #5
 8002bac:	f000 f92c 	bl	8002e08 <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <uart_startup_transmit+0x40>)
 8002bb2:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <uart_startup_transmit+0x44>)
 8002bb8:	f005 fe70 	bl	800889c <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8002bbc:	480a      	ldr	r0, [pc, #40]	; (8002be8 <uart_startup_transmit+0x44>)
 8002bbe:	f7fd fb0f 	bl	80001e0 <strlen>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <uart_startup_transmit+0x44>)
 8002bca:	4808      	ldr	r0, [pc, #32]	; (8002bec <uart_startup_transmit+0x48>)
 8002bcc:	f004 fe93 	bl	80078f6 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4907      	ldr	r1, [pc, #28]	; (8002bf0 <uart_startup_transmit+0x4c>)
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <uart_startup_transmit+0x48>)
 8002bd6:	f004 fed3 	bl	8007980 <HAL_UART_Receive_IT>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08009274 	.word	0x08009274
 8002be8:	20000094 	.word	0x20000094
 8002bec:	200003e4 	.word	0x200003e4
 8002bf0:	200000d4 	.word	0x200000d4

08002bf4 <uart_task>:

void uart_task()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <uart_task+0x3c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d014      	beq.n	8002c2a <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <uart_task+0x40>)
 8002c02:	f7fd faed 	bl	80001e0 <strlen>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480a      	ldr	r0, [pc, #40]	; (8002c34 <uart_task+0x40>)
 8002c0c:	f000 f816 	bl	8002c3c <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8002c10:	4808      	ldr	r0, [pc, #32]	; (8002c34 <uart_task+0x40>)
 8002c12:	f005 fddf 	bl	80087d4 <atoi>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <uart_task+0x44>)
 8002c1c:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <uart_task+0x3c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <uart_task+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
	}
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200000f4 	.word	0x200000f4
 8002c34:	200000d4 	.word	0x200000d4
 8002c38:	200000f8 	.word	0x200000f8

08002c3c <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4803      	ldr	r0, [pc, #12]	; (8002c5c <uart_transmit+0x20>)
 8002c50:	f004 fe51 	bl	80078f6 <HAL_UART_Transmit_IT>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200003e4 	.word	0x200003e4

08002c60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_UART_RxCpltCallback+0x64>)
 8002c70:	5c9b      	ldrb	r3, [r3, r2]
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d10c      	bne.n	8002c90 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_UART_RxCpltCallback+0x64>)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_UART_RxCpltCallback+0x68>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		index = 0;
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e009      	b.n	8002ca4 <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b1d      	cmp	r3, #29
 8002c96:	d805      	bhi.n	8002ca4 <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002ca2:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_UART_RxCpltCallback+0x60>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_UART_RxCpltCallback+0x64>)
 8002cac:	4413      	add	r3, r2
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <HAL_UART_RxCpltCallback+0x6c>)
 8002cb4:	f004 fe64 	bl	8007980 <HAL_UART_Receive_IT>

}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000042c 	.word	0x2000042c
 8002cc4:	200000d4 	.word	0x200000d4
 8002cc8:	200000f4 	.word	0x200000f4
 8002ccc:	200003e4 	.word	0x200003e4

08002cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd6:	490e      	ldr	r1, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cec:	4c0b      	ldr	r4, [pc, #44]	; (8002d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cfa:	f7ff ff41 	bl	8002b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfe:	f005 fd73 	bl	80087e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d02:	f7fe fbb9 	bl	8001478 <main>
  bx  lr    
 8002d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d14:	080093e0 	.word	0x080093e0
  ldr r2, =_sbss
 8002d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d1c:	20000444 	.word	0x20000444

08002d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_Init+0x40>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_Init+0x40>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_Init+0x40>)
 8002d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_Init+0x40>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f000 fbc1 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d52:	200f      	movs	r0, #15
 8002d54:	f000 f808 	bl	8002d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d58:	f7ff faf4 	bl	8002344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x54>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x58>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fbd9 	bl	800353e <HAL_SYSTICK_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00e      	b.n	8002db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d80a      	bhi.n	8002db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f000 fba1 	bl	80034ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <HAL_InitTick+0x5c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000008 	.word	0x20000008
 8002dec:	20000430 	.word	0x20000430

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000430 	.word	0x20000430

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff ffee 	bl	8002df0 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e033      	b.n	8002ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fa90 	bl	8002394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e96:	f023 0302 	bic.w	r3, r3, #2
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f94a 	bl	800313c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ebe:	e001      	b.n	8002ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e113      	b.n	800311c <HAL_ADC_ConfigChannel+0x244>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d925      	bls.n	8002f50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43da      	mvns	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	400a      	ands	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4403      	add	r3, r0
 8002f42:	3b1e      	subs	r3, #30
 8002f44:	409a      	lsls	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	e022      	b.n	8002f96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	2207      	movs	r2, #7
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6919      	ldr	r1, [r3, #16]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4618      	mov	r0, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4403      	add	r3, r0
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d824      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b05      	subs	r3, #5
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b05      	subs	r3, #5
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fe6:	e04c      	b.n	8003082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d824      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b23      	subs	r3, #35	; 0x23
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b23      	subs	r3, #35	; 0x23
 800302c:	fa00 f203 	lsl.w	r2, r0, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
 8003038:	e023      	b.n	8003082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b41      	subs	r3, #65	; 0x41
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b41      	subs	r3, #65	; 0x41
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_ADC_ConfigChannel+0x250>)
 8003084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_ADC_ConfigChannel+0x254>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10f      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b12      	cmp	r3, #18
 8003096:	d10b      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_ADC_ConfigChannel+0x254>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12b      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_ADC_ConfigChannel+0x258>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x1f4>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d122      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_ADC_ConfigChannel+0x258>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_ADC_ConfigChannel+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_ADC_ConfigChannel+0x260>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9a      	lsrs	r2, r3, #18
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012300 	.word	0x40012300
 800312c:	40012000 	.word	0x40012000
 8003130:	10000012 	.word	0x10000012
 8003134:	20000000 	.word	0x20000000
 8003138:	431bde83 	.word	0x431bde83

0800313c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003144:	4b79      	ldr	r3, [pc, #484]	; (800332c <ADC_Init+0x1f0>)
 8003146:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	021a      	lsls	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	4a58      	ldr	r2, [pc, #352]	; (8003330 <ADC_Init+0x1f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e00f      	b.n	800323a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003238:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0202 	bic.w	r2, r2, #2
 8003248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e1b      	ldrb	r3, [r3, #24]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003276:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	035a      	lsls	r2, r3, #13
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	e007      	b.n	80032b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	051a      	lsls	r2, r3, #20
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f2:	025a      	lsls	r2, r3, #9
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	029a      	lsls	r2, r3, #10
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40012300 	.word	0x40012300
 8003330:	0f000001 	.word	0x0f000001

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800335c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	; (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db0b      	blt.n	80033c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <__NVIC_EnableIRQ+0x38>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	; (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	; (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff29 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034fc:	f7ff ff3e 	bl	800337c <__NVIC_GetPriorityGrouping>
 8003500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff8e 	bl	8003428 <NVIC_EncodePriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5d 	bl	80033d4 <__NVIC_SetPriority>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff31 	bl	8003398 <__NVIC_EnableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffa2 	bl	8003490 <SysTick_Config>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003564:	f7ff fc44 	bl	8002df0 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d008      	beq.n	8003588 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e052      	b.n	800362e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0216 	bic.w	r2, r2, #22
 8003596:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d103      	bne.n	80035b8 <HAL_DMA_Abort+0x62>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d8:	e013      	b.n	8003602 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035da:	f7ff fc09 	bl	8002df0 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d90c      	bls.n	8003602 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e015      	b.n	800362e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e4      	bne.n	80035da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	223f      	movs	r2, #63	; 0x3f
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e00c      	b.n	800366e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2205      	movs	r2, #5
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e159      	b.n	8003968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036b4:	2201      	movs	r2, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f040 8148 	bne.w	8003962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d005      	beq.n	80036ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d130      	bne.n	800374c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 0201 	and.w	r2, r3, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d017      	beq.n	8003788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d123      	bne.n	80037dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	08da      	lsrs	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	08da      	lsrs	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	69b9      	ldr	r1, [r7, #24]
 80037d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0203 	and.w	r2, r3, #3
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a2 	beq.w	8003962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b57      	ldr	r3, [pc, #348]	; (8003980 <HAL_GPIO_Init+0x2e8>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	4a56      	ldr	r2, [pc, #344]	; (8003980 <HAL_GPIO_Init+0x2e8>)
 8003828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382c:	6453      	str	r3, [r2, #68]	; 0x44
 800382e:	4b54      	ldr	r3, [pc, #336]	; (8003980 <HAL_GPIO_Init+0x2e8>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800383a:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_GPIO_Init+0x2ec>)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a49      	ldr	r2, [pc, #292]	; (8003988 <HAL_GPIO_Init+0x2f0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_Init+0x202>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a48      	ldr	r2, [pc, #288]	; (800398c <HAL_GPIO_Init+0x2f4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0x1fe>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a47      	ldr	r2, [pc, #284]	; (8003990 <HAL_GPIO_Init+0x2f8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_Init+0x1fa>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a46      	ldr	r2, [pc, #280]	; (8003994 <HAL_GPIO_Init+0x2fc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_Init+0x1f6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a45      	ldr	r2, [pc, #276]	; (8003998 <HAL_GPIO_Init+0x300>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_Init+0x1f2>
 8003886:	2304      	movs	r3, #4
 8003888:	e008      	b.n	800389c <HAL_GPIO_Init+0x204>
 800388a:	2307      	movs	r3, #7
 800388c:	e006      	b.n	800389c <HAL_GPIO_Init+0x204>
 800388e:	2303      	movs	r3, #3
 8003890:	e004      	b.n	800389c <HAL_GPIO_Init+0x204>
 8003892:	2302      	movs	r3, #2
 8003894:	e002      	b.n	800389c <HAL_GPIO_Init+0x204>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_GPIO_Init+0x204>
 800389a:	2300      	movs	r3, #0
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f002 0203 	and.w	r2, r2, #3
 80038a2:	0092      	lsls	r2, r2, #2
 80038a4:	4093      	lsls	r3, r2
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ac:	4935      	ldr	r1, [pc, #212]	; (8003984 <HAL_GPIO_Init+0x2ec>)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ba:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_GPIO_Init+0x304>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <HAL_GPIO_Init+0x304>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_GPIO_Init+0x304>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003908:	4a24      	ldr	r2, [pc, #144]	; (800399c <HAL_GPIO_Init+0x304>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_GPIO_Init+0x304>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_GPIO_Init+0x304>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_GPIO_Init+0x304>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_GPIO_Init+0x304>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	f67f aea2 	bls.w	80036b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	40013800 	.word	0x40013800
 8003988:	40020000 	.word	0x40020000
 800398c:	40020400 	.word	0x40020400
 8003990:	40020800 	.word	0x40020800
 8003994:	40020c00 	.word	0x40020c00
 8003998:	40021000 	.word	0x40021000
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039bc:	e003      	b.n	80039c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	041a      	lsls	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e12b      	b.n	8003c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe fcf4 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	; 0x24
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f002 fea2 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 8003a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4a81      	ldr	r2, [pc, #516]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d807      	bhi.n	8003a8c <HAL_I2C_Init+0x84>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a80      	ldr	r2, [pc, #512]	; (8003c80 <HAL_I2C_Init+0x278>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	bf94      	ite	ls
 8003a84:	2301      	movls	r3, #1
 8003a86:	2300      	movhi	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e006      	b.n	8003a9a <HAL_I2C_Init+0x92>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a7d      	ldr	r2, [pc, #500]	; (8003c84 <HAL_I2C_Init+0x27c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0e7      	b.n	8003c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a78      	ldr	r2, [pc, #480]	; (8003c88 <HAL_I2C_Init+0x280>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0c9b      	lsrs	r3, r3, #18
 8003aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4a6a      	ldr	r2, [pc, #424]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d802      	bhi.n	8003adc <HAL_I2C_Init+0xd4>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	e009      	b.n	8003af0 <HAL_I2C_Init+0xe8>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_I2C_Init+0x284>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	3301      	adds	r3, #1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	495c      	ldr	r1, [pc, #368]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d819      	bhi.n	8003b44 <HAL_I2C_Init+0x13c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e59      	subs	r1, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b24:	400b      	ands	r3, r1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_I2C_Init+0x138>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e59      	subs	r1, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	e051      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e04f      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d111      	bne.n	8003b70 <HAL_I2C_Init+0x168>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e58      	subs	r0, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e012      	b.n	8003b96 <HAL_I2C_Init+0x18e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	0099      	lsls	r1, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Init+0x196>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e022      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_I2C_Init+0x1bc>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e58      	subs	r0, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	440b      	add	r3, r1
 8003bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc2:	e00f      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e58      	subs	r0, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	0099      	lsls	r1, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	6809      	ldr	r1, [r1, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6911      	ldr	r1, [r2, #16]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	4311      	orrs	r1, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	000186a0 	.word	0x000186a0
 8003c80:	001e847f 	.word	0x001e847f
 8003c84:	003d08ff 	.word	0x003d08ff
 8003c88:	431bde83 	.word	0x431bde83
 8003c8c:	10624dd3 	.word	0x10624dd3

08003c90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003caa:	f7ff f8a1 	bl	8002df0 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	f040 80d9 	bne.w	8003e70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2319      	movs	r3, #25
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	496d      	ldr	r1, [pc, #436]	; (8003e7c <HAL_I2C_Mem_Write+0x1ec>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f001 ff6f 	bl	8005bac <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0cc      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0x56>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0c5      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d007      	beq.n	8003d0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_I2C_Mem_Write+0x1f0>)
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d4e:	88f8      	ldrh	r0, [r7, #6]
 8003d50:	893a      	ldrh	r2, [r7, #8]
 8003d52:	8979      	ldrh	r1, [r7, #10]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 fde6 	bl	8005930 <I2C_RequestMemoryWrite>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d052      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e081      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f001 fff0 	bl	8005d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d107      	bne.n	8003d96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e06b      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_I2C_Mem_Write+0x180>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d017      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1aa      	bne.n	8003d6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f001 ffdc 	bl	8005dda <I2C_WaitOnBTFFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d107      	bne.n	8003e40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e016      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	00100002 	.word	0x00100002
 8003e80:	ffff0000 	.word	0xffff0000

08003e84 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	f040 808e 	bne.w	8003fcc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_I2C_Mem_Write_IT+0x158>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_I2C_Mem_Write_IT+0x15c>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	0a1a      	lsrs	r2, r3, #8
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009a      	lsls	r2, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e064      	b.n	8003fce <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d0db      	beq.n	8003eca <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2C_Mem_Write_IT+0x9c>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e056      	b.n	8003fce <HAL_I2C_Mem_Write_IT+0x14a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d007      	beq.n	8003f46 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2221      	movs	r2, #33	; 0x21
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_I2C_Mem_Write_IT+0x160>)
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f88:	897a      	ldrh	r2, [r7, #10]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003f8e:	893a      	ldrh	r2, [r7, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003fc6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	14f8b589 	.word	0x14f8b589
 8003fe4:	ffff0000 	.word	0xffff0000

08003fe8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	f040 809a 	bne.w	8004148 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004014:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_I2C_Mem_Read_IT+0x170>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	4a50      	ldr	r2, [pc, #320]	; (800415c <HAL_I2C_Mem_Read_IT+0x174>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	0a1a      	lsrs	r2, r3, #8
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009a      	lsls	r2, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	3b01      	subs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d116      	bne.n	8004068 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e070      	b.n	800414a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d0db      	beq.n	800402e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_Mem_Read_IT+0x9c>
 8004080:	2302      	movs	r3, #2
 8004082:	e062      	b.n	800414a <HAL_I2C_Mem_Read_IT+0x162>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d007      	beq.n	80040aa <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2222      	movs	r2, #34	; 0x22
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2240      	movs	r2, #64	; 0x40
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_I2C_Mem_Read_IT+0x178>)
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80040ec:	897a      	ldrh	r2, [r7, #10]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80040f2:	893a      	ldrh	r2, [r7, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004112:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004122:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004142:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000
 800415c:	14f8b589 	.word	0x14f8b589
 8004160:	ffff0000 	.word	0xffff0000

08004164 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004184:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b10      	cmp	r3, #16
 8004192:	d003      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x38>
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	f040 80c1 	bne.w	800431e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041bc:	d003      	beq.n	80041c6 <HAL_I2C_EV_IRQHandler+0x62>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041c4:	d101      	bne.n	80041ca <HAL_I2C_EV_IRQHandler+0x66>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_I2C_EV_IRQHandler+0x68>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f000 8132 	beq.w	8004436 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00c      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x92>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0a5b      	lsrs	r3, r3, #9
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f001 fe98 	bl	8005f1e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fd83 	bl	8004cfa <I2C_Master_SB>
 80041f4:	e092      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0xb2>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	0a5b      	lsrs	r3, r3, #9
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fdf9 	bl	8004e06 <I2C_Master_ADD10>
 8004214:	e082      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0xd2>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fe13 	bl	8004e5a <I2C_Master_ADDR>
 8004234:	e072      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03b      	beq.n	80042ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004250:	f000 80f3 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00f      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x11c>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0a9b      	lsrs	r3, r3, #10
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x11c>
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9f3 	bl	8004664 <I2C_MasterTransmit_TXE>
 800427e:	e04d      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80d6 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	0a5b      	lsrs	r3, r3, #9
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80cf 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	2b21      	cmp	r3, #33	; 0x21
 80042a0:	d103      	bne.n	80042aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa7a 	bl	800479c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a8:	e0c7      	b.n	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	f040 80c4 	bne.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fae8 	bl	8004888 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b8:	e0bf      	b.n	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	f000 80b7 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00f      	beq.n	80042f8 <HAL_I2C_EV_IRQHandler+0x194>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_I2C_EV_IRQHandler+0x194>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fb5d 	bl	80049b0 <I2C_MasterReceive_RXNE>
 80042f6:	e011      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 809a 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	0a5b      	lsrs	r3, r3, #9
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8093 	beq.w	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fc06 	bl	8004b26 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431a:	e08e      	b.n	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
 800431c:	e08d      	b.n	800443a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e007      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d012      	beq.n	8004372 <HAL_I2C_EV_IRQHandler+0x20e>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	0a5b      	lsrs	r3, r3, #9
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 ffc4 	bl	80052f8 <I2C_Slave_ADDR>
 8004370:	e066      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x22e>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	0a5b      	lsrs	r3, r3, #9
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fffe 	bl	800538c <I2C_Slave_STOPF>
 8004390:	e056      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004392:	7bbb      	ldrb	r3, [r7, #14]
 8004394:	2b21      	cmp	r3, #33	; 0x21
 8004396:	d002      	beq.n	800439e <HAL_I2C_EV_IRQHandler+0x23a>
 8004398:	7bbb      	ldrb	r3, [r7, #14]
 800439a:	2b29      	cmp	r3, #41	; 0x29
 800439c:	d125      	bne.n	80043ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00f      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x266>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0a9b      	lsrs	r3, r3, #10
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x266>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 feda 	bl	800517c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043c8:	e039      	b.n	800443e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d033      	beq.n	800443e <HAL_I2C_EV_IRQHandler+0x2da>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02d      	beq.n	800443e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 ff07 	bl	80051f6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e8:	e029      	b.n	800443e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00f      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0x2b2>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	0a9b      	lsrs	r3, r3, #10
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ff12 	bl	8005238 <I2C_SlaveReceive_RXNE>
 8004414:	e014      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	0a5b      	lsrs	r3, r3, #9
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 ff40 	bl	80052b4 <I2C_SlaveReceive_BTF>
 8004434:	e004      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800443e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	; 0x28
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004468:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <HAL_I2C_ER_IRQHandler+0x4e>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004492:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	0a5b      	lsrs	r3, r3, #9
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <HAL_I2C_ER_IRQHandler+0x78>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f043 0302 	orr.w	r3, r3, #2
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80044bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	0a9b      	lsrs	r3, r3, #10
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03f      	beq.n	800454a <HAL_I2C_ER_IRQHandler+0x104>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	0a1b      	lsrs	r3, r3, #8
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d039      	beq.n	800454a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80044d6:	7efb      	ldrb	r3, [r7, #27]
 80044d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80044f0:	7ebb      	ldrb	r3, [r7, #26]
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d112      	bne.n	800451c <HAL_I2C_ER_IRQHandler+0xd6>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10f      	bne.n	800451c <HAL_I2C_ER_IRQHandler+0xd6>
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b21      	cmp	r3, #33	; 0x21
 8004500:	d008      	beq.n	8004514 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b29      	cmp	r3, #41	; 0x29
 8004506:	d005      	beq.n	8004514 <HAL_I2C_ER_IRQHandler+0xce>
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	2b28      	cmp	r3, #40	; 0x28
 800450c:	d106      	bne.n	800451c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b21      	cmp	r3, #33	; 0x21
 8004512:	d103      	bne.n	800451c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f001 f869 	bl	80055ec <I2C_Slave_AF>
 800451a:	e016      	b.n	800454a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004524:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800452e:	7efb      	ldrb	r3, [r7, #27]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d002      	beq.n	800453a <HAL_I2C_ER_IRQHandler+0xf4>
 8004534:	7efb      	ldrb	r3, [r7, #27]
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d107      	bne.n	800454a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004548:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	0adb      	lsrs	r3, r3, #11
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <HAL_I2C_ER_IRQHandler+0x12e>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004572:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 f8a0 	bl	80056cc <I2C_ITError>
  }
}
 800458c:	bf00      	nop
 800458e:	3728      	adds	r7, #40	; 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
 80045f0:	4613      	mov	r3, r2
 80045f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d150      	bne.n	800472c <I2C_MasterTransmit_TXE+0xc8>
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b21      	cmp	r3, #33	; 0x21
 800468e:	d14d      	bne.n	800472c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d01d      	beq.n	80046d2 <I2C_MasterTransmit_TXE+0x6e>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b20      	cmp	r3, #32
 800469a:	d01a      	beq.n	80046d2 <I2C_MasterTransmit_TXE+0x6e>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a2:	d016      	beq.n	80046d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2211      	movs	r2, #17
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ff62 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046d0:	e060      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d107      	bne.n	800471c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff7d 	bl	8004614 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800471a:	e03b      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff ff35 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800472a:	e033      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b21      	cmp	r3, #33	; 0x21
 8004730:	d005      	beq.n	800473e <I2C_MasterTransmit_TXE+0xda>
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d12d      	bne.n	8004794 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b22      	cmp	r3, #34	; 0x22
 800473c:	d12a      	bne.n	8004794 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004756:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004758:	e01c      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d103      	bne.n	800476e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f88e 	bl	8004888 <I2C_MemoryTransmit_TXE_BTF>
}
 800476c:	e012      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004792:	e7ff      	b.n	8004794 <I2C_MasterTransmit_TXE+0x130>
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b21      	cmp	r3, #33	; 0x21
 80047b4:	d164      	bne.n	8004880 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80047e4:	e04c      	b.n	8004880 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d01d      	beq.n	8004828 <I2C_MasterTransmit_BTF+0x8c>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d01a      	beq.n	8004828 <I2C_MasterTransmit_BTF+0x8c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f8:	d016      	beq.n	8004828 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004808:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2211      	movs	r2, #17
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff feb7 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
}
 8004826:	e02b      	b.n	8004880 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004836:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d107      	bne.n	8004872 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fed2 	bl	8004614 <HAL_I2C_MemTxCpltCallback>
}
 8004870:	e006      	b.n	8004880 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fe8a 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10b      	bne.n	80048c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	1c9a      	adds	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048be:	e073      	b.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	121b      	asrs	r3, r3, #8
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048da:	e065      	b.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d10b      	bne.n	80048fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048fa:	e055      	b.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	2b02      	cmp	r3, #2
 8004902:	d151      	bne.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b22      	cmp	r3, #34	; 0x22
 8004908:	d10d      	bne.n	8004926 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004924:	e040      	b.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b21      	cmp	r3, #33	; 0x21
 8004934:	d112      	bne.n	800495c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800495a:	e025      	b.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d120      	bne.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d11d      	bne.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800497a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fe36 	bl	8004614 <HAL_I2C_MemTxCpltCallback>
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b22      	cmp	r3, #34	; 0x22
 80049c2:	f040 80ac 	bne.w	8004b1e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d921      	bls.n	8004a18 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	f040 808c 	bne.w	8004b1e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004a16:	e082      	b.n	8004b1e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d075      	beq.n	8004b0c <I2C_MasterReceive_RXNE+0x15c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <I2C_MasterReceive_RXNE+0x7c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d16f      	bne.n	8004b0c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 fa15 	bl	8005e5c <I2C_WaitOnSTOPRequestThroughIT>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d142      	bne.n	8004abe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d10a      	bne.n	8004aa8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fdc1 	bl	8004628 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004aa6:	e03a      	b.n	8004b1e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2212      	movs	r2, #18
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fd76 	bl	80045a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004abc:	e02f      	b.n	8004b1e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004acc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fd99 	bl	800463c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b0a:	e008      	b.n	8004b1e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	605a      	str	r2, [r3, #4]
}
 8004b1c:	e7ff      	b.n	8004b1e <I2C_MasterReceive_RXNE+0x16e>
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d11b      	bne.n	8004b76 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b74:	e0bd      	b.n	8004cf2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d129      	bne.n	8004bd4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d00a      	beq.n	8004bac <I2C_MasterReceive_BTF+0x86>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d007      	beq.n	8004bac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004baa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bd2:	e08e      	b.n	8004cf2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d176      	bne.n	8004ccc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d002      	beq.n	8004bea <I2C_MasterReceive_BTF+0xc4>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d108      	bne.n	8004bfc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e019      	b.n	8004c30 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d002      	beq.n	8004c08 <I2C_MasterReceive_BTF+0xe2>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d108      	bne.n	8004c1a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e00a      	b.n	8004c30 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d007      	beq.n	8004c30 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d10a      	bne.n	8004cb6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fcba 	bl	8004628 <HAL_I2C_MemRxCpltCallback>
}
 8004cb4:	e01d      	b.n	8004cf2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2212      	movs	r2, #18
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fc6f 	bl	80045a8 <HAL_I2C_MasterRxCpltCallback>
}
 8004cca:	e012      	b.n	8004cf2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d117      	bne.n	8004d3e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d26:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d28:	e067      	b.n	8004dfa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	611a      	str	r2, [r3, #16]
}
 8004d3c:	e05d      	b.n	8004dfa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d46:	d133      	bne.n	8004db0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b21      	cmp	r3, #33	; 0x21
 8004d52:	d109      	bne.n	8004d68 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d64:	611a      	str	r2, [r3, #16]
 8004d66:	e008      	b.n	8004d7a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <I2C_Master_SB+0x92>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d108      	bne.n	8004d9e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d032      	beq.n	8004dfa <I2C_Master_SB+0x100>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d02d      	beq.n	8004dfa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dac:	605a      	str	r2, [r3, #4]
}
 8004dae:	e024      	b.n	8004dfa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10e      	bne.n	8004dd6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	11db      	asrs	r3, r3, #7
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f003 0306 	and.w	r3, r3, #6
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f063 030f 	orn	r3, r3, #15
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
}
 8004dd4:	e011      	b.n	8004dfa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	11db      	asrs	r3, r3, #7
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0306 	and.w	r3, r3, #6
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f063 030e 	orn	r3, r3, #14
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	611a      	str	r2, [r3, #16]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <I2C_Master_ADD10+0x26>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d108      	bne.n	8004e3e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <I2C_Master_ADD10+0x48>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b091      	sub	sp, #68	; 0x44
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b22      	cmp	r3, #34	; 0x22
 8004e82:	f040 8169 	bne.w	8005158 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <I2C_Master_ADDR+0x54>
 8004e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d10b      	bne.n	8004eae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	e160      	b.n	8005170 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <I2C_Master_ADDR+0x98>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ebe:	d118      	bne.n	8004ef2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50
 8004ef0:	e13e      	b.n	8005170 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d113      	bne.n	8004f24 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e115      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f040 808a 	bne.w	8005044 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f36:	d137      	bne.n	8004fa8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d113      	bne.n	8004f80 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f66:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	e0e7      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e0d3      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d02e      	beq.n	800500c <I2C_Master_ADDR+0x1b2>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d02b      	beq.n	800500c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	2b12      	cmp	r3, #18
 8004fb8:	d102      	bne.n	8004fc0 <I2C_Master_ADDR+0x166>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d125      	bne.n	800500c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d00e      	beq.n	8004fe4 <I2C_Master_ADDR+0x18a>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d00b      	beq.n	8004fe4 <I2C_Master_ADDR+0x18a>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d008      	beq.n	8004fe4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e007      	b.n	8004ff4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	e0a1      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e085      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d14d      	bne.n	80050ea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	2b04      	cmp	r3, #4
 8005052:	d016      	beq.n	8005082 <I2C_Master_ADDR+0x228>
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2b02      	cmp	r3, #2
 8005058:	d013      	beq.n	8005082 <I2C_Master_ADDR+0x228>
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b10      	cmp	r3, #16
 800505e:	d010      	beq.n	8005082 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005090:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a0:	d117      	bne.n	80050d2 <I2C_Master_ADDR+0x278>
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a8:	d00b      	beq.n	80050c2 <I2C_Master_ADDR+0x268>
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d008      	beq.n	80050c2 <I2C_Master_ADDR+0x268>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d005      	beq.n	80050c2 <I2C_Master_ADDR+0x268>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d002      	beq.n	80050c2 <I2C_Master_ADDR+0x268>
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d107      	bne.n	80050d2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	e032      	b.n	8005150 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050f8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d117      	bne.n	800513a <I2C_Master_ADDR+0x2e0>
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005110:	d00b      	beq.n	800512a <I2C_Master_ADDR+0x2d0>
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b01      	cmp	r3, #1
 8005116:	d008      	beq.n	800512a <I2C_Master_ADDR+0x2d0>
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b08      	cmp	r3, #8
 800511c:	d005      	beq.n	800512a <I2C_Master_ADDR+0x2d0>
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b10      	cmp	r3, #16
 8005122:	d002      	beq.n	800512a <I2C_Master_ADDR+0x2d0>
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	2b20      	cmp	r3, #32
 8005128:	d107      	bne.n	800513a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005138:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005156:	e00b      	b.n	8005170 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	e7ff      	b.n	8005170 <I2C_Master_ADDR+0x316>
 8005170:	bf00      	nop
 8005172:	3744      	adds	r7, #68	; 0x44
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02b      	beq.n	80051ee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d114      	bne.n	80051ee <I2C_SlaveTransmit_TXE+0x72>
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b29      	cmp	r3, #41	; 0x29
 80051c8:	d111      	bne.n	80051ee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2221      	movs	r2, #33	; 0x21
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2228      	movs	r2, #40	; 0x28
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff f9e7 	bl	80045bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02c      	beq.n	80052ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d114      	bne.n	80052ac <I2C_SlaveReceive_RXNE+0x74>
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b2a      	cmp	r3, #42	; 0x2a
 8005286:	d111      	bne.n	80052ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005296:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2222      	movs	r2, #34	; 0x22
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2228      	movs	r2, #40	; 0x28
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff f992 	bl	80045d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d012      	beq.n	80052ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005312:	2b28      	cmp	r3, #40	; 0x28
 8005314:	d127      	bne.n	8005366 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005324:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	09db      	lsrs	r3, r3, #7
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	81bb      	strh	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005358:	89ba      	ldrh	r2, [r7, #12]
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff f940 	bl	80045e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005364:	e00e      	b.n	8005384 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e8:	d172      	bne.n	80054d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b22      	cmp	r3, #34	; 0x22
 80053ee:	d002      	beq.n	80053f6 <I2C_Slave_STOPF+0x6a>
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b2a      	cmp	r3, #42	; 0x2a
 80053f4:	d135      	bne.n	8005462 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005428:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe f923 	bl	800367a <HAL_DMA_GetState>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d049      	beq.n	80054ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	4a69      	ldr	r2, [pc, #420]	; (80055e4 <I2C_Slave_STOPF+0x258>)
 8005440:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe f8f5 	bl	8003636 <HAL_DMA_Abort_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d03d      	beq.n	80054ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005460:	e035      	b.n	80054ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005494:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe f8ed 	bl	800367a <HAL_DMA_GetState>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d014      	beq.n	80054d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <I2C_Slave_STOPF+0x258>)
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe f8bf 	bl	8003636 <HAL_DMA_Abort_IT>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	e000      	b.n	80054d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d03e      	beq.n	8005558 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d112      	bne.n	800550e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d112      	bne.n	8005542 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8b3 	bl	80056cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005566:	e039      	b.n	80055dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b2a      	cmp	r3, #42	; 0x2a
 800556c:	d109      	bne.n	8005582 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2228      	movs	r2, #40	; 0x28
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f827 	bl	80045d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b28      	cmp	r3, #40	; 0x28
 800558c:	d111      	bne.n	80055b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <I2C_Slave_STOPF+0x25c>)
 8005592:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff f828 	bl	8004600 <HAL_I2C_ListenCpltCallback>
}
 80055b0:	e014      	b.n	80055dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	2b22      	cmp	r3, #34	; 0x22
 80055b8:	d002      	beq.n	80055c0 <I2C_Slave_STOPF+0x234>
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b22      	cmp	r3, #34	; 0x22
 80055be:	d10d      	bne.n	80055dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fe fffa 	bl	80045d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08005a5d 	.word	0x08005a5d
 80055e8:	ffff0000 	.word	0xffff0000

080055ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d002      	beq.n	800560e <I2C_Slave_AF+0x22>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b20      	cmp	r3, #32
 800560c:	d129      	bne.n	8005662 <I2C_Slave_AF+0x76>
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b28      	cmp	r3, #40	; 0x28
 8005612:	d126      	bne.n	8005662 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <I2C_Slave_AF+0xdc>)
 8005618:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005628:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005632:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fe ffd0 	bl	8004600 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005660:	e02e      	b.n	80056c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b21      	cmp	r3, #33	; 0x21
 8005666:	d126      	bne.n	80056b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <I2C_Slave_AF+0xdc>)
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2221      	movs	r2, #33	; 0x21
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005692:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800569c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe ff84 	bl	80045bc <HAL_I2C_SlaveTxCpltCallback>
}
 80056b4:	e004      	b.n	80056c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056be:	615a      	str	r2, [r3, #20]
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	ffff0000 	.word	0xffff0000

080056cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d002      	beq.n	80056f0 <I2C_ITError+0x24>
 80056ea:	7bbb      	ldrb	r3, [r7, #14]
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d10a      	bne.n	8005706 <I2C_ITError+0x3a>
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b22      	cmp	r3, #34	; 0x22
 80056f4:	d107      	bne.n	8005706 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005704:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800570c:	2b28      	cmp	r3, #40	; 0x28
 800570e:	d107      	bne.n	8005720 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2228      	movs	r2, #40	; 0x28
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800571e:	e015      	b.n	800574c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572e:	d00a      	beq.n	8005746 <I2C_ITError+0x7a>
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b60      	cmp	r3, #96	; 0x60
 8005734:	d007      	beq.n	8005746 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575a:	d162      	bne.n	8005822 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d020      	beq.n	80057bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	4a6a      	ldr	r2, [pc, #424]	; (8005928 <I2C_ITError+0x25c>)
 8005780:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd ff55 	bl	8003636 <HAL_DMA_Abort_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8089 	beq.w	80058a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b6:	4610      	mov	r0, r2
 80057b8:	4798      	blx	r3
 80057ba:	e074      	b.n	80058a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	4a59      	ldr	r2, [pc, #356]	; (8005928 <I2C_ITError+0x25c>)
 80057c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd ff34 	bl	8003636 <HAL_DMA_Abort_IT>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d068      	beq.n	80058a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d10b      	bne.n	80057fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
 8005820:	e041      	b.n	80058a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b60      	cmp	r3, #96	; 0x60
 800582c:	d125      	bne.n	800587a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d10b      	bne.n	8005862 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe feec 	bl	8004650 <HAL_I2C_AbortCpltCallback>
 8005878:	e015      	b.n	80058a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d10b      	bne.n	80058a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fe fecb 	bl	800463c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10e      	bne.n	80058d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d113      	bne.n	8005920 <I2C_ITError+0x254>
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b28      	cmp	r3, #40	; 0x28
 80058fc:	d110      	bne.n	8005920 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a0a      	ldr	r2, [pc, #40]	; (800592c <I2C_ITError+0x260>)
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe fe70 	bl	8004600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08005a5d 	.word	0x08005a5d
 800592c:	ffff0000 	.word	0xffff0000

08005930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	460b      	mov	r3, r1
 8005944:	813b      	strh	r3, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2200      	movs	r2, #0
 8005962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f920 	bl	8005bac <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005980:	d103      	bne.n	800598a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e05f      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800599c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	492d      	ldr	r1, [pc, #180]	; (8005a58 <I2C_RequestMemoryWrite+0x128>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f958 	bl	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e04c      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f9c2 	bl	8005d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d107      	bne.n	80059f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e02b      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fc:	893b      	ldrh	r3, [r7, #8]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	e021      	b.n	8005a4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f99c 	bl	8005d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e005      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a42:	893b      	ldrh	r3, [r7, #8]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	00010002 	.word	0x00010002

08005a5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a76:	4b4b      	ldr	r3, [pc, #300]	; (8005ba4 <I2C_DMAAbort+0x148>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	08db      	lsrs	r3, r3, #3
 8005a7c:	4a4a      	ldr	r2, [pc, #296]	; (8005ba8 <I2C_DMAAbort+0x14c>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0a1a      	lsrs	r2, r3, #8
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	00da      	lsls	r2, r3, #3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005aa2:	e00a      	b.n	8005aba <I2C_DMAAbort+0x5e>
    }
    count--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab8:	d0ea      	beq.n	8005a90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	2200      	movs	r2, #0
 8005afe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b60      	cmp	r3, #96	; 0x60
 8005b2a:	d10e      	bne.n	8005b4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b42:	6978      	ldr	r0, [r7, #20]
 8005b44:	f7fe fd84 	bl	8004650 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b48:	e027      	b.n	8005b9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	d117      	bne.n	8005b84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2228      	movs	r2, #40	; 0x28
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b82:	e007      	b.n	8005b94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b94:	6978      	ldr	r0, [r7, #20]
 8005b96:	f7fe fd51 	bl	800463c <HAL_I2C_ErrorCallback>
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000000 	.word	0x20000000
 8005ba8:	14f8b589 	.word	0x14f8b589

08005bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bbc:	e025      	b.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d021      	beq.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fd f913 	bl	8002df0 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e023      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10d      	bne.n	8005c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	e00c      	b.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	43da      	mvns	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d0b6      	beq.n	8005bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c68:	e051      	b.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	d123      	bne.n	8005cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0204 	orr.w	r2, r3, #4
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e046      	b.n	8005d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d021      	beq.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fd f891 	bl	8002df0 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d116      	bne.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f043 0220 	orr.w	r2, r3, #32
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e020      	b.n	8005d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d10c      	bne.n	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2301      	movne	r3, #1
 8005d2c:	2300      	moveq	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	e00b      	b.n	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	43da      	mvns	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d18d      	bne.n	8005c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d64:	e02d      	b.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f8aa 	bl	8005ec0 <I2C_IsAcknowledgeFailed>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e02d      	b.n	8005dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d021      	beq.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fd f837 	bl	8002df0 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d116      	bne.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e007      	b.n	8005dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d1ca      	bne.n	8005d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de6:	e02d      	b.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f869 	bl	8005ec0 <I2C_IsAcknowledgeFailed>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e02d      	b.n	8005e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d021      	beq.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e00:	f7fc fff6 	bl	8002df0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d302      	bcc.n	8005e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d116      	bne.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d1ca      	bne.n	8005de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	0a1a      	lsrs	r2, r3, #8
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e008      	b.n	8005eac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea8:	d0e9      	beq.n	8005e7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	20000000 	.word	0x20000000
 8005ebc:	14f8b589 	.word	0x14f8b589

08005ec0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d11b      	bne.n	8005f10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ee0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f043 0204 	orr.w	r2, r3, #4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f2e:	d103      	bne.n	8005f38 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f36:	e007      	b.n	8005f48 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f40:	d102      	bne.n	8005f48 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2208      	movs	r2, #8
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e267      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d075      	beq.n	800605e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f72:	4b88      	ldr	r3, [pc, #544]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d00c      	beq.n	8005f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7e:	4b85      	ldr	r3, [pc, #532]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d112      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f8a:	4b82      	ldr	r3, [pc, #520]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f96:	d10b      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	4b7e      	ldr	r3, [pc, #504]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05b      	beq.n	800605c <HAL_RCC_OscConfig+0x108>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d157      	bne.n	800605c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e242      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb8:	d106      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x74>
 8005fba:	4b76      	ldr	r3, [pc, #472]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a75      	ldr	r2, [pc, #468]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e01d      	b.n	8006004 <HAL_RCC_OscConfig+0xb0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x98>
 8005fd2:	4b70      	ldr	r3, [pc, #448]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6f      	ldr	r2, [pc, #444]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b6d      	ldr	r3, [pc, #436]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a6c      	ldr	r2, [pc, #432]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e00b      	b.n	8006004 <HAL_RCC_OscConfig+0xb0>
 8005fec:	4b69      	ldr	r3, [pc, #420]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a68      	ldr	r2, [pc, #416]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4b66      	ldr	r3, [pc, #408]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a65      	ldr	r2, [pc, #404]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8005ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d013      	beq.n	8006034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fc fef0 	bl	8002df0 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006014:	f7fc feec 	bl	8002df0 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e207      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	4b5b      	ldr	r3, [pc, #364]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0xc0>
 8006032:	e014      	b.n	800605e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fc fedc 	bl	8002df0 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603c:	f7fc fed8 	bl	8002df0 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e1f3      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	4b51      	ldr	r3, [pc, #324]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <HAL_RCC_OscConfig+0xe8>
 800605a:	e000      	b.n	800605e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d063      	beq.n	8006132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800606a:	4b4a      	ldr	r3, [pc, #296]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006076:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800607e:	2b08      	cmp	r3, #8
 8006080:	d11c      	bne.n	80060bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006082:	4b44      	ldr	r3, [pc, #272]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d116      	bne.n	80060bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608e:	4b41      	ldr	r3, [pc, #260]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_RCC_OscConfig+0x152>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d001      	beq.n	80060a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e1c7      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a6:	4b3b      	ldr	r3, [pc, #236]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	4937      	ldr	r1, [pc, #220]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ba:	e03a      	b.n	8006132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d020      	beq.n	8006106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c4:	4b34      	ldr	r3, [pc, #208]	; (8006198 <HAL_RCC_OscConfig+0x244>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ca:	f7fc fe91 	bl	8002df0 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d2:	f7fc fe8d 	bl	8002df0 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e1a8      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e4:	4b2b      	ldr	r3, [pc, #172]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4925      	ldr	r1, [pc, #148]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]
 8006104:	e015      	b.n	8006132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <HAL_RCC_OscConfig+0x244>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fc fe70 	bl	8002df0 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006114:	f7fc fe6c 	bl	8002df0 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e187      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006126:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f0      	bne.n	8006114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d036      	beq.n	80061ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <HAL_RCC_OscConfig+0x248>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fc fe50 	bl	8002df0 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006154:	f7fc fe4c 	bl	8002df0 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e167      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <HAL_RCC_OscConfig+0x240>)
 8006168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x200>
 8006172:	e01b      	b.n	80061ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_RCC_OscConfig+0x248>)
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800617a:	f7fc fe39 	bl	8002df0 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	e00e      	b.n	80061a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006182:	f7fc fe35 	bl	8002df0 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d907      	bls.n	80061a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e150      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
 8006194:	40023800 	.word	0x40023800
 8006198:	42470000 	.word	0x42470000
 800619c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a0:	4b88      	ldr	r3, [pc, #544]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ea      	bne.n	8006182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8097 	beq.w	80062e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061be:	4b81      	ldr	r3, [pc, #516]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10f      	bne.n	80061ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	60bb      	str	r3, [r7, #8]
 80061ce:	4b7d      	ldr	r3, [pc, #500]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	4a7c      	ldr	r2, [pc, #496]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80061d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d8:	6413      	str	r3, [r2, #64]	; 0x40
 80061da:	4b7a      	ldr	r3, [pc, #488]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ea:	4b77      	ldr	r3, [pc, #476]	; (80063c8 <HAL_RCC_OscConfig+0x474>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d118      	bne.n	8006228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f6:	4b74      	ldr	r3, [pc, #464]	; (80063c8 <HAL_RCC_OscConfig+0x474>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a73      	ldr	r2, [pc, #460]	; (80063c8 <HAL_RCC_OscConfig+0x474>)
 80061fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006202:	f7fc fdf5 	bl	8002df0 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620a:	f7fc fdf1 	bl	8002df0 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e10c      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621c:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_OscConfig+0x474>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d106      	bne.n	800623e <HAL_RCC_OscConfig+0x2ea>
 8006230:	4b64      	ldr	r3, [pc, #400]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	4a63      	ldr	r2, [pc, #396]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006236:	f043 0301 	orr.w	r3, r3, #1
 800623a:	6713      	str	r3, [r2, #112]	; 0x70
 800623c:	e01c      	b.n	8006278 <HAL_RCC_OscConfig+0x324>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b05      	cmp	r3, #5
 8006244:	d10c      	bne.n	8006260 <HAL_RCC_OscConfig+0x30c>
 8006246:	4b5f      	ldr	r3, [pc, #380]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a5e      	ldr	r2, [pc, #376]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 800624c:	f043 0304 	orr.w	r3, r3, #4
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	4a5b      	ldr	r2, [pc, #364]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6713      	str	r3, [r2, #112]	; 0x70
 800625e:	e00b      	b.n	8006278 <HAL_RCC_OscConfig+0x324>
 8006260:	4b58      	ldr	r3, [pc, #352]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a57      	ldr	r2, [pc, #348]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
 800626c:	4b55      	ldr	r3, [pc, #340]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006272:	f023 0304 	bic.w	r3, r3, #4
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d015      	beq.n	80062ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006280:	f7fc fdb6 	bl	8002df0 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006286:	e00a      	b.n	800629e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f7fc fdb2 	bl	8002df0 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0cb      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629e:	4b49      	ldr	r3, [pc, #292]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0ee      	beq.n	8006288 <HAL_RCC_OscConfig+0x334>
 80062aa:	e014      	b.n	80062d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ac:	f7fc fda0 	bl	8002df0 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fc fd9c 	bl	8002df0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0b5      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ca:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1ee      	bne.n	80062b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	4a38      	ldr	r2, [pc, #224]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80062e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80a1 	beq.w	8006434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062f2:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d05c      	beq.n	80063b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d141      	bne.n	800638a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006306:	4b31      	ldr	r3, [pc, #196]	; (80063cc <HAL_RCC_OscConfig+0x478>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630c:	f7fc fd70 	bl	8002df0 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006314:	f7fc fd6c 	bl	8002df0 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e087      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	3b01      	subs	r3, #1
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	491b      	ldr	r1, [pc, #108]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_RCC_OscConfig+0x478>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006362:	f7fc fd45 	bl	8002df0 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800636a:	f7fc fd41 	bl	8002df0 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e05c      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0x416>
 8006388:	e054      	b.n	8006434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <HAL_RCC_OscConfig+0x478>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006390:	f7fc fd2e 	bl	8002df0 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006398:	f7fc fd2a 	bl	8002df0 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e045      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCC_OscConfig+0x470>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x444>
 80063b6:	e03d      	b.n	8006434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d107      	bne.n	80063d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e038      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40007000 	.word	0x40007000
 80063cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x4ec>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d028      	beq.n	8006430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d121      	bne.n	8006430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11a      	bne.n	8006430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006400:	4013      	ands	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006408:	4293      	cmp	r3, r2
 800640a:	d111      	bne.n	8006430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	3b01      	subs	r3, #1
 800641a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800

08006444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0cc      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006458:	4b68      	ldr	r3, [pc, #416]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d90c      	bls.n	8006480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006466:	4b65      	ldr	r3, [pc, #404]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646e:	4b63      	ldr	r3, [pc, #396]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d001      	beq.n	8006480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0b8      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006498:	4b59      	ldr	r3, [pc, #356]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	4a58      	ldr	r2, [pc, #352]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b0:	4b53      	ldr	r3, [pc, #332]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a52      	ldr	r2, [pc, #328]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064bc:	4b50      	ldr	r3, [pc, #320]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	494d      	ldr	r1, [pc, #308]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d044      	beq.n	8006564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e2:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d119      	bne.n	8006522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e07f      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d003      	beq.n	8006502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d107      	bne.n	8006512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006502:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e06f      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006512:	4b3b      	ldr	r3, [pc, #236]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e067      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006522:	4b37      	ldr	r3, [pc, #220]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4934      	ldr	r1, [pc, #208]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	4313      	orrs	r3, r2
 8006532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006534:	f7fc fc5c 	bl	8002df0 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653a:	e00a      	b.n	8006552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800653c:	f7fc fc58 	bl	8002df0 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e04f      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006552:	4b2b      	ldr	r3, [pc, #172]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 020c 	and.w	r2, r3, #12
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	429a      	cmp	r2, r3
 8006562:	d1eb      	bne.n	800653c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d20c      	bcs.n	800658c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800657a:	4b20      	ldr	r3, [pc, #128]	; (80065fc <HAL_RCC_ClockConfig+0x1b8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e032      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4916      	ldr	r1, [pc, #88]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065b6:	4b12      	ldr	r3, [pc, #72]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	490e      	ldr	r1, [pc, #56]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ca:	f000 f821 	bl	8006610 <HAL_RCC_GetSysClockFreq>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	490a      	ldr	r1, [pc, #40]	; (8006604 <HAL_RCC_ClockConfig+0x1c0>)
 80065dc:	5ccb      	ldrb	r3, [r1, r3]
 80065de:	fa22 f303 	lsr.w	r3, r2, r3
 80065e2:	4a09      	ldr	r2, [pc, #36]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 80065e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fbbc 	bl	8002d68 <HAL_InitTick>

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40023c00 	.word	0x40023c00
 8006600:	40023800 	.word	0x40023800
 8006604:	08009284 	.word	0x08009284
 8006608:	20000000 	.word	0x20000000
 800660c:	20000004 	.word	0x20000004

08006610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006614:	b090      	sub	sp, #64	; 0x40
 8006616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
 800661c:	2300      	movs	r3, #0
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006620:	2300      	movs	r3, #0
 8006622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006628:	4b59      	ldr	r3, [pc, #356]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 030c 	and.w	r3, r3, #12
 8006630:	2b08      	cmp	r3, #8
 8006632:	d00d      	beq.n	8006650 <HAL_RCC_GetSysClockFreq+0x40>
 8006634:	2b08      	cmp	r3, #8
 8006636:	f200 80a1 	bhi.w	800677c <HAL_RCC_GetSysClockFreq+0x16c>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0x34>
 800663e:	2b04      	cmp	r3, #4
 8006640:	d003      	beq.n	800664a <HAL_RCC_GetSysClockFreq+0x3a>
 8006642:	e09b      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006644:	4b53      	ldr	r3, [pc, #332]	; (8006794 <HAL_RCC_GetSysClockFreq+0x184>)
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006648:	e09b      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800664a:	4b53      	ldr	r3, [pc, #332]	; (8006798 <HAL_RCC_GetSysClockFreq+0x188>)
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800664e:	e098      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006650:	4b4f      	ldr	r3, [pc, #316]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800665a:	4b4d      	ldr	r3, [pc, #308]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d028      	beq.n	80066b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006666:	4b4a      	ldr	r3, [pc, #296]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	099b      	lsrs	r3, r3, #6
 800666c:	2200      	movs	r2, #0
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	627a      	str	r2, [r7, #36]	; 0x24
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006678:	2100      	movs	r1, #0
 800667a:	4b47      	ldr	r3, [pc, #284]	; (8006798 <HAL_RCC_GetSysClockFreq+0x188>)
 800667c:	fb03 f201 	mul.w	r2, r3, r1
 8006680:	2300      	movs	r3, #0
 8006682:	fb00 f303 	mul.w	r3, r0, r3
 8006686:	4413      	add	r3, r2
 8006688:	4a43      	ldr	r2, [pc, #268]	; (8006798 <HAL_RCC_GetSysClockFreq+0x188>)
 800668a:	fba0 1202 	umull	r1, r2, r0, r2
 800668e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006690:	460a      	mov	r2, r1
 8006692:	62ba      	str	r2, [r7, #40]	; 0x28
 8006694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006696:	4413      	add	r3, r2
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	2200      	movs	r2, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	61fa      	str	r2, [r7, #28]
 80066a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066aa:	f7fa f9e7 	bl	8000a7c <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4613      	mov	r3, r2
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b6:	e053      	b.n	8006760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b8:	4b35      	ldr	r3, [pc, #212]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	099b      	lsrs	r3, r3, #6
 80066be:	2200      	movs	r2, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	617a      	str	r2, [r7, #20]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066ca:	f04f 0b00 	mov.w	fp, #0
 80066ce:	4652      	mov	r2, sl
 80066d0:	465b      	mov	r3, fp
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f04f 0100 	mov.w	r1, #0
 80066da:	0159      	lsls	r1, r3, #5
 80066dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066e0:	0150      	lsls	r0, r2, #5
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	ebb2 080a 	subs.w	r8, r2, sl
 80066ea:	eb63 090b 	sbc.w	r9, r3, fp
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006702:	ebb2 0408 	subs.w	r4, r2, r8
 8006706:	eb63 0509 	sbc.w	r5, r3, r9
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	00eb      	lsls	r3, r5, #3
 8006714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006718:	00e2      	lsls	r2, r4, #3
 800671a:	4614      	mov	r4, r2
 800671c:	461d      	mov	r5, r3
 800671e:	eb14 030a 	adds.w	r3, r4, sl
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	eb45 030b 	adc.w	r3, r5, fp
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006736:	4629      	mov	r1, r5
 8006738:	028b      	lsls	r3, r1, #10
 800673a:	4621      	mov	r1, r4
 800673c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006740:	4621      	mov	r1, r4
 8006742:	028a      	lsls	r2, r1, #10
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	2200      	movs	r2, #0
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	60fa      	str	r2, [r7, #12]
 8006750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006754:	f7fa f992 	bl	8000a7c <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4613      	mov	r3, r2
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_RCC_GetSysClockFreq+0x180>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	3301      	adds	r3, #1
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800677a:	e002      	b.n	8006782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetSysClockFreq+0x184>)
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006784:	4618      	mov	r0, r3
 8006786:	3740      	adds	r7, #64	; 0x40
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	00f42400 	.word	0x00f42400
 8006798:	017d7840 	.word	0x017d7840

0800679c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000000 	.word	0x20000000

080067b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067b8:	f7ff fff0 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0a9b      	lsrs	r3, r3, #10
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4903      	ldr	r1, [pc, #12]	; (80067d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40023800 	.word	0x40023800
 80067d8:	08009294 	.word	0x08009294

080067dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067e0:	f7ff ffdc 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0b5b      	lsrs	r3, r3, #13
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4903      	ldr	r1, [pc, #12]	; (8006800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023800 	.word	0x40023800
 8006800:	08009294 	.word	0x08009294

08006804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e07b      	b.n	800690e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d009      	beq.n	800683c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
 800682e:	e005      	b.n	800683c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fb ff02 	bl	8002660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c0:	ea42 0103 	orr.w	r1, r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	0c1b      	lsrs	r3, r3, #16
 80068da:	f003 0104 	and.w	r1, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0210 	and.w	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e041      	b.n	80069ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fb fed7 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f000 fbf5 	bl	8007144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e041      	b.n	8006a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f839 	bl	8006a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 fba6 	bl	8007144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <HAL_TIM_PWM_Start+0x24>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	bf14      	ite	ne
 8006a84:	2301      	movne	r3, #1
 8006a86:	2300      	moveq	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e022      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d109      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0x3e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e015      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d109      	bne.n	8006ac0 <HAL_TIM_PWM_Start+0x58>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e008      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e068      	b.n	8006bac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Start+0x82>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae8:	e013      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Start+0x92>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b08:	e003      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fdb8 	bl	8007690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_TIM_PWM_Start+0x14c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d107      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <HAL_TIM_PWM_Start+0x14c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d013      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <HAL_TIM_PWM_Start+0x150>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_TIM_PWM_Start+0x154>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <HAL_TIM_PWM_Start+0x158>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <HAL_TIM_PWM_Start+0x15c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b06      	cmp	r3, #6
 8006b86:	d010      	beq.n	8006baa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	e007      	b.n	8006baa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40014000 	.word	0x40014000

08006bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e097      	b.n	8006d0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fb fdb3 	bl	800275c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0c:	f023 0307 	bic.w	r3, r3, #7
 8006c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f000 fa91 	bl	8007144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c68:	f023 030c 	bic.w	r3, r3, #12
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	4313      	orrs	r3, r2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	011a      	lsls	r2, r3, #4
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	031b      	lsls	r3, r3, #12
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d110      	bne.n	8006d66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d102      	bne.n	8006d50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d4a:	7b7b      	ldrb	r3, [r7, #13]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d001      	beq.n	8006d54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e069      	b.n	8006e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d64:	e031      	b.n	8006dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d110      	bne.n	8006d8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d102      	bne.n	8006d78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d72:	7b3b      	ldrb	r3, [r7, #12]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e055      	b.n	8006e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d8c:	e01d      	b.n	8006dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d108      	bne.n	8006da6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d105      	bne.n	8006da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d9a:	7b7b      	ldrb	r3, [r7, #13]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d102      	bne.n	8006da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006da0:	7b3b      	ldrb	r3, [r7, #12]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d001      	beq.n	8006daa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e03e      	b.n	8006e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_TIM_Encoder_Start+0xc4>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d008      	beq.n	8006de8 <HAL_TIM_Encoder_Start+0xd4>
 8006dd6:	e00f      	b.n	8006df8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fc55 	bl	8007690 <TIM_CCxChannelCmd>
      break;
 8006de6:	e016      	b.n	8006e16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2201      	movs	r2, #1
 8006dee:	2104      	movs	r1, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fc4d 	bl	8007690 <TIM_CCxChannelCmd>
      break;
 8006df6:	e00e      	b.n	8006e16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fc45 	bl	8007690 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2104      	movs	r1, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fc3e 	bl	8007690 <TIM_CCxChannelCmd>
      break;
 8006e14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e0ae      	b.n	8006fac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	f200 809f 	bhi.w	8006f9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e99 	.word	0x08006e99
 8006e68:	08006f9d 	.word	0x08006f9d
 8006e6c:	08006f9d 	.word	0x08006f9d
 8006e70:	08006f9d 	.word	0x08006f9d
 8006e74:	08006ed9 	.word	0x08006ed9
 8006e78:	08006f9d 	.word	0x08006f9d
 8006e7c:	08006f9d 	.word	0x08006f9d
 8006e80:	08006f9d 	.word	0x08006f9d
 8006e84:	08006f1b 	.word	0x08006f1b
 8006e88:	08006f9d 	.word	0x08006f9d
 8006e8c:	08006f9d 	.word	0x08006f9d
 8006e90:	08006f9d 	.word	0x08006f9d
 8006e94:	08006f5b 	.word	0x08006f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 f9d0 	bl	8007244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0208 	orr.w	r2, r2, #8
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	619a      	str	r2, [r3, #24]
      break;
 8006ed6:	e064      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa16 	bl	8007310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	619a      	str	r2, [r3, #24]
      break;
 8006f18:	e043      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fa61 	bl	80073e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0208 	orr.w	r2, r2, #8
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0204 	bic.w	r2, r2, #4
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
      break;
 8006f58:	e023      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 faab 	bl	80074bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
      break;
 8006f9a:	e002      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0b4      	b.n	800713a <HAL_TIM_ConfigClockSource+0x186>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007008:	d03e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0xd4>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700e:	f200 8087 	bhi.w	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007016:	f000 8086 	beq.w	8007126 <HAL_TIM_ConfigClockSource+0x172>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d87f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b70      	cmp	r3, #112	; 0x70
 8007022:	d01a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xa6>
 8007024:	2b70      	cmp	r3, #112	; 0x70
 8007026:	d87b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d050      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x11a>
 800702c:	2b60      	cmp	r3, #96	; 0x60
 800702e:	d877      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d03c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xfa>
 8007034:	2b50      	cmp	r3, #80	; 0x50
 8007036:	d873      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d058      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x13a>
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d86f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d064      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d86b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d060      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d867      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d05a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007058:	e062      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6899      	ldr	r1, [r3, #8]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f000 faf1 	bl	8007650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800707c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	609a      	str	r2, [r3, #8]
      break;
 8007086:	e04f      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f000 fada 	bl	8007650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070aa:	609a      	str	r2, [r3, #8]
      break;
 80070ac:	e03c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 fa4e 	bl	800755c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2150      	movs	r1, #80	; 0x50
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 faa7 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 80070cc:	e02c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 fa6d 	bl	80075ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2160      	movs	r1, #96	; 0x60
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fa97 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 80070ec:	e01c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fa2e 	bl	800755c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	; 0x40
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fa87 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 800710c:	e00c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f000 fa7e 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 800711e:	e003      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	e000      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a34      	ldr	r2, [pc, #208]	; (8007228 <TIM_Base_SetConfig+0xe4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00f      	beq.n	800717c <TIM_Base_SetConfig+0x38>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007162:	d00b      	beq.n	800717c <TIM_Base_SetConfig+0x38>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a31      	ldr	r2, [pc, #196]	; (800722c <TIM_Base_SetConfig+0xe8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_Base_SetConfig+0x38>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a30      	ldr	r2, [pc, #192]	; (8007230 <TIM_Base_SetConfig+0xec>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_Base_SetConfig+0x38>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a2f      	ldr	r2, [pc, #188]	; (8007234 <TIM_Base_SetConfig+0xf0>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a25      	ldr	r2, [pc, #148]	; (8007228 <TIM_Base_SetConfig+0xe4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01b      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d017      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a22      	ldr	r2, [pc, #136]	; (800722c <TIM_Base_SetConfig+0xe8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <TIM_Base_SetConfig+0xec>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00f      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a20      	ldr	r2, [pc, #128]	; (8007234 <TIM_Base_SetConfig+0xf0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00b      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <TIM_Base_SetConfig+0xf4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d007      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a1e      	ldr	r2, [pc, #120]	; (800723c <TIM_Base_SetConfig+0xf8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_Base_SetConfig+0x8a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <TIM_Base_SetConfig+0xfc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d108      	bne.n	80071e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a08      	ldr	r2, [pc, #32]	; (8007228 <TIM_Base_SetConfig+0xe4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]
}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40000c00 	.word	0x40000c00
 8007238:	40014000 	.word	0x40014000
 800723c:	40014400 	.word	0x40014400
 8007240:	40014800 	.word	0x40014800

08007244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0302 	bic.w	r3, r3, #2
 800728c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1c      	ldr	r2, [pc, #112]	; (800730c <TIM_OC1_SetConfig+0xc8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d10c      	bne.n	80072ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0308 	bic.w	r3, r3, #8
 80072a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a13      	ldr	r2, [pc, #76]	; (800730c <TIM_OC1_SetConfig+0xc8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d111      	bne.n	80072e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	621a      	str	r2, [r3, #32]
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40010000 	.word	0x40010000

08007310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0320 	bic.w	r3, r3, #32
 800735a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <TIM_OC2_SetConfig+0xd4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10d      	bne.n	800738c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <TIM_OC2_SetConfig+0xd4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d113      	bne.n	80073bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800739a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000

080073e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a1d      	ldr	r2, [pc, #116]	; (80074b8 <TIM_OC3_SetConfig+0xd0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d10d      	bne.n	8007462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800744c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <TIM_OC3_SetConfig+0xd0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d113      	bne.n	8007492 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	621a      	str	r2, [r3, #32]
}
 80074ac:	bf00      	nop
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40010000 	.word	0x40010000

080074bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	031b      	lsls	r3, r3, #12
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <TIM_OC4_SetConfig+0x9c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d109      	bne.n	8007530 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	019b      	lsls	r3, r3, #6
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40010000 	.word	0x40010000

0800755c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 030a 	bic.w	r3, r3, #10
 8007598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	621a      	str	r2, [r3, #32]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f023 0210 	bic.w	r2, r3, #16
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	031b      	lsls	r3, r3, #12
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	f043 0307 	orr.w	r3, r3, #7
 800763c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	021a      	lsls	r2, r3, #8
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	431a      	orrs	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4313      	orrs	r3, r2
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	609a      	str	r2, [r3, #8]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2201      	movs	r2, #1
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	43db      	mvns	r3, r3
 80076b2:	401a      	ands	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1a      	ldr	r2, [r3, #32]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	fa01 f303 	lsl.w	r3, r1, r3
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
	...

080076dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e050      	b.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d018      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d013      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a16      	ldr	r2, [pc, #88]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a15      	ldr	r2, [pc, #84]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10c      	bne.n	8007784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4313      	orrs	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40000400 	.word	0x40000400
 80077ac:	40000800 	.word	0x40000800
 80077b0:	40000c00 	.word	0x40000c00
 80077b4:	40014000 	.word	0x40014000

080077b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e03d      	b.n	8007850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e03f      	b.n	80078ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fb f886 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2224      	movs	r2, #36	; 0x24
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800789e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fd23 	bl	80082ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	4613      	mov	r3, r2
 8007902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b20      	cmp	r3, #32
 800790e:	d130      	bne.n	8007972 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_UART_Transmit_IT+0x26>
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e029      	b.n	8007974 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_UART_Transmit_IT+0x38>
 800792a:	2302      	movs	r3, #2
 800792c:	e022      	b.n	8007974 <HAL_UART_Transmit_IT+0x7e>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2221      	movs	r2, #33	; 0x21
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800796c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007972:	2302      	movs	r3, #2
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b20      	cmp	r3, #32
 8007998:	d11d      	bne.n	80079d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_UART_Receive_IT+0x26>
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e016      	b.n	80079d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Receive_IT+0x38>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e00f      	b.n	80079d8 <HAL_UART_Receive_IT+0x58>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	461a      	mov	r2, r3
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fab5 	bl	8007f3c <UART_Start_Receive_IT>
 80079d2:	4603      	mov	r3, r0
 80079d4:	e000      	b.n	80079d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0ba      	sub	sp, #232	; 0xe8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10f      	bne.n	8007a46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_UART_IRQHandler+0x66>
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb99 	bl	8008176 <UART_Receive_IT>
      return;
 8007a44:	e256      	b.n	8007ef4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80de 	beq.w	8007c0c <HAL_UART_IRQHandler+0x22c>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 80d1 	beq.w	8007c0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <HAL_UART_IRQHandler+0xae>
 8007a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f043 0201 	orr.w	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <HAL_UART_IRQHandler+0xd2>
 8007a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f043 0202 	orr.w	r2, r3, #2
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xf6>
 8007abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f043 0204 	orr.w	r2, r3, #4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <HAL_UART_IRQHandler+0x126>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0208 	orr.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 81ed 	beq.w	8007eea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_UART_IRQHandler+0x14e>
 8007b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fb24 	bl	8008176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b40      	cmp	r3, #64	; 0x40
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2301      	moveq	r3, #1
 8007b3e:	2300      	movne	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <HAL_UART_IRQHandler+0x17a>
 8007b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d04f      	beq.n	8007bfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa2c 	bl	8007fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d141      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3314      	adds	r3, #20
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3314      	adds	r3, #20
 8007b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1d9      	bne.n	8007b6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d013      	beq.n	8007bea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	4a7d      	ldr	r2, [pc, #500]	; (8007dbc <HAL_UART_IRQHandler+0x3dc>)
 8007bc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fb fd31 	bl	8003636 <HAL_DMA_Abort_IT>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d016      	beq.n	8007c08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e00e      	b.n	8007c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f990 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e00a      	b.n	8007c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f98c 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e006      	b.n	8007c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f988 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c06:	e170      	b.n	8007eea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	bf00      	nop
    return;
 8007c0a:	e16e      	b.n	8007eea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	f040 814a 	bne.w	8007eaa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8143 	beq.w	8007eaa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 813c 	beq.w	8007eaa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	f040 80b4 	bne.w	8007dc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8140 	beq.w	8007eee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c76:	429a      	cmp	r2, r3
 8007c78:	f080 8139 	bcs.w	8007eee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8e:	f000 8088 	beq.w	8007da2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1d9      	bne.n	8007c92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3314      	adds	r3, #20
 8007ce4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf0:	f023 0301 	bic.w	r3, r3, #1
 8007cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3314      	adds	r3, #20
 8007cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e1      	bne.n	8007cde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e3      	bne.n	8007d1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	330c      	adds	r3, #12
 8007d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d72:	f023 0310 	bic.w	r3, r3, #16
 8007d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	330c      	adds	r3, #12
 8007d80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d84:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e3      	bne.n	8007d60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fb fbda 	bl	8003556 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f8b6 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007db8:	e099      	b.n	8007eee <HAL_UART_IRQHandler+0x50e>
 8007dba:	bf00      	nop
 8007dbc:	0800807f 	.word	0x0800807f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 808b 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8086 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	330c      	adds	r3, #12
 8007e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e0a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e3      	bne.n	8007de6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e42:	633a      	str	r2, [r7, #48]	; 0x30
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e3      	bne.n	8007e1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e88:	61fa      	str	r2, [r7, #28]
 8007e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	617b      	str	r3, [r7, #20]
   return(result);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e3      	bne.n	8007e64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f83e 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea8:	e023      	b.n	8007ef2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_UART_IRQHandler+0x4ea>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f8ef 	bl	80080a6 <UART_Transmit_IT>
    return;
 8007ec8:	e014      	b.n	8007ef4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x514>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f92f 	bl	8008146 <UART_EndTransmit_IT>
    return;
 8007ee8:	e004      	b.n	8007ef4 <HAL_UART_IRQHandler+0x514>
    return;
 8007eea:	bf00      	nop
 8007eec:	e002      	b.n	8007ef4 <HAL_UART_IRQHandler+0x514>
      return;
 8007eee:	bf00      	nop
 8007ef0:	e000      	b.n	8007ef4 <HAL_UART_IRQHandler+0x514>
      return;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	37e8      	adds	r7, #232	; 0xe8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	88fa      	ldrh	r2, [r7, #6]
 8007f54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2222      	movs	r2, #34	; 0x22
 8007f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695a      	ldr	r2, [r3, #20]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0220 	orr.w	r2, r2, #32
 8007fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b095      	sub	sp, #84	; 0x54
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	61fb      	str	r3, [r7, #28]
   return(result);
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	64bb      	str	r3, [r7, #72]	; 0x48
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3314      	adds	r3, #20
 8008012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	2b01      	cmp	r3, #1
 800802e:	d119      	bne.n	8008064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	330c      	adds	r3, #12
 8008036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f023 0310 	bic.w	r3, r3, #16
 8008046:	647b      	str	r3, [r7, #68]	; 0x44
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	330c      	adds	r3, #12
 800804e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008050:	61ba      	str	r2, [r7, #24]
 8008052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6979      	ldr	r1, [r7, #20]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	613b      	str	r3, [r7, #16]
   return(result);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008072:	bf00      	nop
 8008074:	3754      	adds	r7, #84	; 0x54
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff ff39 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b21      	cmp	r3, #33	; 0x21
 80080b8:	d13e      	bne.n	8008138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d114      	bne.n	80080ee <UART_Transmit_IT+0x48>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d110      	bne.n	80080ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	1c9a      	adds	r2, r3, #2
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]
 80080ec:	e008      	b.n	8008100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	1c59      	adds	r1, r3, #1
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6211      	str	r1, [r2, #32]
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4619      	mov	r1, r3
 800810e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10f      	bne.n	8008134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	e000      	b.n	800813a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008138:	2302      	movs	r3, #2
  }
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fec8 	bl	8007efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b08c      	sub	sp, #48	; 0x30
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b22      	cmp	r3, #34	; 0x22
 8008188:	f040 80ab 	bne.w	80082e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008194:	d117      	bne.n	80081c6 <UART_Receive_IT+0x50>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d113      	bne.n	80081c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	1c9a      	adds	r2, r3, #2
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
 80081c4:	e026      	b.n	8008214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d007      	beq.n	80081ea <UART_Receive_IT+0x74>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <UART_Receive_IT+0x82>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e008      	b.n	800820a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008204:	b2da      	uxtb	r2, r3
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008224:	2b00      	cmp	r3, #0
 8008226:	d15a      	bne.n	80082de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0220 	bic.w	r2, r2, #32
 8008236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d135      	bne.n	80082d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	613b      	str	r3, [r7, #16]
   return(result);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f023 0310 	bic.w	r3, r3, #16
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828e:	623a      	str	r2, [r7, #32]
 8008290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	69f9      	ldr	r1, [r7, #28]
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	61bb      	str	r3, [r7, #24]
   return(result);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e5      	bne.n	800826e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d10a      	bne.n	80082c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fe29 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
 80082d2:	e002      	b.n	80082da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fa fcc3 	bl	8002c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e002      	b.n	80082e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3730      	adds	r7, #48	; 0x30
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082f0:	b0c0      	sub	sp, #256	; 0x100
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	68d9      	ldr	r1, [r3, #12]
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	ea40 0301 	orr.w	r3, r0, r1
 8008314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	431a      	orrs	r2, r3
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	431a      	orrs	r2, r3
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008344:	f021 010c 	bic.w	r1, r1, #12
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008352:	430b      	orrs	r3, r1
 8008354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008366:	6999      	ldr	r1, [r3, #24]
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	ea40 0301 	orr.w	r3, r0, r1
 8008372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b8f      	ldr	r3, [pc, #572]	; (80085b8 <UART_SetConfig+0x2cc>)
 800837c:	429a      	cmp	r2, r3
 800837e:	d005      	beq.n	800838c <UART_SetConfig+0xa0>
 8008380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b8d      	ldr	r3, [pc, #564]	; (80085bc <UART_SetConfig+0x2d0>)
 8008388:	429a      	cmp	r2, r3
 800838a:	d104      	bne.n	8008396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800838c:	f7fe fa26 	bl	80067dc <HAL_RCC_GetPCLK2Freq>
 8008390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008394:	e003      	b.n	800839e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008396:	f7fe fa0d 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800839a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800839e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a8:	f040 810c 	bne.w	80085c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	1891      	adds	r1, r2, r2
 80083c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80083c6:	415b      	adcs	r3, r3
 80083c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083ce:	4621      	mov	r1, r4
 80083d0:	eb12 0801 	adds.w	r8, r2, r1
 80083d4:	4629      	mov	r1, r5
 80083d6:	eb43 0901 	adc.w	r9, r3, r1
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ee:	4690      	mov	r8, r2
 80083f0:	4699      	mov	r9, r3
 80083f2:	4623      	mov	r3, r4
 80083f4:	eb18 0303 	adds.w	r3, r8, r3
 80083f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083fc:	462b      	mov	r3, r5
 80083fe:	eb49 0303 	adc.w	r3, r9, r3
 8008402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800841a:	460b      	mov	r3, r1
 800841c:	18db      	adds	r3, r3, r3
 800841e:	653b      	str	r3, [r7, #80]	; 0x50
 8008420:	4613      	mov	r3, r2
 8008422:	eb42 0303 	adc.w	r3, r2, r3
 8008426:	657b      	str	r3, [r7, #84]	; 0x54
 8008428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800842c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008430:	f7f8 fb24 	bl	8000a7c <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4b61      	ldr	r3, [pc, #388]	; (80085c0 <UART_SetConfig+0x2d4>)
 800843a:	fba3 2302 	umull	r2, r3, r3, r2
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	011c      	lsls	r4, r3, #4
 8008442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800844c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008454:	4642      	mov	r2, r8
 8008456:	464b      	mov	r3, r9
 8008458:	1891      	adds	r1, r2, r2
 800845a:	64b9      	str	r1, [r7, #72]	; 0x48
 800845c:	415b      	adcs	r3, r3
 800845e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008464:	4641      	mov	r1, r8
 8008466:	eb12 0a01 	adds.w	sl, r2, r1
 800846a:	4649      	mov	r1, r9
 800846c:	eb43 0b01 	adc.w	fp, r3, r1
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800847c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008484:	4692      	mov	sl, r2
 8008486:	469b      	mov	fp, r3
 8008488:	4643      	mov	r3, r8
 800848a:	eb1a 0303 	adds.w	r3, sl, r3
 800848e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008492:	464b      	mov	r3, r9
 8008494:	eb4b 0303 	adc.w	r3, fp, r3
 8008498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084b0:	460b      	mov	r3, r1
 80084b2:	18db      	adds	r3, r3, r3
 80084b4:	643b      	str	r3, [r7, #64]	; 0x40
 80084b6:	4613      	mov	r3, r2
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
 80084be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084c6:	f7f8 fad9 	bl	8000a7c <__aeabi_uldivmod>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <UART_SetConfig+0x2d4>)
 80084d2:	fba3 2301 	umull	r2, r3, r3, r1
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	2264      	movs	r2, #100	; 0x64
 80084da:	fb02 f303 	mul.w	r3, r2, r3
 80084de:	1acb      	subs	r3, r1, r3
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084e6:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <UART_SetConfig+0x2d4>)
 80084e8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084f4:	441c      	add	r4, r3
 80084f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	1891      	adds	r1, r2, r2
 800850e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008510:	415b      	adcs	r3, r3
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008518:	4641      	mov	r1, r8
 800851a:	1851      	adds	r1, r2, r1
 800851c:	6339      	str	r1, [r7, #48]	; 0x30
 800851e:	4649      	mov	r1, r9
 8008520:	414b      	adcs	r3, r1
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008530:	4659      	mov	r1, fp
 8008532:	00cb      	lsls	r3, r1, #3
 8008534:	4651      	mov	r1, sl
 8008536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800853a:	4651      	mov	r1, sl
 800853c:	00ca      	lsls	r2, r1, #3
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	4603      	mov	r3, r0
 8008544:	4642      	mov	r2, r8
 8008546:	189b      	adds	r3, r3, r2
 8008548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800854c:	464b      	mov	r3, r9
 800854e:	460a      	mov	r2, r1
 8008550:	eb42 0303 	adc.w	r3, r2, r3
 8008554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800856c:	460b      	mov	r3, r1
 800856e:	18db      	adds	r3, r3, r3
 8008570:	62bb      	str	r3, [r7, #40]	; 0x28
 8008572:	4613      	mov	r3, r2
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800857e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008582:	f7f8 fa7b 	bl	8000a7c <__aeabi_uldivmod>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <UART_SetConfig+0x2d4>)
 800858c:	fba3 1302 	umull	r1, r3, r3, r2
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	2164      	movs	r1, #100	; 0x64
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	3332      	adds	r3, #50	; 0x32
 800859e:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <UART_SetConfig+0x2d4>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	f003 0207 	and.w	r2, r3, #7
 80085aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4422      	add	r2, r4
 80085b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085b4:	e105      	b.n	80087c2 <UART_SetConfig+0x4d6>
 80085b6:	bf00      	nop
 80085b8:	40011000 	.word	0x40011000
 80085bc:	40011400 	.word	0x40011400
 80085c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085d6:	4642      	mov	r2, r8
 80085d8:	464b      	mov	r3, r9
 80085da:	1891      	adds	r1, r2, r2
 80085dc:	6239      	str	r1, [r7, #32]
 80085de:	415b      	adcs	r3, r3
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
 80085e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085e6:	4641      	mov	r1, r8
 80085e8:	1854      	adds	r4, r2, r1
 80085ea:	4649      	mov	r1, r9
 80085ec:	eb43 0501 	adc.w	r5, r3, r1
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	00eb      	lsls	r3, r5, #3
 80085fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085fe:	00e2      	lsls	r2, r4, #3
 8008600:	4614      	mov	r4, r2
 8008602:	461d      	mov	r5, r3
 8008604:	4643      	mov	r3, r8
 8008606:	18e3      	adds	r3, r4, r3
 8008608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800860c:	464b      	mov	r3, r9
 800860e:	eb45 0303 	adc.w	r3, r5, r3
 8008612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008632:	4629      	mov	r1, r5
 8008634:	008b      	lsls	r3, r1, #2
 8008636:	4621      	mov	r1, r4
 8008638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800863c:	4621      	mov	r1, r4
 800863e:	008a      	lsls	r2, r1, #2
 8008640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008644:	f7f8 fa1a 	bl	8000a7c <__aeabi_uldivmod>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4b60      	ldr	r3, [pc, #384]	; (80087d0 <UART_SetConfig+0x4e4>)
 800864e:	fba3 2302 	umull	r2, r3, r3, r2
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	011c      	lsls	r4, r3, #4
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	61b9      	str	r1, [r7, #24]
 8008670:	415b      	adcs	r3, r3
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008678:	4641      	mov	r1, r8
 800867a:	1851      	adds	r1, r2, r1
 800867c:	6139      	str	r1, [r7, #16]
 800867e:	4649      	mov	r1, r9
 8008680:	414b      	adcs	r3, r1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008690:	4659      	mov	r1, fp
 8008692:	00cb      	lsls	r3, r1, #3
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800869a:	4651      	mov	r1, sl
 800869c:	00ca      	lsls	r2, r1, #3
 800869e:	4610      	mov	r0, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	4642      	mov	r2, r8
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086ac:	464b      	mov	r3, r9
 80086ae:	460a      	mov	r2, r1
 80086b0:	eb42 0303 	adc.w	r3, r2, r3
 80086b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086d0:	4649      	mov	r1, r9
 80086d2:	008b      	lsls	r3, r1, #2
 80086d4:	4641      	mov	r1, r8
 80086d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086da:	4641      	mov	r1, r8
 80086dc:	008a      	lsls	r2, r1, #2
 80086de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086e2:	f7f8 f9cb 	bl	8000a7c <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <UART_SetConfig+0x4e4>)
 80086ec:	fba3 1302 	umull	r1, r3, r3, r2
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	2164      	movs	r1, #100	; 0x64
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	3332      	adds	r3, #50	; 0x32
 80086fe:	4a34      	ldr	r2, [pc, #208]	; (80087d0 <UART_SetConfig+0x4e4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870a:	441c      	add	r4, r3
 800870c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008710:	2200      	movs	r2, #0
 8008712:	673b      	str	r3, [r7, #112]	; 0x70
 8008714:	677a      	str	r2, [r7, #116]	; 0x74
 8008716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800871a:	4642      	mov	r2, r8
 800871c:	464b      	mov	r3, r9
 800871e:	1891      	adds	r1, r2, r2
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	415b      	adcs	r3, r3
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800872a:	4641      	mov	r1, r8
 800872c:	1851      	adds	r1, r2, r1
 800872e:	6039      	str	r1, [r7, #0]
 8008730:	4649      	mov	r1, r9
 8008732:	414b      	adcs	r3, r1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008742:	4659      	mov	r1, fp
 8008744:	00cb      	lsls	r3, r1, #3
 8008746:	4651      	mov	r1, sl
 8008748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800874c:	4651      	mov	r1, sl
 800874e:	00ca      	lsls	r2, r1, #3
 8008750:	4610      	mov	r0, r2
 8008752:	4619      	mov	r1, r3
 8008754:	4603      	mov	r3, r0
 8008756:	4642      	mov	r2, r8
 8008758:	189b      	adds	r3, r3, r2
 800875a:	66bb      	str	r3, [r7, #104]	; 0x68
 800875c:	464b      	mov	r3, r9
 800875e:	460a      	mov	r2, r1
 8008760:	eb42 0303 	adc.w	r3, r2, r3
 8008764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	663b      	str	r3, [r7, #96]	; 0x60
 8008770:	667a      	str	r2, [r7, #100]	; 0x64
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800877e:	4649      	mov	r1, r9
 8008780:	008b      	lsls	r3, r1, #2
 8008782:	4641      	mov	r1, r8
 8008784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008788:	4641      	mov	r1, r8
 800878a:	008a      	lsls	r2, r1, #2
 800878c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008790:	f7f8 f974 	bl	8000a7c <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <UART_SetConfig+0x4e4>)
 800879a:	fba3 1302 	umull	r1, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2164      	movs	r1, #100	; 0x64
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	3332      	adds	r3, #50	; 0x32
 80087ac:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <UART_SetConfig+0x4e4>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4422      	add	r2, r4
 80087c0:	609a      	str	r2, [r3, #8]
}
 80087c2:	bf00      	nop
 80087c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087c8:	46bd      	mov	sp, r7
 80087ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ce:	bf00      	nop
 80087d0:	51eb851f 	.word	0x51eb851f

080087d4 <atoi>:
 80087d4:	220a      	movs	r2, #10
 80087d6:	2100      	movs	r1, #0
 80087d8:	f000 b8ea 	b.w	80089b0 <strtol>

080087dc <__errno>:
 80087dc:	4b01      	ldr	r3, [pc, #4]	; (80087e4 <__errno+0x8>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c

080087e8 <__libc_init_array>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	4d0d      	ldr	r5, [pc, #52]	; (8008820 <__libc_init_array+0x38>)
 80087ec:	4c0d      	ldr	r4, [pc, #52]	; (8008824 <__libc_init_array+0x3c>)
 80087ee:	1b64      	subs	r4, r4, r5
 80087f0:	10a4      	asrs	r4, r4, #2
 80087f2:	2600      	movs	r6, #0
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	d109      	bne.n	800880c <__libc_init_array+0x24>
 80087f8:	4d0b      	ldr	r5, [pc, #44]	; (8008828 <__libc_init_array+0x40>)
 80087fa:	4c0c      	ldr	r4, [pc, #48]	; (800882c <__libc_init_array+0x44>)
 80087fc:	f000 fd22 	bl	8009244 <_init>
 8008800:	1b64      	subs	r4, r4, r5
 8008802:	10a4      	asrs	r4, r4, #2
 8008804:	2600      	movs	r6, #0
 8008806:	42a6      	cmp	r6, r4
 8008808:	d105      	bne.n	8008816 <__libc_init_array+0x2e>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008810:	4798      	blx	r3
 8008812:	3601      	adds	r6, #1
 8008814:	e7ee      	b.n	80087f4 <__libc_init_array+0xc>
 8008816:	f855 3b04 	ldr.w	r3, [r5], #4
 800881a:	4798      	blx	r3
 800881c:	3601      	adds	r6, #1
 800881e:	e7f2      	b.n	8008806 <__libc_init_array+0x1e>
 8008820:	080093d8 	.word	0x080093d8
 8008824:	080093d8 	.word	0x080093d8
 8008828:	080093d8 	.word	0x080093d8
 800882c:	080093dc 	.word	0x080093dc

08008830 <memcpy>:
 8008830:	440a      	add	r2, r1
 8008832:	4291      	cmp	r1, r2
 8008834:	f100 33ff 	add.w	r3, r0, #4294967295
 8008838:	d100      	bne.n	800883c <memcpy+0xc>
 800883a:	4770      	bx	lr
 800883c:	b510      	push	{r4, lr}
 800883e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008846:	4291      	cmp	r1, r2
 8008848:	d1f9      	bne.n	800883e <memcpy+0xe>
 800884a:	bd10      	pop	{r4, pc}

0800884c <memset>:
 800884c:	4402      	add	r2, r0
 800884e:	4603      	mov	r3, r0
 8008850:	4293      	cmp	r3, r2
 8008852:	d100      	bne.n	8008856 <memset+0xa>
 8008854:	4770      	bx	lr
 8008856:	f803 1b01 	strb.w	r1, [r3], #1
 800885a:	e7f9      	b.n	8008850 <memset+0x4>

0800885c <siprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b500      	push	{lr}
 8008860:	b09c      	sub	sp, #112	; 0x70
 8008862:	ab1d      	add	r3, sp, #116	; 0x74
 8008864:	9002      	str	r0, [sp, #8]
 8008866:	9006      	str	r0, [sp, #24]
 8008868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800886c:	4809      	ldr	r0, [pc, #36]	; (8008894 <siprintf+0x38>)
 800886e:	9107      	str	r1, [sp, #28]
 8008870:	9104      	str	r1, [sp, #16]
 8008872:	4909      	ldr	r1, [pc, #36]	; (8008898 <siprintf+0x3c>)
 8008874:	f853 2b04 	ldr.w	r2, [r3], #4
 8008878:	9105      	str	r1, [sp, #20]
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	a902      	add	r1, sp, #8
 8008880:	f000 f8fc 	bl	8008a7c <_svfiprintf_r>
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	b01c      	add	sp, #112	; 0x70
 800888c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008890:	b003      	add	sp, #12
 8008892:	4770      	bx	lr
 8008894:	2000000c 	.word	0x2000000c
 8008898:	ffff0208 	.word	0xffff0208

0800889c <strcpy>:
 800889c:	4603      	mov	r3, r0
 800889e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088a2:	f803 2b01 	strb.w	r2, [r3], #1
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	d1f9      	bne.n	800889e <strcpy+0x2>
 80088aa:	4770      	bx	lr

080088ac <_strtol_l.constprop.0>:
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b2:	d001      	beq.n	80088b8 <_strtol_l.constprop.0+0xc>
 80088b4:	2b24      	cmp	r3, #36	; 0x24
 80088b6:	d906      	bls.n	80088c6 <_strtol_l.constprop.0+0x1a>
 80088b8:	f7ff ff90 	bl	80087dc <__errno>
 80088bc:	2316      	movs	r3, #22
 80088be:	6003      	str	r3, [r0, #0]
 80088c0:	2000      	movs	r0, #0
 80088c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089ac <_strtol_l.constprop.0+0x100>
 80088ca:	460d      	mov	r5, r1
 80088cc:	462e      	mov	r6, r5
 80088ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80088d6:	f017 0708 	ands.w	r7, r7, #8
 80088da:	d1f7      	bne.n	80088cc <_strtol_l.constprop.0+0x20>
 80088dc:	2c2d      	cmp	r4, #45	; 0x2d
 80088de:	d132      	bne.n	8008946 <_strtol_l.constprop.0+0x9a>
 80088e0:	782c      	ldrb	r4, [r5, #0]
 80088e2:	2701      	movs	r7, #1
 80088e4:	1cb5      	adds	r5, r6, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d05b      	beq.n	80089a2 <_strtol_l.constprop.0+0xf6>
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d109      	bne.n	8008902 <_strtol_l.constprop.0+0x56>
 80088ee:	2c30      	cmp	r4, #48	; 0x30
 80088f0:	d107      	bne.n	8008902 <_strtol_l.constprop.0+0x56>
 80088f2:	782c      	ldrb	r4, [r5, #0]
 80088f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088f8:	2c58      	cmp	r4, #88	; 0x58
 80088fa:	d14d      	bne.n	8008998 <_strtol_l.constprop.0+0xec>
 80088fc:	786c      	ldrb	r4, [r5, #1]
 80088fe:	2310      	movs	r3, #16
 8008900:	3502      	adds	r5, #2
 8008902:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008906:	f108 38ff 	add.w	r8, r8, #4294967295
 800890a:	f04f 0c00 	mov.w	ip, #0
 800890e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008912:	4666      	mov	r6, ip
 8008914:	fb03 8a19 	mls	sl, r3, r9, r8
 8008918:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800891c:	f1be 0f09 	cmp.w	lr, #9
 8008920:	d816      	bhi.n	8008950 <_strtol_l.constprop.0+0xa4>
 8008922:	4674      	mov	r4, lr
 8008924:	42a3      	cmp	r3, r4
 8008926:	dd24      	ble.n	8008972 <_strtol_l.constprop.0+0xc6>
 8008928:	f1bc 0f00 	cmp.w	ip, #0
 800892c:	db1e      	blt.n	800896c <_strtol_l.constprop.0+0xc0>
 800892e:	45b1      	cmp	r9, r6
 8008930:	d31c      	bcc.n	800896c <_strtol_l.constprop.0+0xc0>
 8008932:	d101      	bne.n	8008938 <_strtol_l.constprop.0+0x8c>
 8008934:	45a2      	cmp	sl, r4
 8008936:	db19      	blt.n	800896c <_strtol_l.constprop.0+0xc0>
 8008938:	fb06 4603 	mla	r6, r6, r3, r4
 800893c:	f04f 0c01 	mov.w	ip, #1
 8008940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008944:	e7e8      	b.n	8008918 <_strtol_l.constprop.0+0x6c>
 8008946:	2c2b      	cmp	r4, #43	; 0x2b
 8008948:	bf04      	itt	eq
 800894a:	782c      	ldrbeq	r4, [r5, #0]
 800894c:	1cb5      	addeq	r5, r6, #2
 800894e:	e7ca      	b.n	80088e6 <_strtol_l.constprop.0+0x3a>
 8008950:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008954:	f1be 0f19 	cmp.w	lr, #25
 8008958:	d801      	bhi.n	800895e <_strtol_l.constprop.0+0xb2>
 800895a:	3c37      	subs	r4, #55	; 0x37
 800895c:	e7e2      	b.n	8008924 <_strtol_l.constprop.0+0x78>
 800895e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008962:	f1be 0f19 	cmp.w	lr, #25
 8008966:	d804      	bhi.n	8008972 <_strtol_l.constprop.0+0xc6>
 8008968:	3c57      	subs	r4, #87	; 0x57
 800896a:	e7db      	b.n	8008924 <_strtol_l.constprop.0+0x78>
 800896c:	f04f 3cff 	mov.w	ip, #4294967295
 8008970:	e7e6      	b.n	8008940 <_strtol_l.constprop.0+0x94>
 8008972:	f1bc 0f00 	cmp.w	ip, #0
 8008976:	da05      	bge.n	8008984 <_strtol_l.constprop.0+0xd8>
 8008978:	2322      	movs	r3, #34	; 0x22
 800897a:	6003      	str	r3, [r0, #0]
 800897c:	4646      	mov	r6, r8
 800897e:	b942      	cbnz	r2, 8008992 <_strtol_l.constprop.0+0xe6>
 8008980:	4630      	mov	r0, r6
 8008982:	e79e      	b.n	80088c2 <_strtol_l.constprop.0+0x16>
 8008984:	b107      	cbz	r7, 8008988 <_strtol_l.constprop.0+0xdc>
 8008986:	4276      	negs	r6, r6
 8008988:	2a00      	cmp	r2, #0
 800898a:	d0f9      	beq.n	8008980 <_strtol_l.constprop.0+0xd4>
 800898c:	f1bc 0f00 	cmp.w	ip, #0
 8008990:	d000      	beq.n	8008994 <_strtol_l.constprop.0+0xe8>
 8008992:	1e69      	subs	r1, r5, #1
 8008994:	6011      	str	r1, [r2, #0]
 8008996:	e7f3      	b.n	8008980 <_strtol_l.constprop.0+0xd4>
 8008998:	2430      	movs	r4, #48	; 0x30
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1b1      	bne.n	8008902 <_strtol_l.constprop.0+0x56>
 800899e:	2308      	movs	r3, #8
 80089a0:	e7af      	b.n	8008902 <_strtol_l.constprop.0+0x56>
 80089a2:	2c30      	cmp	r4, #48	; 0x30
 80089a4:	d0a5      	beq.n	80088f2 <_strtol_l.constprop.0+0x46>
 80089a6:	230a      	movs	r3, #10
 80089a8:	e7ab      	b.n	8008902 <_strtol_l.constprop.0+0x56>
 80089aa:	bf00      	nop
 80089ac:	0800929d 	.word	0x0800929d

080089b0 <strtol>:
 80089b0:	4613      	mov	r3, r2
 80089b2:	460a      	mov	r2, r1
 80089b4:	4601      	mov	r1, r0
 80089b6:	4802      	ldr	r0, [pc, #8]	; (80089c0 <strtol+0x10>)
 80089b8:	6800      	ldr	r0, [r0, #0]
 80089ba:	f7ff bf77 	b.w	80088ac <_strtol_l.constprop.0>
 80089be:	bf00      	nop
 80089c0:	2000000c 	.word	0x2000000c

080089c4 <__ssputs_r>:
 80089c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	688e      	ldr	r6, [r1, #8]
 80089ca:	429e      	cmp	r6, r3
 80089cc:	4682      	mov	sl, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4690      	mov	r8, r2
 80089d2:	461f      	mov	r7, r3
 80089d4:	d838      	bhi.n	8008a48 <__ssputs_r+0x84>
 80089d6:	898a      	ldrh	r2, [r1, #12]
 80089d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089dc:	d032      	beq.n	8008a44 <__ssputs_r+0x80>
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	6909      	ldr	r1, [r1, #16]
 80089e2:	eba5 0901 	sub.w	r9, r5, r1
 80089e6:	6965      	ldr	r5, [r4, #20]
 80089e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089f0:	3301      	adds	r3, #1
 80089f2:	444b      	add	r3, r9
 80089f4:	106d      	asrs	r5, r5, #1
 80089f6:	429d      	cmp	r5, r3
 80089f8:	bf38      	it	cc
 80089fa:	461d      	movcc	r5, r3
 80089fc:	0553      	lsls	r3, r2, #21
 80089fe:	d531      	bpl.n	8008a64 <__ssputs_r+0xa0>
 8008a00:	4629      	mov	r1, r5
 8008a02:	f000 fb55 	bl	80090b0 <_malloc_r>
 8008a06:	4606      	mov	r6, r0
 8008a08:	b950      	cbnz	r0, 8008a20 <__ssputs_r+0x5c>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	f8ca 3000 	str.w	r3, [sl]
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	6921      	ldr	r1, [r4, #16]
 8008a22:	464a      	mov	r2, r9
 8008a24:	f7ff ff04 	bl	8008830 <memcpy>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	6126      	str	r6, [r4, #16]
 8008a36:	6165      	str	r5, [r4, #20]
 8008a38:	444e      	add	r6, r9
 8008a3a:	eba5 0509 	sub.w	r5, r5, r9
 8008a3e:	6026      	str	r6, [r4, #0]
 8008a40:	60a5      	str	r5, [r4, #8]
 8008a42:	463e      	mov	r6, r7
 8008a44:	42be      	cmp	r6, r7
 8008a46:	d900      	bls.n	8008a4a <__ssputs_r+0x86>
 8008a48:	463e      	mov	r6, r7
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4641      	mov	r1, r8
 8008a50:	f000 faa8 	bl	8008fa4 <memmove>
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	1b9b      	subs	r3, r3, r6
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	4433      	add	r3, r6
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7db      	b.n	8008a1c <__ssputs_r+0x58>
 8008a64:	462a      	mov	r2, r5
 8008a66:	f000 fb97 	bl	8009198 <_realloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e1      	bne.n	8008a34 <__ssputs_r+0x70>
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	4650      	mov	r0, sl
 8008a74:	f000 fab0 	bl	8008fd8 <_free_r>
 8008a78:	e7c7      	b.n	8008a0a <__ssputs_r+0x46>
	...

08008a7c <_svfiprintf_r>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	4698      	mov	r8, r3
 8008a82:	898b      	ldrh	r3, [r1, #12]
 8008a84:	061b      	lsls	r3, r3, #24
 8008a86:	b09d      	sub	sp, #116	; 0x74
 8008a88:	4607      	mov	r7, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	d50e      	bpl.n	8008aae <_svfiprintf_r+0x32>
 8008a90:	690b      	ldr	r3, [r1, #16]
 8008a92:	b963      	cbnz	r3, 8008aae <_svfiprintf_r+0x32>
 8008a94:	2140      	movs	r1, #64	; 0x40
 8008a96:	f000 fb0b 	bl	80090b0 <_malloc_r>
 8008a9a:	6028      	str	r0, [r5, #0]
 8008a9c:	6128      	str	r0, [r5, #16]
 8008a9e:	b920      	cbnz	r0, 8008aaa <_svfiprintf_r+0x2e>
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e0d1      	b.n	8008c4e <_svfiprintf_r+0x1d2>
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	616b      	str	r3, [r5, #20]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab2:	2320      	movs	r3, #32
 8008ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008abc:	2330      	movs	r3, #48	; 0x30
 8008abe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c68 <_svfiprintf_r+0x1ec>
 8008ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac6:	f04f 0901 	mov.w	r9, #1
 8008aca:	4623      	mov	r3, r4
 8008acc:	469a      	mov	sl, r3
 8008ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad2:	b10a      	cbz	r2, 8008ad8 <_svfiprintf_r+0x5c>
 8008ad4:	2a25      	cmp	r2, #37	; 0x25
 8008ad6:	d1f9      	bne.n	8008acc <_svfiprintf_r+0x50>
 8008ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8008adc:	d00b      	beq.n	8008af6 <_svfiprintf_r+0x7a>
 8008ade:	465b      	mov	r3, fp
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ff6d 	bl	80089c4 <__ssputs_r>
 8008aea:	3001      	adds	r0, #1
 8008aec:	f000 80aa 	beq.w	8008c44 <_svfiprintf_r+0x1c8>
 8008af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af2:	445a      	add	r2, fp
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	f89a 3000 	ldrb.w	r3, [sl]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80a2 	beq.w	8008c44 <_svfiprintf_r+0x1c8>
 8008b00:	2300      	movs	r3, #0
 8008b02:	f04f 32ff 	mov.w	r2, #4294967295
 8008b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0a:	f10a 0a01 	add.w	sl, sl, #1
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b16:	931a      	str	r3, [sp, #104]	; 0x68
 8008b18:	4654      	mov	r4, sl
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b20:	4851      	ldr	r0, [pc, #324]	; (8008c68 <_svfiprintf_r+0x1ec>)
 8008b22:	f7f7 fb65 	bl	80001f0 <memchr>
 8008b26:	9a04      	ldr	r2, [sp, #16]
 8008b28:	b9d8      	cbnz	r0, 8008b62 <_svfiprintf_r+0xe6>
 8008b2a:	06d0      	lsls	r0, r2, #27
 8008b2c:	bf44      	itt	mi
 8008b2e:	2320      	movmi	r3, #32
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b34:	0711      	lsls	r1, r2, #28
 8008b36:	bf44      	itt	mi
 8008b38:	232b      	movmi	r3, #43	; 0x2b
 8008b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b42:	2b2a      	cmp	r3, #42	; 0x2a
 8008b44:	d015      	beq.n	8008b72 <_svfiprintf_r+0xf6>
 8008b46:	9a07      	ldr	r2, [sp, #28]
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4621      	mov	r1, r4
 8008b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b56:	3b30      	subs	r3, #48	; 0x30
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d94e      	bls.n	8008bfa <_svfiprintf_r+0x17e>
 8008b5c:	b1b0      	cbz	r0, 8008b8c <_svfiprintf_r+0x110>
 8008b5e:	9207      	str	r2, [sp, #28]
 8008b60:	e014      	b.n	8008b8c <_svfiprintf_r+0x110>
 8008b62:	eba0 0308 	sub.w	r3, r0, r8
 8008b66:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	46a2      	mov	sl, r4
 8008b70:	e7d2      	b.n	8008b18 <_svfiprintf_r+0x9c>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	1d19      	adds	r1, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9103      	str	r1, [sp, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbb      	ittet	lt
 8008b7e:	425b      	neglt	r3, r3
 8008b80:	f042 0202 	orrlt.w	r2, r2, #2
 8008b84:	9307      	strge	r3, [sp, #28]
 8008b86:	9307      	strlt	r3, [sp, #28]
 8008b88:	bfb8      	it	lt
 8008b8a:	9204      	strlt	r2, [sp, #16]
 8008b8c:	7823      	ldrb	r3, [r4, #0]
 8008b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b90:	d10c      	bne.n	8008bac <_svfiprintf_r+0x130>
 8008b92:	7863      	ldrb	r3, [r4, #1]
 8008b94:	2b2a      	cmp	r3, #42	; 0x2a
 8008b96:	d135      	bne.n	8008c04 <_svfiprintf_r+0x188>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	9203      	str	r2, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfb8      	it	lt
 8008ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ba8:	3402      	adds	r4, #2
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c78 <_svfiprintf_r+0x1fc>
 8008bb0:	7821      	ldrb	r1, [r4, #0]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	f7f7 fb1b 	bl	80001f0 <memchr>
 8008bba:	b140      	cbz	r0, 8008bce <_svfiprintf_r+0x152>
 8008bbc:	2340      	movs	r3, #64	; 0x40
 8008bbe:	eba0 000a 	sub.w	r0, r0, sl
 8008bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	4303      	orrs	r3, r0
 8008bca:	3401      	adds	r4, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4826      	ldr	r0, [pc, #152]	; (8008c6c <_svfiprintf_r+0x1f0>)
 8008bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bd8:	2206      	movs	r2, #6
 8008bda:	f7f7 fb09 	bl	80001f0 <memchr>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d038      	beq.n	8008c54 <_svfiprintf_r+0x1d8>
 8008be2:	4b23      	ldr	r3, [pc, #140]	; (8008c70 <_svfiprintf_r+0x1f4>)
 8008be4:	bb1b      	cbnz	r3, 8008c2e <_svfiprintf_r+0x1b2>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	3307      	adds	r3, #7
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	3308      	adds	r3, #8
 8008bf0:	9303      	str	r3, [sp, #12]
 8008bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf4:	4433      	add	r3, r6
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e767      	b.n	8008aca <_svfiprintf_r+0x4e>
 8008bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bfe:	460c      	mov	r4, r1
 8008c00:	2001      	movs	r0, #1
 8008c02:	e7a5      	b.n	8008b50 <_svfiprintf_r+0xd4>
 8008c04:	2300      	movs	r3, #0
 8008c06:	3401      	adds	r4, #1
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f04f 0c0a 	mov.w	ip, #10
 8008c10:	4620      	mov	r0, r4
 8008c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c16:	3a30      	subs	r2, #48	; 0x30
 8008c18:	2a09      	cmp	r2, #9
 8008c1a:	d903      	bls.n	8008c24 <_svfiprintf_r+0x1a8>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0c5      	beq.n	8008bac <_svfiprintf_r+0x130>
 8008c20:	9105      	str	r1, [sp, #20]
 8008c22:	e7c3      	b.n	8008bac <_svfiprintf_r+0x130>
 8008c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7f0      	b.n	8008c10 <_svfiprintf_r+0x194>
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <_svfiprintf_r+0x1f8>)
 8008c36:	a904      	add	r1, sp, #16
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f3af 8000 	nop.w
 8008c3e:	1c42      	adds	r2, r0, #1
 8008c40:	4606      	mov	r6, r0
 8008c42:	d1d6      	bne.n	8008bf2 <_svfiprintf_r+0x176>
 8008c44:	89ab      	ldrh	r3, [r5, #12]
 8008c46:	065b      	lsls	r3, r3, #25
 8008c48:	f53f af2c 	bmi.w	8008aa4 <_svfiprintf_r+0x28>
 8008c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c4e:	b01d      	add	sp, #116	; 0x74
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	ab03      	add	r3, sp, #12
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <_svfiprintf_r+0x1f8>)
 8008c5c:	a904      	add	r1, sp, #16
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f000 f87a 	bl	8008d58 <_printf_i>
 8008c64:	e7eb      	b.n	8008c3e <_svfiprintf_r+0x1c2>
 8008c66:	bf00      	nop
 8008c68:	0800939d 	.word	0x0800939d
 8008c6c:	080093a7 	.word	0x080093a7
 8008c70:	00000000 	.word	0x00000000
 8008c74:	080089c5 	.word	0x080089c5
 8008c78:	080093a3 	.word	0x080093a3

08008c7c <_printf_common>:
 8008c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	4616      	mov	r6, r2
 8008c82:	4699      	mov	r9, r3
 8008c84:	688a      	ldr	r2, [r1, #8]
 8008c86:	690b      	ldr	r3, [r1, #16]
 8008c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	bfb8      	it	lt
 8008c90:	4613      	movlt	r3, r2
 8008c92:	6033      	str	r3, [r6, #0]
 8008c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c98:	4607      	mov	r7, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	b10a      	cbz	r2, 8008ca2 <_printf_common+0x26>
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	6033      	str	r3, [r6, #0]
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	0699      	lsls	r1, r3, #26
 8008ca6:	bf42      	ittt	mi
 8008ca8:	6833      	ldrmi	r3, [r6, #0]
 8008caa:	3302      	addmi	r3, #2
 8008cac:	6033      	strmi	r3, [r6, #0]
 8008cae:	6825      	ldr	r5, [r4, #0]
 8008cb0:	f015 0506 	ands.w	r5, r5, #6
 8008cb4:	d106      	bne.n	8008cc4 <_printf_common+0x48>
 8008cb6:	f104 0a19 	add.w	sl, r4, #25
 8008cba:	68e3      	ldr	r3, [r4, #12]
 8008cbc:	6832      	ldr	r2, [r6, #0]
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	42ab      	cmp	r3, r5
 8008cc2:	dc26      	bgt.n	8008d12 <_printf_common+0x96>
 8008cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cc8:	1e13      	subs	r3, r2, #0
 8008cca:	6822      	ldr	r2, [r4, #0]
 8008ccc:	bf18      	it	ne
 8008cce:	2301      	movne	r3, #1
 8008cd0:	0692      	lsls	r2, r2, #26
 8008cd2:	d42b      	bmi.n	8008d2c <_printf_common+0xb0>
 8008cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c0      	blx	r8
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d01e      	beq.n	8008d20 <_printf_common+0xa4>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	68e5      	ldr	r5, [r4, #12]
 8008ce6:	6832      	ldr	r2, [r6, #0]
 8008ce8:	f003 0306 	and.w	r3, r3, #6
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	bf08      	it	eq
 8008cf0:	1aad      	subeq	r5, r5, r2
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	bf0c      	ite	eq
 8008cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cfc:	2500      	movne	r5, #0
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	bfc4      	itt	gt
 8008d02:	1a9b      	subgt	r3, r3, r2
 8008d04:	18ed      	addgt	r5, r5, r3
 8008d06:	2600      	movs	r6, #0
 8008d08:	341a      	adds	r4, #26
 8008d0a:	42b5      	cmp	r5, r6
 8008d0c:	d11a      	bne.n	8008d44 <_printf_common+0xc8>
 8008d0e:	2000      	movs	r0, #0
 8008d10:	e008      	b.n	8008d24 <_printf_common+0xa8>
 8008d12:	2301      	movs	r3, #1
 8008d14:	4652      	mov	r2, sl
 8008d16:	4649      	mov	r1, r9
 8008d18:	4638      	mov	r0, r7
 8008d1a:	47c0      	blx	r8
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d103      	bne.n	8008d28 <_printf_common+0xac>
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d28:	3501      	adds	r5, #1
 8008d2a:	e7c6      	b.n	8008cba <_printf_common+0x3e>
 8008d2c:	18e1      	adds	r1, r4, r3
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	2030      	movs	r0, #48	; 0x30
 8008d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d36:	4422      	add	r2, r4
 8008d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d40:	3302      	adds	r3, #2
 8008d42:	e7c7      	b.n	8008cd4 <_printf_common+0x58>
 8008d44:	2301      	movs	r3, #1
 8008d46:	4622      	mov	r2, r4
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	47c0      	blx	r8
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d0e6      	beq.n	8008d20 <_printf_common+0xa4>
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7d9      	b.n	8008d0a <_printf_common+0x8e>
	...

08008d58 <_printf_i>:
 8008d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	7e0f      	ldrb	r7, [r1, #24]
 8008d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d60:	2f78      	cmp	r7, #120	; 0x78
 8008d62:	4691      	mov	r9, r2
 8008d64:	4680      	mov	r8, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	469a      	mov	sl, r3
 8008d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d6e:	d807      	bhi.n	8008d80 <_printf_i+0x28>
 8008d70:	2f62      	cmp	r7, #98	; 0x62
 8008d72:	d80a      	bhi.n	8008d8a <_printf_i+0x32>
 8008d74:	2f00      	cmp	r7, #0
 8008d76:	f000 80d8 	beq.w	8008f2a <_printf_i+0x1d2>
 8008d7a:	2f58      	cmp	r7, #88	; 0x58
 8008d7c:	f000 80a3 	beq.w	8008ec6 <_printf_i+0x16e>
 8008d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d88:	e03a      	b.n	8008e00 <_printf_i+0xa8>
 8008d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d8e:	2b15      	cmp	r3, #21
 8008d90:	d8f6      	bhi.n	8008d80 <_printf_i+0x28>
 8008d92:	a101      	add	r1, pc, #4	; (adr r1, 8008d98 <_printf_i+0x40>)
 8008d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d98:	08008df1 	.word	0x08008df1
 8008d9c:	08008e05 	.word	0x08008e05
 8008da0:	08008d81 	.word	0x08008d81
 8008da4:	08008d81 	.word	0x08008d81
 8008da8:	08008d81 	.word	0x08008d81
 8008dac:	08008d81 	.word	0x08008d81
 8008db0:	08008e05 	.word	0x08008e05
 8008db4:	08008d81 	.word	0x08008d81
 8008db8:	08008d81 	.word	0x08008d81
 8008dbc:	08008d81 	.word	0x08008d81
 8008dc0:	08008d81 	.word	0x08008d81
 8008dc4:	08008f11 	.word	0x08008f11
 8008dc8:	08008e35 	.word	0x08008e35
 8008dcc:	08008ef3 	.word	0x08008ef3
 8008dd0:	08008d81 	.word	0x08008d81
 8008dd4:	08008d81 	.word	0x08008d81
 8008dd8:	08008f33 	.word	0x08008f33
 8008ddc:	08008d81 	.word	0x08008d81
 8008de0:	08008e35 	.word	0x08008e35
 8008de4:	08008d81 	.word	0x08008d81
 8008de8:	08008d81 	.word	0x08008d81
 8008dec:	08008efb 	.word	0x08008efb
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	602a      	str	r2, [r5, #0]
 8008df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0a3      	b.n	8008f4c <_printf_i+0x1f4>
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	6829      	ldr	r1, [r5, #0]
 8008e08:	0606      	lsls	r6, r0, #24
 8008e0a:	f101 0304 	add.w	r3, r1, #4
 8008e0e:	d50a      	bpl.n	8008e26 <_printf_i+0xce>
 8008e10:	680e      	ldr	r6, [r1, #0]
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	2e00      	cmp	r6, #0
 8008e16:	da03      	bge.n	8008e20 <_printf_i+0xc8>
 8008e18:	232d      	movs	r3, #45	; 0x2d
 8008e1a:	4276      	negs	r6, r6
 8008e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e20:	485e      	ldr	r0, [pc, #376]	; (8008f9c <_printf_i+0x244>)
 8008e22:	230a      	movs	r3, #10
 8008e24:	e019      	b.n	8008e5a <_printf_i+0x102>
 8008e26:	680e      	ldr	r6, [r1, #0]
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e2e:	bf18      	it	ne
 8008e30:	b236      	sxthne	r6, r6
 8008e32:	e7ef      	b.n	8008e14 <_printf_i+0xbc>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	6820      	ldr	r0, [r4, #0]
 8008e38:	1d19      	adds	r1, r3, #4
 8008e3a:	6029      	str	r1, [r5, #0]
 8008e3c:	0601      	lsls	r1, r0, #24
 8008e3e:	d501      	bpl.n	8008e44 <_printf_i+0xec>
 8008e40:	681e      	ldr	r6, [r3, #0]
 8008e42:	e002      	b.n	8008e4a <_printf_i+0xf2>
 8008e44:	0646      	lsls	r6, r0, #25
 8008e46:	d5fb      	bpl.n	8008e40 <_printf_i+0xe8>
 8008e48:	881e      	ldrh	r6, [r3, #0]
 8008e4a:	4854      	ldr	r0, [pc, #336]	; (8008f9c <_printf_i+0x244>)
 8008e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e4e:	bf0c      	ite	eq
 8008e50:	2308      	moveq	r3, #8
 8008e52:	230a      	movne	r3, #10
 8008e54:	2100      	movs	r1, #0
 8008e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e5a:	6865      	ldr	r5, [r4, #4]
 8008e5c:	60a5      	str	r5, [r4, #8]
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	bfa2      	ittt	ge
 8008e62:	6821      	ldrge	r1, [r4, #0]
 8008e64:	f021 0104 	bicge.w	r1, r1, #4
 8008e68:	6021      	strge	r1, [r4, #0]
 8008e6a:	b90e      	cbnz	r6, 8008e70 <_printf_i+0x118>
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	d04d      	beq.n	8008f0c <_printf_i+0x1b4>
 8008e70:	4615      	mov	r5, r2
 8008e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e76:	fb03 6711 	mls	r7, r3, r1, r6
 8008e7a:	5dc7      	ldrb	r7, [r0, r7]
 8008e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e80:	4637      	mov	r7, r6
 8008e82:	42bb      	cmp	r3, r7
 8008e84:	460e      	mov	r6, r1
 8008e86:	d9f4      	bls.n	8008e72 <_printf_i+0x11a>
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d10b      	bne.n	8008ea4 <_printf_i+0x14c>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	07de      	lsls	r6, r3, #31
 8008e90:	d508      	bpl.n	8008ea4 <_printf_i+0x14c>
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	6861      	ldr	r1, [r4, #4]
 8008e96:	4299      	cmp	r1, r3
 8008e98:	bfde      	ittt	le
 8008e9a:	2330      	movle	r3, #48	; 0x30
 8008e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ea4:	1b52      	subs	r2, r2, r5
 8008ea6:	6122      	str	r2, [r4, #16]
 8008ea8:	f8cd a000 	str.w	sl, [sp]
 8008eac:	464b      	mov	r3, r9
 8008eae:	aa03      	add	r2, sp, #12
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	f7ff fee2 	bl	8008c7c <_printf_common>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d14c      	bne.n	8008f56 <_printf_i+0x1fe>
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	b004      	add	sp, #16
 8008ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec6:	4835      	ldr	r0, [pc, #212]	; (8008f9c <_printf_i+0x244>)
 8008ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ecc:	6829      	ldr	r1, [r5, #0]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ed4:	6029      	str	r1, [r5, #0]
 8008ed6:	061d      	lsls	r5, r3, #24
 8008ed8:	d514      	bpl.n	8008f04 <_printf_i+0x1ac>
 8008eda:	07df      	lsls	r7, r3, #31
 8008edc:	bf44      	itt	mi
 8008ede:	f043 0320 	orrmi.w	r3, r3, #32
 8008ee2:	6023      	strmi	r3, [r4, #0]
 8008ee4:	b91e      	cbnz	r6, 8008eee <_printf_i+0x196>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f023 0320 	bic.w	r3, r3, #32
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	2310      	movs	r3, #16
 8008ef0:	e7b0      	b.n	8008e54 <_printf_i+0xfc>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f043 0320 	orr.w	r3, r3, #32
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	2378      	movs	r3, #120	; 0x78
 8008efc:	4828      	ldr	r0, [pc, #160]	; (8008fa0 <_printf_i+0x248>)
 8008efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f02:	e7e3      	b.n	8008ecc <_printf_i+0x174>
 8008f04:	0659      	lsls	r1, r3, #25
 8008f06:	bf48      	it	mi
 8008f08:	b2b6      	uxthmi	r6, r6
 8008f0a:	e7e6      	b.n	8008eda <_printf_i+0x182>
 8008f0c:	4615      	mov	r5, r2
 8008f0e:	e7bb      	b.n	8008e88 <_printf_i+0x130>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	6826      	ldr	r6, [r4, #0]
 8008f14:	6961      	ldr	r1, [r4, #20]
 8008f16:	1d18      	adds	r0, r3, #4
 8008f18:	6028      	str	r0, [r5, #0]
 8008f1a:	0635      	lsls	r5, r6, #24
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	d501      	bpl.n	8008f24 <_printf_i+0x1cc>
 8008f20:	6019      	str	r1, [r3, #0]
 8008f22:	e002      	b.n	8008f2a <_printf_i+0x1d2>
 8008f24:	0670      	lsls	r0, r6, #25
 8008f26:	d5fb      	bpl.n	8008f20 <_printf_i+0x1c8>
 8008f28:	8019      	strh	r1, [r3, #0]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	4615      	mov	r5, r2
 8008f30:	e7ba      	b.n	8008ea8 <_printf_i+0x150>
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	602a      	str	r2, [r5, #0]
 8008f38:	681d      	ldr	r5, [r3, #0]
 8008f3a:	6862      	ldr	r2, [r4, #4]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f7f7 f956 	bl	80001f0 <memchr>
 8008f44:	b108      	cbz	r0, 8008f4a <_printf_i+0x1f2>
 8008f46:	1b40      	subs	r0, r0, r5
 8008f48:	6060      	str	r0, [r4, #4]
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f54:	e7a8      	b.n	8008ea8 <_printf_i+0x150>
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	47d0      	blx	sl
 8008f60:	3001      	adds	r0, #1
 8008f62:	d0ab      	beq.n	8008ebc <_printf_i+0x164>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	079b      	lsls	r3, r3, #30
 8008f68:	d413      	bmi.n	8008f92 <_printf_i+0x23a>
 8008f6a:	68e0      	ldr	r0, [r4, #12]
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	4298      	cmp	r0, r3
 8008f70:	bfb8      	it	lt
 8008f72:	4618      	movlt	r0, r3
 8008f74:	e7a4      	b.n	8008ec0 <_printf_i+0x168>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4632      	mov	r2, r6
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	47d0      	blx	sl
 8008f80:	3001      	adds	r0, #1
 8008f82:	d09b      	beq.n	8008ebc <_printf_i+0x164>
 8008f84:	3501      	adds	r5, #1
 8008f86:	68e3      	ldr	r3, [r4, #12]
 8008f88:	9903      	ldr	r1, [sp, #12]
 8008f8a:	1a5b      	subs	r3, r3, r1
 8008f8c:	42ab      	cmp	r3, r5
 8008f8e:	dcf2      	bgt.n	8008f76 <_printf_i+0x21e>
 8008f90:	e7eb      	b.n	8008f6a <_printf_i+0x212>
 8008f92:	2500      	movs	r5, #0
 8008f94:	f104 0619 	add.w	r6, r4, #25
 8008f98:	e7f5      	b.n	8008f86 <_printf_i+0x22e>
 8008f9a:	bf00      	nop
 8008f9c:	080093ae 	.word	0x080093ae
 8008fa0:	080093bf 	.word	0x080093bf

08008fa4 <memmove>:
 8008fa4:	4288      	cmp	r0, r1
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	eb01 0402 	add.w	r4, r1, r2
 8008fac:	d902      	bls.n	8008fb4 <memmove+0x10>
 8008fae:	4284      	cmp	r4, r0
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	d807      	bhi.n	8008fc4 <memmove+0x20>
 8008fb4:	1e43      	subs	r3, r0, #1
 8008fb6:	42a1      	cmp	r1, r4
 8008fb8:	d008      	beq.n	8008fcc <memmove+0x28>
 8008fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fc2:	e7f8      	b.n	8008fb6 <memmove+0x12>
 8008fc4:	4402      	add	r2, r0
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	428a      	cmp	r2, r1
 8008fca:	d100      	bne.n	8008fce <memmove+0x2a>
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fd6:	e7f7      	b.n	8008fc8 <memmove+0x24>

08008fd8 <_free_r>:
 8008fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fda:	2900      	cmp	r1, #0
 8008fdc:	d044      	beq.n	8009068 <_free_r+0x90>
 8008fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe2:	9001      	str	r0, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fea:	bfb8      	it	lt
 8008fec:	18e4      	addlt	r4, r4, r3
 8008fee:	f000 f913 	bl	8009218 <__malloc_lock>
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <_free_r+0x94>)
 8008ff4:	9801      	ldr	r0, [sp, #4]
 8008ff6:	6813      	ldr	r3, [r2, #0]
 8008ff8:	b933      	cbnz	r3, 8009008 <_free_r+0x30>
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	6014      	str	r4, [r2, #0]
 8008ffe:	b003      	add	sp, #12
 8009000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009004:	f000 b90e 	b.w	8009224 <__malloc_unlock>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d908      	bls.n	800901e <_free_r+0x46>
 800900c:	6825      	ldr	r5, [r4, #0]
 800900e:	1961      	adds	r1, r4, r5
 8009010:	428b      	cmp	r3, r1
 8009012:	bf01      	itttt	eq
 8009014:	6819      	ldreq	r1, [r3, #0]
 8009016:	685b      	ldreq	r3, [r3, #4]
 8009018:	1949      	addeq	r1, r1, r5
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	e7ed      	b.n	8008ffa <_free_r+0x22>
 800901e:	461a      	mov	r2, r3
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b10b      	cbz	r3, 8009028 <_free_r+0x50>
 8009024:	42a3      	cmp	r3, r4
 8009026:	d9fa      	bls.n	800901e <_free_r+0x46>
 8009028:	6811      	ldr	r1, [r2, #0]
 800902a:	1855      	adds	r5, r2, r1
 800902c:	42a5      	cmp	r5, r4
 800902e:	d10b      	bne.n	8009048 <_free_r+0x70>
 8009030:	6824      	ldr	r4, [r4, #0]
 8009032:	4421      	add	r1, r4
 8009034:	1854      	adds	r4, r2, r1
 8009036:	42a3      	cmp	r3, r4
 8009038:	6011      	str	r1, [r2, #0]
 800903a:	d1e0      	bne.n	8008ffe <_free_r+0x26>
 800903c:	681c      	ldr	r4, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	6053      	str	r3, [r2, #4]
 8009042:	4421      	add	r1, r4
 8009044:	6011      	str	r1, [r2, #0]
 8009046:	e7da      	b.n	8008ffe <_free_r+0x26>
 8009048:	d902      	bls.n	8009050 <_free_r+0x78>
 800904a:	230c      	movs	r3, #12
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	e7d6      	b.n	8008ffe <_free_r+0x26>
 8009050:	6825      	ldr	r5, [r4, #0]
 8009052:	1961      	adds	r1, r4, r5
 8009054:	428b      	cmp	r3, r1
 8009056:	bf04      	itt	eq
 8009058:	6819      	ldreq	r1, [r3, #0]
 800905a:	685b      	ldreq	r3, [r3, #4]
 800905c:	6063      	str	r3, [r4, #4]
 800905e:	bf04      	itt	eq
 8009060:	1949      	addeq	r1, r1, r5
 8009062:	6021      	streq	r1, [r4, #0]
 8009064:	6054      	str	r4, [r2, #4]
 8009066:	e7ca      	b.n	8008ffe <_free_r+0x26>
 8009068:	b003      	add	sp, #12
 800906a:	bd30      	pop	{r4, r5, pc}
 800906c:	20000434 	.word	0x20000434

08009070 <sbrk_aligned>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4e0e      	ldr	r6, [pc, #56]	; (80090ac <sbrk_aligned+0x3c>)
 8009074:	460c      	mov	r4, r1
 8009076:	6831      	ldr	r1, [r6, #0]
 8009078:	4605      	mov	r5, r0
 800907a:	b911      	cbnz	r1, 8009082 <sbrk_aligned+0x12>
 800907c:	f000 f8bc 	bl	80091f8 <_sbrk_r>
 8009080:	6030      	str	r0, [r6, #0]
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f000 f8b7 	bl	80091f8 <_sbrk_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d00a      	beq.n	80090a4 <sbrk_aligned+0x34>
 800908e:	1cc4      	adds	r4, r0, #3
 8009090:	f024 0403 	bic.w	r4, r4, #3
 8009094:	42a0      	cmp	r0, r4
 8009096:	d007      	beq.n	80090a8 <sbrk_aligned+0x38>
 8009098:	1a21      	subs	r1, r4, r0
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f8ac 	bl	80091f8 <_sbrk_r>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d101      	bne.n	80090a8 <sbrk_aligned+0x38>
 80090a4:	f04f 34ff 	mov.w	r4, #4294967295
 80090a8:	4620      	mov	r0, r4
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	20000438 	.word	0x20000438

080090b0 <_malloc_r>:
 80090b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b4:	1ccd      	adds	r5, r1, #3
 80090b6:	f025 0503 	bic.w	r5, r5, #3
 80090ba:	3508      	adds	r5, #8
 80090bc:	2d0c      	cmp	r5, #12
 80090be:	bf38      	it	cc
 80090c0:	250c      	movcc	r5, #12
 80090c2:	2d00      	cmp	r5, #0
 80090c4:	4607      	mov	r7, r0
 80090c6:	db01      	blt.n	80090cc <_malloc_r+0x1c>
 80090c8:	42a9      	cmp	r1, r5
 80090ca:	d905      	bls.n	80090d8 <_malloc_r+0x28>
 80090cc:	230c      	movs	r3, #12
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	2600      	movs	r6, #0
 80090d2:	4630      	mov	r0, r6
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	4e2e      	ldr	r6, [pc, #184]	; (8009194 <_malloc_r+0xe4>)
 80090da:	f000 f89d 	bl	8009218 <__malloc_lock>
 80090de:	6833      	ldr	r3, [r6, #0]
 80090e0:	461c      	mov	r4, r3
 80090e2:	bb34      	cbnz	r4, 8009132 <_malloc_r+0x82>
 80090e4:	4629      	mov	r1, r5
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7ff ffc2 	bl	8009070 <sbrk_aligned>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	4604      	mov	r4, r0
 80090f0:	d14d      	bne.n	800918e <_malloc_r+0xde>
 80090f2:	6834      	ldr	r4, [r6, #0]
 80090f4:	4626      	mov	r6, r4
 80090f6:	2e00      	cmp	r6, #0
 80090f8:	d140      	bne.n	800917c <_malloc_r+0xcc>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	4631      	mov	r1, r6
 80090fe:	4638      	mov	r0, r7
 8009100:	eb04 0803 	add.w	r8, r4, r3
 8009104:	f000 f878 	bl	80091f8 <_sbrk_r>
 8009108:	4580      	cmp	r8, r0
 800910a:	d13a      	bne.n	8009182 <_malloc_r+0xd2>
 800910c:	6821      	ldr	r1, [r4, #0]
 800910e:	3503      	adds	r5, #3
 8009110:	1a6d      	subs	r5, r5, r1
 8009112:	f025 0503 	bic.w	r5, r5, #3
 8009116:	3508      	adds	r5, #8
 8009118:	2d0c      	cmp	r5, #12
 800911a:	bf38      	it	cc
 800911c:	250c      	movcc	r5, #12
 800911e:	4629      	mov	r1, r5
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff ffa5 	bl	8009070 <sbrk_aligned>
 8009126:	3001      	adds	r0, #1
 8009128:	d02b      	beq.n	8009182 <_malloc_r+0xd2>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	442b      	add	r3, r5
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	e00e      	b.n	8009150 <_malloc_r+0xa0>
 8009132:	6822      	ldr	r2, [r4, #0]
 8009134:	1b52      	subs	r2, r2, r5
 8009136:	d41e      	bmi.n	8009176 <_malloc_r+0xc6>
 8009138:	2a0b      	cmp	r2, #11
 800913a:	d916      	bls.n	800916a <_malloc_r+0xba>
 800913c:	1961      	adds	r1, r4, r5
 800913e:	42a3      	cmp	r3, r4
 8009140:	6025      	str	r5, [r4, #0]
 8009142:	bf18      	it	ne
 8009144:	6059      	strne	r1, [r3, #4]
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	bf08      	it	eq
 800914a:	6031      	streq	r1, [r6, #0]
 800914c:	5162      	str	r2, [r4, r5]
 800914e:	604b      	str	r3, [r1, #4]
 8009150:	4638      	mov	r0, r7
 8009152:	f104 060b 	add.w	r6, r4, #11
 8009156:	f000 f865 	bl	8009224 <__malloc_unlock>
 800915a:	f026 0607 	bic.w	r6, r6, #7
 800915e:	1d23      	adds	r3, r4, #4
 8009160:	1af2      	subs	r2, r6, r3
 8009162:	d0b6      	beq.n	80090d2 <_malloc_r+0x22>
 8009164:	1b9b      	subs	r3, r3, r6
 8009166:	50a3      	str	r3, [r4, r2]
 8009168:	e7b3      	b.n	80090d2 <_malloc_r+0x22>
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	42a3      	cmp	r3, r4
 800916e:	bf0c      	ite	eq
 8009170:	6032      	streq	r2, [r6, #0]
 8009172:	605a      	strne	r2, [r3, #4]
 8009174:	e7ec      	b.n	8009150 <_malloc_r+0xa0>
 8009176:	4623      	mov	r3, r4
 8009178:	6864      	ldr	r4, [r4, #4]
 800917a:	e7b2      	b.n	80090e2 <_malloc_r+0x32>
 800917c:	4634      	mov	r4, r6
 800917e:	6876      	ldr	r6, [r6, #4]
 8009180:	e7b9      	b.n	80090f6 <_malloc_r+0x46>
 8009182:	230c      	movs	r3, #12
 8009184:	603b      	str	r3, [r7, #0]
 8009186:	4638      	mov	r0, r7
 8009188:	f000 f84c 	bl	8009224 <__malloc_unlock>
 800918c:	e7a1      	b.n	80090d2 <_malloc_r+0x22>
 800918e:	6025      	str	r5, [r4, #0]
 8009190:	e7de      	b.n	8009150 <_malloc_r+0xa0>
 8009192:	bf00      	nop
 8009194:	20000434 	.word	0x20000434

08009198 <_realloc_r>:
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4680      	mov	r8, r0
 800919e:	4614      	mov	r4, r2
 80091a0:	460e      	mov	r6, r1
 80091a2:	b921      	cbnz	r1, 80091ae <_realloc_r+0x16>
 80091a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	4611      	mov	r1, r2
 80091aa:	f7ff bf81 	b.w	80090b0 <_malloc_r>
 80091ae:	b92a      	cbnz	r2, 80091bc <_realloc_r+0x24>
 80091b0:	f7ff ff12 	bl	8008fd8 <_free_r>
 80091b4:	4625      	mov	r5, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091bc:	f000 f838 	bl	8009230 <_malloc_usable_size_r>
 80091c0:	4284      	cmp	r4, r0
 80091c2:	4607      	mov	r7, r0
 80091c4:	d802      	bhi.n	80091cc <_realloc_r+0x34>
 80091c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ca:	d812      	bhi.n	80091f2 <_realloc_r+0x5a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff ff6e 	bl	80090b0 <_malloc_r>
 80091d4:	4605      	mov	r5, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d0ed      	beq.n	80091b6 <_realloc_r+0x1e>
 80091da:	42bc      	cmp	r4, r7
 80091dc:	4622      	mov	r2, r4
 80091de:	4631      	mov	r1, r6
 80091e0:	bf28      	it	cs
 80091e2:	463a      	movcs	r2, r7
 80091e4:	f7ff fb24 	bl	8008830 <memcpy>
 80091e8:	4631      	mov	r1, r6
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff fef4 	bl	8008fd8 <_free_r>
 80091f0:	e7e1      	b.n	80091b6 <_realloc_r+0x1e>
 80091f2:	4635      	mov	r5, r6
 80091f4:	e7df      	b.n	80091b6 <_realloc_r+0x1e>
	...

080091f8 <_sbrk_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d06      	ldr	r5, [pc, #24]	; (8009214 <_sbrk_r+0x1c>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	f7f9 fc86 	bl	8002b14 <_sbrk>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_sbrk_r+0x1a>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_sbrk_r+0x1a>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	2000043c 	.word	0x2000043c

08009218 <__malloc_lock>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__malloc_lock+0x8>)
 800921a:	f000 b811 	b.w	8009240 <__retarget_lock_acquire_recursive>
 800921e:	bf00      	nop
 8009220:	20000440 	.word	0x20000440

08009224 <__malloc_unlock>:
 8009224:	4801      	ldr	r0, [pc, #4]	; (800922c <__malloc_unlock+0x8>)
 8009226:	f000 b80c 	b.w	8009242 <__retarget_lock_release_recursive>
 800922a:	bf00      	nop
 800922c:	20000440 	.word	0x20000440

08009230 <_malloc_usable_size_r>:
 8009230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009234:	1f18      	subs	r0, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfbc      	itt	lt
 800923a:	580b      	ldrlt	r3, [r1, r0]
 800923c:	18c0      	addlt	r0, r0, r3
 800923e:	4770      	bx	lr

08009240 <__retarget_lock_acquire_recursive>:
 8009240:	4770      	bx	lr

08009242 <__retarget_lock_release_recursive>:
 8009242:	4770      	bx	lr

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
