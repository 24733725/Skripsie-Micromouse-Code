
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006984  08006984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af4  08006af4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006afc  08006afc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000084  08006b88  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006b88  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001531a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b30  00000000  00000000  000353ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a5b7  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019b80  00000000  00000000  000537df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0cea  00000000  00000000  0006d35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010e049  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001200  00000000  00000000  0010e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005690  00000000  00000000  0010f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800696c 	.word	0x0800696c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800696c 	.word	0x0800696c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f001 fb57 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f883 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 fbef 	bl	8001570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d92:	f000 f92f 	bl	8000ff4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d96:	f000 f95b 	bl	8001050 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000d9a:	f000 f8d9 	bl	8000f50 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000d9e:	f000 f985 	bl	80010ac <MX_I2C3_Init>
  MX_TIM3_Init();
 8000da2:	f000 fb13 	bl	80013cc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000da6:	f000 fb65 	bl	8001474 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000daa:	f000 f9e3 	bl	8001174 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dae:	f000 fa8d 	bl	80012cc <MX_TIM2_Init>
  MX_FATFS_Init();
 8000db2:	f004 ffdd 	bl	8005d70 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000db6:	f000 fbb1 	bl	800151c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000dba:	f000 f9a5 	bl	8001108 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	motorsInit();
 8000dbe:	f000 fc55 	bl	800166c <motorsInit>
	uart_startup_transmit();
 8000dc2:	f001 fa79 	bl	80022b8 <uart_startup_transmit>
	HAL_ADC_Start(&hadc1);
 8000dc6:	4829      	ldr	r0, [pc, #164]	; (8000e6c <main+0xec>)
 8000dc8:	f001 fc10 	bl	80025ec <HAL_ADC_Start>

//	uint16_t L_vals[512];
//	uint16_t R_vals[512];

	forward(0);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 fc81 	bl	80016d4 <forward>
	HAL_Delay(3000);
 8000dd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dd6:	f001 fba1 	bl	800251c <HAL_Delay>
	uint32_t prev_ctr_loop_time = HAL_GetTick();
 8000dda:	f001 fb93 	bl	8002504 <HAL_GetTick>
 8000dde:	6078      	str	r0, [r7, #4]
	uint32_t prev_main_loop_time = HAL_GetTick();
 8000de0:	f001 fb90 	bl	8002504 <HAL_GetTick>
 8000de4:	6038      	str	r0, [r7, #0]
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Laddress+2*i, L_vals[i]);
//		HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Raddress+2*i, R_vals[i]);
//		HAL_Delay(1);
//	}
//	HAL_FLASH_Lock();
	R_speed_setpoint = 600;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <main+0xf0>)
 8000de8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000dec:	801a      	strh	r2, [r3, #0]
	L_speed_setpoint = 600;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0xf4>)
 8000df0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000df4:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		//	  sprintf(buff, "L:%d R:%d V:%d\n",(int)htim5.Instance->CNT,(int)htim3.Instance->CNT, (int)HAL_ADC_GetValue(&hadc1));

		//	  sprintf(buff, "%d",(int)HAL_I2C_GetError(&hi2c1));
		uart_task();
 8000df6:	f001 fa87 	bl	8002308 <uart_task>
		if (HAL_GetTick() - prev_main_loop_time >= 500){
 8000dfa:	f001 fb83 	bl	8002504 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e08:	d321      	bcc.n	8000e4e <main+0xce>
			prev_main_loop_time = HAL_GetTick();
 8000e0a:	f001 fb7b 	bl	8002504 <HAL_GetTick>
 8000e0e:	6038      	str	r0, [r7, #0]
//			sprintf(send_buffer, "L:%d > %d R:%d > %d\n",(int)L_prev_enc_count,(int)L_ctrl_signal,(int)R_prev_enc_count, (int)R_ctrl_signal);
			sprintf(send_buffer, "R:%d C: %d E:%d\n", (int)L_prev_enc_count, (int)L_ctrl_signal, (int)L_error);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <main+0xf8>)
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <main+0xfc>)
 8000e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x100>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	460b      	mov	r3, r1
 8000e28:	4916      	ldr	r1, [pc, #88]	; (8000e84 <main+0x104>)
 8000e2a:	4817      	ldr	r0, [pc, #92]	; (8000e88 <main+0x108>)
 8000e2c:	f005 f89c 	bl	8005f68 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 8000e30:	4815      	ldr	r0, [pc, #84]	; (8000e88 <main+0x108>)
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4912      	ldr	r1, [pc, #72]	; (8000e88 <main+0x108>)
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <main+0x10c>)
 8000e40:	f004 f827 	bl	8004e92 <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <main+0x110>)
 8000e4a:	f002 f9f2 	bl	8003232 <HAL_GPIO_TogglePin>
		}
		// main control loop:
		if (HAL_GetTick() - prev_ctr_loop_time >= CONTROL_LOOP_PERIOD_MS){
 8000e4e:	f001 fb59 	bl	8002504 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b13      	cmp	r3, #19
 8000e5a:	d9cc      	bls.n	8000df6 <main+0x76>
			prev_ctr_loop_time = HAL_GetTick();
 8000e5c:	f001 fb52 	bl	8002504 <HAL_GetTick>
 8000e60:	6078      	str	r0, [r7, #4]
			R_motor_feedback_control();
 8000e62:	f000 fc99 	bl	8001798 <R_motor_feedback_control>
			L_motor_feedback_control();
 8000e66:	f000 fd6f 	bl	8001948 <L_motor_feedback_control>
		uart_task();
 8000e6a:	e7c4      	b.n	8000df6 <main+0x76>
 8000e6c:	20000120 	.word	0x20000120
 8000e70:	20000104 	.word	0x20000104
 8000e74:	20000102 	.word	0x20000102
 8000e78:	20000106 	.word	0x20000106
 8000e7c:	2000010a 	.word	0x2000010a
 8000e80:	20000110 	.word	0x20000110
 8000e84:	08006984 	.word	0x08006984
 8000e88:	200000a0 	.word	0x200000a0
 8000e8c:	200003dc 	.word	0x200003dc
 8000e90:	40020800 	.word	0x40020800

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	; 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 f858 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <SystemClock_Config+0xb4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <SystemClock_Config+0xb4>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <SystemClock_Config+0xb4>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <SystemClock_Config+0xb8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <SystemClock_Config+0xb8>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <SystemClock_Config+0xb8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 faf3 	bl	80034f0 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f10:	f000 fba6 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fd56 	bl	80039e0 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f3a:	f000 fb91 	bl	8001660 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	; 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC1_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xa0>)
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fb0:	f001 fad8 	bl	8002564 <HAL_ADC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 fb51 	bl	8001660 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fd0:	f001 fbc0 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fda:	f000 fb41 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000120 	.word	0x20000120
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_I2C1_Init+0x50>)
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <MX_I2C1_Init+0x54>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_I2C1_Init+0x50>)
 8001000:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_I2C1_Init+0x58>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_I2C1_Init+0x50>)
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_I2C1_Init+0x50>)
 8001032:	f002 f919 	bl	8003268 <HAL_I2C_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800103c:	f000 fb10 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000168 	.word	0x20000168
 8001048:	40005400 	.word	0x40005400
 800104c:	00061a80 	.word	0x00061a80

08001050 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_I2C2_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C2_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_I2C2_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_I2C2_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_I2C2_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C2_Init+0x50>)
 800108e:	f002 f8eb 	bl	8003268 <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 fae2 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001bc 	.word	0x200001bc
 80010a4:	40005800 	.word	0x40005800
 80010a8:	00061a80 	.word	0x00061a80

080010ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_I2C3_Init+0x50>)
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <MX_I2C3_Init+0x54>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_I2C3_Init+0x50>)
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_I2C3_Init+0x58>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_I2C3_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_I2C3_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_I2C3_Init+0x50>)
 80010ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_I2C3_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_I2C3_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_I2C3_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_I2C3_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_I2C3_Init+0x50>)
 80010ea:	f002 f8bd 	bl	8003268 <HAL_I2C_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010f4:	f000 fab4 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000210 	.word	0x20000210
 8001100:	40005c00 	.word	0x40005c00
 8001104:	00061a80 	.word	0x00061a80

08001108 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_SPI2_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <MX_SPI2_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_SPI2_Init+0x64>)
 8001114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_SPI2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_SPI2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_SPI2_Init+0x64>)
 8001134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001138:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_SPI2_Init+0x64>)
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_SPI2_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_SPI2_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_SPI2_Init+0x64>)
 8001154:	220a      	movs	r2, #10
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_SPI2_Init+0x64>)
 800115a:	f002 fe21 	bl	8003da0 <HAL_SPI_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 fa7c 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000264 	.word	0x20000264
 8001170:	40003800 	.word	0x40003800

08001174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	; 0x58
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fed3 	bl	8005f58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011b4:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <MX_TIM1_Init+0x154>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80011b8:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011ba:	220f      	movs	r2, #15
 80011bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d2:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011e0:	f002 fe67 	bl	8003eb2 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ea:	f000 fa39 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011f8:	4619      	mov	r1, r3
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <MX_TIM1_Init+0x150>)
 80011fc:	f003 f9a8 	bl	8004550 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001206:	f000 fa2b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <MX_TIM1_Init+0x150>)
 800120c:	f002 fea0 	bl	8003f50 <HAL_TIM_PWM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001216:	f000 fa23 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001226:	4619      	mov	r1, r3
 8001228:	4826      	ldr	r0, [pc, #152]	; (80012c4 <MX_TIM1_Init+0x150>)
 800122a:	f003 fd25 	bl	8004c78 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001234:	f000 fa14 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <MX_TIM1_Init+0x150>)
 800125e:	f003 f8b5 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001268:	f000 f9fa 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	2208      	movs	r2, #8
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM1_Init+0x150>)
 8001276:	f003 f8a9 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001280:	f000 f9ee 	bl	8001660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM1_Init+0x150>)
 80012a8:	f003 fd54 	bl	8004d54 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012b2:	f000 f9d5 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM1_Init+0x150>)
 80012b8:	f000 feaa 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3758      	adds	r7, #88	; 0x58
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200002bc 	.word	0x200002bc
 80012c8:	40010000 	.word	0x40010000

080012cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_TIM2_Init+0xfc>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001306:	220f      	movs	r2, #15
 8001308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_TIM2_Init+0xfc>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_TIM2_Init+0xfc>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001324:	4828      	ldr	r0, [pc, #160]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001326:	f002 fdc4 	bl	8003eb2 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001330:	f000 f996 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	4619      	mov	r1, r3
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001342:	f003 f905 	bl	8004550 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800134c:	f000 f988 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001350:	481d      	ldr	r0, [pc, #116]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001352:	f002 fdfd 	bl	8003f50 <HAL_TIM_PWM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800135c:	f000 f980 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4619      	mov	r1, r3
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001370:	f003 fc82 	bl	8004c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800137a:	f000 f971 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	; 0x60
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM2_Init+0xfc>)
 8001396:	f003 f819 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013a0:	f000 f95e 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2204      	movs	r2, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM2_Init+0xfc>)
 80013ac:	f003 f80e 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013b6:	f000 f953 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM2_Init+0xfc>)
 80013bc:	f000 fe28 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000304 	.word	0x20000304

080013cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fdbc 	bl	8005f58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM3_Init+0xa0>)
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_TIM3_Init+0xa4>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_TIM3_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM3_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM3_Init+0xa0>)
 80013fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001400:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM3_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM3_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800140e:	2303      	movs	r3, #3
 8001410:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM3_Init+0xa0>)
 800143a:	f002 fe93 	bl	8004164 <HAL_TIM_Encoder_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 f90c 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM3_Init+0xa0>)
 8001456:	f003 fc0f 	bl	8004c78 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 f8fe 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000034c 	.word	0x2000034c
 8001470:	40000400 	.word	0x40000400

08001474 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fd68 	bl	8005f58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_TIM5_Init+0xa0>)
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <MX_TIM5_Init+0xa4>)
 8001494:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <MX_TIM5_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM5_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_TIM5_Init+0xa0>)
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM5_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_TIM5_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014b6:	2303      	movs	r3, #3
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014ba:	2302      	movs	r3, #2
 80014bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ce:	2301      	movs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_TIM5_Init+0xa0>)
 80014e2:	f002 fe3f 	bl	8004164 <HAL_TIM_Encoder_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80014ec:	f000 f8b8 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM5_Init+0xa0>)
 80014fe:	f003 fbbb 	bl	8004c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001508:	f000 f8aa 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000394 	.word	0x20000394
 8001518:	40000c00 	.word	0x40000c00

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f003 fc50 	bl	8004df8 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f87f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003dc 	.word	0x200003dc
 800156c:	40004400 	.word	0x40004400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <MX_GPIO_Init+0xe4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <MX_GPIO_Init+0xe4>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <MX_GPIO_Init+0xe4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015e0:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_GPIO_Init+0xe8>)
 80015e2:	f001 fe0d 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	481b      	ldr	r0, [pc, #108]	; (800165c <MX_GPIO_Init+0xec>)
 80015ee:	f001 fe07 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_GPIO_Init+0xe8>)
 800160c:	f001 fc74 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8001610:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_GPIO_Init+0xe8>)
 800162a:	f001 fc65 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GPIO_Init+0xec>)
 8001648:	f001 fc56 	bl	8002ef8 <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800
 800165c:	40020400 	.word	0x40020400

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <motorsInit>:
extern int32_t L_error;
extern int32_t R_error;
extern int32_t L_acc_error;
extern int32_t R_acc_error;

void motorsInit(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

	  //Motor 1
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001670:	2104      	movs	r1, #4
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <motorsInit+0x58>)
 8001674:	f002 fcc6 	bl	8004004 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001678:	2108      	movs	r1, #8
 800167a:	4812      	ldr	r0, [pc, #72]	; (80016c4 <motorsInit+0x58>)
 800167c:	f002 fcc2 	bl	8004004 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <motorsInit+0x58>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <motorsInit+0x58>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c

	  //Motor 2
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001690:	2100      	movs	r1, #0
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <motorsInit+0x5c>)
 8001694:	f002 fcb6 	bl	8004004 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001698:	2104      	movs	r1, #4
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <motorsInit+0x5c>)
 800169c:	f002 fcb2 	bl	8004004 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <motorsInit+0x5c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <motorsInit+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38

	  //Encoder 1
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016b0:	213c      	movs	r1, #60	; 0x3c
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <motorsInit+0x60>)
 80016b4:	f002 fdfc 	bl	80042b0 <HAL_TIM_Encoder_Start>

	  //Encoder 2
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80016b8:	213c      	movs	r1, #60	; 0x3c
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <motorsInit+0x64>)
 80016bc:	f002 fdf8 	bl	80042b0 <HAL_TIM_Encoder_Start>

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200002bc 	.word	0x200002bc
 80016c8:	20000304 	.word	0x20000304
 80016cc:	2000034c 	.word	0x2000034c
 80016d0:	20000394 	.word	0x20000394

080016d4 <forward>:
void forward(int16_t power){ // -1000 < power < 1000
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	if (power>1000) power = 1000;
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e6:	dd02      	ble.n	80016ee <forward+0x1a>
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	80fb      	strh	r3, [r7, #6]
	if (power<-1000) power = -1000;
 80016ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80016f6:	da02      	bge.n	80016fe <forward+0x2a>
 80016f8:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80016fc:	80fb      	strh	r3, [r7, #6]

	if (power == 0){
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d110      	bne.n	8001728 <forward+0x54>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <forward+0xb8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <forward+0xb8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c
		//motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <forward+0xbc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <forward+0xbc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
//		motor 2
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
	}
}
 8001726:	e02a      	b.n	800177e <forward+0xaa>
	else if (power > 0){
 8001728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dd12      	ble.n	8001756 <forward+0x82>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, power);
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <forward+0xb8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <forward+0xb8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, power);
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <forward+0xbc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <forward+0xbc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001754:	e013      	b.n	800177e <forward+0xaa>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <forward+0xb8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -power);
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	425a      	negs	r2, r3
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <forward+0xb8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <forward+0xbc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -power);
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	425a      	negs	r2, r3
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <forward+0xbc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200002bc 	.word	0x200002bc
 8001790:	20000304 	.word	0x20000304
 8001794:	00000000 	.word	0x00000000

08001798 <R_motor_feedback_control>:
void R_motor_feedback_control(){//speed in mm/s
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	af00      	add	r7, sp, #0
	R_prev_enc_count = htim3.Instance->CNT;
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <R_motor_feedback_control+0x188>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <R_motor_feedback_control+0x18c>)
 80017a6:	801a      	strh	r2, [r3, #0]
	R_error = (int)(R_speed_setpoint - (WHEEL_DIAMETER_MM*PI*R_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 80017a8:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <R_motor_feedback_control+0x190>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fec0 	bl	8000534 <__aeabi_i2d>
 80017b4:	4604      	mov	r4, r0
 80017b6:	460d      	mov	r5, r1
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <R_motor_feedback_control+0x18c>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feb8 	bl	8000534 <__aeabi_i2d>
 80017c4:	a352      	add	r3, pc, #328	; (adr r3, 8001910 <R_motor_feedback_control+0x178>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff1d 	bl	8000608 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <R_motor_feedback_control+0x194>)
 80017dc:	f7fe ff14 	bl	8000608 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <R_motor_feedback_control+0x198>)
 80017ee:	f7ff f835 	bl	800085c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd4d 	bl	8000298 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f911 	bl	8000a2c <__aeabi_d2iz>
 800180a:	4603      	mov	r3, r0
 800180c:	4a49      	ldr	r2, [pc, #292]	; (8001934 <R_motor_feedback_control+0x19c>)
 800180e:	6013      	str	r3, [r2, #0]
	R_acc_error += R_error;
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <R_motor_feedback_control+0x1a0>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b47      	ldr	r3, [pc, #284]	; (8001934 <R_motor_feedback_control+0x19c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4413      	add	r3, r2
 800181a:	4a47      	ldr	r2, [pc, #284]	; (8001938 <R_motor_feedback_control+0x1a0>)
 800181c:	6013      	str	r3, [r2, #0]

//					Proportional  		Integral		  FeedForward
	R_ctrl_signal = R_Kp*R_error + R_Ki*R_acc_error + R_Kff*R_speed_setpoint;
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <R_motor_feedback_control+0x19c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <R_motor_feedback_control+0x1a0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe83 	bl	8000534 <__aeabi_i2d>
 800182e:	4604      	mov	r4, r0
 8001830:	460d      	mov	r5, r1
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <R_motor_feedback_control+0x190>)
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe7b 	bl	8000534 <__aeabi_i2d>
 800183e:	a336      	add	r3, pc, #216	; (adr r3, 8001918 <R_motor_feedback_control+0x180>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fee0 	bl	8000608 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fd24 	bl	800029c <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f8e6 	bl	8000a2c <__aeabi_d2iz>
 8001860:	4603      	mov	r3, r0
 8001862:	b21a      	sxth	r2, r3
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <R_motor_feedback_control+0x1a4>)
 8001866:	801a      	strh	r2, [r3, #0]

	if (R_ctrl_signal!=0) R_ctrl_signal+= R_ff_offset; //add offset if not standing still
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <R_motor_feedback_control+0x1a4>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <R_motor_feedback_control+0xec>
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <R_motor_feedback_control+0x1a4>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	b29b      	uxth	r3, r3
 800187a:	3373      	adds	r3, #115	; 0x73
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21a      	sxth	r2, r3
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <R_motor_feedback_control+0x1a4>)
 8001882:	801a      	strh	r2, [r3, #0]

	if (R_ctrl_signal >= 1000) R_ctrl_signal = 999;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <R_motor_feedback_control+0x1a4>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188e:	db03      	blt.n	8001898 <R_motor_feedback_control+0x100>
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <R_motor_feedback_control+0x1a4>)
 8001892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001896:	801a      	strh	r2, [r3, #0]
	if (R_ctrl_signal <= -1000) R_ctrl_signal = -999;
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <R_motor_feedback_control+0x1a4>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80018a2:	dc03      	bgt.n	80018ac <R_motor_feedback_control+0x114>
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <R_motor_feedback_control+0x1a4>)
 80018a6:	f64f 4219 	movw	r2, #64537	; 0xfc19
 80018aa:	801a      	strh	r2, [r3, #0]

	if (R_ctrl_signal == 0){
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <R_motor_feedback_control+0x1a4>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <R_motor_feedback_control+0x130>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c6:	e01a      	b.n	80018fe <R_motor_feedback_control+0x166>
	}
	else if (R_ctrl_signal > 0){
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <R_motor_feedback_control+0x1a4>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dd0a      	ble.n	80018e8 <R_motor_feedback_control+0x150>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, R_ctrl_signal);
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <R_motor_feedback_control+0x1a4>)
 80018d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e6:	e00a      	b.n	80018fe <R_motor_feedback_control+0x166>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -R_ctrl_signal);
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <R_motor_feedback_control+0x1a4>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	425a      	negs	r2, r3
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <R_motor_feedback_control+0x1a8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c
	}
//	prev_control_signal = R_ctrl_signal;
	htim3.Instance->CNT = 0;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <R_motor_feedback_control+0x188>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001906:	bf00      	nop
 8001908:	bdb0      	pop	{r4, r5, r7, pc}
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	bf9c62a1 	.word	0xbf9c62a1
 8001914:	4059eb09 	.word	0x4059eb09
 8001918:	0624dd2f 	.word	0x0624dd2f
 800191c:	3fdb9581 	.word	0x3fdb9581
 8001920:	2000034c 	.word	0x2000034c
 8001924:	20000108 	.word	0x20000108
 8001928:	20000104 	.word	0x20000104
 800192c:	408f4000 	.word	0x408f4000
 8001930:	40a2c000 	.word	0x40a2c000
 8001934:	20000114 	.word	0x20000114
 8001938:	2000011c 	.word	0x2000011c
 800193c:	2000010c 	.word	0x2000010c
 8001940:	200002bc 	.word	0x200002bc
 8001944:	00000000 	.word	0x00000000

08001948 <L_motor_feedback_control>:
void L_motor_feedback_control(){//speed in mm/s
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	af00      	add	r7, sp, #0
	L_prev_enc_count = htim5.Instance->CNT;
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <L_motor_feedback_control+0x1a8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <L_motor_feedback_control+0x1ac>)
 8001956:	801a      	strh	r2, [r3, #0]
	L_error = (int)(L_speed_setpoint - (WHEEL_DIAMETER_MM*PI*L_prev_enc_count*1000)/(COUNTS_PER_ROTATION*CONTROL_LOOP_PERIOD_MS));
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <L_motor_feedback_control+0x1b0>)
 800195a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fde8 	bl	8000534 <__aeabi_i2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <L_motor_feedback_control+0x1ac>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fde0 	bl	8000534 <__aeabi_i2d>
 8001974:	a358      	add	r3, pc, #352	; (adr r3, 8001ad8 <L_motor_feedback_control+0x190>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe45 	bl	8000608 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <L_motor_feedback_control+0x1b4>)
 800198c:	f7fe fe3c 	bl	8000608 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <L_motor_feedback_control+0x1b8>)
 800199e:	f7fe ff5d 	bl	800085c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc75 	bl	8000298 <__aeabi_dsub>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f839 	bl	8000a2c <__aeabi_d2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <L_motor_feedback_control+0x1bc>)
 80019be:	6013      	str	r3, [r2, #0]
	L_acc_error += L_error;
 80019c0:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <L_motor_feedback_control+0x1c0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <L_motor_feedback_control+0x1bc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <L_motor_feedback_control+0x1c0>)
 80019cc:	6013      	str	r3, [r2, #0]

	//					Proportional  		Integral		  FeedForward
	L_ctrl_signal = L_Kp*L_error + L_Ki*L_acc_error + L_Kff*L_speed_setpoint;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <L_motor_feedback_control+0x1bc>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <L_motor_feedback_control+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdab 	bl	8000534 <__aeabi_i2d>
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <L_motor_feedback_control+0x1b0>)
 80019e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fda3 	bl	8000534 <__aeabi_i2d>
 80019ee:	a33c      	add	r3, pc, #240	; (adr r3, 8001ae0 <L_motor_feedback_control+0x198>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe08 	bl	8000608 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc4c 	bl	800029c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f80e 	bl	8000a2c <__aeabi_d2iz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a16:	801a      	strh	r2, [r3, #0]
	if (L_ctrl_signal!=0) L_ctrl_signal += L_ff_offset; //add offset if not standing still
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d014      	beq.n	8001a4c <L_motor_feedback_control+0x104>
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd83 	bl	8000534 <__aeabi_i2d>
 8001a2e:	a32e      	add	r3, pc, #184	; (adr r3, 8001ae8 <L_motor_feedback_control+0x1a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fc32 	bl	800029c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe fff4 	bl	8000a2c <__aeabi_d2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a4a:	801a      	strh	r2, [r3, #0]

	if (L_ctrl_signal>1000) L_ctrl_signal = 999;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a56:	dd03      	ble.n	8001a60 <L_motor_feedback_control+0x118>
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a5e:	801a      	strh	r2, [r3, #0]
	if (L_ctrl_signal<-1000) L_ctrl_signal = -999;
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001a6a:	da03      	bge.n	8001a74 <L_motor_feedback_control+0x12c>
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a6e:	f64f 4219 	movw	r2, #64537	; 0xfc19
 8001a72:	801a      	strh	r2, [r3, #0]

	if (L_ctrl_signal == 0){
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <L_motor_feedback_control+0x148>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8e:	e01a      	b.n	8001ac6 <L_motor_feedback_control+0x17e>
	}
	else if (L_ctrl_signal > 0){
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd0a      	ble.n	8001ab0 <L_motor_feedback_control+0x168>
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, L_ctrl_signal);
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	e00a      	b.n	8001ac6 <L_motor_feedback_control+0x17e>
	}
	else{
		//motor 1
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -L_ctrl_signal);
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <L_motor_feedback_control+0x1c4>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	425a      	negs	r2, r3
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <L_motor_feedback_control+0x1c8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
	}
//	prev_control_signal = L_ctrl_signal;
	htim5.Instance->CNT = 0;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <L_motor_feedback_control+0x1a8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ace:	bf00      	nop
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	bf9c62a1 	.word	0xbf9c62a1
 8001adc:	4059eb09 	.word	0x4059eb09
 8001ae0:	2d0e5604 	.word	0x2d0e5604
 8001ae4:	3fdf9db2 	.word	0x3fdf9db2
 8001ae8:	9999999a 	.word	0x9999999a
 8001aec:	40636999 	.word	0x40636999
 8001af0:	20000394 	.word	0x20000394
 8001af4:	20000106 	.word	0x20000106
 8001af8:	20000102 	.word	0x20000102
 8001afc:	408f4000 	.word	0x408f4000
 8001b00:	40a2c000 	.word	0x40a2c000
 8001b04:	20000110 	.word	0x20000110
 8001b08:	20000118 	.word	0x20000118
 8001b0c:	2000010a 	.word	0x2000010a
 8001b10:	20000304 	.word	0x20000304

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_MspInit+0x58>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_MspInit+0x58>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_MspInit+0x58>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_MspInit+0x58>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_MspInit+0x58>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_MspInit+0x58>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2051      	movs	r0, #81	; 0x51
 8001b58:	f001 f905 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001b5c:	2051      	movs	r0, #81	; 0x51
 8001b5e:	f001 f91e 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_ADC_MspInit+0x7c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d127      	bne.n	8001be2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_ADC_MspInit+0x80>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_ADC_MspInit+0x84>)
 8001bde:	f001 f98b 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6b      	ldr	r2, [pc, #428]	; (8001dc4 <HAL_I2C_MspInit+0x1cc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13c      	bne.n	8001c94 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c36:	2340      	movs	r3, #64	; 0x40
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c46:	2304      	movs	r3, #4
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	485e      	ldr	r0, [pc, #376]	; (8001dcc <HAL_I2C_MspInit+0x1d4>)
 8001c52:	f001 f951 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c66:	2304      	movs	r3, #4
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4856      	ldr	r0, [pc, #344]	; (8001dcc <HAL_I2C_MspInit+0x1d4>)
 8001c72:	f001 f941 	bl	8002ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c92:	e093      	b.n	8001dbc <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_I2C_MspInit+0x1d8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d13e      	bne.n	8001d1c <HAL_I2C_MspInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc0:	2312      	movs	r3, #18
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	483d      	ldr	r0, [pc, #244]	; (8001dcc <HAL_I2C_MspInit+0x1d4>)
 8001cd8:	f001 f90e 	bl	8002ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001cee:	2309      	movs	r3, #9
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4834      	ldr	r0, [pc, #208]	; (8001dcc <HAL_I2C_MspInit+0x1d4>)
 8001cfa:	f001 f8fd 	bl	8002ef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
}
 8001d1a:	e04f      	b.n	8001dbc <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <HAL_I2C_MspInit+0x1dc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d14a      	bne.n	8001dbc <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d70:	2304      	movs	r3, #4
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <HAL_I2C_MspInit+0x1e0>)
 8001d7c:	f001 f8bc 	bl	8002ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d80:	2310      	movs	r3, #16
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001d90:	2309      	movs	r3, #9
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_I2C_MspInit+0x1d4>)
 8001d9c:	f001 f8ac 	bl	8002ef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001daa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_I2C_MspInit+0x1d0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	3738      	adds	r7, #56	; 0x38
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40005800 	.word	0x40005800
 8001dd4:	40005c00 	.word	0x40005c00
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_SPI_MspInit+0x84>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12c      	bne.n	8001e58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e48:	2305      	movs	r3, #5
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_SPI_MspInit+0x8c>)
 8001e54:	f001 f850 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40003800 	.word	0x40003800
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020400 	.word	0x40020400

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIM_Base_MspInit+0x64>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e9a:	e012      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_TIM_Base_MspInit+0x68>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x124>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d14a      	bne.n	8001f90 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4826      	ldr	r0, [pc, #152]	; (8002004 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001f6a:	f000 ffc5 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <HAL_TIM_Encoder_MspInit+0x130>)
 8001f8a:	f000 ffb5 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f8e:	e030      	b.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_TIM_Encoder_MspInit+0x134>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12b      	bne.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001fee:	f000 ff83 	bl	8002ef8 <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40000c00 	.word	0x40000c00

08002010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_TIM_MspPostInit+0xf0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d11f      	bne.n	8002072 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 800204e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002060:	2301      	movs	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4827      	ldr	r0, [pc, #156]	; (8002108 <HAL_TIM_MspPostInit+0xf8>)
 800206c:	f000 ff44 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002070:	e041      	b.n	80020f6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d13c      	bne.n	80020f6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4a18      	ldr	r2, [pc, #96]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_TIM_MspPostInit+0xf4>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 80020b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c6:	2301      	movs	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <HAL_TIM_MspPostInit+0xf8>)
 80020d2:	f000 ff11 	bl	8002ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 80020d6:	2308      	movs	r3, #8
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4806      	ldr	r0, [pc, #24]	; (800210c <HAL_TIM_MspPostInit+0xfc>)
 80020f2:	f000 ff01 	bl	8002ef8 <HAL_GPIO_Init>
}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_UART_MspInit+0x94>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d133      	bne.n	800219a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_UART_MspInit+0x98>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_UART_MspInit+0x98>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_UART_MspInit+0x98>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_MspInit+0x98>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <HAL_UART_MspInit+0x98>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_UART_MspInit+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800216a:	230c      	movs	r3, #12
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4809      	ldr	r0, [pc, #36]	; (80021ac <HAL_UART_MspInit+0x9c>)
 8002186:	f000 feb7 	bl	8002ef8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2026      	movs	r0, #38	; 0x26
 8002190:	f000 fde9 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002194:	2026      	movs	r0, #38	; 0x26
 8002196:	f000 fe02 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40004400 	.word	0x40004400
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f96e 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART2_IRQHandler+0x10>)
 800220a:	f002 feb7 	bl	8004f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200003dc 	.word	0x200003dc

08002218 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f003 fe54 	bl	8005f04 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20020000 	.word	0x20020000
 8002288:	00000400 	.word	0x00000400
 800228c:	20000420 	.word	0x20000420
 8002290:	20000450 	.word	0x20000450

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <uart_startup_transmit>:
extern int16_t L_speed_setpoint; //mm/s
extern int16_t R_speed_setpoint;//mm/s


void uart_startup_transmit()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 80022be:	2005      	movs	r0, #5
 80022c0:	f000 f92c 	bl	800251c <HAL_Delay>
	char * startup_msg = "#:24733725:$\n";
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <uart_startup_transmit+0x40>)
 80022c6:	607b      	str	r3, [r7, #4]
	strcpy(send_buffer, startup_msg);
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	480c      	ldr	r0, [pc, #48]	; (80022fc <uart_startup_transmit+0x44>)
 80022cc:	f003 fe6c 	bl	8005fa8 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)send_buffer, strlen(send_buffer));
 80022d0:	480a      	ldr	r0, [pc, #40]	; (80022fc <uart_startup_transmit+0x44>)
 80022d2:	f7fd ff85 	bl	80001e0 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <uart_startup_transmit+0x44>)
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <uart_startup_transmit+0x48>)
 80022e0:	f002 fdd7 	bl	8004e92 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)receive_buffer, 1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	4907      	ldr	r1, [pc, #28]	; (8002304 <uart_startup_transmit+0x4c>)
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <uart_startup_transmit+0x48>)
 80022ea:	f002 fe17 	bl	8004f1c <HAL_UART_Receive_IT>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	08006998 	.word	0x08006998
 80022fc:	200000a0 	.word	0x200000a0
 8002300:	200003dc 	.word	0x200003dc
 8002304:	200000e0 	.word	0x200000e0

08002308 <uart_task>:

void uart_task()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	if (message_waiting_flag)
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <uart_task+0x3c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d014      	beq.n	800233e <uart_task+0x36>
	{
		uart_transmit(receive_buffer, strlen(receive_buffer));
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <uart_task+0x40>)
 8002316:	f7fd ff63 	bl	80001e0 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	480a      	ldr	r0, [pc, #40]	; (8002348 <uart_task+0x40>)
 8002320:	f000 f816 	bl	8002350 <uart_transmit>
//		forward(atoi(receive_buffer));
//		L_speed_setpoint = atoi(receive_buffer);
		R_speed_setpoint = atoi(receive_buffer);
 8002324:	4808      	ldr	r0, [pc, #32]	; (8002348 <uart_task+0x40>)
 8002326:	f003 fde8 	bl	8005efa <atoi>
 800232a:	4603      	mov	r3, r0
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <uart_task+0x44>)
 8002330:	801a      	strh	r2, [r3, #0]
		message_waiting_flag = 0;
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <uart_task+0x3c>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
		strcpy(receive_buffer, "\0");
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <uart_task+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
	}
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000100 	.word	0x20000100
 8002348:	200000e0 	.word	0x200000e0
 800234c:	20000104 	.word	0x20000104

08002350 <uart_transmit>:

void uart_transmit(char * message, int length)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, length);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <uart_transmit+0x20>)
 8002364:	f002 fd95 	bl	8004e92 <HAL_UART_Transmit_IT>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200003dc 	.word	0x200003dc

08002374 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	if(receive_buffer[index] == '\n')
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_UART_RxCpltCallback+0x64>)
 8002384:	5c9b      	ldrb	r3, [r3, r2]
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d10c      	bne.n	80023a4 <HAL_UART_RxCpltCallback+0x30>
	{
		receive_buffer[index+1] = '\0';
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_UART_RxCpltCallback+0x64>)
 8002392:	2100      	movs	r1, #0
 8002394:	54d1      	strb	r1, [r2, r3]
		message_waiting_flag = 1;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_UART_RxCpltCallback+0x68>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
		index = 0;
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e009      	b.n	80023b8 <HAL_UART_RxCpltCallback+0x44>
	}
	else if (index < 30)
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b1d      	cmp	r3, #29
 80023aa:	d805      	bhi.n	80023b8 <HAL_UART_RxCpltCallback+0x44>
	{
		index = index + 1;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 80023b6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)(receive_buffer + index), 1);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_UART_RxCpltCallback+0x60>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_UART_RxCpltCallback+0x64>)
 80023c0:	4413      	add	r3, r2
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 80023c8:	f002 fda8 	bl	8004f1c <HAL_UART_Receive_IT>

}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000424 	.word	0x20000424
 80023d8:	200000e0 	.word	0x200000e0
 80023dc:	20000100 	.word	0x20000100
 80023e0:	200003dc 	.word	0x200003dc

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800240e:	f7ff ff41 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f003 fd7d 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7fe fcb3 	bl	8000d80 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002428:	08006b04 	.word	0x08006b04
  ldr r2, =_sbss
 800242c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002430:	20000450 	.word	0x20000450

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fc75 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	200f      	movs	r0, #15
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fb52 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fc8d 	bl	8002dba <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 fc55 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000428 	.word	0x20000428

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000428 	.word	0x20000428

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e033      	b.n	80025e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff faf4 	bl	8001b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9fe 	bl	80029b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Start+0x1a>
 8002602:	2302      	movs	r3, #2
 8002604:	e097      	b.n	8002736 <HAL_ADC_Start+0x14a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d018      	beq.n	800264e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_ADC_Start+0x158>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_ADC_Start+0x15c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9a      	lsrs	r2, r3, #18
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d15f      	bne.n	800271c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f023 0206 	bic.w	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_ADC_Start+0x160>)
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d129      	bne.n	8002734 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e020      	b.n	8002734 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_ADC_Start+0x164>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11b      	bne.n	8002734 <HAL_ADC_Start+0x148>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e00b      	b.n	8002734 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83
 800274c:	40012300 	.word	0x40012300
 8002750:	40012000 	.word	0x40012000

08002754 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1c>
 800276c:	2302      	movs	r3, #2
 800276e:	e113      	b.n	8002998 <HAL_ADC_ConfigChannel+0x244>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d925      	bls.n	80027cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68d9      	ldr	r1, [r3, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	3b1e      	subs	r3, #30
 8002796:	2207      	movs	r2, #7
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43da      	mvns	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68d9      	ldr	r1, [r3, #12]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4403      	add	r3, r0
 80027be:	3b1e      	subs	r3, #30
 80027c0:	409a      	lsls	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e022      	b.n	8002812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	2207      	movs	r2, #7
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	400a      	ands	r2, r1
 80027ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6919      	ldr	r1, [r3, #16]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	4603      	mov	r3, r0
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4403      	add	r3, r0
 8002808:	409a      	lsls	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d824      	bhi.n	8002864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b05      	subs	r3, #5
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b05      	subs	r3, #5
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	635a      	str	r2, [r3, #52]	; 0x34
 8002862:	e04c      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d824      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b23      	subs	r3, #35	; 0x23
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	; 0x23
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
 80028b4:	e023      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b41      	subs	r3, #65	; 0x41
 80028c8:	221f      	movs	r2, #31
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b41      	subs	r3, #65	; 0x41
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_ADC_ConfigChannel+0x250>)
 8002900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <HAL_ADC_ConfigChannel+0x254>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d10f      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1d8>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b12      	cmp	r3, #18
 8002912:	d10b      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_ADC_ConfigChannel+0x254>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d12b      	bne.n	800298e <HAL_ADC_ConfigChannel+0x23a>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_ADC_ConfigChannel+0x258>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x1f4>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b11      	cmp	r3, #17
 8002946:	d122      	bne.n	800298e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_ADC_ConfigChannel+0x258>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_ADC_ConfigChannel+0x25c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_ADC_ConfigChannel+0x260>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	0c9a      	lsrs	r2, r3, #18
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002980:	e002      	b.n	8002988 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3b01      	subs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40012300 	.word	0x40012300
 80029a8:	40012000 	.word	0x40012000
 80029ac:	10000012 	.word	0x10000012
 80029b0:	20000000 	.word	0x20000000
 80029b4:	431bde83 	.word	0x431bde83

080029b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <ADC_Init+0x1f0>)
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	021a      	lsls	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	4a58      	ldr	r2, [pc, #352]	; (8002bac <ADC_Init+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6899      	ldr	r1, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e00f      	b.n	8002ab6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ab4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0202 	bic.w	r2, r2, #2
 8002ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
 8002ad0:	005a      	lsls	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	035a      	lsls	r2, r3, #13
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e007      	b.n	8002b2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	051a      	lsls	r2, r3, #20
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b6e:	025a      	lsls	r2, r3, #9
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	029a      	lsls	r2, r3, #10
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40012300 	.word	0x40012300
 8002bac:	0f000001 	.word	0x0f000001

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff fb90 	bl	8002504 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d008      	beq.n	8002e04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e052      	b.n	8002eaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0216 	bic.w	r2, r2, #22
 8002e12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <HAL_DMA_Abort+0x62>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0208 	bic.w	r2, r2, #8
 8002e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e54:	e013      	b.n	8002e7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e56:	f7ff fb55 	bl	8002504 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d90c      	bls.n	8002e7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e015      	b.n	8002eaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e4      	bne.n	8002e56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e00c      	b.n	8002eea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e159      	b.n	80031c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f14:	2201      	movs	r2, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f040 8148 	bne.w	80031c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d005      	beq.n	8002f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d130      	bne.n	8002fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0201 	and.w	r2, r3, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d017      	beq.n	8002fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d123      	bne.n	800303c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	220f      	movs	r2, #15
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	08da      	lsrs	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a2 	beq.w	80031c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b54      	ldr	r3, [pc, #336]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309a:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_GPIO_Init+0x2ec>)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_GPIO_Init+0x2f0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x202>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2f4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x1fe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a47      	ldr	r2, [pc, #284]	; (80031f0 <HAL_GPIO_Init+0x2f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <HAL_GPIO_Init+0x2fc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x1f6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a45      	ldr	r2, [pc, #276]	; (80031f8 <HAL_GPIO_Init+0x300>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x1f2>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e008      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030ea:	2307      	movs	r3, #7
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e004      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x204>
 80030fa:	2300      	movs	r3, #0
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	f002 0203 	and.w	r2, r2, #3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4093      	lsls	r3, r2
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310c:	4935      	ldr	r1, [pc, #212]	; (80031e4 <HAL_GPIO_Init+0x2ec>)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <HAL_GPIO_Init+0x304>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <HAL_GPIO_Init+0x304>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_GPIO_Init+0x304>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_GPIO_Init+0x304>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_GPIO_Init+0x304>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f67f aea2 	bls.w	8002f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43d9      	mvns	r1, r3
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e12b      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fcb2 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	; 0x24
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032cc:	f000 fd40 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a81      	ldr	r2, [pc, #516]	; (80034dc <HAL_I2C_Init+0x274>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d807      	bhi.n	80032ec <HAL_I2C_Init+0x84>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a80      	ldr	r2, [pc, #512]	; (80034e0 <HAL_I2C_Init+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e006      	b.n	80032fa <HAL_I2C_Init+0x92>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a7d      	ldr	r2, [pc, #500]	; (80034e4 <HAL_I2C_Init+0x27c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0e7      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a78      	ldr	r2, [pc, #480]	; (80034e8 <HAL_I2C_Init+0x280>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0c9b      	lsrs	r3, r3, #18
 800330c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_I2C_Init+0x274>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d802      	bhi.n	800333c <HAL_I2C_Init+0xd4>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	e009      	b.n	8003350 <HAL_I2C_Init+0xe8>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a69      	ldr	r2, [pc, #420]	; (80034ec <HAL_I2C_Init+0x284>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	3301      	adds	r3, #1
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	495c      	ldr	r1, [pc, #368]	; (80034dc <HAL_I2C_Init+0x274>)
 800336c:	428b      	cmp	r3, r1
 800336e:	d819      	bhi.n	80033a4 <HAL_I2C_Init+0x13c>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e59      	subs	r1, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fbb1 f3f3 	udiv	r3, r1, r3
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003384:	400b      	ands	r3, r1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_I2C_Init+0x138>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e59      	subs	r1, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fbb1 f3f3 	udiv	r3, r1, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	e051      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e04f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_I2C_Init+0x168>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e012      	b.n	80033f6 <HAL_I2C_Init+0x18e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x196>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_I2C_Init+0x1bc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e58      	subs	r0, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	fbb0 f3f3 	udiv	r3, r0, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6911      	ldr	r1, [r2, #16]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	000186a0 	.word	0x000186a0
 80034e0:	001e847f 	.word	0x001e847f
 80034e4:	003d08ff 	.word	0x003d08ff
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	10624dd3 	.word	0x10624dd3

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e267      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00c      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d112      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e242      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6f      	ldr	r2, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a68      	ldr	r2, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe ffac 	bl	8002504 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe ffa8 	bl	8002504 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e207      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe ff98 	bl	8002504 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe ff94 	bl	8002504 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1f3      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b51      	ldr	r3, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d063      	beq.n	80036ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b44      	ldr	r3, [pc, #272]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1c7      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e03a      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe ff4d 	bl	8002504 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7fe ff49 	bl	8002504 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1a8      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4925      	ldr	r1, [pc, #148]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe ff2c 	bl	8002504 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fe ff28 	bl	8002504 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e187      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d036      	beq.n	8003748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d016      	beq.n	8003710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe ff0c 	bl	8002504 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fe ff08 	bl	8002504 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e167      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fef5 	bl	8002504 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	e00e      	b.n	800373c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371e:	f7fe fef1 	bl	8002504 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d907      	bls.n	800373c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e150      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	42470000 	.word	0x42470000
 8003738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ea      	bne.n	800371e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8097 	beq.w	8003884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b7d      	ldr	r3, [pc, #500]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a7c      	ldr	r2, [pc, #496]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b7a      	ldr	r3, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b77      	ldr	r3, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d118      	bne.n	80037c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003792:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379e:	f7fe feb1 	bl	8002504 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fe fead 	bl	8002504 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e10c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b6a      	ldr	r3, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x2ea>
 80037cc:	4b64      	ldr	r3, [pc, #400]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a63      	ldr	r2, [pc, #396]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x30c>
 80037e2:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037fc:	4b58      	ldr	r3, [pc, #352]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 0304 	bic.w	r3, r3, #4
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe fe72 	bl	8002504 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe fe6e 	bl	8002504 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0cb      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <HAL_RCC_OscConfig+0x334>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fe fe5c 	bl	8002504 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fe58 	bl	8002504 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b5      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a1 	beq.w	80039d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b08      	cmp	r3, #8
 8003898:	d05c      	beq.n	8003954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d141      	bne.n	8003926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fe2c 	bl	8002504 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe fe28 	bl	8002504 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e087      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	491b      	ldr	r1, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe fe01 	bl	8002504 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe fdfd 	bl	8002504 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e05c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x416>
 8003924:	e054      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fdea 	bl	8002504 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fde6 	bl	8002504 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e045      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
 8003952:	e03d      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e038      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCC_OscConfig+0x4ec>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d028      	beq.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d121      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fd18 	bl	8002504 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fd14 	bl	8002504 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fc78 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	080069a8 	.word	0x080069a8
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000004 	.word	0x20000004

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b090      	sub	sp, #64	; 0x40
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	2300      	movs	r3, #0
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80a1 	bhi.w	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e09b      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003be4:	e09b      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bea:	e098      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf6:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d028      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c14:	2100      	movs	r1, #0
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c18:	fb03 f201 	mul.w	r2, r3, r1
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c26:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	4413      	add	r3, r2
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c38:	2200      	movs	r2, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c46:	f7fc ff19 	bl	8000a7c <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c52:	e053      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	617a      	str	r2, [r7, #20]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c66:	f04f 0b00 	mov.w	fp, #0
 8003c6a:	4652      	mov	r2, sl
 8003c6c:	465b      	mov	r3, fp
 8003c6e:	f04f 0000 	mov.w	r0, #0
 8003c72:	f04f 0100 	mov.w	r1, #0
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7c:	0150      	lsls	r0, r2, #5
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	ebb2 080a 	subs.w	r8, r2, sl
 8003c86:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	00eb      	lsls	r3, r5, #3
 8003cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb4:	00e2      	lsls	r2, r4, #3
 8003cb6:	4614      	mov	r4, r2
 8003cb8:	461d      	mov	r5, r3
 8003cba:	eb14 030a 	adds.w	r3, r4, sl
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	eb45 030b 	adc.w	r3, r5, fp
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	028b      	lsls	r3, r1, #10
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cdc:	4621      	mov	r1, r4
 8003cde:	028a      	lsls	r2, r1, #10
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	f7fc fec4 	bl	8000a7c <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3740      	adds	r7, #64	; 0x40
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	017d7840 	.word	0x017d7840

08003d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000000 	.word	0x20000000

08003d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d54:	f7ff fff0 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0a9b      	lsrs	r3, r3, #10
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	080069b8 	.word	0x080069b8

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d7c:	f7ff ffdc 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0b5b      	lsrs	r3, r3, #13
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	080069b8 	.word	0x080069b8

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07b      	b.n	8003eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d108      	bne.n	8003dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc2:	d009      	beq.n	8003dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd fff2 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f003 0104 	and.w	r1, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0210 	and.w	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e041      	b.n	8003f48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd ffc7 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 fbf5 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f839 	bl	8003fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fba6 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_TIM_PWM_Start+0x24>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e022      	b.n	800406e <HAL_TIM_PWM_Start+0x6a>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b04      	cmp	r3, #4
 800402c:	d109      	bne.n	8004042 <HAL_TIM_PWM_Start+0x3e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	e015      	b.n	800406e <HAL_TIM_PWM_Start+0x6a>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d109      	bne.n	800405c <HAL_TIM_PWM_Start+0x58>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e008      	b.n	800406e <HAL_TIM_PWM_Start+0x6a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e068      	b.n	8004148 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0x82>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	e013      	b.n	80040ae <HAL_TIM_PWM_Start+0xaa>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0x92>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	e00b      	b.n	80040ae <HAL_TIM_PWM_Start+0xaa>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a4:	e003      	b.n	80040ae <HAL_TIM_PWM_Start+0xaa>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fdb8 	bl	8004c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a23      	ldr	r2, [pc, #140]	; (8004150 <HAL_TIM_PWM_Start+0x14c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_TIM_PWM_Start+0x14c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <HAL_TIM_PWM_Start+0x10e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d013      	beq.n	8004112 <HAL_TIM_PWM_Start+0x10e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_PWM_Start+0x150>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIM_PWM_Start+0x10e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_TIM_PWM_Start+0x154>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_TIM_PWM_Start+0x10e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIM_PWM_Start+0x158>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_PWM_Start+0x10e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_TIM_PWM_Start+0x15c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d010      	beq.n	8004146 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	e007      	b.n	8004146 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40014000 	.word	0x40014000

08004164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e097      	b.n	80042a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fd fea3 	bl	8001ed8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a8:	f023 0307 	bic.w	r3, r3, #7
 80041ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f000 fa91 	bl	80046e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	4313      	orrs	r3, r2
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004204:	f023 030c 	bic.w	r3, r3, #12
 8004208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	4313      	orrs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	031b      	lsls	r3, r3, #12
 8004234:	4313      	orrs	r3, r2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4313      	orrs	r3, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e6:	7b7b      	ldrb	r3, [r7, #13]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e069      	b.n	80043c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004300:	e031      	b.n	8004366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d110      	bne.n	800432a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004308:	7bbb      	ldrb	r3, [r7, #14]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800430e:	7b3b      	ldrb	r3, [r7, #12]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e055      	b.n	80043c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004328:	e01d      	b.n	8004366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d108      	bne.n	8004342 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800433c:	7b3b      	ldrb	r3, [r7, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d001      	beq.n	8004346 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e03e      	b.n	80043c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_TIM_Encoder_Start+0xc4>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d008      	beq.n	8004384 <HAL_TIM_Encoder_Start+0xd4>
 8004372:	e00f      	b.n	8004394 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2201      	movs	r2, #1
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fc55 	bl	8004c2c <TIM_CCxChannelCmd>
      break;
 8004382:	e016      	b.n	80043b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	2104      	movs	r1, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fc4d 	bl	8004c2c <TIM_CCxChannelCmd>
      break;
 8004392:	e00e      	b.n	80043b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fc45 	bl	8004c2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	2104      	movs	r1, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fc3e 	bl	8004c2c <TIM_CCxChannelCmd>
      break;
 80043b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0ae      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	f200 809f 	bhi.w	8004538 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004435 	.word	0x08004435
 8004404:	08004539 	.word	0x08004539
 8004408:	08004539 	.word	0x08004539
 800440c:	08004539 	.word	0x08004539
 8004410:	08004475 	.word	0x08004475
 8004414:	08004539 	.word	0x08004539
 8004418:	08004539 	.word	0x08004539
 800441c:	08004539 	.word	0x08004539
 8004420:	080044b7 	.word	0x080044b7
 8004424:	08004539 	.word	0x08004539
 8004428:	08004539 	.word	0x08004539
 800442c:	08004539 	.word	0x08004539
 8004430:	080044f7 	.word	0x080044f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f9d0 	bl	80047e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0208 	orr.w	r2, r2, #8
 800444e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0204 	bic.w	r2, r2, #4
 800445e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6999      	ldr	r1, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	619a      	str	r2, [r3, #24]
      break;
 8004472:	e064      	b.n	800453e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fa16 	bl	80048ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6999      	ldr	r1, [r3, #24]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	619a      	str	r2, [r3, #24]
      break;
 80044b4:	e043      	b.n	800453e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fa61 	bl	8004984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0208 	orr.w	r2, r2, #8
 80044d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0204 	bic.w	r2, r2, #4
 80044e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69d9      	ldr	r1, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	61da      	str	r2, [r3, #28]
      break;
 80044f4:	e023      	b.n	800453e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 faab 	bl	8004a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69d9      	ldr	r1, [r3, #28]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	021a      	lsls	r2, r3, #8
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	61da      	str	r2, [r3, #28]
      break;
 8004536:	e002      	b.n	800453e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
      break;
 800453c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIM_ConfigClockSource+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e0b4      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x186>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800458a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a4:	d03e      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0xd4>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	f200 8087 	bhi.w	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	f000 8086 	beq.w	80046c2 <HAL_TIM_ConfigClockSource+0x172>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d87f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d01a      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xa6>
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d87b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d050      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x11a>
 80045c8:	2b60      	cmp	r3, #96	; 0x60
 80045ca:	d877      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d03c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xfa>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d873      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d058      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x13a>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d86f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d064      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d86b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d060      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15a>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d867      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15a>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d05a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	e062      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f000 faf1 	bl	8004bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	609a      	str	r2, [r3, #8]
      break;
 8004622:	e04f      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 fada 	bl	8004bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e03c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f000 fa4e 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2150      	movs	r1, #80	; 0x50
 8004662:	4618      	mov	r0, r3
 8004664:	f000 faa7 	bl	8004bb6 <TIM_ITRx_SetConfig>
      break;
 8004668:	e02c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fa6d 	bl	8004b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2160      	movs	r1, #96	; 0x60
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fa97 	bl	8004bb6 <TIM_ITRx_SetConfig>
      break;
 8004688:	e01c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fa2e 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa87 	bl	8004bb6 <TIM_ITRx_SetConfig>
      break;
 80046a8:	e00c      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fa7e 	bl	8004bb6 <TIM_ITRx_SetConfig>
      break;
 80046ba:	e003      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	e000      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a31      	ldr	r2, [pc, #196]	; (80047c8 <TIM_Base_SetConfig+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a30      	ldr	r2, [pc, #192]	; (80047cc <TIM_Base_SetConfig+0xec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <TIM_Base_SetConfig+0xf0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01b      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004738:	d017      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <TIM_Base_SetConfig+0xe8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <TIM_Base_SetConfig+0xec>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00f      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <TIM_Base_SetConfig+0xf0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00b      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <TIM_Base_SetConfig+0xf4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <TIM_Base_SetConfig+0xf8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <TIM_Base_SetConfig+0xfc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d108      	bne.n	800477c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 0302 	bic.w	r3, r3, #2
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <TIM_OC1_SetConfig+0xc8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0308 	bic.w	r3, r3, #8
 8004842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <TIM_OC1_SetConfig+0xc8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d111      	bne.n	8004882 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800486c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	40010000 	.word	0x40010000

080048ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0210 	bic.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <TIM_OC2_SetConfig+0xd4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10d      	bne.n	8004928 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <TIM_OC2_SetConfig+0xd4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d113      	bne.n	8004958 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000

08004984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_OC3_SetConfig+0xd0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10d      	bne.n	80049fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <TIM_OC3_SetConfig+0xd0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d113      	bne.n	8004a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000

08004a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <TIM_OC4_SetConfig+0x9c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d109      	bne.n	8004acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000

08004af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 030a 	bic.w	r3, r3, #10
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b087      	sub	sp, #28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0210 	bic.w	r2, r3, #16
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f043 0307 	orr.w	r3, r3, #7
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	021a      	lsls	r2, r3, #8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	2201      	movs	r2, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1a      	ldr	r2, [r3, #32]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	401a      	ands	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e050      	b.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d013      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10c      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40014000 	.word	0x40014000

08004d54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e03d      	b.n	8004dec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e03f      	b.n	8004e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fd f976 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	; 0x24
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fd23 	bl	8005888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d130      	bne.n	8004f0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_UART_Transmit_IT+0x26>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e029      	b.n	8004f10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Transmit_IT+0x38>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e022      	b.n	8004f10 <HAL_UART_Transmit_IT+0x7e>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2221      	movs	r2, #33	; 0x21
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d11d      	bne.n	8004f72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_UART_Receive_IT+0x26>
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e016      	b.n	8004f74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Receive_IT+0x38>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e00f      	b.n	8004f74 <HAL_UART_Receive_IT+0x58>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	461a      	mov	r2, r3
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fab5 	bl	80054d8 <UART_Start_Receive_IT>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	e000      	b.n	8004f74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b0ba      	sub	sp, #232	; 0xe8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x66>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fb99 	bl	8005712 <UART_Receive_IT>
      return;
 8004fe0:	e256      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80de 	beq.w	80051a8 <HAL_UART_IRQHandler+0x22c>
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80d1 	beq.w	80051a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_UART_IRQHandler+0xae>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_UART_IRQHandler+0xd2>
 8005036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_UART_IRQHandler+0xf6>
 800505a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <HAL_UART_IRQHandler+0x126>
 800507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f043 0208 	orr.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 81ed 	beq.w	8005486 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_UART_IRQHandler+0x14e>
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb24 	bl	8005712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_UART_IRQHandler+0x17a>
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d04f      	beq.n	8005196 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa2c 	bl	8005554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d141      	bne.n	800518e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800513a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800514e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1d9      	bne.n	800510a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	d013      	beq.n	8005186 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_UART_IRQHandler+0x3dc>)
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fea1 	bl	8002eb2 <HAL_DMA_Abort_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00e      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f990 	bl	80054ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e00a      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f98c 	bl	80054ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e006      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f988 	bl	80054ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051a2:	e170      	b.n	8005486 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	bf00      	nop
    return;
 80051a6:	e16e      	b.n	8005486 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 814a 	bne.w	8005446 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8143 	beq.w	8005446 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 813c 	beq.w	8005446 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	f040 80b4 	bne.w	800535c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8140 	beq.w	800548a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005212:	429a      	cmp	r2, r3
 8005214:	f080 8139 	bcs.w	800548a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800521e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	f000 8088 	beq.w	800533e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800525a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800525e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d9      	bne.n	800522e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800528a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800529e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e1      	bne.n	800527a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005320:	65ba      	str	r2, [r7, #88]	; 0x58
 8005322:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800532e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e3      	bne.n	80052fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	4618      	mov	r0, r3
 800533a:	f7fd fd4a 	bl	8002dd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005346:	b29b      	uxth	r3, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b29b      	uxth	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8b6 	bl	80054c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005354:	e099      	b.n	800548a <HAL_UART_IRQHandler+0x50e>
 8005356:	bf00      	nop
 8005358:	0800561b 	.word	0x0800561b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005364:	b29b      	uxth	r3, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 808b 	beq.w	800548e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8086 	beq.w	800548e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053a6:	647a      	str	r2, [r7, #68]	; 0x44
 80053a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e3      	bne.n	8005382 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053de:	633a      	str	r2, [r7, #48]	; 0x30
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e3      	bne.n	80053ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005424:	61fa      	str	r2, [r7, #28]
 8005426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	617b      	str	r3, [r7, #20]
   return(result);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e3      	bne.n	8005400 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f83e 	bl	80054c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005444:	e023      	b.n	800548e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_UART_IRQHandler+0x4ea>
 8005452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8ef 	bl	8005642 <UART_Transmit_IT>
    return;
 8005464:	e014      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <HAL_UART_IRQHandler+0x514>
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f92f 	bl	80056e2 <UART_EndTransmit_IT>
    return;
 8005484:	e004      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
    return;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
      return;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
      return;
 800548e:	bf00      	nop
  }
}
 8005490:	37e8      	adds	r7, #232	; 0xe8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop

08005498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2222      	movs	r2, #34	; 0x22
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005524:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0220 	orr.w	r2, r2, #32
 8005544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b095      	sub	sp, #84	; 0x54
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800557c:	643a      	str	r2, [r7, #64]	; 0x40
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d119      	bne.n	8005600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	60bb      	str	r3, [r7, #8]
   return(result);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f023 0310 	bic.w	r3, r3, #16
 80055e2:	647b      	str	r3, [r7, #68]	; 0x44
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ec:	61ba      	str	r2, [r7, #24]
 80055ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6979      	ldr	r1, [r7, #20]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800560e:	bf00      	nop
 8005610:	3754      	adds	r7, #84	; 0x54
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff ff39 	bl	80054ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b21      	cmp	r3, #33	; 0x21
 8005654:	d13e      	bne.n	80056d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d114      	bne.n	800568a <UART_Transmit_IT+0x48>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d110      	bne.n	800568a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800567c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]
 8005688:	e008      	b.n	800569c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6211      	str	r1, [r2, #32]
 8005694:	781a      	ldrb	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4619      	mov	r1, r3
 80056aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fec8 	bl	8005498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08c      	sub	sp, #48	; 0x30
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b22      	cmp	r3, #34	; 0x22
 8005724:	f040 80ab 	bne.w	800587e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005730:	d117      	bne.n	8005762 <UART_Receive_IT+0x50>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d113      	bne.n	8005762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	b29a      	uxth	r2, r3
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	1c9a      	adds	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
 8005760:	e026      	b.n	80057b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d007      	beq.n	8005786 <UART_Receive_IT+0x74>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <UART_Receive_IT+0x82>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e008      	b.n	80057a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4619      	mov	r1, r3
 80057be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d15a      	bne.n	800587a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0220 	bic.w	r2, r2, #32
 80057d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	2b01      	cmp	r3, #1
 8005802:	d135      	bne.n	8005870 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	613b      	str	r3, [r7, #16]
   return(result);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	623a      	str	r2, [r7, #32]
 800582c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	69f9      	ldr	r1, [r7, #28]
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	61bb      	str	r3, [r7, #24]
   return(result);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b10      	cmp	r3, #16
 800584a:	d10a      	bne.n	8005862 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fe29 	bl	80054c0 <HAL_UARTEx_RxEventCallback>
 800586e:	e002      	b.n	8005876 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fc fd7f 	bl	8002374 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e002      	b.n	8005880 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3730      	adds	r7, #48	; 0x30
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800588c:	b0c0      	sub	sp, #256	; 0x100
 800588e:	af00      	add	r7, sp, #0
 8005890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	ea40 0301 	orr.w	r3, r0, r1
 80058b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	431a      	orrs	r2, r3
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e0:	f021 010c 	bic.w	r1, r1, #12
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ee:	430b      	orrs	r3, r1
 80058f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	ea40 0301 	orr.w	r3, r0, r1
 800590e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <UART_SetConfig+0x2cc>)
 8005918:	429a      	cmp	r2, r3
 800591a:	d005      	beq.n	8005928 <UART_SetConfig+0xa0>
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <UART_SetConfig+0x2d0>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d104      	bne.n	8005932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fe fa26 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 800592c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005930:	e003      	b.n	800593a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005932:	f7fe fa0d 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8005936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005944:	f040 810c 	bne.w	8005b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	1891      	adds	r1, r2, r2
 8005960:	65b9      	str	r1, [r7, #88]	; 0x58
 8005962:	415b      	adcs	r3, r3
 8005964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800596a:	4621      	mov	r1, r4
 800596c:	eb12 0801 	adds.w	r8, r2, r1
 8005970:	4629      	mov	r1, r5
 8005972:	eb43 0901 	adc.w	r9, r3, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598a:	4690      	mov	r8, r2
 800598c:	4699      	mov	r9, r3
 800598e:	4623      	mov	r3, r4
 8005990:	eb18 0303 	adds.w	r3, r8, r3
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005998:	462b      	mov	r3, r5
 800599a:	eb49 0303 	adc.w	r3, r9, r3
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059b6:	460b      	mov	r3, r1
 80059b8:	18db      	adds	r3, r3, r3
 80059ba:	653b      	str	r3, [r7, #80]	; 0x50
 80059bc:	4613      	mov	r3, r2
 80059be:	eb42 0303 	adc.w	r3, r2, r3
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
 80059c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059cc:	f7fb f856 	bl	8000a7c <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <UART_SetConfig+0x2d4>)
 80059d6:	fba3 2302 	umull	r2, r3, r3, r2
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	011c      	lsls	r4, r3, #4
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059f8:	415b      	adcs	r3, r3
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a00:	4641      	mov	r1, r8
 8005a02:	eb12 0a01 	adds.w	sl, r2, r1
 8005a06:	4649      	mov	r1, r9
 8005a08:	eb43 0b01 	adc.w	fp, r3, r1
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a20:	4692      	mov	sl, r2
 8005a22:	469b      	mov	fp, r3
 8005a24:	4643      	mov	r3, r8
 8005a26:	eb1a 0303 	adds.w	r3, sl, r3
 8005a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	eb4b 0303 	adc.w	r3, fp, r3
 8005a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	18db      	adds	r3, r3, r3
 8005a50:	643b      	str	r3, [r7, #64]	; 0x40
 8005a52:	4613      	mov	r3, r2
 8005a54:	eb42 0303 	adc.w	r3, r2, r3
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a62:	f7fb f80b 	bl	8000a7c <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2264      	movs	r2, #100	; 0x64
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	1acb      	subs	r3, r1, r3
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a84:	fba3 2302 	umull	r2, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a90:	441c      	add	r4, r3
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aac:	415b      	adcs	r3, r3
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b08:	460b      	mov	r3, r1
 8005b0a:	18db      	adds	r3, r3, r3
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0e:	4613      	mov	r3, r2
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b1e:	f7fa ffad 	bl	8000a7c <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 0207 	and.w	r2, r3, #7
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4422      	add	r2, r4
 8005b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b50:	e105      	b.n	8005d5e <UART_SetConfig+0x4d6>
 8005b52:	bf00      	nop
 8005b54:	40011000 	.word	0x40011000
 8005b58:	40011400 	.word	0x40011400
 8005b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	6239      	str	r1, [r7, #32]
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b82:	4641      	mov	r1, r8
 8005b84:	1854      	adds	r4, r2, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	eb43 0501 	adc.w	r5, r3, r1
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	00eb      	lsls	r3, r5, #3
 8005b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b9a:	00e2      	lsls	r2, r4, #3
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	18e3      	adds	r3, r4, r3
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba8:	464b      	mov	r3, r9
 8005baa:	eb45 0303 	adc.w	r3, r5, r3
 8005bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bce:	4629      	mov	r1, r5
 8005bd0:	008b      	lsls	r3, r1, #2
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd8:	4621      	mov	r1, r4
 8005bda:	008a      	lsls	r2, r1, #2
 8005bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005be0:	f7fa ff4c 	bl	8000a7c <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011c      	lsls	r4, r3, #4
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	61b9      	str	r1, [r7, #24]
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	4641      	mov	r1, r8
 8005c16:	1851      	adds	r1, r2, r1
 8005c18:	6139      	str	r1, [r7, #16]
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	414b      	adcs	r3, r1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	00cb      	lsls	r3, r1, #3
 8005c30:	4651      	mov	r1, sl
 8005c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c36:	4651      	mov	r1, sl
 8005c38:	00ca      	lsls	r2, r1, #3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4642      	mov	r2, r8
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c48:	464b      	mov	r3, r9
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	008b      	lsls	r3, r1, #2
 8005c70:	4641      	mov	r1, r8
 8005c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c76:	4641      	mov	r1, r8
 8005c78:	008a      	lsls	r2, r1, #2
 8005c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c7e:	f7fa fefd 	bl	8000a7c <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	; 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	3332      	adds	r3, #50	; 0x32
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca6:	441c      	add	r4, r3
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cac:	2200      	movs	r2, #0
 8005cae:	673b      	str	r3, [r7, #112]	; 0x70
 8005cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8005cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	464b      	mov	r3, r9
 8005cba:	1891      	adds	r1, r2, r2
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	415b      	adcs	r3, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	1851      	adds	r1, r2, r1
 8005cca:	6039      	str	r1, [r7, #0]
 8005ccc:	4649      	mov	r1, r9
 8005cce:	414b      	adcs	r3, r1
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cde:	4659      	mov	r1, fp
 8005ce0:	00cb      	lsls	r3, r1, #3
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce8:	4651      	mov	r1, sl
 8005cea:	00ca      	lsls	r2, r1, #3
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4642      	mov	r2, r8
 8005cf4:	189b      	adds	r3, r3, r2
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	eb42 0303 	adc.w	r3, r2, r3
 8005d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	008b      	lsls	r3, r1, #2
 8005d1e:	4641      	mov	r1, r8
 8005d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d24:	4641      	mov	r1, r8
 8005d26:	008a      	lsls	r2, r1, #2
 8005d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d2c:	f7fa fea6 	bl	8000a7c <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d36:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2164      	movs	r1, #100	; 0x64
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	3332      	adds	r3, #50	; 0x32
 8005d48:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4422      	add	r2, r4
 8005d5c:	609a      	str	r2, [r3, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	51eb851f 	.word	0x51eb851f

08005d70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d74:	4904      	ldr	r1, [pc, #16]	; (8005d88 <MX_FATFS_Init+0x18>)
 8005d76:	4805      	ldr	r0, [pc, #20]	; (8005d8c <MX_FATFS_Init+0x1c>)
 8005d78:	f000 f8b0 	bl	8005edc <FATFS_LinkDriver>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <MX_FATFS_Init+0x20>)
 8005d82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000430 	.word	0x20000430
 8005d8c:	2000000c 	.word	0x2000000c
 8005d90:	2000042c 	.word	0x2000042c

08005d94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <USER_initialize+0x24>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <USER_initialize+0x24>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000009 	.word	0x20000009

08005dbc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <USER_status+0x24>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <USER_status+0x24>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000009 	.word	0x20000009

08005de4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005df4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005e12:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	603a      	str	r2, [r7, #0]
 8005e2a:	71fb      	strb	r3, [r7, #7]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
    return res;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e5c:	7a5b      	ldrb	r3, [r3, #9]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d131      	bne.n	8005ec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e64:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e66:	7a5b      	ldrb	r3, [r3, #9]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e74:	7a5b      	ldrb	r3, [r3, #9]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e84:	7a5b      	ldrb	r3, [r3, #9]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e8c:	4413      	add	r3, r2
 8005e8e:	79fa      	ldrb	r2, [r7, #7]
 8005e90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e94:	7a5b      	ldrb	r3, [r3, #9]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	b2d1      	uxtb	r1, r2
 8005e9c:	4a0e      	ldr	r2, [pc, #56]	; (8005ed8 <FATFS_LinkDriverEx+0x94>)
 8005e9e:	7251      	strb	r1, [r2, #9]
 8005ea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005ea2:	7dbb      	ldrb	r3, [r7, #22]
 8005ea4:	3330      	adds	r3, #48	; 0x30
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	223a      	movs	r2, #58	; 0x3a
 8005eb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	222f      	movs	r2, #47	; 0x2f
 8005eba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000434 	.word	0x20000434

08005edc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ffaa 	bl	8005e44 <FATFS_LinkDriverEx>
 8005ef0:	4603      	mov	r3, r0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <atoi>:
 8005efa:	220a      	movs	r2, #10
 8005efc:	2100      	movs	r1, #0
 8005efe:	f000 b8dd 	b.w	80060bc <strtol>
	...

08005f04 <__errno>:
 8005f04:	4b01      	ldr	r3, [pc, #4]	; (8005f0c <__errno+0x8>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000020 	.word	0x20000020

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f000 fd22 	bl	800696c <_init>
 8005f28:	1b64      	subs	r4, r4, r5
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	08006afc 	.word	0x08006afc
 8005f4c:	08006afc 	.word	0x08006afc
 8005f50:	08006afc 	.word	0x08006afc
 8005f54:	08006b00 	.word	0x08006b00

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <siprintf>:
 8005f68:	b40e      	push	{r1, r2, r3}
 8005f6a:	b500      	push	{lr}
 8005f6c:	b09c      	sub	sp, #112	; 0x70
 8005f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f70:	9002      	str	r0, [sp, #8]
 8005f72:	9006      	str	r0, [sp, #24]
 8005f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f78:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <siprintf+0x38>)
 8005f7a:	9107      	str	r1, [sp, #28]
 8005f7c:	9104      	str	r1, [sp, #16]
 8005f7e:	4909      	ldr	r1, [pc, #36]	; (8005fa4 <siprintf+0x3c>)
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	a902      	add	r1, sp, #8
 8005f8c:	f000 f8fc 	bl	8006188 <_svfiprintf_r>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	b01c      	add	sp, #112	; 0x70
 8005f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f9c:	b003      	add	sp, #12
 8005f9e:	4770      	bx	lr
 8005fa0:	20000020 	.word	0x20000020
 8005fa4:	ffff0208 	.word	0xffff0208

08005fa8 <strcpy>:
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fae:	f803 2b01 	strb.w	r2, [r3], #1
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d1f9      	bne.n	8005faa <strcpy+0x2>
 8005fb6:	4770      	bx	lr

08005fb8 <_strtol_l.constprop.0>:
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbe:	d001      	beq.n	8005fc4 <_strtol_l.constprop.0+0xc>
 8005fc0:	2b24      	cmp	r3, #36	; 0x24
 8005fc2:	d906      	bls.n	8005fd2 <_strtol_l.constprop.0+0x1a>
 8005fc4:	f7ff ff9e 	bl	8005f04 <__errno>
 8005fc8:	2316      	movs	r3, #22
 8005fca:	6003      	str	r3, [r0, #0]
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80060b8 <_strtol_l.constprop.0+0x100>
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	462e      	mov	r6, r5
 8005fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005fe2:	f017 0708 	ands.w	r7, r7, #8
 8005fe6:	d1f7      	bne.n	8005fd8 <_strtol_l.constprop.0+0x20>
 8005fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8005fea:	d132      	bne.n	8006052 <_strtol_l.constprop.0+0x9a>
 8005fec:	782c      	ldrb	r4, [r5, #0]
 8005fee:	2701      	movs	r7, #1
 8005ff0:	1cb5      	adds	r5, r6, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d05b      	beq.n	80060ae <_strtol_l.constprop.0+0xf6>
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d109      	bne.n	800600e <_strtol_l.constprop.0+0x56>
 8005ffa:	2c30      	cmp	r4, #48	; 0x30
 8005ffc:	d107      	bne.n	800600e <_strtol_l.constprop.0+0x56>
 8005ffe:	782c      	ldrb	r4, [r5, #0]
 8006000:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006004:	2c58      	cmp	r4, #88	; 0x58
 8006006:	d14d      	bne.n	80060a4 <_strtol_l.constprop.0+0xec>
 8006008:	786c      	ldrb	r4, [r5, #1]
 800600a:	2310      	movs	r3, #16
 800600c:	3502      	adds	r5, #2
 800600e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006012:	f108 38ff 	add.w	r8, r8, #4294967295
 8006016:	f04f 0c00 	mov.w	ip, #0
 800601a:	fbb8 f9f3 	udiv	r9, r8, r3
 800601e:	4666      	mov	r6, ip
 8006020:	fb03 8a19 	mls	sl, r3, r9, r8
 8006024:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006028:	f1be 0f09 	cmp.w	lr, #9
 800602c:	d816      	bhi.n	800605c <_strtol_l.constprop.0+0xa4>
 800602e:	4674      	mov	r4, lr
 8006030:	42a3      	cmp	r3, r4
 8006032:	dd24      	ble.n	800607e <_strtol_l.constprop.0+0xc6>
 8006034:	f1bc 0f00 	cmp.w	ip, #0
 8006038:	db1e      	blt.n	8006078 <_strtol_l.constprop.0+0xc0>
 800603a:	45b1      	cmp	r9, r6
 800603c:	d31c      	bcc.n	8006078 <_strtol_l.constprop.0+0xc0>
 800603e:	d101      	bne.n	8006044 <_strtol_l.constprop.0+0x8c>
 8006040:	45a2      	cmp	sl, r4
 8006042:	db19      	blt.n	8006078 <_strtol_l.constprop.0+0xc0>
 8006044:	fb06 4603 	mla	r6, r6, r3, r4
 8006048:	f04f 0c01 	mov.w	ip, #1
 800604c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006050:	e7e8      	b.n	8006024 <_strtol_l.constprop.0+0x6c>
 8006052:	2c2b      	cmp	r4, #43	; 0x2b
 8006054:	bf04      	itt	eq
 8006056:	782c      	ldrbeq	r4, [r5, #0]
 8006058:	1cb5      	addeq	r5, r6, #2
 800605a:	e7ca      	b.n	8005ff2 <_strtol_l.constprop.0+0x3a>
 800605c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006060:	f1be 0f19 	cmp.w	lr, #25
 8006064:	d801      	bhi.n	800606a <_strtol_l.constprop.0+0xb2>
 8006066:	3c37      	subs	r4, #55	; 0x37
 8006068:	e7e2      	b.n	8006030 <_strtol_l.constprop.0+0x78>
 800606a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800606e:	f1be 0f19 	cmp.w	lr, #25
 8006072:	d804      	bhi.n	800607e <_strtol_l.constprop.0+0xc6>
 8006074:	3c57      	subs	r4, #87	; 0x57
 8006076:	e7db      	b.n	8006030 <_strtol_l.constprop.0+0x78>
 8006078:	f04f 3cff 	mov.w	ip, #4294967295
 800607c:	e7e6      	b.n	800604c <_strtol_l.constprop.0+0x94>
 800607e:	f1bc 0f00 	cmp.w	ip, #0
 8006082:	da05      	bge.n	8006090 <_strtol_l.constprop.0+0xd8>
 8006084:	2322      	movs	r3, #34	; 0x22
 8006086:	6003      	str	r3, [r0, #0]
 8006088:	4646      	mov	r6, r8
 800608a:	b942      	cbnz	r2, 800609e <_strtol_l.constprop.0+0xe6>
 800608c:	4630      	mov	r0, r6
 800608e:	e79e      	b.n	8005fce <_strtol_l.constprop.0+0x16>
 8006090:	b107      	cbz	r7, 8006094 <_strtol_l.constprop.0+0xdc>
 8006092:	4276      	negs	r6, r6
 8006094:	2a00      	cmp	r2, #0
 8006096:	d0f9      	beq.n	800608c <_strtol_l.constprop.0+0xd4>
 8006098:	f1bc 0f00 	cmp.w	ip, #0
 800609c:	d000      	beq.n	80060a0 <_strtol_l.constprop.0+0xe8>
 800609e:	1e69      	subs	r1, r5, #1
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	e7f3      	b.n	800608c <_strtol_l.constprop.0+0xd4>
 80060a4:	2430      	movs	r4, #48	; 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1b1      	bne.n	800600e <_strtol_l.constprop.0+0x56>
 80060aa:	2308      	movs	r3, #8
 80060ac:	e7af      	b.n	800600e <_strtol_l.constprop.0+0x56>
 80060ae:	2c30      	cmp	r4, #48	; 0x30
 80060b0:	d0a5      	beq.n	8005ffe <_strtol_l.constprop.0+0x46>
 80060b2:	230a      	movs	r3, #10
 80060b4:	e7ab      	b.n	800600e <_strtol_l.constprop.0+0x56>
 80060b6:	bf00      	nop
 80060b8:	080069c1 	.word	0x080069c1

080060bc <strtol>:
 80060bc:	4613      	mov	r3, r2
 80060be:	460a      	mov	r2, r1
 80060c0:	4601      	mov	r1, r0
 80060c2:	4802      	ldr	r0, [pc, #8]	; (80060cc <strtol+0x10>)
 80060c4:	6800      	ldr	r0, [r0, #0]
 80060c6:	f7ff bf77 	b.w	8005fb8 <_strtol_l.constprop.0>
 80060ca:	bf00      	nop
 80060cc:	20000020 	.word	0x20000020

080060d0 <__ssputs_r>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	688e      	ldr	r6, [r1, #8]
 80060d6:	429e      	cmp	r6, r3
 80060d8:	4682      	mov	sl, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	4690      	mov	r8, r2
 80060de:	461f      	mov	r7, r3
 80060e0:	d838      	bhi.n	8006154 <__ssputs_r+0x84>
 80060e2:	898a      	ldrh	r2, [r1, #12]
 80060e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060e8:	d032      	beq.n	8006150 <__ssputs_r+0x80>
 80060ea:	6825      	ldr	r5, [r4, #0]
 80060ec:	6909      	ldr	r1, [r1, #16]
 80060ee:	eba5 0901 	sub.w	r9, r5, r1
 80060f2:	6965      	ldr	r5, [r4, #20]
 80060f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060fc:	3301      	adds	r3, #1
 80060fe:	444b      	add	r3, r9
 8006100:	106d      	asrs	r5, r5, #1
 8006102:	429d      	cmp	r5, r3
 8006104:	bf38      	it	cc
 8006106:	461d      	movcc	r5, r3
 8006108:	0553      	lsls	r3, r2, #21
 800610a:	d531      	bpl.n	8006170 <__ssputs_r+0xa0>
 800610c:	4629      	mov	r1, r5
 800610e:	f000 fb63 	bl	80067d8 <_malloc_r>
 8006112:	4606      	mov	r6, r0
 8006114:	b950      	cbnz	r0, 800612c <__ssputs_r+0x5c>
 8006116:	230c      	movs	r3, #12
 8006118:	f8ca 3000 	str.w	r3, [sl]
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	6921      	ldr	r1, [r4, #16]
 800612e:	464a      	mov	r2, r9
 8006130:	f000 fabe 	bl	80066b0 <memcpy>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	6126      	str	r6, [r4, #16]
 8006142:	6165      	str	r5, [r4, #20]
 8006144:	444e      	add	r6, r9
 8006146:	eba5 0509 	sub.w	r5, r5, r9
 800614a:	6026      	str	r6, [r4, #0]
 800614c:	60a5      	str	r5, [r4, #8]
 800614e:	463e      	mov	r6, r7
 8006150:	42be      	cmp	r6, r7
 8006152:	d900      	bls.n	8006156 <__ssputs_r+0x86>
 8006154:	463e      	mov	r6, r7
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	4632      	mov	r2, r6
 800615a:	4641      	mov	r1, r8
 800615c:	f000 fab6 	bl	80066cc <memmove>
 8006160:	68a3      	ldr	r3, [r4, #8]
 8006162:	1b9b      	subs	r3, r3, r6
 8006164:	60a3      	str	r3, [r4, #8]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	4433      	add	r3, r6
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	2000      	movs	r0, #0
 800616e:	e7db      	b.n	8006128 <__ssputs_r+0x58>
 8006170:	462a      	mov	r2, r5
 8006172:	f000 fba5 	bl	80068c0 <_realloc_r>
 8006176:	4606      	mov	r6, r0
 8006178:	2800      	cmp	r0, #0
 800617a:	d1e1      	bne.n	8006140 <__ssputs_r+0x70>
 800617c:	6921      	ldr	r1, [r4, #16]
 800617e:	4650      	mov	r0, sl
 8006180:	f000 fabe 	bl	8006700 <_free_r>
 8006184:	e7c7      	b.n	8006116 <__ssputs_r+0x46>
	...

08006188 <_svfiprintf_r>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	4698      	mov	r8, r3
 800618e:	898b      	ldrh	r3, [r1, #12]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	b09d      	sub	sp, #116	; 0x74
 8006194:	4607      	mov	r7, r0
 8006196:	460d      	mov	r5, r1
 8006198:	4614      	mov	r4, r2
 800619a:	d50e      	bpl.n	80061ba <_svfiprintf_r+0x32>
 800619c:	690b      	ldr	r3, [r1, #16]
 800619e:	b963      	cbnz	r3, 80061ba <_svfiprintf_r+0x32>
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	f000 fb19 	bl	80067d8 <_malloc_r>
 80061a6:	6028      	str	r0, [r5, #0]
 80061a8:	6128      	str	r0, [r5, #16]
 80061aa:	b920      	cbnz	r0, 80061b6 <_svfiprintf_r+0x2e>
 80061ac:	230c      	movs	r3, #12
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	e0d1      	b.n	800635a <_svfiprintf_r+0x1d2>
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	616b      	str	r3, [r5, #20]
 80061ba:	2300      	movs	r3, #0
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	2320      	movs	r3, #32
 80061c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061c8:	2330      	movs	r3, #48	; 0x30
 80061ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006374 <_svfiprintf_r+0x1ec>
 80061ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061d2:	f04f 0901 	mov.w	r9, #1
 80061d6:	4623      	mov	r3, r4
 80061d8:	469a      	mov	sl, r3
 80061da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061de:	b10a      	cbz	r2, 80061e4 <_svfiprintf_r+0x5c>
 80061e0:	2a25      	cmp	r2, #37	; 0x25
 80061e2:	d1f9      	bne.n	80061d8 <_svfiprintf_r+0x50>
 80061e4:	ebba 0b04 	subs.w	fp, sl, r4
 80061e8:	d00b      	beq.n	8006202 <_svfiprintf_r+0x7a>
 80061ea:	465b      	mov	r3, fp
 80061ec:	4622      	mov	r2, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff ff6d 	bl	80060d0 <__ssputs_r>
 80061f6:	3001      	adds	r0, #1
 80061f8:	f000 80aa 	beq.w	8006350 <_svfiprintf_r+0x1c8>
 80061fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061fe:	445a      	add	r2, fp
 8006200:	9209      	str	r2, [sp, #36]	; 0x24
 8006202:	f89a 3000 	ldrb.w	r3, [sl]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80a2 	beq.w	8006350 <_svfiprintf_r+0x1c8>
 800620c:	2300      	movs	r3, #0
 800620e:	f04f 32ff 	mov.w	r2, #4294967295
 8006212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006216:	f10a 0a01 	add.w	sl, sl, #1
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	9307      	str	r3, [sp, #28]
 800621e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006222:	931a      	str	r3, [sp, #104]	; 0x68
 8006224:	4654      	mov	r4, sl
 8006226:	2205      	movs	r2, #5
 8006228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622c:	4851      	ldr	r0, [pc, #324]	; (8006374 <_svfiprintf_r+0x1ec>)
 800622e:	f7f9 ffdf 	bl	80001f0 <memchr>
 8006232:	9a04      	ldr	r2, [sp, #16]
 8006234:	b9d8      	cbnz	r0, 800626e <_svfiprintf_r+0xe6>
 8006236:	06d0      	lsls	r0, r2, #27
 8006238:	bf44      	itt	mi
 800623a:	2320      	movmi	r3, #32
 800623c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006240:	0711      	lsls	r1, r2, #28
 8006242:	bf44      	itt	mi
 8006244:	232b      	movmi	r3, #43	; 0x2b
 8006246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800624a:	f89a 3000 	ldrb.w	r3, [sl]
 800624e:	2b2a      	cmp	r3, #42	; 0x2a
 8006250:	d015      	beq.n	800627e <_svfiprintf_r+0xf6>
 8006252:	9a07      	ldr	r2, [sp, #28]
 8006254:	4654      	mov	r4, sl
 8006256:	2000      	movs	r0, #0
 8006258:	f04f 0c0a 	mov.w	ip, #10
 800625c:	4621      	mov	r1, r4
 800625e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006262:	3b30      	subs	r3, #48	; 0x30
 8006264:	2b09      	cmp	r3, #9
 8006266:	d94e      	bls.n	8006306 <_svfiprintf_r+0x17e>
 8006268:	b1b0      	cbz	r0, 8006298 <_svfiprintf_r+0x110>
 800626a:	9207      	str	r2, [sp, #28]
 800626c:	e014      	b.n	8006298 <_svfiprintf_r+0x110>
 800626e:	eba0 0308 	sub.w	r3, r0, r8
 8006272:	fa09 f303 	lsl.w	r3, r9, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	46a2      	mov	sl, r4
 800627c:	e7d2      	b.n	8006224 <_svfiprintf_r+0x9c>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	1d19      	adds	r1, r3, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	9103      	str	r1, [sp, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfbb      	ittet	lt
 800628a:	425b      	neglt	r3, r3
 800628c:	f042 0202 	orrlt.w	r2, r2, #2
 8006290:	9307      	strge	r3, [sp, #28]
 8006292:	9307      	strlt	r3, [sp, #28]
 8006294:	bfb8      	it	lt
 8006296:	9204      	strlt	r2, [sp, #16]
 8006298:	7823      	ldrb	r3, [r4, #0]
 800629a:	2b2e      	cmp	r3, #46	; 0x2e
 800629c:	d10c      	bne.n	80062b8 <_svfiprintf_r+0x130>
 800629e:	7863      	ldrb	r3, [r4, #1]
 80062a0:	2b2a      	cmp	r3, #42	; 0x2a
 80062a2:	d135      	bne.n	8006310 <_svfiprintf_r+0x188>
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	1d1a      	adds	r2, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	9203      	str	r2, [sp, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfb8      	it	lt
 80062b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062b4:	3402      	adds	r4, #2
 80062b6:	9305      	str	r3, [sp, #20]
 80062b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006384 <_svfiprintf_r+0x1fc>
 80062bc:	7821      	ldrb	r1, [r4, #0]
 80062be:	2203      	movs	r2, #3
 80062c0:	4650      	mov	r0, sl
 80062c2:	f7f9 ff95 	bl	80001f0 <memchr>
 80062c6:	b140      	cbz	r0, 80062da <_svfiprintf_r+0x152>
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	eba0 000a 	sub.w	r0, r0, sl
 80062ce:	fa03 f000 	lsl.w	r0, r3, r0
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	4303      	orrs	r3, r0
 80062d6:	3401      	adds	r4, #1
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062de:	4826      	ldr	r0, [pc, #152]	; (8006378 <_svfiprintf_r+0x1f0>)
 80062e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062e4:	2206      	movs	r2, #6
 80062e6:	f7f9 ff83 	bl	80001f0 <memchr>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d038      	beq.n	8006360 <_svfiprintf_r+0x1d8>
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <_svfiprintf_r+0x1f4>)
 80062f0:	bb1b      	cbnz	r3, 800633a <_svfiprintf_r+0x1b2>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	3307      	adds	r3, #7
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	3308      	adds	r3, #8
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	4433      	add	r3, r6
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	e767      	b.n	80061d6 <_svfiprintf_r+0x4e>
 8006306:	fb0c 3202 	mla	r2, ip, r2, r3
 800630a:	460c      	mov	r4, r1
 800630c:	2001      	movs	r0, #1
 800630e:	e7a5      	b.n	800625c <_svfiprintf_r+0xd4>
 8006310:	2300      	movs	r3, #0
 8006312:	3401      	adds	r4, #1
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	4619      	mov	r1, r3
 8006318:	f04f 0c0a 	mov.w	ip, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006322:	3a30      	subs	r2, #48	; 0x30
 8006324:	2a09      	cmp	r2, #9
 8006326:	d903      	bls.n	8006330 <_svfiprintf_r+0x1a8>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0c5      	beq.n	80062b8 <_svfiprintf_r+0x130>
 800632c:	9105      	str	r1, [sp, #20]
 800632e:	e7c3      	b.n	80062b8 <_svfiprintf_r+0x130>
 8006330:	fb0c 2101 	mla	r1, ip, r1, r2
 8006334:	4604      	mov	r4, r0
 8006336:	2301      	movs	r3, #1
 8006338:	e7f0      	b.n	800631c <_svfiprintf_r+0x194>
 800633a:	ab03      	add	r3, sp, #12
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	462a      	mov	r2, r5
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <_svfiprintf_r+0x1f8>)
 8006342:	a904      	add	r1, sp, #16
 8006344:	4638      	mov	r0, r7
 8006346:	f3af 8000 	nop.w
 800634a:	1c42      	adds	r2, r0, #1
 800634c:	4606      	mov	r6, r0
 800634e:	d1d6      	bne.n	80062fe <_svfiprintf_r+0x176>
 8006350:	89ab      	ldrh	r3, [r5, #12]
 8006352:	065b      	lsls	r3, r3, #25
 8006354:	f53f af2c 	bmi.w	80061b0 <_svfiprintf_r+0x28>
 8006358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800635a:	b01d      	add	sp, #116	; 0x74
 800635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006360:	ab03      	add	r3, sp, #12
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	462a      	mov	r2, r5
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <_svfiprintf_r+0x1f8>)
 8006368:	a904      	add	r1, sp, #16
 800636a:	4638      	mov	r0, r7
 800636c:	f000 f87a 	bl	8006464 <_printf_i>
 8006370:	e7eb      	b.n	800634a <_svfiprintf_r+0x1c2>
 8006372:	bf00      	nop
 8006374:	08006ac1 	.word	0x08006ac1
 8006378:	08006acb 	.word	0x08006acb
 800637c:	00000000 	.word	0x00000000
 8006380:	080060d1 	.word	0x080060d1
 8006384:	08006ac7 	.word	0x08006ac7

08006388 <_printf_common>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	4616      	mov	r6, r2
 800638e:	4699      	mov	r9, r3
 8006390:	688a      	ldr	r2, [r1, #8]
 8006392:	690b      	ldr	r3, [r1, #16]
 8006394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006398:	4293      	cmp	r3, r2
 800639a:	bfb8      	it	lt
 800639c:	4613      	movlt	r3, r2
 800639e:	6033      	str	r3, [r6, #0]
 80063a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a4:	4607      	mov	r7, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	b10a      	cbz	r2, 80063ae <_printf_common+0x26>
 80063aa:	3301      	adds	r3, #1
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	0699      	lsls	r1, r3, #26
 80063b2:	bf42      	ittt	mi
 80063b4:	6833      	ldrmi	r3, [r6, #0]
 80063b6:	3302      	addmi	r3, #2
 80063b8:	6033      	strmi	r3, [r6, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	f015 0506 	ands.w	r5, r5, #6
 80063c0:	d106      	bne.n	80063d0 <_printf_common+0x48>
 80063c2:	f104 0a19 	add.w	sl, r4, #25
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	6832      	ldr	r2, [r6, #0]
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dc26      	bgt.n	800641e <_printf_common+0x96>
 80063d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d4:	1e13      	subs	r3, r2, #0
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	0692      	lsls	r2, r2, #26
 80063de:	d42b      	bmi.n	8006438 <_printf_common+0xb0>
 80063e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e4:	4649      	mov	r1, r9
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d01e      	beq.n	800642c <_printf_common+0xa4>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	68e5      	ldr	r5, [r4, #12]
 80063f2:	6832      	ldr	r2, [r6, #0]
 80063f4:	f003 0306 	and.w	r3, r3, #6
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	bf08      	it	eq
 80063fc:	1aad      	subeq	r5, r5, r2
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	bf0c      	ite	eq
 8006404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006408:	2500      	movne	r5, #0
 800640a:	4293      	cmp	r3, r2
 800640c:	bfc4      	itt	gt
 800640e:	1a9b      	subgt	r3, r3, r2
 8006410:	18ed      	addgt	r5, r5, r3
 8006412:	2600      	movs	r6, #0
 8006414:	341a      	adds	r4, #26
 8006416:	42b5      	cmp	r5, r6
 8006418:	d11a      	bne.n	8006450 <_printf_common+0xc8>
 800641a:	2000      	movs	r0, #0
 800641c:	e008      	b.n	8006430 <_printf_common+0xa8>
 800641e:	2301      	movs	r3, #1
 8006420:	4652      	mov	r2, sl
 8006422:	4649      	mov	r1, r9
 8006424:	4638      	mov	r0, r7
 8006426:	47c0      	blx	r8
 8006428:	3001      	adds	r0, #1
 800642a:	d103      	bne.n	8006434 <_printf_common+0xac>
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006434:	3501      	adds	r5, #1
 8006436:	e7c6      	b.n	80063c6 <_printf_common+0x3e>
 8006438:	18e1      	adds	r1, r4, r3
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	2030      	movs	r0, #48	; 0x30
 800643e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006442:	4422      	add	r2, r4
 8006444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800644c:	3302      	adds	r3, #2
 800644e:	e7c7      	b.n	80063e0 <_printf_common+0x58>
 8006450:	2301      	movs	r3, #1
 8006452:	4622      	mov	r2, r4
 8006454:	4649      	mov	r1, r9
 8006456:	4638      	mov	r0, r7
 8006458:	47c0      	blx	r8
 800645a:	3001      	adds	r0, #1
 800645c:	d0e6      	beq.n	800642c <_printf_common+0xa4>
 800645e:	3601      	adds	r6, #1
 8006460:	e7d9      	b.n	8006416 <_printf_common+0x8e>
	...

08006464 <_printf_i>:
 8006464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	7e0f      	ldrb	r7, [r1, #24]
 800646a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800646c:	2f78      	cmp	r7, #120	; 0x78
 800646e:	4691      	mov	r9, r2
 8006470:	4680      	mov	r8, r0
 8006472:	460c      	mov	r4, r1
 8006474:	469a      	mov	sl, r3
 8006476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800647a:	d807      	bhi.n	800648c <_printf_i+0x28>
 800647c:	2f62      	cmp	r7, #98	; 0x62
 800647e:	d80a      	bhi.n	8006496 <_printf_i+0x32>
 8006480:	2f00      	cmp	r7, #0
 8006482:	f000 80d8 	beq.w	8006636 <_printf_i+0x1d2>
 8006486:	2f58      	cmp	r7, #88	; 0x58
 8006488:	f000 80a3 	beq.w	80065d2 <_printf_i+0x16e>
 800648c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006494:	e03a      	b.n	800650c <_printf_i+0xa8>
 8006496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800649a:	2b15      	cmp	r3, #21
 800649c:	d8f6      	bhi.n	800648c <_printf_i+0x28>
 800649e:	a101      	add	r1, pc, #4	; (adr r1, 80064a4 <_printf_i+0x40>)
 80064a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a4:	080064fd 	.word	0x080064fd
 80064a8:	08006511 	.word	0x08006511
 80064ac:	0800648d 	.word	0x0800648d
 80064b0:	0800648d 	.word	0x0800648d
 80064b4:	0800648d 	.word	0x0800648d
 80064b8:	0800648d 	.word	0x0800648d
 80064bc:	08006511 	.word	0x08006511
 80064c0:	0800648d 	.word	0x0800648d
 80064c4:	0800648d 	.word	0x0800648d
 80064c8:	0800648d 	.word	0x0800648d
 80064cc:	0800648d 	.word	0x0800648d
 80064d0:	0800661d 	.word	0x0800661d
 80064d4:	08006541 	.word	0x08006541
 80064d8:	080065ff 	.word	0x080065ff
 80064dc:	0800648d 	.word	0x0800648d
 80064e0:	0800648d 	.word	0x0800648d
 80064e4:	0800663f 	.word	0x0800663f
 80064e8:	0800648d 	.word	0x0800648d
 80064ec:	08006541 	.word	0x08006541
 80064f0:	0800648d 	.word	0x0800648d
 80064f4:	0800648d 	.word	0x0800648d
 80064f8:	08006607 	.word	0x08006607
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	1d1a      	adds	r2, r3, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	602a      	str	r2, [r5, #0]
 8006504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800650c:	2301      	movs	r3, #1
 800650e:	e0a3      	b.n	8006658 <_printf_i+0x1f4>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	6829      	ldr	r1, [r5, #0]
 8006514:	0606      	lsls	r6, r0, #24
 8006516:	f101 0304 	add.w	r3, r1, #4
 800651a:	d50a      	bpl.n	8006532 <_printf_i+0xce>
 800651c:	680e      	ldr	r6, [r1, #0]
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	2e00      	cmp	r6, #0
 8006522:	da03      	bge.n	800652c <_printf_i+0xc8>
 8006524:	232d      	movs	r3, #45	; 0x2d
 8006526:	4276      	negs	r6, r6
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	485e      	ldr	r0, [pc, #376]	; (80066a8 <_printf_i+0x244>)
 800652e:	230a      	movs	r3, #10
 8006530:	e019      	b.n	8006566 <_printf_i+0x102>
 8006532:	680e      	ldr	r6, [r1, #0]
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653a:	bf18      	it	ne
 800653c:	b236      	sxthne	r6, r6
 800653e:	e7ef      	b.n	8006520 <_printf_i+0xbc>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	6029      	str	r1, [r5, #0]
 8006548:	0601      	lsls	r1, r0, #24
 800654a:	d501      	bpl.n	8006550 <_printf_i+0xec>
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0xf2>
 8006550:	0646      	lsls	r6, r0, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0xe8>
 8006554:	881e      	ldrh	r6, [r3, #0]
 8006556:	4854      	ldr	r0, [pc, #336]	; (80066a8 <_printf_i+0x244>)
 8006558:	2f6f      	cmp	r7, #111	; 0x6f
 800655a:	bf0c      	ite	eq
 800655c:	2308      	moveq	r3, #8
 800655e:	230a      	movne	r3, #10
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006566:	6865      	ldr	r5, [r4, #4]
 8006568:	60a5      	str	r5, [r4, #8]
 800656a:	2d00      	cmp	r5, #0
 800656c:	bfa2      	ittt	ge
 800656e:	6821      	ldrge	r1, [r4, #0]
 8006570:	f021 0104 	bicge.w	r1, r1, #4
 8006574:	6021      	strge	r1, [r4, #0]
 8006576:	b90e      	cbnz	r6, 800657c <_printf_i+0x118>
 8006578:	2d00      	cmp	r5, #0
 800657a:	d04d      	beq.n	8006618 <_printf_i+0x1b4>
 800657c:	4615      	mov	r5, r2
 800657e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006582:	fb03 6711 	mls	r7, r3, r1, r6
 8006586:	5dc7      	ldrb	r7, [r0, r7]
 8006588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800658c:	4637      	mov	r7, r6
 800658e:	42bb      	cmp	r3, r7
 8006590:	460e      	mov	r6, r1
 8006592:	d9f4      	bls.n	800657e <_printf_i+0x11a>
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10b      	bne.n	80065b0 <_printf_i+0x14c>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07de      	lsls	r6, r3, #31
 800659c:	d508      	bpl.n	80065b0 <_printf_i+0x14c>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bfde      	ittt	le
 80065a6:	2330      	movle	r3, #48	; 0x30
 80065a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065b0:	1b52      	subs	r2, r2, r5
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff fee2 	bl	8006388 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d14c      	bne.n	8006662 <_printf_i+0x1fe>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	b004      	add	sp, #16
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	4835      	ldr	r0, [pc, #212]	; (80066a8 <_printf_i+0x244>)
 80065d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d8:	6829      	ldr	r1, [r5, #0]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e0:	6029      	str	r1, [r5, #0]
 80065e2:	061d      	lsls	r5, r3, #24
 80065e4:	d514      	bpl.n	8006610 <_printf_i+0x1ac>
 80065e6:	07df      	lsls	r7, r3, #31
 80065e8:	bf44      	itt	mi
 80065ea:	f043 0320 	orrmi.w	r3, r3, #32
 80065ee:	6023      	strmi	r3, [r4, #0]
 80065f0:	b91e      	cbnz	r6, 80065fa <_printf_i+0x196>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	f023 0320 	bic.w	r3, r3, #32
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	2310      	movs	r3, #16
 80065fc:	e7b0      	b.n	8006560 <_printf_i+0xfc>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f043 0320 	orr.w	r3, r3, #32
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	2378      	movs	r3, #120	; 0x78
 8006608:	4828      	ldr	r0, [pc, #160]	; (80066ac <_printf_i+0x248>)
 800660a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800660e:	e7e3      	b.n	80065d8 <_printf_i+0x174>
 8006610:	0659      	lsls	r1, r3, #25
 8006612:	bf48      	it	mi
 8006614:	b2b6      	uxthmi	r6, r6
 8006616:	e7e6      	b.n	80065e6 <_printf_i+0x182>
 8006618:	4615      	mov	r5, r2
 800661a:	e7bb      	b.n	8006594 <_printf_i+0x130>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	6826      	ldr	r6, [r4, #0]
 8006620:	6961      	ldr	r1, [r4, #20]
 8006622:	1d18      	adds	r0, r3, #4
 8006624:	6028      	str	r0, [r5, #0]
 8006626:	0635      	lsls	r5, r6, #24
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	d501      	bpl.n	8006630 <_printf_i+0x1cc>
 800662c:	6019      	str	r1, [r3, #0]
 800662e:	e002      	b.n	8006636 <_printf_i+0x1d2>
 8006630:	0670      	lsls	r0, r6, #25
 8006632:	d5fb      	bpl.n	800662c <_printf_i+0x1c8>
 8006634:	8019      	strh	r1, [r3, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	4615      	mov	r5, r2
 800663c:	e7ba      	b.n	80065b4 <_printf_i+0x150>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	602a      	str	r2, [r5, #0]
 8006644:	681d      	ldr	r5, [r3, #0]
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	2100      	movs	r1, #0
 800664a:	4628      	mov	r0, r5
 800664c:	f7f9 fdd0 	bl	80001f0 <memchr>
 8006650:	b108      	cbz	r0, 8006656 <_printf_i+0x1f2>
 8006652:	1b40      	subs	r0, r0, r5
 8006654:	6060      	str	r0, [r4, #4]
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	2300      	movs	r3, #0
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006660:	e7a8      	b.n	80065b4 <_printf_i+0x150>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	462a      	mov	r2, r5
 8006666:	4649      	mov	r1, r9
 8006668:	4640      	mov	r0, r8
 800666a:	47d0      	blx	sl
 800666c:	3001      	adds	r0, #1
 800666e:	d0ab      	beq.n	80065c8 <_printf_i+0x164>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	079b      	lsls	r3, r3, #30
 8006674:	d413      	bmi.n	800669e <_printf_i+0x23a>
 8006676:	68e0      	ldr	r0, [r4, #12]
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	4298      	cmp	r0, r3
 800667c:	bfb8      	it	lt
 800667e:	4618      	movlt	r0, r3
 8006680:	e7a4      	b.n	80065cc <_printf_i+0x168>
 8006682:	2301      	movs	r3, #1
 8006684:	4632      	mov	r2, r6
 8006686:	4649      	mov	r1, r9
 8006688:	4640      	mov	r0, r8
 800668a:	47d0      	blx	sl
 800668c:	3001      	adds	r0, #1
 800668e:	d09b      	beq.n	80065c8 <_printf_i+0x164>
 8006690:	3501      	adds	r5, #1
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	9903      	ldr	r1, [sp, #12]
 8006696:	1a5b      	subs	r3, r3, r1
 8006698:	42ab      	cmp	r3, r5
 800669a:	dcf2      	bgt.n	8006682 <_printf_i+0x21e>
 800669c:	e7eb      	b.n	8006676 <_printf_i+0x212>
 800669e:	2500      	movs	r5, #0
 80066a0:	f104 0619 	add.w	r6, r4, #25
 80066a4:	e7f5      	b.n	8006692 <_printf_i+0x22e>
 80066a6:	bf00      	nop
 80066a8:	08006ad2 	.word	0x08006ad2
 80066ac:	08006ae3 	.word	0x08006ae3

080066b0 <memcpy>:
 80066b0:	440a      	add	r2, r1
 80066b2:	4291      	cmp	r1, r2
 80066b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b8:	d100      	bne.n	80066bc <memcpy+0xc>
 80066ba:	4770      	bx	lr
 80066bc:	b510      	push	{r4, lr}
 80066be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c6:	4291      	cmp	r1, r2
 80066c8:	d1f9      	bne.n	80066be <memcpy+0xe>
 80066ca:	bd10      	pop	{r4, pc}

080066cc <memmove>:
 80066cc:	4288      	cmp	r0, r1
 80066ce:	b510      	push	{r4, lr}
 80066d0:	eb01 0402 	add.w	r4, r1, r2
 80066d4:	d902      	bls.n	80066dc <memmove+0x10>
 80066d6:	4284      	cmp	r4, r0
 80066d8:	4623      	mov	r3, r4
 80066da:	d807      	bhi.n	80066ec <memmove+0x20>
 80066dc:	1e43      	subs	r3, r0, #1
 80066de:	42a1      	cmp	r1, r4
 80066e0:	d008      	beq.n	80066f4 <memmove+0x28>
 80066e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ea:	e7f8      	b.n	80066de <memmove+0x12>
 80066ec:	4402      	add	r2, r0
 80066ee:	4601      	mov	r1, r0
 80066f0:	428a      	cmp	r2, r1
 80066f2:	d100      	bne.n	80066f6 <memmove+0x2a>
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066fe:	e7f7      	b.n	80066f0 <memmove+0x24>

08006700 <_free_r>:
 8006700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006702:	2900      	cmp	r1, #0
 8006704:	d044      	beq.n	8006790 <_free_r+0x90>
 8006706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670a:	9001      	str	r0, [sp, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f1a1 0404 	sub.w	r4, r1, #4
 8006712:	bfb8      	it	lt
 8006714:	18e4      	addlt	r4, r4, r3
 8006716:	f000 f913 	bl	8006940 <__malloc_lock>
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <_free_r+0x94>)
 800671c:	9801      	ldr	r0, [sp, #4]
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	b933      	cbnz	r3, 8006730 <_free_r+0x30>
 8006722:	6063      	str	r3, [r4, #4]
 8006724:	6014      	str	r4, [r2, #0]
 8006726:	b003      	add	sp, #12
 8006728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800672c:	f000 b90e 	b.w	800694c <__malloc_unlock>
 8006730:	42a3      	cmp	r3, r4
 8006732:	d908      	bls.n	8006746 <_free_r+0x46>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf01      	itttt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	1949      	addeq	r1, r1, r5
 8006742:	6021      	streq	r1, [r4, #0]
 8006744:	e7ed      	b.n	8006722 <_free_r+0x22>
 8006746:	461a      	mov	r2, r3
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b10b      	cbz	r3, 8006750 <_free_r+0x50>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d9fa      	bls.n	8006746 <_free_r+0x46>
 8006750:	6811      	ldr	r1, [r2, #0]
 8006752:	1855      	adds	r5, r2, r1
 8006754:	42a5      	cmp	r5, r4
 8006756:	d10b      	bne.n	8006770 <_free_r+0x70>
 8006758:	6824      	ldr	r4, [r4, #0]
 800675a:	4421      	add	r1, r4
 800675c:	1854      	adds	r4, r2, r1
 800675e:	42a3      	cmp	r3, r4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	d1e0      	bne.n	8006726 <_free_r+0x26>
 8006764:	681c      	ldr	r4, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	6053      	str	r3, [r2, #4]
 800676a:	4421      	add	r1, r4
 800676c:	6011      	str	r1, [r2, #0]
 800676e:	e7da      	b.n	8006726 <_free_r+0x26>
 8006770:	d902      	bls.n	8006778 <_free_r+0x78>
 8006772:	230c      	movs	r3, #12
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	e7d6      	b.n	8006726 <_free_r+0x26>
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1961      	adds	r1, r4, r5
 800677c:	428b      	cmp	r3, r1
 800677e:	bf04      	itt	eq
 8006780:	6819      	ldreq	r1, [r3, #0]
 8006782:	685b      	ldreq	r3, [r3, #4]
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	bf04      	itt	eq
 8006788:	1949      	addeq	r1, r1, r5
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	6054      	str	r4, [r2, #4]
 800678e:	e7ca      	b.n	8006726 <_free_r+0x26>
 8006790:	b003      	add	sp, #12
 8006792:	bd30      	pop	{r4, r5, pc}
 8006794:	20000440 	.word	0x20000440

08006798 <sbrk_aligned>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4e0e      	ldr	r6, [pc, #56]	; (80067d4 <sbrk_aligned+0x3c>)
 800679c:	460c      	mov	r4, r1
 800679e:	6831      	ldr	r1, [r6, #0]
 80067a0:	4605      	mov	r5, r0
 80067a2:	b911      	cbnz	r1, 80067aa <sbrk_aligned+0x12>
 80067a4:	f000 f8bc 	bl	8006920 <_sbrk_r>
 80067a8:	6030      	str	r0, [r6, #0]
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f8b7 	bl	8006920 <_sbrk_r>
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	d00a      	beq.n	80067cc <sbrk_aligned+0x34>
 80067b6:	1cc4      	adds	r4, r0, #3
 80067b8:	f024 0403 	bic.w	r4, r4, #3
 80067bc:	42a0      	cmp	r0, r4
 80067be:	d007      	beq.n	80067d0 <sbrk_aligned+0x38>
 80067c0:	1a21      	subs	r1, r4, r0
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f8ac 	bl	8006920 <_sbrk_r>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d101      	bne.n	80067d0 <sbrk_aligned+0x38>
 80067cc:	f04f 34ff 	mov.w	r4, #4294967295
 80067d0:	4620      	mov	r0, r4
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	20000444 	.word	0x20000444

080067d8 <_malloc_r>:
 80067d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	1ccd      	adds	r5, r1, #3
 80067de:	f025 0503 	bic.w	r5, r5, #3
 80067e2:	3508      	adds	r5, #8
 80067e4:	2d0c      	cmp	r5, #12
 80067e6:	bf38      	it	cc
 80067e8:	250c      	movcc	r5, #12
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	4607      	mov	r7, r0
 80067ee:	db01      	blt.n	80067f4 <_malloc_r+0x1c>
 80067f0:	42a9      	cmp	r1, r5
 80067f2:	d905      	bls.n	8006800 <_malloc_r+0x28>
 80067f4:	230c      	movs	r3, #12
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	2600      	movs	r6, #0
 80067fa:	4630      	mov	r0, r6
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	4e2e      	ldr	r6, [pc, #184]	; (80068bc <_malloc_r+0xe4>)
 8006802:	f000 f89d 	bl	8006940 <__malloc_lock>
 8006806:	6833      	ldr	r3, [r6, #0]
 8006808:	461c      	mov	r4, r3
 800680a:	bb34      	cbnz	r4, 800685a <_malloc_r+0x82>
 800680c:	4629      	mov	r1, r5
 800680e:	4638      	mov	r0, r7
 8006810:	f7ff ffc2 	bl	8006798 <sbrk_aligned>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	4604      	mov	r4, r0
 8006818:	d14d      	bne.n	80068b6 <_malloc_r+0xde>
 800681a:	6834      	ldr	r4, [r6, #0]
 800681c:	4626      	mov	r6, r4
 800681e:	2e00      	cmp	r6, #0
 8006820:	d140      	bne.n	80068a4 <_malloc_r+0xcc>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	4631      	mov	r1, r6
 8006826:	4638      	mov	r0, r7
 8006828:	eb04 0803 	add.w	r8, r4, r3
 800682c:	f000 f878 	bl	8006920 <_sbrk_r>
 8006830:	4580      	cmp	r8, r0
 8006832:	d13a      	bne.n	80068aa <_malloc_r+0xd2>
 8006834:	6821      	ldr	r1, [r4, #0]
 8006836:	3503      	adds	r5, #3
 8006838:	1a6d      	subs	r5, r5, r1
 800683a:	f025 0503 	bic.w	r5, r5, #3
 800683e:	3508      	adds	r5, #8
 8006840:	2d0c      	cmp	r5, #12
 8006842:	bf38      	it	cc
 8006844:	250c      	movcc	r5, #12
 8006846:	4629      	mov	r1, r5
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ffa5 	bl	8006798 <sbrk_aligned>
 800684e:	3001      	adds	r0, #1
 8006850:	d02b      	beq.n	80068aa <_malloc_r+0xd2>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	442b      	add	r3, r5
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	e00e      	b.n	8006878 <_malloc_r+0xa0>
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	1b52      	subs	r2, r2, r5
 800685e:	d41e      	bmi.n	800689e <_malloc_r+0xc6>
 8006860:	2a0b      	cmp	r2, #11
 8006862:	d916      	bls.n	8006892 <_malloc_r+0xba>
 8006864:	1961      	adds	r1, r4, r5
 8006866:	42a3      	cmp	r3, r4
 8006868:	6025      	str	r5, [r4, #0]
 800686a:	bf18      	it	ne
 800686c:	6059      	strne	r1, [r3, #4]
 800686e:	6863      	ldr	r3, [r4, #4]
 8006870:	bf08      	it	eq
 8006872:	6031      	streq	r1, [r6, #0]
 8006874:	5162      	str	r2, [r4, r5]
 8006876:	604b      	str	r3, [r1, #4]
 8006878:	4638      	mov	r0, r7
 800687a:	f104 060b 	add.w	r6, r4, #11
 800687e:	f000 f865 	bl	800694c <__malloc_unlock>
 8006882:	f026 0607 	bic.w	r6, r6, #7
 8006886:	1d23      	adds	r3, r4, #4
 8006888:	1af2      	subs	r2, r6, r3
 800688a:	d0b6      	beq.n	80067fa <_malloc_r+0x22>
 800688c:	1b9b      	subs	r3, r3, r6
 800688e:	50a3      	str	r3, [r4, r2]
 8006890:	e7b3      	b.n	80067fa <_malloc_r+0x22>
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	42a3      	cmp	r3, r4
 8006896:	bf0c      	ite	eq
 8006898:	6032      	streq	r2, [r6, #0]
 800689a:	605a      	strne	r2, [r3, #4]
 800689c:	e7ec      	b.n	8006878 <_malloc_r+0xa0>
 800689e:	4623      	mov	r3, r4
 80068a0:	6864      	ldr	r4, [r4, #4]
 80068a2:	e7b2      	b.n	800680a <_malloc_r+0x32>
 80068a4:	4634      	mov	r4, r6
 80068a6:	6876      	ldr	r6, [r6, #4]
 80068a8:	e7b9      	b.n	800681e <_malloc_r+0x46>
 80068aa:	230c      	movs	r3, #12
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	4638      	mov	r0, r7
 80068b0:	f000 f84c 	bl	800694c <__malloc_unlock>
 80068b4:	e7a1      	b.n	80067fa <_malloc_r+0x22>
 80068b6:	6025      	str	r5, [r4, #0]
 80068b8:	e7de      	b.n	8006878 <_malloc_r+0xa0>
 80068ba:	bf00      	nop
 80068bc:	20000440 	.word	0x20000440

080068c0 <_realloc_r>:
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	4680      	mov	r8, r0
 80068c6:	4614      	mov	r4, r2
 80068c8:	460e      	mov	r6, r1
 80068ca:	b921      	cbnz	r1, 80068d6 <_realloc_r+0x16>
 80068cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	4611      	mov	r1, r2
 80068d2:	f7ff bf81 	b.w	80067d8 <_malloc_r>
 80068d6:	b92a      	cbnz	r2, 80068e4 <_realloc_r+0x24>
 80068d8:	f7ff ff12 	bl	8006700 <_free_r>
 80068dc:	4625      	mov	r5, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e4:	f000 f838 	bl	8006958 <_malloc_usable_size_r>
 80068e8:	4284      	cmp	r4, r0
 80068ea:	4607      	mov	r7, r0
 80068ec:	d802      	bhi.n	80068f4 <_realloc_r+0x34>
 80068ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068f2:	d812      	bhi.n	800691a <_realloc_r+0x5a>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7ff ff6e 	bl	80067d8 <_malloc_r>
 80068fc:	4605      	mov	r5, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	d0ed      	beq.n	80068de <_realloc_r+0x1e>
 8006902:	42bc      	cmp	r4, r7
 8006904:	4622      	mov	r2, r4
 8006906:	4631      	mov	r1, r6
 8006908:	bf28      	it	cs
 800690a:	463a      	movcs	r2, r7
 800690c:	f7ff fed0 	bl	80066b0 <memcpy>
 8006910:	4631      	mov	r1, r6
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff fef4 	bl	8006700 <_free_r>
 8006918:	e7e1      	b.n	80068de <_realloc_r+0x1e>
 800691a:	4635      	mov	r5, r6
 800691c:	e7df      	b.n	80068de <_realloc_r+0x1e>
	...

08006920 <_sbrk_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	; (800693c <_sbrk_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fb fc7c 	bl	8002228 <_sbrk>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_sbrk_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_sbrk_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	20000448 	.word	0x20000448

08006940 <__malloc_lock>:
 8006940:	4801      	ldr	r0, [pc, #4]	; (8006948 <__malloc_lock+0x8>)
 8006942:	f000 b811 	b.w	8006968 <__retarget_lock_acquire_recursive>
 8006946:	bf00      	nop
 8006948:	2000044c 	.word	0x2000044c

0800694c <__malloc_unlock>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__malloc_unlock+0x8>)
 800694e:	f000 b80c 	b.w	800696a <__retarget_lock_release_recursive>
 8006952:	bf00      	nop
 8006954:	2000044c 	.word	0x2000044c

08006958 <_malloc_usable_size_r>:
 8006958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695c:	1f18      	subs	r0, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfbc      	itt	lt
 8006962:	580b      	ldrlt	r3, [r1, r0]
 8006964:	18c0      	addlt	r0, r0, r3
 8006966:	4770      	bx	lr

08006968 <__retarget_lock_acquire_recursive>:
 8006968:	4770      	bx	lr

0800696a <__retarget_lock_release_recursive>:
 800696a:	4770      	bx	lr

0800696c <_init>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr

08006978 <_fini>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr
