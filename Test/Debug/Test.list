
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed0  08008ed0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed0  08008ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed8  08008ed8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee8  200000fc  08008fdc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fe4  08008fdc  00021fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001901c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003664  00000000  00000000  00039148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0003c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f14  00000000  00000000  0003f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d46d  00000000  00000000  00044224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd3f  00000000  00000000  00061691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001013d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  00101420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008e58 	.word	0x08008e58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008e58 	.word	0x08008e58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 ff4e 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f83e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb8a 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f000 f8f4 	bl	80006d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004f0:	f000 f920 	bl	8000734 <MX_I2C2_Init>
  MX_ADC1_Init();
 80004f4:	f000 f89e 	bl	8000634 <MX_ADC1_Init>
  MX_I2C3_Init();
 80004f8:	f000 f94a 	bl	8000790 <MX_I2C3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f976 	bl	80007ec <MX_SPI1_Init>
  MX_TIM3_Init();
 8000500:	f000 fad6 	bl	8000ab0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000504:	f000 fb28 	bl	8000b58 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000508:	f000 f9a6 	bl	8000858 <MX_TIM1_Init>
  MX_TIM2_Init();
 800050c:	f000 fa50 	bl	80009b0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000510:	f007 ff8c 	bl	800842c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0x84>)
 800051c:	f001 fcce 	bl	8001ebc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f000 ff9f 	bl	8001464 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x84>)
 800052e:	f001 fcc5 	bl	8001ebc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f000 ff96 	bl	8001464 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x84>)
 8000540:	f001 fcbc 	bl	8001ebc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 ff8d 	bl	8001464 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <main+0x84>)
 8000552:	f001 fcb3 	bl	8001ebc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055a:	f000 ff83 	bl	8001464 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800055e:	e7d9      	b.n	8000514 <main+0x38>
 8000560:	40020800 	.word	0x40020800

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f008 fc68 	bl	8008e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xc8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xcc>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d8:	23c0      	movs	r3, #192	; 0xc0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f843 	bl	8003674 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 fb66 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 faa6 	bl	8003b64 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800061e:	f000 fb51 	bl	8000cc4 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC1_Init+0x98>)
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC1_Init+0x98>)
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xa0>)
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC1_Init+0x98>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_ADC1_Init+0x98>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <MX_ADC1_Init+0x98>)
 8000694:	f000 ff0a 	bl	80014ac <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 fb11 	bl	8000cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0x98>)
 80006b4:	f000 ff3e 	bl	8001534 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006be:	f000 fb01 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000118 	.word	0x20000118
 80006d0:	40012000 	.word	0x40012000
 80006d4:	0f000001 	.word	0x0f000001

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f001 fbeb 	bl	8001ef0 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fad0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000160 	.word	0x20000160
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C2_Init+0x50>)
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_I2C2_Init+0x54>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_I2C2_Init+0x50>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_I2C2_Init+0x58>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C2_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_I2C2_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_I2C2_Init+0x50>)
 8000752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_I2C2_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_I2C2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_I2C2_Init+0x50>)
 8000772:	f001 fbbd 	bl	8001ef0 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 faa2 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200001b4 	.word	0x200001b4
 8000788:	40005800 	.word	0x40005800
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C3_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_I2C3_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C3_Init+0x50>)
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_I2C3_Init+0x58>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_I2C3_Init+0x50>)
 80007ce:	f001 fb8f 	bl	8001ef0 <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 fa74 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000208 	.word	0x20000208
 80007e4:	40005c00 	.word	0x40005c00
 80007e8:	000186a0 	.word	0x000186a0

080007ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_SPI1_Init+0x64>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <MX_SPI1_Init+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI1_Init+0x64>)
 8000838:	220a      	movs	r2, #10
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_SPI1_Init+0x64>)
 800083e:	f003 fb5d 	bl	8003efc <HAL_SPI_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000848:	f000 fa3c 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000025c 	.word	0x2000025c
 8000854:	40013000 	.word	0x40013000

08000858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b096      	sub	sp, #88	; 0x58
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2220      	movs	r2, #32
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f008 fad9 	bl	8008e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000896:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MX_TIM1_Init+0x150>)
 8000898:	4a44      	ldr	r2, [pc, #272]	; (80009ac <MX_TIM1_Init+0x154>)
 800089a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800089c:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <MX_TIM1_Init+0x150>)
 800089e:	220f      	movs	r2, #15
 80008a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80008a8:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b4:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	4839      	ldr	r0, [pc, #228]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008c2:	f003 fba4 	bl	800400e <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008cc:	f000 f9fa 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008de:	f003 fda7 	bl	8004430 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008e8:	f000 f9ec 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_TIM1_Init+0x150>)
 80008ee:	f003 fbdd 	bl	80040ac <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008f8:	f000 f9e4 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000908:	4619      	mov	r1, r3
 800090a:	4827      	ldr	r0, [pc, #156]	; (80009a8 <MX_TIM1_Init+0x150>)
 800090c:	f004 f8fe 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000916:	f000 f9d5 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091a:	2360      	movs	r3, #96	; 0x60
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	2204      	movs	r2, #4
 800093c:	4619      	mov	r1, r3
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <MX_TIM1_Init+0x150>)
 8000940:	f003 fcb4 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800094a:	f000 f9bb 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	2208      	movs	r2, #8
 8000954:	4619      	mov	r1, r3
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_TIM1_Init+0x150>)
 8000958:	f003 fca8 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000962:	f000 f9af 	bl	8000cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800097a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_TIM1_Init+0x150>)
 800098a:	f004 f92d 	bl	8004be8 <HAL_TIMEx_ConfigBreakDeadTime>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000994:	f000 f996 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <MX_TIM1_Init+0x150>)
 800099a:	f000 fc01 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3758      	adds	r7, #88	; 0x58
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200002b4 	.word	0x200002b4
 80009ac:	40010000 	.word	0x40010000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009ea:	220f      	movs	r2, #15
 80009ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a08:	4828      	ldr	r0, [pc, #160]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a0a:	f003 fb00 	bl	800400e <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a14:	f000 f956 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4821      	ldr	r0, [pc, #132]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a26:	f003 fd03 	bl	8004430 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a30:	f000 f948 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a34:	481d      	ldr	r0, [pc, #116]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a36:	f003 fb39 	bl	80040ac <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a40:	f000 f940 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4619      	mov	r1, r3
 8000a52:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a54:	f004 f85a 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a5e:	f000 f931 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a62:	2360      	movs	r3, #96	; 0x60
 8000a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a7a:	f003 fc17 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a84:	f000 f91e 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000a90:	f003 fc0c 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a9a:	f000 f913 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_TIM2_Init+0xfc>)
 8000aa0:	f000 fb7e 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000aa4:	bf00      	nop
 8000aa6:	3738      	adds	r7, #56	; 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200002fc 	.word	0x200002fc

08000ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2224      	movs	r2, #36	; 0x24
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 f9c2 	bl	8008e48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <MX_TIM3_Init+0xa4>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af2:	2303      	movs	r3, #3
 8000af4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000b1e:	f003 fb1e 	bl	800415e <HAL_TIM_Encoder_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f8cc 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM3_Init+0xa0>)
 8000b3a:	f003 ffe7 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b44:	f000 f8be 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000344 	.word	0x20000344
 8000b54:	40000400 	.word	0x40000400

08000b58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2224      	movs	r2, #36	; 0x24
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f008 f96e 	bl	8008e48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_TIM5_Init+0xa4>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000bc6:	f003 faca 	bl	800415e <HAL_TIM_Encoder_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 f878 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM5_Init+0xa0>)
 8000be2:	f003 ff93 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bec:	f000 f86a 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000038c 	.word	0x2000038c
 8000bfc:	40000c00 	.word	0x40000c00

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_GPIO_Init+0xbc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TOF_boot_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <MX_GPIO_Init+0xc0>)
 8000c72:	f001 f923 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0xc0>)
 8000c90:	f000 ff90 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_boot_Pin */
  GPIO_InitStruct.Pin = TOF_boot_Pin;
 8000c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_boot_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_GPIO_Init+0xc0>)
 8000cae:	f000 ff81 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000cb2:	bf00      	nop
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_ADC_MspInit+0x7c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d127      	bne.n	8000d92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vbat_IN_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Vbat_IN_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_ADC_MspInit+0x84>)
 8000d8e:	f000 ff11 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a63      	ldr	r2, [pc, #396]	; (8000f54 <HAL_I2C_MspInit+0x1ac>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12c      	bne.n	8000e24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a61      	ldr	r2, [pc, #388]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de6:	23c0      	movs	r3, #192	; 0xc0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dea:	2312      	movs	r3, #18
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4856      	ldr	r0, [pc, #344]	; (8000f5c <HAL_I2C_MspInit+0x1b4>)
 8000e02:	f000 fed7 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e22:	e093      	b.n	8000f4c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_I2C_MspInit+0x1b8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d13e      	bne.n	8000eac <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	483d      	ldr	r0, [pc, #244]	; (8000f5c <HAL_I2C_MspInit+0x1b4>)
 8000e68:	f000 fea4 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4834      	ldr	r0, [pc, #208]	; (8000f5c <HAL_I2C_MspInit+0x1b4>)
 8000e8a:	f000 fe93 	bl	8001bb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
}
 8000eaa:	e04f      	b.n	8000f4c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <HAL_I2C_MspInit+0x1bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d14a      	bne.n	8000f4c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f00:	2304      	movs	r3, #4
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <HAL_I2C_MspInit+0x1c0>)
 8000f0c:	f000 fe52 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f10:	2310      	movs	r3, #16
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	2312      	movs	r3, #18
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000f20:	2309      	movs	r3, #9
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HAL_I2C_MspInit+0x1b4>)
 8000f2c:	f000 fe42 	bl	8001bb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000f3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_I2C_MspInit+0x1b0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	; 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40005800 	.word	0x40005800
 8000f64:	40005c00 	.word	0x40005c00
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_SPI_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fc6:	23a0      	movs	r3, #160	; 0xa0
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_SPI_MspInit+0x8c>)
 8000fe2:	f000 fde7 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_TIM_Base_MspInit+0x64>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10e      	bne.n	800102c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800102a:	e012      	b.n	8001052 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d10d      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40010000 	.word	0x40010000
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a41      	ldr	r2, [pc, #260]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d14a      	bne.n	8001120 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_Enc_1A_Pin;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1A_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4826      	ldr	r0, [pc, #152]	; (8001194 <HAL_TIM_Encoder_MspInit+0x12c>)
 80010fa:	f000 fd5b 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_Enc_1B_Pin;
 80010fe:	2320      	movs	r3, #32
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800110e:	2302      	movs	r3, #2
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_Enc_1B_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481f      	ldr	r0, [pc, #124]	; (8001198 <HAL_TIM_Encoder_MspInit+0x130>)
 800111a:	f000 fd4b 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800111e:	e030      	b.n	8001182 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_TIM_Encoder_MspInit+0x134>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_Enc_2A_Pin|Motor_Enc_2B_Pin;
 8001162:	2303      	movs	r3, #3
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001172:	2302      	movs	r3, #2
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_TIM_Encoder_MspInit+0x12c>)
 800117e:	f000 fd19 	bl	8001bb4 <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40000400 	.word	0x40000400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40000c00 	.word	0x40000c00

080011a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a34      	ldr	r2, [pc, #208]	; (8001290 <HAL_TIM_MspPostInit+0xf0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d11f      	bne.n	8001202 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a32      	ldr	r2, [pc, #200]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_1_IN1_Pin|Motor_1_IN2_Pin;
 80011de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4827      	ldr	r0, [pc, #156]	; (8001298 <HAL_TIM_MspPostInit+0xf8>)
 80011fc:	f000 fcda 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001200:	e041      	b.n	8001286 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120a:	d13c      	bne.n	8001286 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_TIM_MspPostInit+0xf4>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_2_IN1_Pin;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001256:	2301      	movs	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <HAL_TIM_MspPostInit+0xf8>)
 8001262:	f000 fca7 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Motor_2_IN2_Pin;
 8001266:	2308      	movs	r3, #8
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001276:	2301      	movs	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_2_IN2_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_TIM_MspPostInit+0xfc>)
 8001282:	f000 fc97 	bl	8001bb4 <HAL_GPIO_Init>
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010000 	.word	0x40010000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f89a 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <OTG_FS_IRQHandler+0x10>)
 80012fa:	f001 f88d 	bl	8002418 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200018b8 	.word	0x200018b8

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001356:	f7ff ffd7 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f007 fd51 	bl	8008e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff f8bd 	bl	80004dc <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001370:	08008ee0 	.word	0x08008ee0
  ldr r2, =_sbss
 8001374:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001378:	20001fe4 	.word	0x20001fe4

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fbc1 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fc8c 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fbd9 	bl	8001b9a <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 fba1 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	200003d4 	.word	0x200003d4

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200003d4 	.word	0x200003d4

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e033      	b.n	800152a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc28 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d118      	bne.n	800151c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f2:	f023 0302 	bic.w	r3, r3, #2
 80014f6:	f043 0202 	orr.w	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f94a 	bl	8001798 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f023 0303 	bic.w	r3, r3, #3
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
 800151a:	e001      	b.n	8001520 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1c>
 800154c:	2302      	movs	r3, #2
 800154e:	e113      	b.n	8001778 <HAL_ADC_ConfigChannel+0x244>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d925      	bls.n	80015ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	3b1e      	subs	r3, #30
 8001576:	2207      	movs	r2, #7
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4403      	add	r3, r0
 800159e:	3b1e      	subs	r3, #30
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	e022      	b.n	80015f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	2207      	movs	r2, #7
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4403      	add	r3, r0
 80015e8:	409a      	lsls	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d824      	bhi.n	8001644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b05      	subs	r3, #5
 800160c:	221f      	movs	r2, #31
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
 8001642:	e04c      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d824      	bhi.n	8001696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b23      	subs	r3, #35	; 0x23
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b23      	subs	r3, #35	; 0x23
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	e023      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b41      	subs	r3, #65	; 0x41
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	400a      	ands	r2, r1
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b41      	subs	r3, #65	; 0x41
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_ADC_ConfigChannel+0x250>)
 80016e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a28      	ldr	r2, [pc, #160]	; (8001788 <HAL_ADC_ConfigChannel+0x254>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10f      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_ADC_ConfigChannel+0x254>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_ADC_ConfigChannel+0x258>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x1f4>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b11      	cmp	r3, #17
 8001726:	d122      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_ConfigChannel+0x258>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_ADC_ConfigChannel+0x25c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_ADC_ConfigChannel+0x260>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9a      	lsrs	r2, r3, #18
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40012300 	.word	0x40012300
 8001788:	40012000 	.word	0x40012000
 800178c:	10000012 	.word	0x10000012
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <ADC_Init+0x1f0>)
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <ADC_Init+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	e00f      	b.n	8001896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0202 	bic.w	r2, r2, #2
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	035a      	lsls	r2, r3, #13
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e007      	b.n	800190c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	3b01      	subs	r3, #1
 8001928:	051a      	lsls	r2, r3, #20
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800194e:	025a      	lsls	r2, r3, #9
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	029a      	lsls	r2, r3, #10
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	0f000001 	.word	0x0f000001

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e159      	b.n	8001e84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 8148 	bne.w	8001e7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a2 	beq.w	8001e7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x202>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x1fe>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_GPIO_Init+0x2f8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x1fa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x1f6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x1f2>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db6:	2300      	movs	r3, #0
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc8:	4935      	ldr	r1, [pc, #212]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4e:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	f67f aea2 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed8:	e003      	b.n	8001ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	041a      	lsls	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	619a      	str	r2, [r3, #24]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e12b      	b.n	800215a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe ff46 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	; 0x24
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f54:	f001 ffbe 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8001f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a81      	ldr	r2, [pc, #516]	; (8002164 <HAL_I2C_Init+0x274>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d807      	bhi.n	8001f74 <HAL_I2C_Init+0x84>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a80      	ldr	r2, [pc, #512]	; (8002168 <HAL_I2C_Init+0x278>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e006      	b.n	8001f82 <HAL_I2C_Init+0x92>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a7d      	ldr	r2, [pc, #500]	; (800216c <HAL_I2C_Init+0x27c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0e7      	b.n	800215a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a78      	ldr	r2, [pc, #480]	; (8002170 <HAL_I2C_Init+0x280>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9b      	lsrs	r3, r3, #18
 8001f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_I2C_Init+0x274>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d802      	bhi.n	8001fc4 <HAL_I2C_Init+0xd4>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	e009      	b.n	8001fd8 <HAL_I2C_Init+0xe8>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <HAL_I2C_Init+0x284>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	495c      	ldr	r1, [pc, #368]	; (8002164 <HAL_I2C_Init+0x274>)
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d819      	bhi.n	800202c <HAL_I2C_Init+0x13c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e59      	subs	r1, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fbb1 f3f3 	udiv	r3, r1, r3
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	f640 73fc 	movw	r3, #4092	; 0xffc
 800200c:	400b      	ands	r3, r1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_I2C_Init+0x138>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e59      	subs	r1, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	e051      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002028:	2304      	movs	r3, #4
 800202a:	e04f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d111      	bne.n	8002058 <HAL_I2C_Init+0x168>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e012      	b.n	800207e <HAL_I2C_Init+0x18e>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Init+0x196>
 8002082:	2301      	movs	r3, #1
 8002084:	e022      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10e      	bne.n	80020ac <HAL_I2C_Init+0x1bc>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1e58      	subs	r0, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020aa:	e00f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6809      	ldr	r1, [r1, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6911      	ldr	r1, [r2, #16]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	430b      	orrs	r3, r1
 800210e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	000186a0 	.word	0x000186a0
 8002168:	001e847f 	.word	0x001e847f
 800216c:	003d08ff 	.word	0x003d08ff
 8002170:	431bde83 	.word	0x431bde83
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	b08f      	sub	sp, #60	; 0x3c
 800217c:	af0a      	add	r7, sp, #40	; 0x28
 800217e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e10f      	b.n	80023aa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f006 fb21 	bl	80087ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fe74 	bl	8004eb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	687e      	ldr	r6, [r7, #4]
 80021d6:	466d      	mov	r5, sp
 80021d8:	f106 0410 	add.w	r4, r6, #16
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ec:	1d33      	adds	r3, r6, #4
 80021ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	f002 fd4b 	bl	8004c8c <USB_CoreInit>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fe62 	bl	8004ed8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e04a      	b.n	80022b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	333d      	adds	r3, #61	; 0x3d
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	333c      	adds	r3, #60	; 0x3c
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	b298      	uxth	r0, r3
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3344      	adds	r3, #68	; 0x44
 8002256:	4602      	mov	r2, r0
 8002258:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3340      	adds	r3, #64	; 0x40
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3348      	adds	r3, #72	; 0x48
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334c      	adds	r3, #76	; 0x4c
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3354      	adds	r3, #84	; 0x54
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3af      	bcc.n	800221a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e044      	b.n	800234a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	3301      	adds	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3b5      	bcc.n	80022c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	687e      	ldr	r6, [r7, #4]
 800235c:	466d      	mov	r5, sp
 800235e:	f106 0410 	add.w	r4, r6, #16
 8002362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800236e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002372:	1d33      	adds	r3, r6, #4
 8002374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f002 fdfa 	bl	8004f70 <USB_DevInit>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00d      	b.n	80023aa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 ff49 	bl	800623a <USB_DevDisconnect>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_Start+0x1c>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e020      	b.n	8002410 <HAL_PCD_Start+0x5e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d109      	bne.n	80023f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d005      	beq.n	80023f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fd4c 	bl	8004e94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fef9 	bl	80061f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b08d      	sub	sp, #52	; 0x34
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 ffb7 	bl	80063a2 <USB_GetMode>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 848a 	bne.w	8002d50 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff1b 	bl	800627c <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8480 	beq.w	8002d4e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 ff08 	bl	800627c <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f002 0202 	and.w	r2, r2, #2
 8002484:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fef6 	bl	800627c <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b10      	cmp	r3, #16
 8002498:	d161      	bne.n	800255e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	0c5b      	lsrs	r3, r3, #17
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d124      	bne.n	8002520 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d035      	beq.n	800254e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6a38      	ldr	r0, [r7, #32]
 80024f6:	f003 fd2d 	bl	8005f54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002506:	441a      	add	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002518:	441a      	add	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	621a      	str	r2, [r3, #32]
 800251e:	e016      	b.n	800254e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	2b06      	cmp	r3, #6
 800252a:	d110      	bne.n	800254e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002532:	2208      	movs	r2, #8
 8002534:	4619      	mov	r1, r3
 8002536:	6a38      	ldr	r0, [r7, #32]
 8002538:	f003 fd0c 	bl	8005f54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002548:	441a      	add	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0210 	orr.w	r2, r2, #16
 800255c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fe8a 	bl	800627c <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002572:	f040 80a7 	bne.w	80026c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe8f 	bl	80062a2 <USB_ReadDevAllOutEpInterrupt>
 8002584:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002586:	e099      	b.n	80026bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 808e 	beq.w	80026b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 feb3 	bl	800630a <USB_ReadDevOutEPInterrupt>
 80025a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00c      	beq.n	80025ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025bc:	461a      	mov	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fec3 	bl	8003350 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	2308      	movs	r3, #8
 80025e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 ff99 	bl	8003520 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	2310      	movs	r3, #16
 8002608:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d030      	beq.n	8002676 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d109      	bne.n	8002634 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	78db      	ldrb	r3, [r3, #3]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2200      	movs	r2, #0
 8002656:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 f9c0 	bl	80089e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2302      	movs	r3, #2
 8002674:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2320      	movs	r3, #32
 8002690:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	461a      	mov	r2, r3
 80026aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	3301      	adds	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f47f af62 	bne.w	8002588 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fdd7 	bl	800627c <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026d8:	f040 80db 	bne.w	8002892 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fdf8 	bl	80062d6 <USB_ReadDevAllInEpInterrupt>
 80026e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ec:	e0cd      	b.n	800288a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80c2 	beq.w	800287e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fe1e 	bl	8006346 <USB_ReadDevInEPInterrupt>
 800270a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d057      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	2201      	movs	r2, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	69f9      	ldr	r1, [r7, #28]
 8002732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002736:	4013      	ands	r3, r2
 8002738:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	461a      	mov	r2, r3
 8002748:	2301      	movs	r3, #1
 800274a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d132      	bne.n	80027ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334c      	adds	r3, #76	; 0x4c
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4403      	add	r3, r0
 8002774:	3348      	adds	r3, #72	; 0x48
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4419      	add	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	334c      	adds	r3, #76	; 0x4c
 800278a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d113      	bne.n	80027ba <HAL_PCD_IRQHandler+0x3a2>
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3354      	adds	r3, #84	; 0x54
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d108      	bne.n	80027ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027b2:	461a      	mov	r2, r3
 80027b4:	2101      	movs	r1, #1
 80027b6:	f003 fe25 	bl	8006404 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f006 f894 	bl	80088ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027dc:	461a      	mov	r2, r3
 80027de:	2308      	movs	r3, #8
 80027e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f8:	461a      	mov	r2, r3
 80027fa:	2310      	movs	r3, #16
 80027fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	461a      	mov	r2, r3
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002826:	6a38      	ldr	r0, [r7, #32]
 8002828:	f002 fd06 	bl	8005238 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3338      	adds	r3, #56	; 0x38
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d108      	bne.n	800285a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2200      	movs	r2, #0
 800284c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f006 f8d7 	bl	8008a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002866:	461a      	mov	r2, r3
 8002868:	2302      	movs	r3, #2
 800286a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fcdb 	bl	8003234 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f af2e 	bne.w	80026ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fcf0 	bl	800627c <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a6:	d122      	bne.n	80028ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028ce:	2100      	movs	r1, #0
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fec3 	bl	800365c <HAL_PCDEx_LPM_Callback>
 80028d6:	e002      	b.n	80028de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f006 f875 	bl	80089c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fcc2 	bl	800627c <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002902:	d112      	bne.n	800292a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f006 f831 	bl	800897c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002928:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fca4 	bl	800627c <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	f040 80b7 	bne.w	8002ab0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2110      	movs	r1, #16
 800295c:	4618      	mov	r0, r3
 800295e:	f002 fc6b 	bl	8005238 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	e046      	b.n	80029f6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800297a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298c:	0151      	lsls	r1, r2, #5
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	440a      	add	r2, r1
 8002992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800299a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c0:	0151      	lsls	r1, r2, #5
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	440a      	add	r2, r1
 80029c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	3301      	adds	r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3b3      	bcc.n	8002968 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2c:	f043 030b 	orr.w	r3, r3, #11
 8002a30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a42:	f043 030b 	orr.w	r3, r3, #11
 8002a46:	6453      	str	r3, [r2, #68]	; 0x44
 8002a48:	e015      	b.n	8002a76 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a70:	f043 030b 	orr.w	r3, r3, #11
 8002a74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f003 fcb2 	bl	8006404 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fbe1 	bl	800627c <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac4:	d124      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 fc77 	bl	80063be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fc2c 	bl	8005332 <USB_GetDevSpeed>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681c      	ldr	r4, [r3, #0]
 8002ae6:	f001 f9e9 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8002aea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	4620      	mov	r0, r4
 8002af6:	f002 f92b 	bl	8004d50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f005 ff1f 	bl	800893e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fbb1 	bl	800627c <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d10a      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f005 fefc 	bl	8008922 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f002 0208 	and.w	r2, r2, #8
 8002b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fb9c 	bl	800627c <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d122      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e014      	b.n	8002b8a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fb27 	bl	80031d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	3301      	adds	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3e5      	bcc.n	8002b60 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fb6f 	bl	800627c <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba8:	d13b      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002baa:	2301      	movs	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e02b      	b.n	8002c08 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3340      	adds	r3, #64	; 0x40
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d115      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da12      	bge.n	8002c02 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fae8 	bl	80031d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	3301      	adds	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3ce      	bcc.n	8002bb0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fb28 	bl	800627c <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c36:	d155      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e045      	b.n	8002cca <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12e      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da2b      	bge.n	8002cc4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d121      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc0:	6053      	str	r3, [r2, #4]
            break;
 8002cc2:	e007      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3b4      	bcc.n	8002c3e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fac7 	bl	800627c <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d10a      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 fe96 	bl	8008a2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fab1 	bl	800627c <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d115      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f005 fe86 	bl	8008a48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e000      	b.n	8002d50 <HAL_PCD_IRQHandler+0x938>
      return;
 8002d4e:	bf00      	nop
    }
  }
}
 8002d50:	3734      	adds	r7, #52	; 0x34
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}

08002d56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_SetAddress+0x1a>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e013      	b.n	8002d98 <HAL_PCD_SetAddress+0x42>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fa0f 	bl	80061ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	70fb      	strb	r3, [r7, #3]
 8002db2:	460b      	mov	r3, r1
 8002db4:	803b      	strh	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da0f      	bge.n	8002de6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3338      	adds	r3, #56	; 0x38
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	705a      	strb	r2, [r3, #1]
 8002de4:	e00f      	b.n	8002e06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e12:	883a      	ldrh	r2, [r7, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	78ba      	ldrb	r2, [r7, #2]
 8002e1c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e30:	78bb      	ldrb	r3, [r7, #2]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d102      	bne.n	8002e3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_PCD_EP_Open+0xaa>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e00e      	b.n	8002e68 <HAL_PCD_EP_Open+0xc8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fa8f 	bl	800537c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e66:	7afb      	ldrb	r3, [r7, #11]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da0f      	bge.n	8002ea4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3338      	adds	r3, #56	; 0x38
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	705a      	strb	r2, [r3, #1]
 8002ea2:	e00f      	b.n	8002ec4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3304      	adds	r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_EP_Close+0x6e>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e00e      	b.n	8002efc <HAL_PCD_EP_Close+0x8c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 facd 	bl	800548c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	460b      	mov	r3, r1
 8002f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	f002 fdac 	bl	8005ad4 <USB_EP0StartXfer>
 8002f7c:	e008      	b.n	8002f90 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	f002 fb5a 	bl	8005644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fbc:	681b      	ldr	r3, [r3, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	3338      	adds	r3, #56	; 0x38
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2201      	movs	r2, #1
 8003008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	f002 fd4a 	bl	8005ad4 <USB_EP0StartXfer>
 8003040:	e008      	b.n	8003054 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	f002 faf8 	bl	8005644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d901      	bls.n	800307c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e050      	b.n	800311e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800307c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da0f      	bge.n	80030a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	3338      	adds	r3, #56	; 0x38
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	705a      	strb	r2, [r3, #1]
 80030a2:	e00d      	b.n	80030c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_SetStall+0x82>
 80030dc:	2302      	movs	r3, #2
 80030de:	e01e      	b.n	800311e <HAL_PCD_EP_SetStall+0xc0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 ff88 	bl	8006004 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	b2d9      	uxtb	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800310e:	461a      	mov	r2, r3
 8003110:	f003 f978 	bl	8006404 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d901      	bls.n	8003144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e042      	b.n	80031ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da0f      	bge.n	800316c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3338      	adds	r3, #56	; 0x38
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	705a      	strb	r2, [r3, #1]
 800316a:	e00f      	b.n	800318c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_PCD_EP_ClrStall+0x86>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e00e      	b.n	80031ca <HAL_PCD_EP_ClrStall+0xa4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 ff90 	bl	80060e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da0c      	bge.n	8003200 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3338      	adds	r3, #56	; 0x38
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e00c      	b.n	800321a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fdaf 	bl	8005d84 <USB_EPStopXfer>
 8003226:	4603      	mov	r3, r0
 8003228:	72fb      	strb	r3, [r7, #11]

  return ret;
 800322a:	7afb      	ldrb	r3, [r7, #11]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3338      	adds	r3, #56	; 0x38
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	429a      	cmp	r2, r3
 8003266:	d901      	bls.n	800326c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e06c      	b.n	8003346 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	429a      	cmp	r2, r3
 8003280:	d902      	bls.n	8003288 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3303      	adds	r3, #3
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003290:	e02b      	b.n	80032ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d902      	bls.n	80032ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3303      	adds	r3, #3
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6919      	ldr	r1, [r3, #16]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f002 fe03 	bl	8005ed8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	441a      	add	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	441a      	add	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d809      	bhi.n	8003314 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003308:	429a      	cmp	r2, r3
 800330a:	d203      	bcs.n	8003314 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1be      	bne.n	8003292 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	429a      	cmp	r2, r3
 800331e:	d811      	bhi.n	8003344 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	43db      	mvns	r3, r3
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003340:	4013      	ands	r3, r2
 8003342:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	333c      	adds	r3, #60	; 0x3c
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d17b      	bne.n	800347e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4a61      	ldr	r2, [pc, #388]	; (8003518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f240 80b9 	bls.w	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80b3 	beq.w	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b8:	6093      	str	r3, [r2, #8]
 80033ba:	e0a7      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2320      	movs	r3, #32
 80033d6:	6093      	str	r3, [r2, #8]
 80033d8:	e098      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8093 	bne.w	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d90f      	bls.n	800340e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	e07e      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	440b      	add	r3, r1
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d114      	bne.n	8003470 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003458:	461a      	mov	r2, r3
 800345a:	2101      	movs	r1, #1
 800345c:	f002 ffd2 	bl	8006404 <USB_EP0_OutStart>
 8003460:	e006      	b.n	8003470 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	441a      	add	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f005 fa1e 	bl	80088b8 <HAL_PCD_DataOutStageCallback>
 800347c:	e046      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4a26      	ldr	r2, [pc, #152]	; (800351c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d124      	bne.n	80034d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a2:	6093      	str	r3, [r2, #8]
 80034a4:	e032      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	2320      	movs	r3, #32
 80034c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f005 f9f5 	bl	80088b8 <HAL_PCD_DataOutStageCallback>
 80034ce:	e01d      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d108      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f8:	461a      	mov	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f002 ff82 	bl	8006404 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f005 f9d6 	bl	80088b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	4f54300a 	.word	0x4f54300a
 800351c:	4f54310a 	.word	0x4f54310a

08003520 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	333c      	adds	r3, #60	; 0x3c
 8003538:	3304      	adds	r3, #4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d90e      	bls.n	8003574 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	461a      	mov	r2, r3
 800356e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003572:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f005 f98d 	bl	8008894 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d90c      	bls.n	800359c <PCD_EP_OutSetupPacket_int+0x7c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	f002 ff34 	bl	8006404 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	4f54300a 	.word	0x4f54300a

080035ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
 80035b8:	4613      	mov	r3, r2
 80035ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035ca:	883b      	ldrh	r3, [r7, #0]
 80035cc:	0419      	lsls	r1, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
 80035d8:	e028      	b.n	800362c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4413      	add	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	e00d      	b.n	800360a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3340      	adds	r3, #64	; 0x40
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4413      	add	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	3301      	adds	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	3b01      	subs	r3, #1
 8003610:	429a      	cmp	r2, r3
 8003612:	d3ec      	bcc.n	80035ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003614:	883b      	ldrh	r3, [r7, #0]
 8003616:	0418      	lsls	r0, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	3b01      	subs	r3, #1
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4302      	orrs	r2, r0
 8003624:	3340      	adds	r3, #64	; 0x40
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e267      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d075      	beq.n	800377e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d00c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d112      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036aa:	4b82      	ldr	r3, [pc, #520]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05b      	beq.n	800377c <HAL_RCC_OscConfig+0x108>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d157      	bne.n	800377c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e242      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x74>
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e01d      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x98>
 80036f2:	4b70      	ldr	r3, [pc, #448]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6f      	ldr	r2, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6c      	ldr	r2, [pc, #432]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0xb0>
 800370c:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fe8e 	bl	800144c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fd fe8a 	bl	800144c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e207      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0xc0>
 8003752:	e014      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd fe7a 	bl	800144c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375c:	f7fd fe76 	bl	800144c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e1f3      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0xe8>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d063      	beq.n	8003852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d11c      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e1c7      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037da:	e03a      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fe2f 	bl	800144c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fd fe2b 	bl	800144c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e1a8      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_OscConfig+0x244>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd fe0e 	bl	800144c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003834:	f7fd fe0a 	bl	800144c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e187      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d036      	beq.n	80038cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd fdee 	bl	800144c <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003874:	f7fd fdea 	bl	800144c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e167      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x240>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x200>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x248>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fd fdd7 	bl	800144c <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	e00e      	b.n	80038c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fd fdd3 	bl	800144c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d907      	bls.n	80038c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e150      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	42470000 	.word	0x42470000
 80038bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ea      	bne.n	80038a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8097 	beq.w	8003a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a7c      	ldr	r2, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003916:	4b74      	ldr	r3, [pc, #464]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a73      	ldr	r2, [pc, #460]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fd fd93 	bl	800144c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fd fd8f 	bl	800144c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e10c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x474>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x2ea>
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e01c      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x30c>
 8003966:	4b5f      	ldr	r3, [pc, #380]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0x324>
 8003980:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fd54 	bl	800144c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd fd50 	bl	800144c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0cb      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ee      	beq.n	80039a8 <HAL_RCC_OscConfig+0x334>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fd fd3e 	bl	800144c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fd fd3a 	bl	800144c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0b5      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ee      	bne.n	80039d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a1 	beq.w	8003b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d05c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d141      	bne.n	8003aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fd0e 	bl	800144c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd fd0a 	bl	800144c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e087      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd fce3 	bl	800144c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd fcdf 	bl	800144c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e05c      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x416>
 8003aa8:	e054      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x478>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fccc 	bl	800144c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fcc8 	bl	800144c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e045      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x444>
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e038      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4ec>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d028      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cc      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90c      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d119      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e067      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4934      	ldr	r1, [pc, #208]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c54:	f7fd fbfa 	bl	800144c <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7fd fbf6 	bl	800144c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e04f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d20c      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fb5a 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08008eb8 	.word	0x08008eb8
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b090      	sub	sp, #64	; 0x40
 8003d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	2300      	movs	r3, #0
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d00d      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x40>
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	f200 80a1 	bhi.w	8003e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d62:	e09b      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d68:	e09b      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d6a:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d6e:	e098      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	627a      	str	r2, [r7, #36]	; 0x24
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	fb03 f201 	mul.w	r2, r3, r1
 8003da0:	2300      	movs	r3, #0
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	4a43      	ldr	r2, [pc, #268]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003daa:	fba0 1202 	umull	r1, r2, r0, r2
 8003dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db0:	460a      	mov	r2, r1
 8003db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db6:	4413      	add	r3, r2
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dca:	f7fc fa05 	bl	80001d8 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd6:	e053      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	2200      	movs	r2, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	617a      	str	r2, [r7, #20]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dea:	f04f 0b00 	mov.w	fp, #0
 8003dee:	4652      	mov	r2, sl
 8003df0:	465b      	mov	r3, fp
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e00:	0150      	lsls	r0, r2, #5
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	ebb2 080a 	subs.w	r8, r2, sl
 8003e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e22:	ebb2 0408 	subs.w	r4, r2, r8
 8003e26:	eb63 0509 	sbc.w	r5, r3, r9
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	00eb      	lsls	r3, r5, #3
 8003e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e38:	00e2      	lsls	r2, r4, #3
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	eb14 030a 	adds.w	r3, r4, sl
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	eb45 030b 	adc.w	r3, r5, fp
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e56:	4629      	mov	r1, r5
 8003e58:	028b      	lsls	r3, r1, #10
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e60:	4621      	mov	r1, r4
 8003e62:	028a      	lsls	r2, r1, #10
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	60fa      	str	r2, [r7, #12]
 8003e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e74:	f7fc f9b0 	bl	80001d8 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3740      	adds	r7, #64	; 0x40
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	017d7840 	.word	0x017d7840

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08008ec8 	.word	0x08008ec8

08003efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07b      	b.n	8004006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1e:	d009      	beq.n	8003f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd f80c 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0104 	and.w	r1, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0210 	and.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e041      	b.n	80040a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fc ffe1 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fab7 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f839 	bl	800414a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fa68 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e097      	b.n	80042a2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc ff6e 	bl	8001068 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 fa04 	bl	80045c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e0:	f023 0303 	bic.w	r3, r3, #3
 80041e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	4313      	orrs	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041fe:	f023 030c 	bic.w	r3, r3, #12
 8004202:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800420a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800420e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	4313      	orrs	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	011a      	lsls	r2, r3, #4
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	031b      	lsls	r3, r3, #12
 800422e:	4313      	orrs	r3, r2
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800423c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004244:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4313      	orrs	r3, r2
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e0ae      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	f200 809f 	bhi.w	8004418 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004315 	.word	0x08004315
 80042e4:	08004419 	.word	0x08004419
 80042e8:	08004419 	.word	0x08004419
 80042ec:	08004419 	.word	0x08004419
 80042f0:	08004355 	.word	0x08004355
 80042f4:	08004419 	.word	0x08004419
 80042f8:	08004419 	.word	0x08004419
 80042fc:	08004419 	.word	0x08004419
 8004300:	08004397 	.word	0x08004397
 8004304:	08004419 	.word	0x08004419
 8004308:	08004419 	.word	0x08004419
 800430c:	08004419 	.word	0x08004419
 8004310:	080043d7 	.word	0x080043d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f9d0 	bl	80046c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6999      	ldr	r1, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	619a      	str	r2, [r3, #24]
      break;
 8004352:	e064      	b.n	800441e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa16 	bl	800478c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	619a      	str	r2, [r3, #24]
      break;
 8004394:	e043      	b.n	800441e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fa61 	bl	8004864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0208 	orr.w	r2, r2, #8
 80043b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0204 	bic.w	r2, r2, #4
 80043c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69d9      	ldr	r1, [r3, #28]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	61da      	str	r2, [r3, #28]
      break;
 80043d4:	e023      	b.n	800441e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 faab 	bl	8004938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	61da      	str	r2, [r3, #28]
      break;
 8004416:	e002      	b.n	800441e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
      break;
 800441c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIM_ConfigClockSource+0x1c>
 8004448:	2302      	movs	r3, #2
 800444a:	e0b4      	b.n	80045b6 <HAL_TIM_ConfigClockSource+0x186>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d03e      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0xd4>
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448a:	f200 8087 	bhi.w	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	f000 8086 	beq.w	80045a2 <HAL_TIM_ConfigClockSource+0x172>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	d87f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d01a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0xa6>
 80044a0:	2b70      	cmp	r3, #112	; 0x70
 80044a2:	d87b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b60      	cmp	r3, #96	; 0x60
 80044a6:	d050      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x11a>
 80044a8:	2b60      	cmp	r3, #96	; 0x60
 80044aa:	d877      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d03c      	beq.n	800452a <HAL_TIM_ConfigClockSource+0xfa>
 80044b0:	2b50      	cmp	r3, #80	; 0x50
 80044b2:	d873      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d058      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x13a>
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d86f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d064      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b30      	cmp	r3, #48	; 0x30
 80044c2:	d86b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d060      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d867      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05c      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d05a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d4:	e062      	b.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f000 faf1 	bl	8004acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
      break;
 8004502:	e04f      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f000 fada 	bl	8004acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004526:	609a      	str	r2, [r3, #8]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fa4e 	bl	80049d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2150      	movs	r1, #80	; 0x50
 8004542:	4618      	mov	r0, r3
 8004544:	f000 faa7 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 8004548:	e02c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fa6d 	bl	8004a36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2160      	movs	r1, #96	; 0x60
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fa97 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 8004568:	e01c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fa2e 	bl	80049d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2140      	movs	r1, #64	; 0x40
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa87 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fa7e 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 800459a:	e003      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a34      	ldr	r2, [pc, #208]	; (80046a4 <TIM_Base_SetConfig+0xe4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a31      	ldr	r2, [pc, #196]	; (80046a8 <TIM_Base_SetConfig+0xe8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a30      	ldr	r2, [pc, #192]	; (80046ac <TIM_Base_SetConfig+0xec>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <TIM_Base_SetConfig+0xf0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a25      	ldr	r2, [pc, #148]	; (80046a4 <TIM_Base_SetConfig+0xe4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01b      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d017      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <TIM_Base_SetConfig+0xe8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a21      	ldr	r2, [pc, #132]	; (80046ac <TIM_Base_SetConfig+0xec>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00f      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <TIM_Base_SetConfig+0xf0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00b      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <TIM_Base_SetConfig+0xf4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d007      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <TIM_Base_SetConfig+0xf8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <TIM_Base_SetConfig+0xfc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <TIM_Base_SetConfig+0xe4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	615a      	str	r2, [r3, #20]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800

080046c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 0302 	bic.w	r3, r3, #2
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <TIM_OC1_SetConfig+0xc8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10c      	bne.n	8004736 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0308 	bic.w	r3, r3, #8
 8004722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 0304 	bic.w	r3, r3, #4
 8004734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <TIM_OC1_SetConfig+0xc8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d111      	bne.n	8004762 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40010000 	.word	0x40010000

0800478c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0320 	bic.w	r3, r3, #32
 80047d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <TIM_OC2_SetConfig+0xd4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10d      	bne.n	8004808 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <TIM_OC2_SetConfig+0xd4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d113      	bne.n	8004838 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000

08004864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <TIM_OC3_SetConfig+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10d      	bne.n	80048de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <TIM_OC3_SetConfig+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d113      	bne.n	800490e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	621a      	str	r2, [r3, #32]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40010000 	.word	0x40010000

08004938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <TIM_OC4_SetConfig+0x9c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000

080049d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 030a 	bic.w	r3, r3, #10
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f023 0210 	bic.w	r2, r3, #16
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	031b      	lsls	r3, r3, #12
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f043 0307 	orr.w	r3, r3, #7
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e050      	b.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d013      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000

08004be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e03d      	b.n	8004c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 001c 	add.w	r0, r7, #28
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d122      	bne.n	8004cea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d105      	bne.n	8004cde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fbee 	bl	80064c0 <USB_CoreReset>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e01a      	b.n	8004d20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 fbe2 	bl	80064c0 <USB_CoreReset>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
 8004d12:	e005      	b.n	8004d20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10b      	bne.n	8004d3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f043 0206 	orr.w	r2, r3, #6
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4a:	b004      	add	sp, #16
 8004d4c:	4770      	bx	lr
	...

08004d50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d165      	bne.n	8004e30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <USB_SetTurnaroundTime+0x11c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d906      	bls.n	8004d7a <USB_SetTurnaroundTime+0x2a>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <USB_SetTurnaroundTime+0x120>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d202      	bcs.n	8004d7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d74:	230f      	movs	r3, #15
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e062      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a3c      	ldr	r2, [pc, #240]	; (8004e70 <USB_SetTurnaroundTime+0x120>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d306      	bcc.n	8004d90 <USB_SetTurnaroundTime+0x40>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <USB_SetTurnaroundTime+0x124>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d202      	bcs.n	8004d90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d8a:	230e      	movs	r3, #14
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e057      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <USB_SetTurnaroundTime+0x124>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d306      	bcc.n	8004da6 <USB_SetTurnaroundTime+0x56>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <USB_SetTurnaroundTime+0x128>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004da0:	230d      	movs	r3, #13
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e04c      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <USB_SetTurnaroundTime+0x128>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d306      	bcc.n	8004dbc <USB_SetTurnaroundTime+0x6c>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a32      	ldr	r2, [pc, #200]	; (8004e7c <USB_SetTurnaroundTime+0x12c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d802      	bhi.n	8004dbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004db6:	230c      	movs	r3, #12
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e041      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <USB_SetTurnaroundTime+0x12c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d906      	bls.n	8004dd2 <USB_SetTurnaroundTime+0x82>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a2e      	ldr	r2, [pc, #184]	; (8004e80 <USB_SetTurnaroundTime+0x130>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d802      	bhi.n	8004dd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dcc:	230b      	movs	r3, #11
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e036      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <USB_SetTurnaroundTime+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d906      	bls.n	8004de8 <USB_SetTurnaroundTime+0x98>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <USB_SetTurnaroundTime+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d802      	bhi.n	8004de8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004de2:	230a      	movs	r3, #10
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e02b      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <USB_SetTurnaroundTime+0x134>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d906      	bls.n	8004dfe <USB_SetTurnaroundTime+0xae>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <USB_SetTurnaroundTime+0x138>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d202      	bcs.n	8004dfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004df8:	2309      	movs	r3, #9
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e020      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <USB_SetTurnaroundTime+0x138>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d306      	bcc.n	8004e14 <USB_SetTurnaroundTime+0xc4>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <USB_SetTurnaroundTime+0x13c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d802      	bhi.n	8004e14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e0e:	2308      	movs	r3, #8
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e015      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <USB_SetTurnaroundTime+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d906      	bls.n	8004e2a <USB_SetTurnaroundTime+0xda>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <USB_SetTurnaroundTime+0x140>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d202      	bcs.n	8004e2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e24:	2307      	movs	r3, #7
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e00a      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e2a:	2306      	movs	r3, #6
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e007      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e36:	2309      	movs	r3, #9
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e001      	b.n	8004e40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e3c:	2309      	movs	r3, #9
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	00d8acbf 	.word	0x00d8acbf
 8004e70:	00e4e1c0 	.word	0x00e4e1c0
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	01067380 	.word	0x01067380
 8004e7c:	011a499f 	.word	0x011a499f
 8004e80:	01312cff 	.word	0x01312cff
 8004e84:	014ca43f 	.word	0x014ca43f
 8004e88:	016e3600 	.word	0x016e3600
 8004e8c:	01a6ab1f 	.word	0x01a6ab1f
 8004e90:	01e84800 	.word	0x01e84800

08004e94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f043 0201 	orr.w	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d115      	bne.n	8004f26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fc faac 	bl	8001464 <HAL_Delay>
      ms++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 fa45 	bl	80063a2 <USB_GetMode>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d01e      	beq.n	8004f5c <USB_SetCurrentMode+0x84>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b31      	cmp	r3, #49	; 0x31
 8004f22:	d9f0      	bls.n	8004f06 <USB_SetCurrentMode+0x2e>
 8004f24:	e01a      	b.n	8004f5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d115      	bne.n	8004f58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7fc fa93 	bl	8001464 <HAL_Delay>
      ms++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 fa2c 	bl	80063a2 <USB_GetMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <USB_SetCurrentMode+0x84>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b31      	cmp	r3, #49	; 0x31
 8004f54:	d9f0      	bls.n	8004f38 <USB_SetCurrentMode+0x60>
 8004f56:	e001      	b.n	8004f5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e005      	b.n	8004f68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b32      	cmp	r3, #50	; 0x32
 8004f60:	d101      	bne.n	8004f66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f70:	b084      	sub	sp, #16
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e009      	b.n	8004fa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	3340      	adds	r3, #64	; 0x40
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0e      	cmp	r3, #14
 8004fa8:	d9f2      	bls.n	8004f90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11c      	bne.n	8004fea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8004fe8:	e00b      	b.n	8005002 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005008:	461a      	mov	r2, r3
 800500a:	2300      	movs	r3, #0
 800500c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	4619      	mov	r1, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	461a      	mov	r2, r3
 800501e:	680b      	ldr	r3, [r1, #0]
 8005020:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10c      	bne.n	8005042 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800502e:	2100      	movs	r1, #0
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f965 	bl	8005300 <USB_SetDevSpeed>
 8005036:	e008      	b.n	800504a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005038:	2101      	movs	r1, #1
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f960 	bl	8005300 <USB_SetDevSpeed>
 8005040:	e003      	b.n	800504a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005042:	2103      	movs	r1, #3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f95b 	bl	8005300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800504a:	2110      	movs	r1, #16
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8f3 	bl	8005238 <USB_FlushTxFifo>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f91f 	bl	80052a0 <USB_FlushRxFifo>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e043      	b.n	800511e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ac:	d118      	bne.n	80050e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	461a      	mov	r2, r3
 80050c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e013      	b.n	80050f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e008      	b.n	80050f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	461a      	mov	r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	3301      	adds	r3, #1
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3b7      	bcc.n	8005096 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e043      	b.n	80051b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005142:	d118      	bne.n	8005176 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e013      	b.n	8005188 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e008      	b.n	8005188 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	461a      	mov	r2, r3
 80051a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3b7      	bcc.n	800512c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f043 0210 	orr.w	r2, r3, #16
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <USB_DevInit+0x2c4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 0208 	orr.w	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005230:	b004      	add	sp, #16
 8005232:	4770      	bx	lr
 8005234:	803c3800 	.word	0x803c3800

08005238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <USB_FlushTxFifo+0x64>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e01b      	b.n	8005290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	daf2      	bge.n	8005246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a08      	ldr	r2, [pc, #32]	; (800529c <USB_FlushTxFifo+0x64>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e006      	b.n	8005290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d0f0      	beq.n	8005270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	00030d40 	.word	0x00030d40

080052a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <USB_FlushRxFifo+0x5c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e018      	b.n	80052f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	daf2      	bge.n	80052ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2210      	movs	r2, #16
 80052ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <USB_FlushRxFifo+0x5c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e006      	b.n	80052f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d0f0      	beq.n	80052d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	00030d40 	.word	0x00030d40

08005300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005320:	4313      	orrs	r3, r2
 8005322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
 8005356:	e00a      	b.n	800536e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d002      	beq.n	8005364 <USB_GetDevSpeed+0x32>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b06      	cmp	r3, #6
 8005362:	d102      	bne.n	800536a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005364:	2302      	movs	r3, #2
 8005366:	75fb      	strb	r3, [r7, #23]
 8005368:	e001      	b.n	800536e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800536a:	230f      	movs	r3, #15
 800536c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d13a      	bne.n	800540e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2101      	movs	r1, #1
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d155      	bne.n	800547c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	791b      	ldrb	r3, [r3, #4]
 80053ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	059b      	lsls	r3, r3, #22
 80053f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f4:	4313      	orrs	r3, r2
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e036      	b.n	800547c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800542c:	4313      	orrs	r3, r2
 800542e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11a      	bne.n	800547c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	791b      	ldrb	r3, [r3, #4]
 8005460:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005462:	430b      	orrs	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d161      	bne.n	800556c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054be:	d11f      	bne.n	8005500 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	b29b      	uxth	r3, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005520:	4013      	ands	r3, r2
 8005522:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	2101      	movs	r1, #1
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	b29b      	uxth	r3, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005544:	4013      	ands	r3, r2
 8005546:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0159      	lsls	r1, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	440b      	add	r3, r1
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	4619      	mov	r1, r3
 8005564:	4b35      	ldr	r3, [pc, #212]	; (800563c <USB_DeactivateEndpoint+0x1b0>)
 8005566:	4013      	ands	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
 800556a:	e060      	b.n	800562e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005582:	d11f      	bne.n	80055c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	43db      	mvns	r3, r3
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e4:	4013      	ands	r3, r2
 80055e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	43db      	mvns	r3, r3
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005608:	4013      	ands	r3, r2
 800560a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	0159      	lsls	r1, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	440b      	add	r3, r1
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	4619      	mov	r1, r3
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <USB_DeactivateEndpoint+0x1b4>)
 800562a:	4013      	ands	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	ec337800 	.word	0xec337800
 8005640:	eff37800 	.word	0xeff37800

08005644 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	f040 815c 	bne.w	800591e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d132      	bne.n	80056d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800568c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	0cdb      	lsrs	r3, r3, #19
 80056ce:	04db      	lsls	r3, r3, #19
 80056d0:	6113      	str	r3, [r2, #16]
 80056d2:	e074      	b.n	80057be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	0cdb      	lsrs	r3, r3, #19
 80056f0:	04db      	lsls	r3, r3, #19
 80056f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005712:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	440b      	add	r3, r1
 8005730:	1e59      	subs	r1, r3, #1
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	fbb1 f3f3 	udiv	r3, r1, r3
 800573a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800573c:	4b9d      	ldr	r3, [pc, #628]	; (80059b4 <USB_EPStartXfer+0x370>)
 800573e:	400b      	ands	r3, r1
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	0148      	lsls	r0, r1, #5
 8005744:	69f9      	ldr	r1, [r7, #28]
 8005746:	4401      	add	r1, r0
 8005748:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800574c:	4313      	orrs	r3, r2
 800574e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	0148      	lsls	r0, r1, #5
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	4401      	add	r1, r0
 800576e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005772:	4313      	orrs	r3, r2
 8005774:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d11f      	bne.n	80057be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800579c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d14b      	bne.n	800585c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	791b      	ldrb	r3, [r3, #4]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d128      	bne.n	800583a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d110      	bne.n	800581a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e00f      	b.n	800583a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e133      	b.n	8005ac4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800587a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d015      	beq.n	80058b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 811b 	beq.w	8005ac4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058aa:	4313      	orrs	r3, r2
 80058ac:	634b      	str	r3, [r1, #52]	; 0x34
 80058ae:	e109      	b.n	8005ac4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d110      	bne.n	80058e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e00f      	b.n	8005902 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6919      	ldr	r1, [r3, #16]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	b298      	uxth	r0, r3
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4603      	mov	r3, r0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fade 	bl	8005ed8 <USB_WritePacket>
 800591c:	e0d2      	b.n	8005ac4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	0cdb      	lsrs	r3, r3, #19
 800593a:	04db      	lsls	r3, r3, #19
 800593c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800595c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005960:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d126      	bne.n	80059b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	0148      	lsls	r0, r1, #5
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	4401      	add	r1, r0
 8005988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800598c:	4313      	orrs	r3, r2
 800598e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ae:	6113      	str	r3, [r2, #16]
 80059b0:	e03a      	b.n	8005a28 <USB_EPStartXfer+0x3e4>
 80059b2:	bf00      	nop
 80059b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	1e5a      	subs	r2, r3, #1
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	8afa      	ldrh	r2, [r7, #22]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	04d9      	lsls	r1, r3, #19
 80059ee:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <USB_EPStartXfer+0x48c>)
 80059f0:	400b      	ands	r3, r1
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	0148      	lsls	r0, r1, #5
 80059f6:	69f9      	ldr	r1, [r7, #28]
 80059f8:	4401      	add	r1, r0
 80059fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059fe:	4313      	orrs	r3, r2
 8005a00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	0148      	lsls	r0, r1, #5
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	4401      	add	r1, r0
 8005a20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a24:	4313      	orrs	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d10d      	bne.n	8005a4a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6919      	ldr	r1, [r3, #16]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	460a      	mov	r2, r1
 8005a48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d128      	bne.n	8005aa4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d110      	bne.n	8005a84 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e00f      	b.n	8005aa4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	1ff80000 	.word	0x1ff80000

08005ad4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	f040 80ce 	bne.w	8005c92 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d132      	bne.n	8005b64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	0cdb      	lsrs	r3, r3, #19
 8005b5e:	04db      	lsls	r3, r3, #19
 8005b60:	6113      	str	r3, [r2, #16]
 8005b62:	e04e      	b.n	8005c02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	0cdb      	lsrs	r3, r3, #19
 8005b80:	04db      	lsls	r3, r3, #19
 8005b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf2:	6939      	ldr	r1, [r7, #16]
 8005bf4:	0148      	lsls	r0, r1, #5
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	4401      	add	r1, r0
 8005bfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d11e      	bne.n	8005c46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	e097      	b.n	8005d76 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8083 	beq.w	8005d76 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f303 	lsl.w	r3, r1, r3
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	634b      	str	r3, [r1, #52]	; 0x34
 8005c90:	e071      	b.n	8005d76 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	0cdb      	lsrs	r3, r3, #19
 8005cae:	04db      	lsls	r3, r3, #19
 8005cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d24:	6939      	ldr	r1, [r7, #16]
 8005d26:	0148      	lsls	r0, r1, #5
 8005d28:	6979      	ldr	r1, [r7, #20]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d30:	4313      	orrs	r3, r2
 8005d32:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d10d      	bne.n	8005d56 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6919      	ldr	r1, [r3, #16]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	460a      	mov	r2, r1
 8005d54:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d14a      	bne.n	8005e38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dba:	f040 8086 	bne.w	8005eca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d902      	bls.n	8005e1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1a:	e056      	b.n	8005eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e34:	d0e7      	beq.n	8005e06 <USB_EPStopXfer+0x82>
 8005e36:	e048      	b.n	8005eca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e50:	d13b      	bne.n	8005eca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d902      	bls.n	8005eb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
          break;
 8005eae:	e00c      	b.n	8005eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec8:	d0e7      	beq.n	8005e9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	71fb      	strb	r3, [r7, #7]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d123      	bne.n	8005f46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005efe:	88bb      	ldrh	r3, [r7, #4]
 8005f00:	3303      	adds	r3, #3
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e018      	b.n	8005f3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	031a      	lsls	r2, r3, #12
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	461a      	mov	r2, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3301      	adds	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d3e2      	bcc.n	8005f0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3724      	adds	r7, #36	; 0x24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b08b      	sub	sp, #44	; 0x2c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	089b      	lsrs	r3, r3, #2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	e014      	b.n	8005faa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	3301      	adds	r3, #1
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	3301      	adds	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3e6      	bcc.n	8005f80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fb2:	8bfb      	ldrh	r3, [r7, #30]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01e      	beq.n	8005ff6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f107 0310 	add.w	r3, r7, #16
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	701a      	strb	r2, [r3, #0]
      i++;
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fea:	8bfb      	ldrh	r3, [r7, #30]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ff0:	8bfb      	ldrh	r3, [r7, #30]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1ea      	bne.n	8005fcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	372c      	adds	r7, #44	; 0x2c
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12c      	bne.n	800607a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	db12      	blt.n	8006058 <USB_EPSetStall+0x54>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006056:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e02b      	b.n	80060d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db12      	blt.n	80060b2 <USB_EPSetStall+0xae>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00f      	beq.n	80060b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d128      	bne.n	800614e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800611a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d003      	beq.n	800612c <USB_EPClearStall+0x4c>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d138      	bne.n	800619e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e027      	b.n	800619e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006168:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800616c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	791b      	ldrb	r3, [r3, #4]
 8006172:	2b03      	cmp	r3, #3
 8006174:	d003      	beq.n	800617e <USB_EPClearStall+0x9e>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	791b      	ldrb	r3, [r3, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d10f      	bne.n	800619e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e6:	4313      	orrs	r3, r2
 80061e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006226:	f023 0302 	bic.w	r3, r3, #2
 800622a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4013      	ands	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	0c1b      	lsrs	r3, r3, #16
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	b29b      	uxth	r3, r3
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4013      	ands	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006338:	68bb      	ldr	r3, [r7, #8]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006346:	b480      	push	{r7}
 8006348:	b087      	sub	sp, #28
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	01db      	lsls	r3, r3, #7
 8006378:	b2db      	uxtb	r3, r3
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4013      	ands	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006394:	68bb      	ldr	r3, [r7, #8]
}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0301 	and.w	r3, r3, #1
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	460b      	mov	r3, r1
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	333c      	adds	r3, #60	; 0x3c
 800641a:	3304      	adds	r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4a26      	ldr	r2, [pc, #152]	; (80064bc <USB_EP0_OutStart+0xb8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d90a      	bls.n	800643e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006438:	d101      	bne.n	800643e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e037      	b.n	80064ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646c:	f043 0318 	orr.w	r3, r3, #24
 8006470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006480:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006484:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10f      	bne.n	80064ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	4f54300a 	.word	0x4f54300a

080064c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <USB_CoreReset+0x64>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e01b      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	daf2      	bge.n	80064cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <USB_CoreReset+0x64>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e006      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d0f0      	beq.n	80064f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	00030d40 	.word	0x00030d40

08006528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006534:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006538:	f002 fc1e 	bl	8008d78 <USBD_static_malloc>
 800653c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	32b0      	adds	r2, #176	; 0xb0
 800654e:	2100      	movs	r1, #0
 8006550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006554:	2302      	movs	r3, #2
 8006556:	e0d4      	b.n	8006702 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006558:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800655c:	2100      	movs	r1, #0
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f002 fc72 	bl	8008e48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32b0      	adds	r2, #176	; 0xb0
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32b0      	adds	r2, #176	; 0xb0
 800657e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7c1b      	ldrb	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d138      	bne.n	8006602 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006590:	4b5e      	ldr	r3, [pc, #376]	; (800670c <USBD_CDC_Init+0x1e4>)
 8006592:	7819      	ldrb	r1, [r3, #0]
 8006594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006598:	2202      	movs	r2, #2
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f002 fac9 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065a0:	4b5a      	ldr	r3, [pc, #360]	; (800670c <USBD_CDC_Init+0x1e4>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	3324      	adds	r3, #36	; 0x24
 80065b6:	2201      	movs	r2, #1
 80065b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065ba:	4b55      	ldr	r3, [pc, #340]	; (8006710 <USBD_CDC_Init+0x1e8>)
 80065bc:	7819      	ldrb	r1, [r3, #0]
 80065be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c2:	2202      	movs	r2, #2
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 fab4 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065ca:	4b51      	ldr	r3, [pc, #324]	; (8006710 <USBD_CDC_Init+0x1e8>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065e2:	2201      	movs	r2, #1
 80065e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065e6:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <USBD_CDC_Init+0x1ec>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	3326      	adds	r3, #38	; 0x26
 80065fc:	2210      	movs	r2, #16
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e035      	b.n	800666e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006602:	4b42      	ldr	r3, [pc, #264]	; (800670c <USBD_CDC_Init+0x1e4>)
 8006604:	7819      	ldrb	r1, [r3, #0]
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	2202      	movs	r2, #2
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f002 fa91 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006610:	4b3e      	ldr	r3, [pc, #248]	; (800670c <USBD_CDC_Init+0x1e4>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3324      	adds	r3, #36	; 0x24
 8006626:	2201      	movs	r2, #1
 8006628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800662a:	4b39      	ldr	r3, [pc, #228]	; (8006710 <USBD_CDC_Init+0x1e8>)
 800662c:	7819      	ldrb	r1, [r3, #0]
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	2202      	movs	r2, #2
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f002 fa7d 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006638:	4b35      	ldr	r3, [pc, #212]	; (8006710 <USBD_CDC_Init+0x1e8>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006650:	2201      	movs	r2, #1
 8006652:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006654:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <USBD_CDC_Init+0x1ec>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3326      	adds	r3, #38	; 0x26
 800666a:	2210      	movs	r2, #16
 800666c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800666e:	4b29      	ldr	r3, [pc, #164]	; (8006714 <USBD_CDC_Init+0x1ec>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	2308      	movs	r3, #8
 8006674:	2203      	movs	r2, #3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f002 fa5b 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800667c:	4b25      	ldr	r3, [pc, #148]	; (8006714 <USBD_CDC_Init+0x1ec>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f003 020f 	and.w	r2, r3, #15
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	3324      	adds	r3, #36	; 0x24
 8006692:	2201      	movs	r2, #1
 8006694:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	33b0      	adds	r3, #176	; 0xb0
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066cc:	2302      	movs	r3, #2
 80066ce:	e018      	b.n	8006702 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7c1b      	ldrb	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <USBD_CDC_Init+0x1e8>)
 80066da:	7819      	ldrb	r1, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fb12 	bl	8008d10 <USBD_LL_PrepareReceive>
 80066ec:	e008      	b.n	8006700 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <USBD_CDC_Init+0x1e8>)
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f002 fb08 	bl	8008d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000093 	.word	0x20000093
 8006710:	20000094 	.word	0x20000094
 8006714:	20000095 	.word	0x20000095

08006718 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006724:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <USBD_CDC_DeInit+0xf8>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f002 fa27 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006730:	4b37      	ldr	r3, [pc, #220]	; (8006810 <USBD_CDC_DeInit+0xf8>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3324      	adds	r3, #36	; 0x24
 8006746:	2200      	movs	r2, #0
 8006748:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800674a:	4b32      	ldr	r3, [pc, #200]	; (8006814 <USBD_CDC_DeInit+0xfc>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f002 fa14 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006756:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <USBD_CDC_DeInit+0xfc>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 020f 	and.w	r2, r3, #15
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800676e:	2200      	movs	r2, #0
 8006770:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006772:	4b29      	ldr	r3, [pc, #164]	; (8006818 <USBD_CDC_DeInit+0x100>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 fa00 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800677e:	4b26      	ldr	r3, [pc, #152]	; (8006818 <USBD_CDC_DeInit+0x100>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	3324      	adds	r3, #36	; 0x24
 8006794:	2200      	movs	r2, #0
 8006796:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <USBD_CDC_DeInit+0x100>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3326      	adds	r3, #38	; 0x26
 80067ae:	2200      	movs	r2, #0
 80067b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	32b0      	adds	r2, #176	; 0xb0
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01f      	beq.n	8006804 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	33b0      	adds	r3, #176	; 0xb0
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32b0      	adds	r2, #176	; 0xb0
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 fad4 	bl	8008d94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32b0      	adds	r2, #176	; 0xb0
 80067f6:	2100      	movs	r1, #0
 80067f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000093 	.word	0x20000093
 8006814:	20000094 	.word	0x20000094
 8006818:	20000095 	.word	0x20000095

0800681c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	32b0      	adds	r2, #176	; 0xb0
 8006830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006834:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e0bf      	b.n	80069cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006854:	2b00      	cmp	r3, #0
 8006856:	d050      	beq.n	80068fa <USBD_CDC_Setup+0xde>
 8006858:	2b20      	cmp	r3, #32
 800685a:	f040 80af 	bne.w	80069bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88db      	ldrh	r3, [r3, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d03a      	beq.n	80068dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	b25b      	sxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	da1b      	bge.n	80068a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	33b0      	adds	r3, #176	; 0xb0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006886:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	88d2      	ldrh	r2, [r2, #6]
 800688c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	88db      	ldrh	r3, [r3, #6]
 8006892:	2b07      	cmp	r3, #7
 8006894:	bf28      	it	cs
 8006896:	2307      	movcs	r3, #7
 8006898:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	89fa      	ldrh	r2, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fd43 	bl	800832c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068a6:	e090      	b.n	80069ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785a      	ldrb	r2, [r3, #1]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	88db      	ldrh	r3, [r3, #6]
 80068b6:	2b3f      	cmp	r3, #63	; 0x3f
 80068b8:	d803      	bhi.n	80068c2 <USBD_CDC_Setup+0xa6>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	e000      	b.n	80068c4 <USBD_CDC_Setup+0xa8>
 80068c2:	2240      	movs	r2, #64	; 0x40
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068ca:	6939      	ldr	r1, [r7, #16]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068d2:	461a      	mov	r2, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fd55 	bl	8008384 <USBD_CtlPrepareRx>
      break;
 80068da:	e076      	b.n	80069ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	33b0      	adds	r3, #176	; 0xb0
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	7850      	ldrb	r0, [r2, #1]
 80068f2:	2200      	movs	r2, #0
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	4798      	blx	r3
      break;
 80068f8:	e067      	b.n	80069ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b0b      	cmp	r3, #11
 8006900:	d851      	bhi.n	80069a6 <USBD_CDC_Setup+0x18a>
 8006902:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <USBD_CDC_Setup+0xec>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006939 	.word	0x08006939
 800690c:	080069b5 	.word	0x080069b5
 8006910:	080069a7 	.word	0x080069a7
 8006914:	080069a7 	.word	0x080069a7
 8006918:	080069a7 	.word	0x080069a7
 800691c:	080069a7 	.word	0x080069a7
 8006920:	080069a7 	.word	0x080069a7
 8006924:	080069a7 	.word	0x080069a7
 8006928:	080069a7 	.word	0x080069a7
 800692c:	080069a7 	.word	0x080069a7
 8006930:	08006963 	.word	0x08006963
 8006934:	0800698d 	.word	0x0800698d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d107      	bne.n	8006954 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006944:	f107 030a 	add.w	r3, r7, #10
 8006948:	2202      	movs	r2, #2
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fced 	bl	800832c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006952:	e032      	b.n	80069ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fc77 	bl	800824a <USBD_CtlError>
            ret = USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	75fb      	strb	r3, [r7, #23]
          break;
 8006960:	e02b      	b.n	80069ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d107      	bne.n	800697e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800696e:	f107 030d 	add.w	r3, r7, #13
 8006972:	2201      	movs	r2, #1
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fcd8 	bl	800832c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800697c:	e01d      	b.n	80069ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fc62 	bl	800824a <USBD_CtlError>
            ret = USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	75fb      	strb	r3, [r7, #23]
          break;
 800698a:	e016      	b.n	80069ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d00f      	beq.n	80069b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fc55 	bl	800824a <USBD_CtlError>
            ret = USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069a4:	e008      	b.n	80069b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fc4e 	bl	800824a <USBD_CtlError>
          ret = USBD_FAIL;
 80069ae:	2303      	movs	r3, #3
 80069b0:	75fb      	strb	r3, [r7, #23]
          break;
 80069b2:	e002      	b.n	80069ba <USBD_CDC_Setup+0x19e>
          break;
 80069b4:	bf00      	nop
 80069b6:	e008      	b.n	80069ca <USBD_CDC_Setup+0x1ae>
          break;
 80069b8:	bf00      	nop
      }
      break;
 80069ba:	e006      	b.n	80069ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fc43 	bl	800824a <USBD_CtlError>
      ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32b0      	adds	r2, #176	; 0xb0
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e065      	b.n	8006aca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	32b0      	adds	r2, #176	; 0xb0
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3318      	adds	r3, #24
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02f      	beq.n	8006a88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	f003 010f 	and.w	r1, r3, #15
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	460b      	mov	r3, r1
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	440b      	add	r3, r1
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4403      	add	r3, r0
 8006a50:	3348      	adds	r3, #72	; 0x48
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d112      	bne.n	8006a88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3318      	adds	r3, #24
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a7a:	78f9      	ldrb	r1, [r7, #3]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2200      	movs	r2, #0
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 f924 	bl	8008cce <USBD_LL_Transmit>
 8006a86:	e01f      	b.n	8006ac8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	33b0      	adds	r3, #176	; 0xb0
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d010      	beq.n	8006ac8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	33b0      	adds	r3, #176	; 0xb0
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32b0      	adds	r2, #176	; 0xb0
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32b0      	adds	r2, #176	; 0xb0
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e01a      	b.n	8006b3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 f922 	bl	8008d52 <USBD_LL_GetRxDataSize>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	33b0      	adds	r3, #176	; 0xb0
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b34:	4611      	mov	r1, r2
 8006b36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	32b0      	adds	r2, #176	; 0xb0
 8006b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e025      	b.n	8006bb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	33b0      	adds	r3, #176	; 0xb0
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01a      	beq.n	8006bae <USBD_CDC_EP0_RxReady+0x6c>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d015      	beq.n	8006bae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	33b0      	adds	r3, #176	; 0xb0
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	22ff      	movs	r2, #255	; 0xff
 8006baa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bc0:	2182      	movs	r1, #130	; 0x82
 8006bc2:	4818      	ldr	r0, [pc, #96]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bc4:	f000 fd09 	bl	80075da <USBD_GetEpDesc>
 8006bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4815      	ldr	r0, [pc, #84]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bce:	f000 fd04 	bl	80075da <USBD_GetEpDesc>
 8006bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bd4:	2181      	movs	r1, #129	; 0x81
 8006bd6:	4813      	ldr	r0, [pc, #76]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bd8:	f000 fcff 	bl	80075da <USBD_GetEpDesc>
 8006bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2210      	movs	r2, #16
 8006be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0c:	711a      	strb	r2, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2243      	movs	r2, #67	; 0x43
 8006c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000050 	.word	0x20000050

08006c28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c30:	2182      	movs	r1, #130	; 0x82
 8006c32:	4818      	ldr	r0, [pc, #96]	; (8006c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c34:	f000 fcd1 	bl	80075da <USBD_GetEpDesc>
 8006c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4815      	ldr	r0, [pc, #84]	; (8006c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c3e:	f000 fccc 	bl	80075da <USBD_GetEpDesc>
 8006c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	4813      	ldr	r0, [pc, #76]	; (8006c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c48:	f000 fcc7 	bl	80075da <USBD_GetEpDesc>
 8006c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2210      	movs	r2, #16
 8006c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2200      	movs	r2, #0
 8006c64:	711a      	strb	r2, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0202 	orr.w	r2, r2, #2
 8006c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d006      	beq.n	8006c82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	711a      	strb	r2, [r3, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f042 0202 	orr.w	r2, r2, #2
 8006c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2243      	movs	r2, #67	; 0x43
 8006c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000050 	.word	0x20000050

08006c98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ca0:	2182      	movs	r1, #130	; 0x82
 8006ca2:	4818      	ldr	r0, [pc, #96]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ca4:	f000 fc99 	bl	80075da <USBD_GetEpDesc>
 8006ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006caa:	2101      	movs	r1, #1
 8006cac:	4815      	ldr	r0, [pc, #84]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cae:	f000 fc94 	bl	80075da <USBD_GetEpDesc>
 8006cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cb4:	2181      	movs	r1, #129	; 0x81
 8006cb6:	4813      	ldr	r0, [pc, #76]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cb8:	f000 fc8f 	bl	80075da <USBD_GetEpDesc>
 8006cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd8:	711a      	strb	r2, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cec:	711a      	strb	r2, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2243      	movs	r2, #67	; 0x43
 8006cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000050 	.word	0x20000050

08006d08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	220a      	movs	r2, #10
 8006d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	2000000c 	.word	0x2000000c

08006d28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e009      	b.n	8006d50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	33b0      	adds	r3, #176	; 0xb0
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	32b0      	adds	r2, #176	; 0xb0
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e008      	b.n	8006d94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	32b0      	adds	r2, #176	; 0xb0
 8006db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e004      	b.n	8006dce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	32b0      	adds	r2, #176	; 0xb0
 8006dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	; 0xb0
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e018      	b.n	8006e3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7c1b      	ldrb	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <USBD_CDC_ReceivePacket+0x68>)
 8006e14:	7819      	ldrb	r1, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 ff75 	bl	8008d10 <USBD_LL_PrepareReceive>
 8006e26:	e008      	b.n	8006e3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <USBD_CDC_ReceivePacket+0x68>)
 8006e2a:	7819      	ldrb	r1, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 ff6b 	bl	8008d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000094 	.word	0x20000094

08006e48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e01f      	b.n	8006ea0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	79fa      	ldrb	r2, [r7, #7]
 8006e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f001 fde5 	bl	8008a64 <USBD_LL_Init>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e025      	b.n	8006f0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32ae      	adds	r2, #174	; 0xae
 8006ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00f      	beq.n	8006efc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32ae      	adds	r2, #174	; 0xae
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	f107 020e 	add.w	r2, r7, #14
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fded 	bl	8008afc <USBD_LL_Start>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	4611      	mov	r1, r2
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	4611      	mov	r1, r2
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 f908 	bl	80081d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d01a      	beq.n	8007020 <USBD_LL_SetupStage+0x72>
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d822      	bhi.n	8007034 <USBD_LL_SetupStage+0x86>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <USBD_LL_SetupStage+0x4a>
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d00a      	beq.n	800700c <USBD_LL_SetupStage+0x5e>
 8006ff6:	e01d      	b.n	8007034 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb5f 	bl	80076c4 <USBD_StdDevReq>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	e020      	b.n	800704e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fbc7 	bl	80077a8 <USBD_StdItfReq>
 800701a:	4603      	mov	r3, r0
 800701c:	73fb      	strb	r3, [r7, #15]
      break;
 800701e:	e016      	b.n	800704e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fc29 	bl	8007880 <USBD_StdEPReq>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
      break;
 8007032:	e00c      	b.n	800704e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800703a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fdba 	bl	8008bbc <USBD_LL_StallEP>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	bf00      	nop
  }

  return ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	460b      	mov	r3, r1
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d16e      	bne.n	800714e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007076:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800707e:	2b03      	cmp	r3, #3
 8007080:	f040 8098 	bne.w	80071b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d913      	bls.n	80070b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	1ad2      	subs	r2, r2, r3
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bf28      	it	cs
 80070aa:	4613      	movcs	r3, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f001 f984 	bl	80083be <USBD_CtlContinueRx>
 80070b6:	e07d      	b.n	80071b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d014      	beq.n	80070f0 <USBD_LL_DataOutStage+0x98>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d81d      	bhi.n	8007106 <USBD_LL_DataOutStage+0xae>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <USBD_LL_DataOutStage+0x7c>
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d003      	beq.n	80070da <USBD_LL_DataOutStage+0x82>
 80070d2:	e018      	b.n	8007106 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	75bb      	strb	r3, [r7, #22]
            break;
 80070d8:	e018      	b.n	800710c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fa5e 	bl	80075a6 <USBD_CoreFindIF>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75bb      	strb	r3, [r7, #22]
            break;
 80070ee:	e00d      	b.n	800710c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4619      	mov	r1, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fa60 	bl	80075c0 <USBD_CoreFindEP>
 8007100:	4603      	mov	r3, r0
 8007102:	75bb      	strb	r3, [r7, #22]
            break;
 8007104:	e002      	b.n	800710c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	75bb      	strb	r3, [r7, #22]
            break;
 800710a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800710c:	7dbb      	ldrb	r3, [r7, #22]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d119      	bne.n	8007146 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d113      	bne.n	8007146 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800711e:	7dba      	ldrb	r2, [r7, #22]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	32ae      	adds	r2, #174	; 0xae
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800712e:	7dba      	ldrb	r2, [r7, #22]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007136:	7dba      	ldrb	r2, [r7, #22]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	32ae      	adds	r2, #174	; 0xae
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 f94a 	bl	80083e0 <USBD_CtlSendStatus>
 800714c:	e032      	b.n	80071b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007154:	b2db      	uxtb	r3, r3
 8007156:	4619      	mov	r1, r3
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fa31 	bl	80075c0 <USBD_CoreFindEP>
 800715e:	4603      	mov	r3, r0
 8007160:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007162:	7dbb      	ldrb	r3, [r7, #22]
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	d025      	beq.n	80071b4 <USBD_LL_DataOutStage+0x15c>
 8007168:	7dbb      	ldrb	r3, [r7, #22]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d122      	bne.n	80071b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b03      	cmp	r3, #3
 8007178:	d117      	bne.n	80071aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800717a:	7dba      	ldrb	r2, [r7, #22]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	32ae      	adds	r2, #174	; 0xae
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00f      	beq.n	80071aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800718a:	7dba      	ldrb	r2, [r7, #22]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007192:	7dba      	ldrb	r2, [r7, #22]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	32ae      	adds	r2, #174	; 0xae
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	7afa      	ldrb	r2, [r7, #11]
 80071a0:	4611      	mov	r1, r2
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	4798      	blx	r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	e000      	b.n	80071b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	460b      	mov	r3, r1
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d16f      	bne.n	80072b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3314      	adds	r3, #20
 80071d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d15a      	bne.n	8007298 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d914      	bls.n	8007218 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	1ad2      	subs	r2, r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	461a      	mov	r2, r3
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 f8ac 	bl	8008362 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800720a:	2300      	movs	r3, #0
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f001 fd7d 	bl	8008d10 <USBD_LL_PrepareReceive>
 8007216:	e03f      	b.n	8007298 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d11c      	bne.n	800725e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800722c:	429a      	cmp	r2, r3
 800722e:	d316      	bcc.n	800725e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800723a:	429a      	cmp	r2, r3
 800723c:	d20f      	bcs.n	800725e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f001 f88d 	bl	8008362 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007250:	2300      	movs	r3, #0
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f001 fd5a 	bl	8008d10 <USBD_LL_PrepareReceive>
 800725c:	e01c      	b.n	8007298 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d10f      	bne.n	800728a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800728a:	2180      	movs	r1, #128	; 0x80
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f001 fc95 	bl	8008bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f001 f8b7 	bl	8008406 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d03a      	beq.n	8007318 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fe42 	bl	8006f2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072b0:	e032      	b.n	8007318 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f97f 	bl	80075c0 <USBD_CoreFindEP>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2bff      	cmp	r3, #255	; 0xff
 80072ca:	d025      	beq.n	8007318 <USBD_LL_DataInStage+0x15a>
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d122      	bne.n	8007318 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d11c      	bne.n	8007318 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072de:	7dfa      	ldrb	r2, [r7, #23]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	32ae      	adds	r2, #174	; 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072ee:	7dfa      	ldrb	r2, [r7, #23]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072f6:	7dfa      	ldrb	r2, [r7, #23]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	32ae      	adds	r2, #174	; 0xae
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	7afa      	ldrb	r2, [r7, #11]
 8007304:	4611      	mov	r1, r2
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	4798      	blx	r3
 800730a:	4603      	mov	r3, r0
 800730c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800730e:	7dbb      	ldrb	r3, [r7, #22]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007314:	7dbb      	ldrb	r3, [r7, #22]
 8007316:	e000      	b.n	800731a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d014      	beq.n	8007388 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6852      	ldr	r2, [r2, #4]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	4611      	mov	r1, r2
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fbcf 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2240      	movs	r2, #64	; 0x40
 80073a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a4:	2340      	movs	r3, #64	; 0x40
 80073a6:	2200      	movs	r2, #0
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fbc1 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2240      	movs	r2, #64	; 0x40
 80073ba:	621a      	str	r2, [r3, #32]

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2204      	movs	r2, #4
 8007400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b04      	cmp	r3, #4
 8007424:	d106      	bne.n	8007434 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d110      	bne.n	8007478 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32ae      	adds	r2, #174	; 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e01c      	b.n	80074de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d115      	bne.n	80074dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	; 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32ae      	adds	r2, #174	; 0xae
 80074ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4611      	mov	r1, r2
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	32ae      	adds	r2, #174	; 0xae
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e01c      	b.n	8007542 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b03      	cmp	r3, #3
 8007512:	d115      	bne.n	8007540 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	; 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	; 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	4611      	mov	r1, r2
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6852      	ldr	r2, [r2, #4]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	4611      	mov	r1, r2
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	429a      	cmp	r2, r3
 8007600:	d920      	bls.n	8007644 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800760a:	e013      	b.n	8007634 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800760c:	f107 030a 	add.w	r3, r7, #10
 8007610:	4619      	mov	r1, r3
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	f000 f81b 	bl	800764e <USBD_GetNextDesc>
 8007618:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b05      	cmp	r3, #5
 8007620:	d108      	bne.n	8007634 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	789b      	ldrb	r3, [r3, #2]
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	429a      	cmp	r2, r3
 800762e:	d008      	beq.n	8007642 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	b29a      	uxth	r2, r3
 800763a:	897b      	ldrh	r3, [r7, #10]
 800763c:	429a      	cmp	r2, r3
 800763e:	d8e5      	bhi.n	800760c <USBD_GetEpDesc+0x32>
 8007640:	e000      	b.n	8007644 <USBD_GetEpDesc+0x6a>
          break;
 8007642:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007644:	693b      	ldr	r3, [r7, #16]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	4413      	add	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3301      	adds	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a6:	8a3b      	ldrh	r3, [r7, #16]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b21a      	sxth	r2, r3
 80076ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b6:	89fb      	ldrh	r3, [r7, #14]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <USBD_StdDevReq+0x26>
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d857      	bhi.n	8007792 <USBD_StdDevReq+0xce>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00f      	beq.n	8007706 <USBD_StdDevReq+0x42>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d153      	bne.n	8007792 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
      break;
 8007704:	e04a      	b.n	800779c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	785b      	ldrb	r3, [r3, #1]
 800770a:	2b09      	cmp	r3, #9
 800770c:	d83b      	bhi.n	8007786 <USBD_StdDevReq+0xc2>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <USBD_StdDevReq+0x50>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007769 	.word	0x08007769
 8007718:	0800777d 	.word	0x0800777d
 800771c:	08007787 	.word	0x08007787
 8007720:	08007773 	.word	0x08007773
 8007724:	08007787 	.word	0x08007787
 8007728:	08007747 	.word	0x08007747
 800772c:	0800773d 	.word	0x0800773d
 8007730:	08007787 	.word	0x08007787
 8007734:	0800775f 	.word	0x0800775f
 8007738:	08007751 	.word	0x08007751
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa3c 	bl	8007bbc <USBD_GetDescriptor>
          break;
 8007744:	e024      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fba1 	bl	8007e90 <USBD_SetAddress>
          break;
 800774e:	e01f      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fbe0 	bl	8007f18 <USBD_SetConfig>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
          break;
 800775c:	e018      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc83 	bl	800806c <USBD_GetConfig>
          break;
 8007766:	e013      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fcb4 	bl	80080d8 <USBD_GetStatus>
          break;
 8007770:	e00e      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fce3 	bl	8008140 <USBD_SetFeature>
          break;
 800777a:	e009      	b.n	8007790 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd07 	bl	8008192 <USBD_ClrFeature>
          break;
 8007784:	e004      	b.n	8007790 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fd5e 	bl	800824a <USBD_CtlError>
          break;
 800778e:	bf00      	nop
      }
      break;
 8007790:	e004      	b.n	800779c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fd58 	bl	800824a <USBD_CtlError>
      break;
 800779a:	bf00      	nop
  }

  return ret;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop

080077a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d005      	beq.n	80077ce <USBD_StdItfReq+0x26>
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d852      	bhi.n	800786c <USBD_StdItfReq+0xc4>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <USBD_StdItfReq+0x26>
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d14e      	bne.n	800786c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d840      	bhi.n	800785e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	889b      	ldrh	r3, [r3, #4]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d836      	bhi.n	8007854 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	889b      	ldrh	r3, [r3, #4]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fed9 	bl	80075a6 <USBD_CoreFindIF>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2bff      	cmp	r3, #255	; 0xff
 80077fc:	d01d      	beq.n	800783a <USBD_StdItfReq+0x92>
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11a      	bne.n	800783a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007804:	7bba      	ldrb	r2, [r7, #14]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32ae      	adds	r2, #174	; 0xae
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00f      	beq.n	8007834 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007814:	7bba      	ldrb	r2, [r7, #14]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800781c:	7bba      	ldrb	r2, [r7, #14]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007832:	e004      	b.n	800783e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007838:	e001      	b.n	800783e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800783a:	2303      	movs	r3, #3
 800783c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d110      	bne.n	8007868 <USBD_StdItfReq+0xc0>
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10d      	bne.n	8007868 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fdc7 	bl	80083e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007852:	e009      	b.n	8007868 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fcf7 	bl	800824a <USBD_CtlError>
          break;
 800785c:	e004      	b.n	8007868 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fcf2 	bl	800824a <USBD_CtlError>
          break;
 8007866:	e000      	b.n	800786a <USBD_StdItfReq+0xc2>
          break;
 8007868:	bf00      	nop
      }
      break;
 800786a:	e004      	b.n	8007876 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fceb 	bl	800824a <USBD_CtlError>
      break;
 8007874:	bf00      	nop
  }

  return ret;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	889b      	ldrh	r3, [r3, #4]
 8007892:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d007      	beq.n	80078b0 <USBD_StdEPReq+0x30>
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	f200 817f 	bhi.w	8007ba4 <USBD_StdEPReq+0x324>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02a      	beq.n	8007900 <USBD_StdEPReq+0x80>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	f040 817a 	bne.w	8007ba4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fe83 	bl	80075c0 <USBD_CoreFindEP>
 80078ba:	4603      	mov	r3, r0
 80078bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078be:	7b7b      	ldrb	r3, [r7, #13]
 80078c0:	2bff      	cmp	r3, #255	; 0xff
 80078c2:	f000 8174 	beq.w	8007bae <USBD_StdEPReq+0x32e>
 80078c6:	7b7b      	ldrb	r3, [r7, #13]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 8170 	bne.w	8007bae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078ce:	7b7a      	ldrb	r2, [r7, #13]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078d6:	7b7a      	ldrb	r2, [r7, #13]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	32ae      	adds	r2, #174	; 0xae
 80078dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8163 	beq.w	8007bae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078e8:	7b7a      	ldrb	r2, [r7, #13]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	32ae      	adds	r2, #174	; 0xae
 80078ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078fe:	e156      	b.n	8007bae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d008      	beq.n	800791a <USBD_StdEPReq+0x9a>
 8007908:	2b03      	cmp	r3, #3
 800790a:	f300 8145 	bgt.w	8007b98 <USBD_StdEPReq+0x318>
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 809b 	beq.w	8007a4a <USBD_StdEPReq+0x1ca>
 8007914:	2b01      	cmp	r3, #1
 8007916:	d03c      	beq.n	8007992 <USBD_StdEPReq+0x112>
 8007918:	e13e      	b.n	8007b98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d002      	beq.n	800792c <USBD_StdEPReq+0xac>
 8007926:	2b03      	cmp	r3, #3
 8007928:	d016      	beq.n	8007958 <USBD_StdEPReq+0xd8>
 800792a:	e02c      	b.n	8007986 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00d      	beq.n	800794e <USBD_StdEPReq+0xce>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d00a      	beq.n	800794e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 f93d 	bl	8008bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007942:	2180      	movs	r1, #128	; 0x80
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f939 	bl	8008bbc <USBD_LL_StallEP>
 800794a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800794c:	e020      	b.n	8007990 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc7a 	bl	800824a <USBD_CtlError>
              break;
 8007956:	e01b      	b.n	8007990 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	885b      	ldrh	r3, [r3, #2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10e      	bne.n	800797e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00b      	beq.n	800797e <USBD_StdEPReq+0xfe>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d008      	beq.n	800797e <USBD_StdEPReq+0xfe>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f91f 	bl	8008bbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fd2e 	bl	80083e0 <USBD_CtlSendStatus>

              break;
 8007984:	e004      	b.n	8007990 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc5e 	bl	800824a <USBD_CtlError>
              break;
 800798e:	bf00      	nop
          }
          break;
 8007990:	e107      	b.n	8007ba2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d002      	beq.n	80079a4 <USBD_StdEPReq+0x124>
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d016      	beq.n	80079d0 <USBD_StdEPReq+0x150>
 80079a2:	e04b      	b.n	8007a3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00d      	beq.n	80079c6 <USBD_StdEPReq+0x146>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d00a      	beq.n	80079c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f901 	bl	8008bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f8fd 	bl	8008bbc <USBD_LL_StallEP>
 80079c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c4:	e040      	b.n	8007a48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fc3e 	bl	800824a <USBD_CtlError>
              break;
 80079ce:	e03b      	b.n	8007a48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d136      	bne.n	8007a46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 f907 	bl	8008bfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fcf7 	bl	80083e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff fde2 	bl	80075c0 <USBD_CoreFindEP>
 80079fc:	4603      	mov	r3, r0
 80079fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a00:	7b7b      	ldrb	r3, [r7, #13]
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	d01f      	beq.n	8007a46 <USBD_StdEPReq+0x1c6>
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d11c      	bne.n	8007a46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a0c:	7b7a      	ldrb	r2, [r7, #13]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a14:	7b7a      	ldrb	r2, [r7, #13]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	32ae      	adds	r2, #174	; 0xae
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d010      	beq.n	8007a46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a24:	7b7a      	ldrb	r2, [r7, #13]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	32ae      	adds	r2, #174	; 0xae
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a3a:	e004      	b.n	8007a46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fc03 	bl	800824a <USBD_CtlError>
              break;
 8007a44:	e000      	b.n	8007a48 <USBD_StdEPReq+0x1c8>
              break;
 8007a46:	bf00      	nop
          }
          break;
 8007a48:	e0ab      	b.n	8007ba2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d002      	beq.n	8007a5c <USBD_StdEPReq+0x1dc>
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d032      	beq.n	8007ac0 <USBD_StdEPReq+0x240>
 8007a5a:	e097      	b.n	8007b8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d007      	beq.n	8007a72 <USBD_StdEPReq+0x1f2>
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d004      	beq.n	8007a72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fbed 	bl	800824a <USBD_CtlError>
                break;
 8007a70:	e091      	b.n	8007b96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da0b      	bge.n	8007a92 <USBD_StdEPReq+0x212>
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	3310      	adds	r3, #16
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3304      	adds	r3, #4
 8007a90:	e00b      	b.n	8007aaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc37 	bl	800832c <USBD_CtlSendData>
              break;
 8007abe:	e06a      	b.n	8007b96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da11      	bge.n	8007aec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	f003 020f 	and.w	r2, r3, #15
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	440b      	add	r3, r1
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d117      	bne.n	8007b12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fbb0 	bl	800824a <USBD_CtlError>
                  break;
 8007aea:	e054      	b.n	8007b96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	f003 020f 	and.w	r2, r3, #15
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb9d 	bl	800824a <USBD_CtlError>
                  break;
 8007b10:	e041      	b.n	8007b96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da0b      	bge.n	8007b32 <USBD_StdEPReq+0x2b2>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	3310      	adds	r3, #16
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3304      	adds	r3, #4
 8007b30:	e00b      	b.n	8007b4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	3304      	adds	r3, #4
 8007b4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <USBD_StdEPReq+0x2d8>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d103      	bne.n	8007b60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e00e      	b.n	8007b7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f867 	bl	8008c38 <USBD_LL_IsStallEP>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2202      	movs	r2, #2
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fbd1 	bl	800832c <USBD_CtlSendData>
              break;
 8007b8a:	e004      	b.n	8007b96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fb5b 	bl	800824a <USBD_CtlError>
              break;
 8007b94:	bf00      	nop
          }
          break;
 8007b96:	e004      	b.n	8007ba2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fb55 	bl	800824a <USBD_CtlError>
          break;
 8007ba0:	bf00      	nop
      }
      break;
 8007ba2:	e005      	b.n	8007bb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fb4f 	bl	800824a <USBD_CtlError>
      break;
 8007bac:	e000      	b.n	8007bb0 <USBD_StdEPReq+0x330>
      break;
 8007bae:	bf00      	nop
  }

  return ret;
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	885b      	ldrh	r3, [r3, #2]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	2b06      	cmp	r3, #6
 8007bde:	f200 8128 	bhi.w	8007e32 <USBD_GetDescriptor+0x276>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <USBD_GetDescriptor+0x2c>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c5d 	.word	0x08007c5d
 8007bf4:	08007e33 	.word	0x08007e33
 8007bf8:	08007e33 	.word	0x08007e33
 8007bfc:	08007dd3 	.word	0x08007dd3
 8007c00:	08007dff 	.word	0x08007dff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
      break;
 8007c1a:	e112      	b.n	8007e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7c1b      	ldrb	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10d      	bne.n	8007c40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	f107 0208 	add.w	r2, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c3e:	e100      	b.n	8007e42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	f107 0208 	add.w	r2, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3301      	adds	r3, #1
 8007c56:	2202      	movs	r2, #2
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e0f2      	b.n	8007e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	f200 80ac 	bhi.w	8007dc0 <USBD_GetDescriptor+0x204>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <USBD_GetDescriptor+0xb4>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007cbd 	.word	0x08007cbd
 8007c78:	08007cf1 	.word	0x08007cf1
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d59 	.word	0x08007d59
 8007c84:	08007d8d 	.word	0x08007d8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007caa:	e091      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 facb 	bl	800824a <USBD_CtlError>
            err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cba:	e089      	b.n	8007dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e077      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fab1 	bl	800824a <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e06f      	b.n	8007dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e05d      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa97 	bl	800824a <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e055      	b.n	8007dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d46:	e043      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa7d 	bl	800824a <USBD_CtlError>
            err++;
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	3301      	adds	r3, #1
 8007d54:	72fb      	strb	r3, [r7, #11]
          break;
 8007d56:	e03b      	b.n	8007dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7a:	e029      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa63 	bl	800824a <USBD_CtlError>
            err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8a:	e021      	b.n	8007dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dae:	e00f      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa49 	bl	800824a <USBD_CtlError>
            err++;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dbe:	e007      	b.n	8007dd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa41 	bl	800824a <USBD_CtlError>
          err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dce:	bf00      	nop
      }
      break;
 8007dd0:	e037      	b.n	8007e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7c1b      	ldrb	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	f107 0208 	add.w	r2, r7, #8
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
 8007dea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dec:	e029      	b.n	8007e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa2a 	bl	800824a <USBD_CtlError>
        err++;
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007dfc:	e021      	b.n	8007e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7c1b      	ldrb	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10d      	bne.n	8007e22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0e:	f107 0208 	add.w	r2, r7, #8
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3
 8007e16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e20:	e00f      	b.n	8007e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa10 	bl	800824a <USBD_CtlError>
        err++;
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e30:	e007      	b.n	8007e42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa08 	bl	800824a <USBD_CtlError>
      err++;
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e40:	bf00      	nop
  }

  if (err != 0U)
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11e      	bne.n	8007e86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	88db      	ldrh	r3, [r3, #6]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d016      	beq.n	8007e7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e50:	893b      	ldrh	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00e      	beq.n	8007e74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88da      	ldrh	r2, [r3, #6]
 8007e5a:	893b      	ldrh	r3, [r7, #8]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	bf28      	it	cs
 8007e60:	4613      	movcs	r3, r2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e66:	893b      	ldrh	r3, [r7, #8]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68f9      	ldr	r1, [r7, #12]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa5d 	bl	800832c <USBD_CtlSendData>
 8007e72:	e009      	b.n	8007e88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9e7 	bl	800824a <USBD_CtlError>
 8007e7c:	e004      	b.n	8007e88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 faae 	bl	80083e0 <USBD_CtlSendStatus>
 8007e84:	e000      	b.n	8007e88 <USBD_GetDescriptor+0x2cc>
    return;
 8007e86:	bf00      	nop
  }
}
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	889b      	ldrh	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d131      	bne.n	8007f06 <USBD_SetAddress+0x76>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d12d      	bne.n	8007f06 <USBD_SetAddress+0x76>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb0:	d829      	bhi.n	8007f06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d104      	bne.n	8007ed4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f9bc 	bl	800824a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	e01d      	b.n	8007f10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7bfa      	ldrb	r2, [r7, #15]
 8007ed8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fed5 	bl	8008c90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa7a 	bl	80083e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	e009      	b.n	8007f10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f04:	e004      	b.n	8007f10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f99e 	bl	800824a <USBD_CtlError>
  }
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	885b      	ldrh	r3, [r3, #2]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	4b4e      	ldr	r3, [pc, #312]	; (8008068 <USBD_SetConfig+0x150>)
 8007f2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f30:	4b4d      	ldr	r3, [pc, #308]	; (8008068 <USBD_SetConfig+0x150>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d905      	bls.n	8007f44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f985 	bl	800824a <USBD_CtlError>
    return USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e08c      	b.n	800805e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d002      	beq.n	8007f56 <USBD_SetConfig+0x3e>
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d029      	beq.n	8007fa8 <USBD_SetConfig+0x90>
 8007f54:	e075      	b.n	8008042 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f56:	4b44      	ldr	r3, [pc, #272]	; (8008068 <USBD_SetConfig+0x150>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d020      	beq.n	8007fa0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f5e:	4b42      	ldr	r3, [pc, #264]	; (8008068 <USBD_SetConfig+0x150>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f68:	4b3f      	ldr	r3, [pc, #252]	; (8008068 <USBD_SetConfig+0x150>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fe ffe7 	bl	8006f42 <USBD_SetClassConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f962 	bl	800824a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f8e:	e065      	b.n	800805c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa25 	bl	80083e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f9e:	e05d      	b.n	800805c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa1d 	bl	80083e0 <USBD_CtlSendStatus>
      break;
 8007fa6:	e059      	b.n	800805c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fa8:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <USBD_SetConfig+0x150>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d112      	bne.n	8007fd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fb8:	4b2b      	ldr	r3, [pc, #172]	; (8008068 <USBD_SetConfig+0x150>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fc2:	4b29      	ldr	r3, [pc, #164]	; (8008068 <USBD_SetConfig+0x150>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fe ffd6 	bl	8006f7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa06 	bl	80083e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fd4:	e042      	b.n	800805c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <USBD_SetConfig+0x150>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d02a      	beq.n	800803a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7fe ffc4 	bl	8006f7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ff2:	4b1d      	ldr	r3, [pc, #116]	; (8008068 <USBD_SetConfig+0x150>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <USBD_SetConfig+0x150>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fe ff9d 	bl	8006f42 <USBD_SetClassConfig>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f918 	bl	800824a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fe ffa9 	bl	8006f7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008030:	e014      	b.n	800805c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9d4 	bl	80083e0 <USBD_CtlSendStatus>
      break;
 8008038:	e010      	b.n	800805c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9d0 	bl	80083e0 <USBD_CtlSendStatus>
      break;
 8008040:	e00c      	b.n	800805c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f900 	bl	800824a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <USBD_SetConfig+0x150>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fe ff92 	bl	8006f7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
      break;
 800805a:	bf00      	nop
  }

  return ret;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	200003d8 	.word	0x200003d8

0800806c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	88db      	ldrh	r3, [r3, #6]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d004      	beq.n	8008088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8e2 	bl	800824a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008086:	e023      	b.n	80080d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	dc02      	bgt.n	800809a <USBD_GetConfig+0x2e>
 8008094:	2b00      	cmp	r3, #0
 8008096:	dc03      	bgt.n	80080a0 <USBD_GetConfig+0x34>
 8008098:	e015      	b.n	80080c6 <USBD_GetConfig+0x5a>
 800809a:	2b03      	cmp	r3, #3
 800809c:	d00b      	beq.n	80080b6 <USBD_GetConfig+0x4a>
 800809e:	e012      	b.n	80080c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3308      	adds	r3, #8
 80080aa:	2201      	movs	r2, #1
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f93c 	bl	800832c <USBD_CtlSendData>
        break;
 80080b4:	e00c      	b.n	80080d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3304      	adds	r3, #4
 80080ba:	2201      	movs	r2, #1
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f934 	bl	800832c <USBD_CtlSendData>
        break;
 80080c4:	e004      	b.n	80080d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8be 	bl	800824a <USBD_CtlError>
        break;
 80080ce:	bf00      	nop
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d81e      	bhi.n	800812e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	88db      	ldrh	r3, [r3, #6]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d004      	beq.n	8008102 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8a5 	bl	800824a <USBD_CtlError>
        break;
 8008100:	e01a      	b.n	8008138 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d005      	beq.n	800811e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f043 0202 	orr.w	r2, r3, #2
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	330c      	adds	r3, #12
 8008122:	2202      	movs	r2, #2
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f900 	bl	800832c <USBD_CtlSendData>
      break;
 800812c:	e004      	b.n	8008138 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f88a 	bl	800824a <USBD_CtlError>
      break;
 8008136:	bf00      	nop
  }
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d107      	bne.n	8008162 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f940 	bl	80083e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008160:	e013      	b.n	800818a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	885b      	ldrh	r3, [r3, #2]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d10b      	bne.n	8008182 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	889b      	ldrh	r3, [r3, #4]
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	b29b      	uxth	r3, r3
 8008172:	b2da      	uxtb	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f930 	bl	80083e0 <USBD_CtlSendStatus>
}
 8008180:	e003      	b.n	800818a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f860 	bl	800824a <USBD_CtlError>
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d80b      	bhi.n	80081c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	885b      	ldrh	r3, [r3, #2]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d10c      	bne.n	80081cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f910 	bl	80083e0 <USBD_CtlSendStatus>
      }
      break;
 80081c0:	e004      	b.n	80081cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f840 	bl	800824a <USBD_CtlError>
      break;
 80081ca:	e000      	b.n	80081ce <USBD_ClrFeature+0x3c>
      break;
 80081cc:	bf00      	nop
  }
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781a      	ldrb	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fa41 	bl	8007688 <SWAPBYTE>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3301      	adds	r3, #1
 8008212:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fa34 	bl	8007688 <SWAPBYTE>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fa27 	bl	8007688 <SWAPBYTE>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	80da      	strh	r2, [r3, #6]
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008254:	2180      	movs	r1, #128	; 0x80
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fcb0 	bl	8008bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800825c:	2100      	movs	r1, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fcac 	bl	8008bbc <USBD_LL_StallEP>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d036      	beq.n	80082f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008286:	6938      	ldr	r0, [r7, #16]
 8008288:	f000 f836 	bl	80082f8 <USBD_GetLen>
 800828c:	4603      	mov	r3, r0
 800828e:	3301      	adds	r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	3301      	adds	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	2203      	movs	r2, #3
 80082b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	3301      	adds	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082bc:	e013      	b.n	80082e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4413      	add	r3, r2
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
    idx++;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	3301      	adds	r3, #1
 80082d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4413      	add	r3, r2
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
    idx++;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	3301      	adds	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e7      	bne.n	80082be <USBD_GetString+0x52>
 80082ee:	e000      	b.n	80082f2 <USBD_GetString+0x86>
    return;
 80082f0:	bf00      	nop
  }
}
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008308:	e005      	b.n	8008316 <USBD_GetLen+0x1e>
  {
    len++;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3301      	adds	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3301      	adds	r3, #1
 8008314:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f5      	bne.n	800830a <USBD_GetLen+0x12>
  }

  return len;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2202      	movs	r2, #2
 800833c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	2100      	movs	r1, #0
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fcbb 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	2100      	movs	r1, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fcaa 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2203      	movs	r2, #3
 8008394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	2100      	movs	r1, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fcae 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	2100      	movs	r1, #0
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fc9d 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2204      	movs	r2, #4
 80083ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f0:	2300      	movs	r3, #0
 80083f2:	2200      	movs	r2, #0
 80083f4:	2100      	movs	r1, #0
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc69 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2205      	movs	r2, #5
 8008412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008416:	2300      	movs	r3, #0
 8008418:	2200      	movs	r2, #0
 800841a:	2100      	movs	r1, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc77 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008430:	2200      	movs	r2, #0
 8008432:	4912      	ldr	r1, [pc, #72]	; (800847c <MX_USB_DEVICE_Init+0x50>)
 8008434:	4812      	ldr	r0, [pc, #72]	; (8008480 <MX_USB_DEVICE_Init+0x54>)
 8008436:	f7fe fd07 	bl	8006e48 <USBD_Init>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008440:	f7f8 fc40 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008444:	490f      	ldr	r1, [pc, #60]	; (8008484 <MX_USB_DEVICE_Init+0x58>)
 8008446:	480e      	ldr	r0, [pc, #56]	; (8008480 <MX_USB_DEVICE_Init+0x54>)
 8008448:	f7fe fd2e 	bl	8006ea8 <USBD_RegisterClass>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008452:	f7f8 fc37 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008456:	490c      	ldr	r1, [pc, #48]	; (8008488 <MX_USB_DEVICE_Init+0x5c>)
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <MX_USB_DEVICE_Init+0x54>)
 800845a:	f7fe fc65 	bl	8006d28 <USBD_CDC_RegisterInterface>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008464:	f7f8 fc2e 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <MX_USB_DEVICE_Init+0x54>)
 800846a:	f7fe fd53 	bl	8006f14 <USBD_Start>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008474:	f7f8 fc26 	bl	8000cc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008478:	bf00      	nop
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200000ac 	.word	0x200000ac
 8008480:	200003dc 	.word	0x200003dc
 8008484:	20000018 	.word	0x20000018
 8008488:	20000098 	.word	0x20000098

0800848c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008490:	2200      	movs	r2, #0
 8008492:	4905      	ldr	r1, [pc, #20]	; (80084a8 <CDC_Init_FS+0x1c>)
 8008494:	4805      	ldr	r0, [pc, #20]	; (80084ac <CDC_Init_FS+0x20>)
 8008496:	f7fe fc61 	bl	8006d5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800849a:	4905      	ldr	r1, [pc, #20]	; (80084b0 <CDC_Init_FS+0x24>)
 800849c:	4803      	ldr	r0, [pc, #12]	; (80084ac <CDC_Init_FS+0x20>)
 800849e:	f7fe fc7f 	bl	8006da0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000eb8 	.word	0x20000eb8
 80084ac:	200003dc 	.word	0x200003dc
 80084b0:	200006b8 	.word	0x200006b8

080084b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
 80084d0:	4613      	mov	r3, r2
 80084d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	2b23      	cmp	r3, #35	; 0x23
 80084d8:	d84a      	bhi.n	8008570 <CDC_Control_FS+0xac>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <CDC_Control_FS+0x1c>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008571 	.word	0x08008571
 80084e4:	08008571 	.word	0x08008571
 80084e8:	08008571 	.word	0x08008571
 80084ec:	08008571 	.word	0x08008571
 80084f0:	08008571 	.word	0x08008571
 80084f4:	08008571 	.word	0x08008571
 80084f8:	08008571 	.word	0x08008571
 80084fc:	08008571 	.word	0x08008571
 8008500:	08008571 	.word	0x08008571
 8008504:	08008571 	.word	0x08008571
 8008508:	08008571 	.word	0x08008571
 800850c:	08008571 	.word	0x08008571
 8008510:	08008571 	.word	0x08008571
 8008514:	08008571 	.word	0x08008571
 8008518:	08008571 	.word	0x08008571
 800851c:	08008571 	.word	0x08008571
 8008520:	08008571 	.word	0x08008571
 8008524:	08008571 	.word	0x08008571
 8008528:	08008571 	.word	0x08008571
 800852c:	08008571 	.word	0x08008571
 8008530:	08008571 	.word	0x08008571
 8008534:	08008571 	.word	0x08008571
 8008538:	08008571 	.word	0x08008571
 800853c:	08008571 	.word	0x08008571
 8008540:	08008571 	.word	0x08008571
 8008544:	08008571 	.word	0x08008571
 8008548:	08008571 	.word	0x08008571
 800854c:	08008571 	.word	0x08008571
 8008550:	08008571 	.word	0x08008571
 8008554:	08008571 	.word	0x08008571
 8008558:	08008571 	.word	0x08008571
 800855c:	08008571 	.word	0x08008571
 8008560:	08008571 	.word	0x08008571
 8008564:	08008571 	.word	0x08008571
 8008568:	08008571 	.word	0x08008571
 800856c:	08008571 	.word	0x08008571
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008570:	bf00      	nop
  }

  return (USBD_OK);
 8008572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <CDC_Receive_FS+0x24>)
 800858e:	f7fe fc07 	bl	8006da0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008592:	4804      	ldr	r0, [pc, #16]	; (80085a4 <CDC_Receive_FS+0x24>)
 8008594:	f7fe fc22 	bl	8006ddc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200003dc 	.word	0x200003dc

080085a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2212      	movs	r2, #18
 80085dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085de:	4b03      	ldr	r3, [pc, #12]	; (80085ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	200000c8 	.word	0x200000c8

080085f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2204      	movs	r2, #4
 8008600:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008602:	4b03      	ldr	r3, [pc, #12]	; (8008610 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	200000dc 	.word	0x200000dc

08008614 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	4603      	mov	r3, r0
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d105      	bne.n	8008632 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4907      	ldr	r1, [pc, #28]	; (8008648 <USBD_FS_ProductStrDescriptor+0x34>)
 800862a:	4808      	ldr	r0, [pc, #32]	; (800864c <USBD_FS_ProductStrDescriptor+0x38>)
 800862c:	f7ff fe1e 	bl	800826c <USBD_GetString>
 8008630:	e004      	b.n	800863c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4904      	ldr	r1, [pc, #16]	; (8008648 <USBD_FS_ProductStrDescriptor+0x34>)
 8008636:	4805      	ldr	r0, [pc, #20]	; (800864c <USBD_FS_ProductStrDescriptor+0x38>)
 8008638:	f7ff fe18 	bl	800826c <USBD_GetString>
  }
  return USBD_StrDesc;
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	200016b8 	.word	0x200016b8
 800864c:	08008e70 	.word	0x08008e70

08008650 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	4904      	ldr	r1, [pc, #16]	; (8008670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008660:	4804      	ldr	r0, [pc, #16]	; (8008674 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008662:	f7ff fe03 	bl	800826c <USBD_GetString>
  return USBD_StrDesc;
 8008666:	4b02      	ldr	r3, [pc, #8]	; (8008670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	200016b8 	.word	0x200016b8
 8008674:	08008e88 	.word	0x08008e88

08008678 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	221a      	movs	r2, #26
 8008688:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800868a:	f000 f843 	bl	8008714 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800868e:	4b02      	ldr	r3, [pc, #8]	; (8008698 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	200000e0 	.word	0x200000e0

0800869c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	4907      	ldr	r1, [pc, #28]	; (80086d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086b2:	4808      	ldr	r0, [pc, #32]	; (80086d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b4:	f7ff fdda 	bl	800826c <USBD_GetString>
 80086b8:	e004      	b.n	80086c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4904      	ldr	r1, [pc, #16]	; (80086d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086be:	4805      	ldr	r0, [pc, #20]	; (80086d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086c0:	f7ff fdd4 	bl	800826c <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200016b8 	.word	0x200016b8
 80086d4:	08008e9c 	.word	0x08008e9c

080086d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4907      	ldr	r1, [pc, #28]	; (800870c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ee:	4808      	ldr	r0, [pc, #32]	; (8008710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086f0:	f7ff fdbc 	bl	800826c <USBD_GetString>
 80086f4:	e004      	b.n	8008700 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4904      	ldr	r1, [pc, #16]	; (800870c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086fa:	4805      	ldr	r0, [pc, #20]	; (8008710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086fc:	f7ff fdb6 	bl	800826c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	200016b8 	.word	0x200016b8
 8008710:	08008ea8 	.word	0x08008ea8

08008714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <Get_SerialNum+0x44>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <Get_SerialNum+0x48>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008726:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <Get_SerialNum+0x4c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800873a:	2208      	movs	r2, #8
 800873c:	4909      	ldr	r1, [pc, #36]	; (8008764 <Get_SerialNum+0x50>)
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 f814 	bl	800876c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008744:	2204      	movs	r2, #4
 8008746:	4908      	ldr	r1, [pc, #32]	; (8008768 <Get_SerialNum+0x54>)
 8008748:	68b8      	ldr	r0, [r7, #8]
 800874a:	f000 f80f 	bl	800876c <IntToUnicode>
  }
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	1fff7a10 	.word	0x1fff7a10
 800875c:	1fff7a14 	.word	0x1fff7a14
 8008760:	1fff7a18 	.word	0x1fff7a18
 8008764:	200000e2 	.word	0x200000e2
 8008768:	200000f2 	.word	0x200000f2

0800876c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]
 8008782:	e027      	b.n	80087d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	0f1b      	lsrs	r3, r3, #28
 8008788:	2b09      	cmp	r3, #9
 800878a:	d80b      	bhi.n	80087a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	0f1b      	lsrs	r3, r3, #28
 8008790:	b2da      	uxtb	r2, r3
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	4619      	mov	r1, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	440b      	add	r3, r1
 800879c:	3230      	adds	r2, #48	; 0x30
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	e00a      	b.n	80087ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0f1b      	lsrs	r3, r3, #28
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4619      	mov	r1, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	440b      	add	r3, r1
 80087b4:	3237      	adds	r2, #55	; 0x37
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	3301      	adds	r3, #1
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	4413      	add	r3, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	3301      	adds	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
 80087d4:	7dfa      	ldrb	r2, [r7, #23]
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d3d3      	bcc.n	8008784 <IntToUnicode+0x18>
  }
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	605a      	str	r2, [r3, #4]
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800880c:	d13a      	bne.n	8008884 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	4b1e      	ldr	r3, [pc, #120]	; (800888c <HAL_PCD_MspInit+0xa0>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_PCD_MspInit+0xa0>)
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	6313      	str	r3, [r2, #48]	; 0x30
 800881e:	4b1b      	ldr	r3, [pc, #108]	; (800888c <HAL_PCD_MspInit+0xa0>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	613b      	str	r3, [r7, #16]
 8008828:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800882a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800882e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008830:	2302      	movs	r3, #2
 8008832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008838:	2303      	movs	r3, #3
 800883a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800883c:	230a      	movs	r3, #10
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008840:	f107 0314 	add.w	r3, r7, #20
 8008844:	4619      	mov	r1, r3
 8008846:	4812      	ldr	r0, [pc, #72]	; (8008890 <HAL_PCD_MspInit+0xa4>)
 8008848:	f7f9 f9b4 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800884c:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_PCD_MspInit+0xa0>)
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	4a0e      	ldr	r2, [pc, #56]	; (800888c <HAL_PCD_MspInit+0xa0>)
 8008852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008856:	6353      	str	r3, [r2, #52]	; 0x34
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	4b0b      	ldr	r3, [pc, #44]	; (800888c <HAL_PCD_MspInit+0xa0>)
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <HAL_PCD_MspInit+0xa0>)
 8008862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008866:	6453      	str	r3, [r2, #68]	; 0x44
 8008868:	4b08      	ldr	r3, [pc, #32]	; (800888c <HAL_PCD_MspInit+0xa0>)
 800886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	2043      	movs	r0, #67	; 0x43
 800887a:	f7f9 f964 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800887e:	2043      	movs	r0, #67	; 0x43
 8008880:	f7f9 f97d 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008884:	bf00      	nop
 8008886:	3728      	adds	r7, #40	; 0x28
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40023800 	.word	0x40023800
 8008890:	40020000 	.word	0x40020000

08008894 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe fb7f 	bl	8006fae <USBD_LL_SetupStage>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	4619      	mov	r1, r3
 80088e2:	f7fe fbb9 	bl	8007058 <USBD_LL_DataOutStage>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008900:	78fa      	ldrb	r2, [r7, #3]
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	334c      	adds	r3, #76	; 0x4c
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	4619      	mov	r1, r3
 8008916:	f7fe fc52 	bl	80071be <USBD_LL_DataInStage>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fd86 	bl	8007442 <USBD_LL_SOF>
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d001      	beq.n	8008956 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008952:	f7f8 f9b7 	bl	8000cc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800895c:	7bfa      	ldrb	r2, [r7, #15]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fd30 	bl	80073c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fcd8 	bl	8007322 <USBD_LL_Reset>
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fd2b 	bl	80073e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <HAL_PCD_SuspendCallback+0x48>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4a03      	ldr	r2, [pc, #12]	; (80089c4 <HAL_PCD_SuspendCallback+0x48>)
 80089b6:	f043 0306 	orr.w	r3, r3, #6
 80089ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fd1b 	bl	8007412 <USBD_LL_Resume>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fd73 	bl	80074e6 <USBD_LL_IsoOUTIncomplete>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fd2f 	bl	8007482 <USBD_LL_IsoINIncomplete>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fd85 	bl	800754a <USBD_LL_DevConnected>
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fd82 	bl	8007560 <USBD_LL_DevDisconnected>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d13c      	bne.n	8008aee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a74:	4a20      	ldr	r2, [pc, #128]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a1e      	ldr	r2, [pc, #120]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a84:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a8e:	2204      	movs	r2, #4
 8008a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a92:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a94:	2202      	movs	r2, #2
 8008a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a98:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <USBD_LL_Init+0x94>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a9e:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <USBD_LL_Init+0x94>)
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008aa4:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <USBD_LL_Init+0x94>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008aaa:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <USBD_LL_Init+0x94>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ab0:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <USBD_LL_Init+0x94>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ab6:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <USBD_LL_Init+0x94>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008abc:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <USBD_LL_Init+0x94>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ac2:	480d      	ldr	r0, [pc, #52]	; (8008af8 <USBD_LL_Init+0x94>)
 8008ac4:	f7f9 fb58 	bl	8002178 <HAL_PCD_Init>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ace:	f7f8 f8f9 	bl	8000cc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ad2:	2180      	movs	r1, #128	; 0x80
 8008ad4:	4808      	ldr	r0, [pc, #32]	; (8008af8 <USBD_LL_Init+0x94>)
 8008ad6:	f7fa fdb0 	bl	800363a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ada:	2240      	movs	r2, #64	; 0x40
 8008adc:	2100      	movs	r1, #0
 8008ade:	4806      	ldr	r0, [pc, #24]	; (8008af8 <USBD_LL_Init+0x94>)
 8008ae0:	f7fa fd64 	bl	80035ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ae4:	2280      	movs	r2, #128	; 0x80
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	4803      	ldr	r0, [pc, #12]	; (8008af8 <USBD_LL_Init+0x94>)
 8008aea:	f7fa fd5f 	bl	80035ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200018b8 	.word	0x200018b8

08008afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f9 fc4d 	bl	80023b2 <HAL_PCD_Start>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f942 	bl	8008da8 <USBD_Get_USB_Status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70bb      	strb	r3, [r7, #2]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b5a:	78bb      	ldrb	r3, [r7, #2]
 8008b5c:	883a      	ldrh	r2, [r7, #0]
 8008b5e:	78f9      	ldrb	r1, [r7, #3]
 8008b60:	f7fa f91e 	bl	8002da0 <HAL_PCD_EP_Open>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f91c 	bl	8008da8 <USBD_Get_USB_Status>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fa f967 	bl	8002e70 <HAL_PCD_EP_Close>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f8fd 	bl	8008da8 <USBD_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fa fa3f 	bl	800305e <HAL_PCD_EP_SetStall>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f8de 	bl	8008da8 <USBD_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fa fa84 	bl	8003126 <HAL_PCD_EP_ClrStall>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f8bf 	bl	8008da8 <USBD_Get_USB_Status>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da0b      	bge.n	8008c6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	440b      	add	r3, r1
 8008c66:	333e      	adds	r3, #62	; 0x3e
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	e00b      	b.n	8008c84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008c82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fa f851 	bl	8002d56 <HAL_PCD_SetAddress>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f874 	bl	8008da8 <USBD_Get_USB_Status>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cec:	7af9      	ldrb	r1, [r7, #11]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	f7fa f96a 	bl	8002fca <HAL_PCD_EP_Transmit>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f853 	bl	8008da8 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d2e:	7af9      	ldrb	r1, [r7, #11]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	f7fa f8e6 	bl	8002f04 <HAL_PCD_EP_Receive>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f832 	bl	8008da8 <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d48:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fa f916 	bl	8002f9a <HAL_PCD_EP_GetRxCount>
 8008d6e:	4603      	mov	r3, r0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d80:	4b03      	ldr	r3, [pc, #12]	; (8008d90 <USBD_static_malloc+0x18>)
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20001dc4 	.word	0x20001dc4

08008d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d817      	bhi.n	8008dec <USBD_Get_USB_Status+0x44>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <USBD_Get_USB_Status+0x1c>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008ddb 	.word	0x08008ddb
 8008dcc:	08008de1 	.word	0x08008de1
 8008dd0:	08008de7 	.word	0x08008de7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd8:	e00b      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dde:	e008      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	e005      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dea:	e002      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	73fb      	strb	r3, [r7, #15]
    break;
 8008df0:	bf00      	nop
  }
  return usb_status;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <__libc_init_array>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	4d0d      	ldr	r5, [pc, #52]	; (8008e38 <__libc_init_array+0x38>)
 8008e04:	4c0d      	ldr	r4, [pc, #52]	; (8008e3c <__libc_init_array+0x3c>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	d109      	bne.n	8008e24 <__libc_init_array+0x24>
 8008e10:	4d0b      	ldr	r5, [pc, #44]	; (8008e40 <__libc_init_array+0x40>)
 8008e12:	4c0c      	ldr	r4, [pc, #48]	; (8008e44 <__libc_init_array+0x44>)
 8008e14:	f000 f820 	bl	8008e58 <_init>
 8008e18:	1b64      	subs	r4, r4, r5
 8008e1a:	10a4      	asrs	r4, r4, #2
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	d105      	bne.n	8008e2e <__libc_init_array+0x2e>
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e28:	4798      	blx	r3
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7ee      	b.n	8008e0c <__libc_init_array+0xc>
 8008e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e32:	4798      	blx	r3
 8008e34:	3601      	adds	r6, #1
 8008e36:	e7f2      	b.n	8008e1e <__libc_init_array+0x1e>
 8008e38:	08008ed8 	.word	0x08008ed8
 8008e3c:	08008ed8 	.word	0x08008ed8
 8008e40:	08008ed8 	.word	0x08008ed8
 8008e44:	08008edc 	.word	0x08008edc

08008e48 <memset>:
 8008e48:	4402      	add	r2, r0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d100      	bne.n	8008e52 <memset+0xa>
 8008e50:	4770      	bx	lr
 8008e52:	f803 1b01 	strb.w	r1, [r3], #1
 8008e56:	e7f9      	b.n	8008e4c <memset+0x4>

08008e58 <_init>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr

08008e64 <_fini>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr
